<<manpage {mars(1) mars_link(1)} "Mars Linker">>

<<section SYNOPSIS>>

<<itemlist>>

<<section DESCRIPTION>>

mars_link(1) is a CM tool that links a client project with a
particular version of Mars.<p>

<<subsection "Terminology">>

When a Subversion code base is checked out into the user's file
system, the checked-out code base is called a <i>working copy</i>.<p>

A client project is said to be <i>permanently linked</i> with Mars if
checking out the client project's code base will also check out an
embedded copy of Mars.<p>

<ul>
  <li> Mars is <i>locally</i> linked if a version of Mars has been
       copied into the client project's code base using <code>svn
       copy</code>.<p>

  <li> Mars is <i>externally</i> linked if the Subversion
       <code>svn:externals</code> property is set on a directory in
       the client project's code base such that an embedded Mars
       working copy is checked out within the client's working copy.<p>
</ul>

A client project's working copy is said to be <i>temporarily
linked</i> with a particular version of Mars if it contains an
embedded Mars working copy of that particular version.<p>

mars_link(1) is a tool for temporarily and permanently linking
client project branches, tags, and trunks with particular versions
of Mars.<p>

<<subsection "Linking the Trunk">>

To link the Mars trunk into a client's trunk, do the following.  Note
that this generally only needs to be done once.<p>

<<procedure>>

<<step>>
Check out the client's trunk.
<</step/>>
<pre>
$ svn checkout <i>repository</i>/client/trunk ~/client
</pre>
<</step>>

<<step>>
If Mars is already checked out somewhere, such that mars_link(1) is
accessible, use it to permanently link the client's trunk with Mars.
<</step/>>
<pre>
$ cd ~/client
$ mars link trunk
$ mars link save
</pre>
<</step>>

<<step>>
If Mars is inaccessible, check it out explicitly, and then use
mars_link(1) to make the link permanent.
<</step/>>
<pre>
$ cd ~/client
$ svn checkout <i>repository</i>/mars/trunk mars
$ ./mars/bin/mars link save
</pre>
<</step>>

<</procedure>>

<<subsection "Linking a Version">>

To link a particular version of the client with a particular version
of Mars, version 1.3, say, do the following:<p>

<<procedure>>

<<step>>
Check out the tagged version of the client.
<</step/>>
<pre>
$ svn checkout <i>repository</i>/client/tags/client_1.2.3 \
  ~/client_1.2.3
</pre>
<</step>>

<<step>>
Temporarily link the client with the desired version of Mars.
<</step/>>
<pre>
$ cd ~/client_1.2.3
$ mars link 1.3
</pre>
<</step>>

<<step>>
Conduct any desired testing.
<</step/>>
<pre>
$ ...
</pre>
<</step>>

<<step>>
Make the link permanent.
<</step/>>
<pre>
$ cd ~/client_1.2.3
$ mars link save
</pre>
<</step>>

<</procedure>>

<<subsection "Linking a Local Copy">>

When creating a release branch for a client, one will usually want to
branch Mars as well, so that the release branch will not be affected
by continuing Mars development.  The usual approach is to make a local
copy of the desired version of Mars within the client's release branch.<p>

For example, to make a local copy of Mars, version 1.3, say, in a
client's release branch, do the following:<p>

<<procedure>>

<<step>>
Check out the client's release branch.
<</step/>>
<pre>
$ svn checkout <i>repository</i>/client/branches/client_1.1.x \
  ~/client_1.1.x
</pre>
<</step>>

<<step>>
Temporarily link the client with the desired version of Mars.
<</step/>>
<pre>
$ cd ~/client_1.1.x
$ mars link 1.3
</pre>
<</step>>

<<step>>
Conduct any desired testing.
<</step/>>
<pre>
$ ...
</pre>
<</step>>

<<step>>
Make the local copy.
<</step/>>
<pre>
$ cd ~/client_1.1.x
$ mars link save -ascopy
</pre>
<</step>>

<</procedure>>

<<section REFERENCE>>

mars_link(1) expects to be run in the directory of a client working
copy within which Mars is or should be linked.  It
can be called in the following ways.<p>

<<deflist app>>

<<defitem "mars link" {mars link ?<i>cmd</i>? ?<i>args...</i>?}>>

Called with no arguments, mars_link(1) queries the client's working
copy and any embedded version of Mars, and outputs the details.
If <i>cmd</i> is given, it determines what happens next.<p>

<<deflist commands>>

<<defitem "mars link help" {mars link help}>>

Outputs a brief command summary.<p>

<<defitem "mars link trunk" {mars link trunk}>>
<<defitem "mars link version" {mars link <i>version</i>}>>

This command attempts to temporarily link the client working copy with
the Mars trunk or some particular <i>version</i>, e.g.,
"<code>1.3</code>".  If no version of Mars is currently linked,
the selected version of Mars will be checked out as
"<code>./mars/</code>".  If some version of Mars is already externally
linked, the embedded working copy will be switched to the trunk.<p>

It's an error to request a version that doesn't exist, or to try to
temporarily link in a version when there is already a local copy of
Mars.<p>

<<defitem "mars link save" {mars link save}>>

This command attempts to make the current temporary link permanent by
setting the <code>svn:externals</code> property on the client
project's working copy.  It's an error if there is already a local
copy of Mars.<p>

It is also an error to try to save a link to anything but the Mars
trunk into the client's trunk.<p>

<<defitem "mars link save -ascopy" {mars link save -ascopy}>>

This command attempts to make the current temporary link permanent by
using <code>svn copy</code> to copy the linked version of Mars into
the client project's code base as a local copy.  It's an error if
there is already a local copy of Mars.<p>

It is also an error to try to make a local copy of Mars
on the client's trunk.<p>

<</deflist commands>>
<</deflist app>>

<<section ENVIRONMENT>>

mars_link(1) requires Tcl 8.5 or later.

To execute mars_link(1), the standard <tt>tclsh8.5(1)</tt> must be
available on the <code>PATH</code>.<p>

<<section BUGS>>

mars_link(1) assumes that the client project isn't externally linked
to anything but Mars, so that it can manipulate the
<code>svn:externals</code> property freely.<p>

<<section AUTHOR>>

Will Duquette<p>

<<section HISTORY>>

Original application.<p>

<</manpage>>







