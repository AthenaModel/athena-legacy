<<manpage {mars(1) mars_gram2(1)} "GRAM Workbench V2">>

<<section SYNOPSIS>>

<<itemlist>>

<<swallow {
package require simlib
namespace import ::simlib::*
}>>

<<section DESCRIPTION>>

<<deflist program>>

<<defitem {mars gram2} {mars gram2 ?options...? ?database?}>>

<</deflist program>>

mars_gram2(1) is a tool for working with and refining GRAM input
data.  It loads GRAM data from a <<xref gramdb2(5)>> file into an
instance of <<xref gram2(n)>>,
and allows the user to schedule satisfaction
and cooperation level and slope inputs, query inputs and outputs, and
advance simulation time.<p>

The <<xref gramdb2(5)>> file name may be specified on the command line,
in which case it will be loaded automatically.  The database file will
be loaded before any <code>-script</code> specified on the
command-line is executed.  Alternatively, <<xref gramdb2(5)>> files can be
loaded interactively using the <<iref load>> command.<p>
<p>

The mars_gram2(1) user interface consists of three areas: a simulation tool
bar, a browser area containing the scrolling log and (ultimately) a
number of data browsers, and an interactive
command-line interface (CLI). As the model is exercised, a trace of
activities is written to the scrolling log. The CLI provides
a terminal-like command line interface at which mars_gram2(1) commands can
be typed; for example, entering the command "dump sat.ngc" will dump the
current Satisfaction levels at the command line interface.<p>

Note that the boundary between the browser area and the CLI can be dragged
up or down with the mouse.<p>

See <<xref MENUS>> for a description of mars_gram2(1)'s menus.
See <<xref COMMANDS>> for a full list of mars_gram2(1) commands.
See <<xref CLI>> for details on the shell's editing features.
See <<xref SCRIPTS>> for details on how to write mars_gram2(1)
scripts.<p>

<<subsection "Simulation Time">>

mars_gram2(1) measures simulation time in timesteps called
"ticks".  By default, each tick is 1 simulation minute long; however,
the tick size can be modified by setting the parameter
<b>sim.tickSize</b> using the <<iref parm set>> command.<p>

Similarly, the default time step is 5 ticks; this can be modified
by setting the <b>sim.stepSize</b> parameter.<p>

<<section OPTIONS>>

mars_gram2(1) may be invoked with the following command-line
options:<p>

<<deflist options>>

<<defopt {-help}>>

Writes the command-line syntax to standard output, and halts.<p>

<<defopt {-script <i>scriptFile</i>}>>

The specified script file will executed automatically.<p>

<</deflist options>>

<<section MENUS>>

mars_gram2(1) provides the following menus:<p>

<<subsection "File Menu">>

<dl>
  <dt> <b>New Browser...</b>
  <dd> Opens a new window containing a set of browser tabs.<p>

  <dt> <b>Load gramdb2(5) File...</b>
  <dd> Pops up the "Load gramdb2(5) File..." dialog.  The selected file
       will be loaded into the simulation.<p>

  <dt> <b>Save RDB File...</b>
  <dd> Saves the current contents of the RDB, including all gramdb2(5)
       and gram2(n) data, to disk as an RDB file.<p>
       
  <dt> <b>Save CLI Scrollback Buffer...</b>
  <dd> Saves the current contents of the CLI's scrollback buffer to disk
       as a text file.<p>

  <dt> <b>Exit</b>
  <dd> Terminates the application.<p>
</dl>

<<subsection "Edit Menu">>

<dl>
  <dt> <b>Cut</b>
  <dd> Cuts selected text to the clipboard.<p>

  <dt> <b>Copy</b>
  <dd> Copies selected text to the clipboard.<p>

  <dt> <b>Paste</b>
  <dd> Pastes the text from the clipboard.<p>

  <dt> <b>Select All</b>
  <dd> Selects all text in the scrolling log or CLI.<p>
</dl>

<<subsection "View Menu">>

Each item on the View menu corresponds to one of the data browsers in the
browser area.  Selecting the item brings the corresponding browser to the
front.<p>

<<section COMMANDS>>

mars_gram2(1) provides the following commands, which may be
entered at the <<xref CLI>> or used in <<xref SCRIPTS>>:<p>

<<deflist commands>>

<<defitem _equals_ {= <i>expression...</i>}>>

Computes and returns the value of an arithmetic expression:<p>

<pre>
    &gt; = 1 + 1
    2
    &gt;
</pre>

Variables can be defined with <<iref set>> and retrieved using "$"
notation:<p>

<pre>
    &gt; set num 5
    5
    &gt; = $num * 2
    10
    &gt;
</pre>

<<defitem bgerrtrace {bgerrtrace}>>

Returns (and logs) the stack trace from the most recent bgerror.<p>

<<defitem call {call <i>script</i>}>>

Calls the named <i>script</i>, which is assumed to be in the
current working directory unless a path
is specified. The ".tcl"
extension may be omitted; <<iref call>> will add it automatically.<p>

<<defitem cancel {cancel <i>driver</i> ?-delete?}>>

Cancels all level and slope inputs related to the specified <i>driver</i>.
Cancelling a driver causes its actual contributions to satisfaction
and cooperation to be deleted, almost but not quite as though the
driver had never occurred. (Drivers are not
independent; the existence of one affects the contributions of others
to the same curve.)<p>

By default, the cancelled driver remains in the RDB's <b>gram_driver</b>
table, so that the driver ID is not reused. If the <b>-delete</b> option is
given, the cancelled driver is actually deleted.<p>

<<defitem coop {coop <i>subcommand</i> <i>args...</i>}>>

This command allows the user to enter cooperation inputs.  The
subcommands are as follows:<p>

<<deflist coop>>

<<defitem "coop adjust" {coop adjust <i>f g mag</i> ?<i>options</i>?}>>

Adjusts the cooperation of CIV group <i>f</i> with FRC group
<i>g</i> by <i>mag</i>, a
<<xref simtypes(n) qmag>> value.  Either or both of the names may be "*",
in which case the adjustment is applied to all CIV
groups and all FRC groups, respectively.  The resulting cooperation
values are clamped at 0 and 100.<p>

The command takes the following option:<p>

<<deflist coop adjust options>>

<<defopt {-driver <i>driver</i>}>>

By default, each adjustment is assigned a unique Driver ID.
If desired, multiple adjustments can be grouped as a single
driver by specifying the <i>driver</i>.<p>

<</deflist coop adjust options>>

<<defitem "coop level" {coop level <i>f g limit days</i> ?<i>option value...</i>?}>>

Schedules a cooperation level input affecting CIV
group <i>f</i> and FRC group <i>g</i>.<p>

The input has a maximum cooperation change of <i>limit</i>
(a <<xref simtypes(n) qmag>> value), and a
realization time of <i>days</i> (a <<xref simtypes(n) qduration>> value).<p>

The options are as follows:<p>

<<deflist coop level options>>

<<defopt {-driver <i>driver</i>}>>

By default, each input is assigned a unique Driver ID.
If desired, multiple inputs can be grouped as a single
driver by specifying the <i>driver</i>.<p>

<<defopt {-cause <i>cause</i>}>>

Specifies the <i>cause</i> of this input.  When multiple direct and
indirect effects with the same <i>cause</i> target a particular
<i>n</i>, <i>f</i>, and <i>g</i>, only the maximum
positive and maximum negative effects actually take effect.<p>

By default, each <i>driver</i> is a cause unto itself.<p>

<<defopt {-s <i>factor</i>}>>

A multiplicative factor between 0.0 and 1.0 inclusive; it determines
the strength of indirect effects in neighborhood <i>n</i> itself. Defaults
to 1.0.<p>

<<defopt {-p <i>factor</i>}>>

A multiplicative factor between 0.0 and 1.0 inclusive; it determines
the strength of indirect effects in neighborhoods which are
<b>near</b> to neighborhood <i>n</i>.  Defaults to 0.0.<p>

<<defopt {-q <i>factor</i>}>>

A multiplicative factor between 0.0 and 1.0 inclusive; it determines
the strength of indirect effects in neighborhoods which are
<b>far</b> from neighborhood <i>n</i>.  Defaults to 0.0.<p>

<<defopt {-zulu <i>zulutime</i>}>>
<<defopt {-tick <i>ticks</i>}>>

Specifies the start time of the input as a Zulu-time string, or as a time
in ticks. <b>-zulu</b> takes precedence over <b>-tick</b>; however
specified, the time must be no later than the current simulation time. If
neither is given, the input starts immediately.<p>

<</deflist coop level options>>

<<defitem {coop slope} {coop slope <i>f g slope</i> ?<i>options...</i>?}>>

Schedules a cooperation slope input affecting affecting
CIV group <i>f</i> and FRC group <i>g</i>.<p>

The input has a nominal cooperation change per day, the <i>slope</i>,
which is a <<xref simtypes(n) qmag>> value.<p>

<<deflist coop slope options>>

<<defopt {-driver <i>driver</i>}>>

By default, each input is assigned a unique Driver ID.
If desired, multiple inputs can be grouped as a single
driver by specifying the <i>driver</i>.<p>

<<defopt {-cause <i>cause</i>}>>

Specifies the <i>cause</i> of this input.  When multiple direct and
indirect effects with the same <i>cause</i> target a particular
<i>n</i>, <i>f</i>, and <i>g</i>, only the maximum
positive and maximum negative effects actually take effect.<p>

By default, each <i>driver</i> is a cause unto itself.<p>

<<defopt {-s <i>factor</i>}>>

A multiplicative factor between 0.0 and 1.0 inclusive; it determines
the strength of indirect effects in neighborhood <i>n</i> itself. Defaults
to 1.0.<p>

<<defopt {-p <i>factor</i>}>>

A multiplicative factor between 0.0 and 1.0 inclusive; it determines
the strength of indirect effects in neighborhoods which are
<b>near</b> to neighborhood <i>n</i>.  Defaults to 0.0.<p>

<<defopt {-q <i>factor</i>}>>

A multiplicative factor between 0.0 and 1.0 inclusive; it determines
the strength of indirect effects in neighborhoods which are
<b>far</b> from neighborhood <i>n</i>.  Defaults to 0.0.<p>

<<defopt {-zulu <i>zulutime</i>}>>
<<defopt {-tick <i>ticks</i>}>>

Specifies the start time of the input as a Zulu-time string, or as a time
in ticks. <b>-zulu</b> takes precedence over <b>-tick</b>; however
specified, the time must be no later than the current simulation time. If
neither is given, the input starts immediately.<p>

<</deflist coop slope options>>

<</deflist coop>>

<<defitem debug {debug ?<i>command...</i>?}>>

Invokes a debugger window.  The debugger is simply a Tcl interpreter
with full access to the application's code and data; it's intended for
developer use only.<p>

If a command name is given, the command will be loaded into the
debugger's mod editor.<p>

<<defitem dump {dump <i>subcommand</i> <i>args...</i>}>>

<<deflist dump>>


<<defitem {dump coop} {dump coop <i>subcommand</i> ?<i>args..</i>?}>>

The subcommands of the <<iref dump coop>> command dump collections
of cooperation direct and indirect effects.<p>

<<deflist dump coop>>

<<defitem "dump coop levels" {dump coop levels ?<i>driver</i>?}>>

Dumps a list of all scheduled cooperation direct and indirect level
effects, in tabular format.  If <i>driver</i> is specified, dumps only
the effects related to that driver.<p>

<<defitem "dump coop level" {dump coop level <i>f g</i>}>>

Dumps a list of all direct and indirect level effects which
currently affect the cooperation for CIV group
<i>f</i> and FRC group <i>g</i>. The effects are grouped by cause, so
that it's easy to determine that multiple effects with the same cause
are handled properly.<p>

<<defitem "dump coop slopes" {dump coop slopes ?<i>driver</i>?}>>

Dumps a list of all scheduled cooperation slope effects.  If
<i>driver</i> is specified, dumps only the effects
related to that driver.<p>

<<defitem "dump coop slope" {dump coop slope <i>f g</i>}>>

Dumps a list of all active direct and indirect slope effects which
currently affect the cooperation for CIV group
<i>f</i> and FRC group <i>g</i>. The effects are grouped by cause, so
that it's easy to determine that multiple effects with the same cause
are handled properly.<p>

<</deflist dump coop>>

<<defitem "dump coop.fg" {dump coop.fg ?options...?}>>

Dumps the current cooperation levels, moods, deltas, and slopes,
for all CIV groups, and FRC groups.  The following
options tailor the output:<p>

<<deflist options>>

<<defopt {-nbhood <i>n</i>}>>

Includes only the neighborhood named <i>n</i>.<p>

<<defopt {-civ <i>f</i>}>>

Includes only the CIV group named <i>f</i>.<p>

<<defopt {-frc <i>g</i>}>>

Includes only the FRC group named <i>g</i>.<p>

<<defopt {-ids}>>

Includes relevant database IDs.<p>

<</deflist options>>

<<defitem {dump sat} {dump sat <i>subcommand</i> ?<i>args..</i>?}>>

The subcommands of the <<iref dump sat>> command dump collections
of satisfaction direct and indirect effects.<p>

<<deflist dump sat>>

<<defitem "dump sat levels" {dump sat levels ?<i>driver</i>?}>>

Dumps a list of all scheduled satisfaction direct and indirect level
effects, in tabular format.  If <i>driver</i> is specified, dumps only
the effects related to that driver.<p>

<<defitem "dump sat level" {dump sat level <i>g c</i>}>>

Dumps a list of all direct and indirect level effects which
currently affect the satisfaction for group
<i>g</i> and concern <i>c</i>. The effects are grouped by cause, so
that it's easy to determine that multiple effects with the same cause
are handled properly.<p>

<<defitem "dump sat slopes" {dump sat slopes ?<i>driver</i>?}>>

Dumps a list of all scheduled satisfaction slope effects.  If
<i>driver</i> is specified, dumps only the effects
related to that driver.  Driver 0, the long-term trend, is omitted unless
<i>driver</i> is explicitly passed a 0.<p>

<<defitem "dump sat slope" {dump sat slope <i>g c</i>}>>

Dumps a list of all active direct and indirect slope effects which
currently affect the satisfaction for group
<i>g</i> and concern <i>c</i>. The effects are grouped by cause, so
that it's easy to determine that multiple effects with the same cause
are handled properly.<p>

<</deflist dump sat>>

<<defitem "dump sat.gc" {dump sat.gc ?options...?}>>

Dumps the current satisfaction levels, moods, deltas, and slopes,
for all neighborhoods, groups, and concerns.
The following options tailor the output:<p>

<<deflist options>>

<<defopt {-nbhood <i>n</i>}>>

Includes only the neighborhood named <i>n</i>.<p>

<<defopt {-group <i>g</i>}>>

Includes only the group named <i>g</i>.<p>

<</deflist options>>

<</deflist dump>>

<<defitem errtrace {errtrace}>>

When used interactively, returns the stack trace associated with the
last command which returned an error.  This command is a debugging
aid, and has no effect on the execution of the program.<p>

<<defitem help {help ?-info? <i>command...</i>}>>

Returns the calling syntax for the named <i>command</i> in
human-readable format.  If <b>-info</b> is specified, then
information on the linkage from the executive commands to the
simulation internals is included in the output.<p>

For example,<p>

<pre>
&gt; <b>help rdb</b>
Usage: rdb subcommand ?args...?
Valid subcommands: eval, query, schema, table
&gt; <b>help rdb query</b>
Usage: rdb query sql
&gt;
</pre>

<<defitem load {load <i>filename</i>}>>

Tries to load the named <<xref gramdb2(5)>> file.  mars_gram2(1)
looks for the file in the current working directory, which is the
location from which mars_gram2(1) was invoked; alternatively, you
can specify an absolute path.<p>

<<defitem loadperf {loadperf ?<i>options...</i>?}>>

Creates a synthetic scenario for performance testing, and loads
it into <<xref gram2(n)>>.  See <<xref gramdb2(n)>>
<<xref gramdb2(n) mkperfdb>> for the options.<p>

The call to <<xref gram2(n)>> <<xref gram2(n) init>> is profiled
automatically.<p>

<<defitem log {log <i>message</i>}>>

Writes <i>message</i> to the scrolling log, e.g.,<p>

<pre>
    100000ZJAN05&gt; log "Hello, World!"
</pre>

<<defitem mass {mass <i>subcommand</i> ?<i>args..</i>?}>>

This command allows level and slope inputs to be scheduled in mass
quantities, for the purpose of performance testing.  Each command is
profiled automatically.  The subcommands are as follows:<p>

<<deflist mass>>

<<defitem "mass level" {mass level ?<i>options...</i>?}>>
<<defitem "mass slope" {mass slope ?<i>options...</i>?}>>

These commands create a mass of level or slope inputs across the
playbox.  Satisfaction inputs are scheduled for every neighborhood 
group and concern; cooperation inputs are scheduled for every
neighborhood group and force group.  The level effects have a
magnitude of 10.0 with a duration of 1.0; the slope effects have a
magnitude of -10.0.  All inputs have a -p and -q of 1.0.  All of the
inputs scheduled by a single invocation of either command have the
same driver and cause.<p>

Each command returns the driver ID used for all of the inputs.<p>

The options are as follows:<p>

<<deflist options>>

<<defopt {-zulu <i>zulutime</i>}>>
<<defopt {-tick <i>ticks</i>}>>

Specifies the start time of the input as a Zulu-time string, or as a time
in ticks. <b>-zulu</b> takes precedence over <b>-tick</b>; however
specified, the time must be no later than the current simulation time. If
neither is given, the input starts immediately.<p>

<<defopt {-type <i>enum</i>}>>

Specifies whether to create <b>sat</b> inputs, <b>coop</b> inputs, or
<b>both</b>.<p>

<<defopt {-driver <i>driver</i>}>>

By default, each invocation of these commands creates a new driver;
this option allows an existing driver to be reused.  This is
particularly useful in performance tests of updates to existing
slope effects.<p>

<</deflist options>>

<</deflist mass>>

<<defitem now {now ?<i>offset</i>?}>>

Returns the current simulation time as a Zulu-time string.  If
<i>offset</i> is given, it is an offset in ticks; the
returned time string is then for the current simulation time plus the
offset.<p>

<<defitem parm {parm <i>subcommand</i> <i>args...</i>}>>

The <<iref parm>> command sets and queries preference parameters.
Note that parameter values are saved automatically to
~/.mars_gram/parmdb.defaults when the program exits, and reloaded
at start up.<p>

<<deflist parm>>

<<defitem {parm get} {parm get <i>parm</i>}>>

Retrieves the value of the named parameter.<p>

<<defitem {parm help} {parm help <i>parm</i>}>>

Retrieves the documentation string for the parameter.<p>

<<defitem {parm list} {parm list ?<i>pattern</i>?}>>

Returns a human-readable list of parameters whose names match
the specified wildcard pattern, in alphabetical order.
If no <i>pattern</i> is
specified, all parameters will be returned.<p>

<<defitem {parm load} {parm load}>>

Loads the parameter set from "~/.mars_gram/parmdb.defaults"; this also
happens automatically at start up.<p>

<<defitem {parm names} {parm names ?<i>pattern</i>?}>>

Returns a list of the parameter names, in alphabetical order, which
match the specified wildcard pattern; if no <i>pattern</i> is
specified, all names will be returned.<p>

<<defitem {parm set} {parm set <i>parm value</i>}>>

Sets the value of the named parameter, which must be valid.<p>

<<defitem {parm reset} {parm reset}>>

Resets all parameters to their default values.<p>

<<defitem {parm save} {parm save}>>

Saves the parameter set to "~/.mars_gram/parmdb.defaults";  this also
happens automatically at shut down.<p>

<</deflist parm>>

<<defitem profile {profile <i>command</i> ?<i>args...</i>?}>>

Executes the command and times its execution. The time in microseconds and
the command are logged, and the command's result is returned.<p.

<<defitem "rdb" {rdb <i>subcommand</i> ?<i>args...</i>?}>>

Queries the application's run-time database. The subcommands are as
follows:<p>

<<deflist rdb>>

<<defitem {rdb eval} {rdb eval <i>sql</i>}>>

Executes the specified <i>sql</i> query and returns a list of the results.
Note that the query will not be allowed to modify the database.<p>

This command is appropriate for use in scripts; prefer
<<iref rdb query>> or <<iref select>> for interactive use.<p>

<<defitem {rdb query} {rdb query <i>sql</i>}>>

Executes the specified <i>sql</i> query and returns the results in tabular
form.  See also <<iref select>>, which is often more convenient.<p>

<<defitem {rdb schema} {rdb schema ?<i>table</i>?}>>

Returns the SQL schema for the named table, or by default the entire
database.<p>

<<defitem {rdb tables} {rdb tables}>>

Returns a list of the names of the database tables.<p>

<</deflist rdb>>

<<defitem reset {reset}>>

Re-initializes GRAM back to simulation time 0; this is
equivalent to reloading the <<xref gramdb2(5)>> file.<p>

<<defitem run {run <i>zulutime</i>}>>

Advances simulation time, step by step, to the specified
<i>zulutime</i>.  Since the simulation advances by time steps,
the simulation time after the run completes may be a few ticks
after the requested time.<p>

The step size is established by the <b>sim.stepSize</b> parameter.<p>

<<defitem sat {sat <i>subcommand</i> ?<i>args..</i>?}>>

This command allows the user to enter satisfaction inputs.
The subcommands are as follows:<p>

<<deflist sat>>

<<defitem {sat adjust} {sat adjust <i>g c mag</i> ?<i>options...</i>?}>>

Adjusts group <i>g</i>'s satisfaction with concern <i>c</i>
by <i>mag</i>.  The <i>mag</i> is a <<xref simtypes(n) qmag>>
value.  The specified satisfaction curve is then clamped to the range
(-100.0, +100.0).<p>

The <i>g</i> and <i>c</i> arguments may also be passed a
wildcard, "*"; this means that the adjustment is to be made for all
entities of that type.<p>

After making the adjustments, GRAM recomputes all satisfaction roll-ups.<p>

The command takes the following option:<p>

<<deflist sat adjust options>>

<<defopt {-driver <i>driver</i>}>>

By default, each adjustment is assigned a unique Driver ID.
If desired, multiple adjustments can be grouped as a single
driver by specifying the <i>driver</i>.<p>

<</deflist sat adjust options>>

<<defitem {sat level} {sat level <i>g c limit days</i> ?<i>options...</i>?}>>

Schedules a satisfaction level input affecting 
CIV group <i>g</i> and concern <i>c</i><p>

The input has a maximum satisfaction change of <i>limit</i>
(a <<xref simtypes(n) qmag>> value), and a
realization time of <i>days</i>
(a <<xref simtypes(n) qduration>> value).<p>

The options are as follows:<p>

<<deflist sat level options>>

<<defopt {-driver <i>driver</i>}>>

By default, each input is assigned a unique Driver ID.
If desired, multiple inputs can be grouped as a single
driver by specifying the <i>driver</i>.<p>

<<defopt {-cause <i>cause</i>}>>

Specifies the <i>cause</i> of this input.  When multiple direct and
indirect effects with the same <i>cause</i> target a particular
<i>n</i>, <i>g</i>, and <i>c</i>, only the maximum
positive and maximum negative effects actually take effect.<p>

<<defopt {-s <i>factor</i>}>>

A multiplicative factor between 0.0 and 1.0 inclusive; it determines
the strength of indirect effects in neighborhood <i>n</i> itself. Defaults
to 1.0.<p>

<<defopt {-p <i>factor</i>}>>

A multiplicative factor between 0.0 and 1.0 inclusive; it determines
the strength of indirect effects in neighborhoods which are
<b>near</b> to neighborhood <i>n</i>.  Defaults to 0.0.<p>

<<defopt {-q <i>factor</i>}>>

A multiplicative factor between 0.0 and 1.0 inclusive; it determines
the strength of indirect effects in neighborhoods which are
<b>far</b> from neighborhood <i>n</i>.  Defaults to 0.0.<p>

<<defopt {-zulu <i>zulutime</i>}>>
<<defopt {-tick <i>ticks</i>}>>

Specifies the start time of the input as a Zulu-time string, or as a time
in ticks. <b>-zulu</b> takes precedence over <b>-tick</b>; however
specified, the time must be no later than the current simulation time. If
neither is given, the input starts immediately.<p>

<</deflist sat level options>>

<<defitem {sat slope} {sat slope <i>g c slope limit</i> ?<i>options...</i>?}>>

Schedules a satisfaction slope input affecting
CIV group <i>g</i> and concern <i>c</i>.<p>

The input has a nominal satisfaction change per day, a
<<xref simtypes(n) qmag>> value.<p>

The options are as follows:<p>

<<deflist sat slope options>>

<<defopt {-driver <i>driver</i>}>>

By default, each input is assigned a unique Driver ID.
If desired, multiple inputs can be grouped as a single
driver by specifying the <i>driver</i>.<p>

<<defopt {-cause <i>cause</i>}>>

Specifies the <i>cause</i> of this input.  When multiple direct and
indirect effects with the same <i>cause</i> target a particular
<i>n</i>, <i>g</i>, and <i>c</i>, only the maximum
positive and maximum negative effects actually take effect.<p>

<<defopt {-s <i>factor</i>}>>

A multiplicative factor between 0.0 and 1.0 inclusive; it determines
the strength of indirect effects in neighborhood <i>n</i> itself. Defaults
to 1.0.<p>

<<defopt {-p <i>factor</i>}>>

A multiplicative factor between 0.0 and 1.0 inclusive; it determines
the strength of indirect effects in neighborhoods which are
<b>near</b> to neighborhood <i>n</i>.  Defaults to 0.0.<p>

<<defopt {-q <i>factor</i>}>>

A multiplicative factor between 0.0 and 1.0 inclusive; it determines
the strength of indirect effects in neighborhoods which are
<b>far</b> from neighborhood <i>n</i>.  Defaults to 0.0.<p>

<<defopt {-zulu <i>zulutime</i>}>>
<<defopt {-tick <i>ticks</i>}>>

Specifies the start time of the input as a Zulu-time string, or as a time
in ticks. <b>-zulu</b> takes precedence over <b>-tick</b>; however
specified, the time must be no later than the current simulation time. If
neither is given, the input starts immediately.<p>

<</deflist sat slope options>>

<</deflist sat>>

<<defitem select {select <i>sql...</i>}>>

Executes the SQL query and returns the results in tabular form.
This is simply a wrapper around <<iref rdb query>>; compare

<pre>
  &gt; select * from gramdb_n
</pre>

with

<pre>
  &gt; rdb query {select * from gramdb_n}
</pre><p>

<<defitem set {set <i>variable value</i>}>>

Assigns a <i>value</i> to a named <i>variable</i>.<p>

<<defitem step {step ?<i>ticks</i>?}>>

Advances simulation time by the specified number of <i>ticks</i>, if
given; otherwise, by <b>sim.stepSize</b> ticks, nominally 5.<p>

The call to <<xref gram2(n)>> <<xref gram2(n) advance>> is profiled
automatically.<p>

<<defitem super {super <i>args...</i>}>>

Concatenates its arguments into a single command, and executes
that command in the context of the application rather than in the
GRAM Workbench executive.<p>

<<defitem unload {unload}>>

Unloads the current gramdb2(5) file.<p>

<</deflist>>

In addition to the specific commands listed above, mars_gram2(1)
supports most standard Tcl commands.<p>

<<section CLI>>

The mars_gram2(1) command-line interface (CLI) provides the following
conveniences:<p>

<ul>
  <li> Full command-line editing.  Use the left and right arrow keys
       (or the mouse) to edit the text on the command-line before
       executing it.<p>

  <li> Command-history.  Use the up and down arrow keys to retrieve
       the previous commands to the command-line for execution.<p>

  <li> Command-completion.  Press the Tab key to expand a partial
       command name into a full command name, e.g., type "lev" and
       press Tab to expand "lev" into "level".<p>

  <li> Standard cut, copy, and paste.  Use Ctrl+X, Ctrl+C, and Ctrl+V
       to cut, copy, and paste on the command line.  Use the mouse to
       select older text in the shell (e.g., command outputs) and copy
       it with Ctrl+C.<p>
</ul>

<<section SCRIPTS>>

A mars_gram2(1) script is simply a sequence of <<xref COMMANDS>>
placed on consecutive lines of a text file, e.g.,<p>

<pre>
    load mydata.gramdb
    dump sat.ngc
</pre>

Use the <<iref call>> command to execute a script:<p>

<pre>
    &gt; call myscript.tcl
</pre>

mars_gram2(1) scripts are in fact Tcl scripts, and can define
procs, perform loops, and so forth.<p>

<<section AUTHOR>>

Will Duquette<p>

<<section HISTORY>>

mars_gram2(1) is a rewrite of jnem_workbench(1) for gram2(n), with
addition ideas from athena_sim(1).<p>

<</manpage>>










