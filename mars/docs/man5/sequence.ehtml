<<manpage sequence(5) "Sequence Diagram Format">>

<<section SYNOPSIS>>

<<itemlist>>

<<section DESCRIPTION>>

This man page defines the sequence(5) format for defining UML-like
sequence diagrams from a simple text specification.  The
<<xref sequence(n)>> module converts sequence(5) input text into
diagrams; sequence(5) diagrams may also be included in-line in
<<xref mars_man(5)>> documents.<p>

<<section "DIAGRAM SYNTAX">>

Diagram specification files have Tcl-syntax.  Each file will contain:<p>

<ul>
  <li> Optionally, a <<iref title>> statement.
  <li> Optionally, a <<iref narrative>> statement.
  <li> One or more <<iref actor>> statements.
  <li> Any number of <<iref message>>, <<iref action>>, and
       <<iref comment>> statements.
</ul><p>

The statements are defined as follows:<p>

<<deflist>>

<<defitem title {title <i>title</i>}>>

Sets the diagram's title, which will appear centered over the diagram.
If no title is specified, no title appears.  Excess whitespace and new
lines are stripped from <i>title</i>.<p>

<<defitem narrative {narrative <i>text</i>}>>

Specifies narrative <i>text</i> which gives an overview of the
diagram.  It is expected to be plain text, with no formatting or
markup.  Excess whitespace and new lines will be stripped.<p>

<<defitem actor {actor <i>name</i>}>>

Defines an actor.  Each actor is assigned to a column in the diagram;
the columns will appear from left-to-right in definition order.<p>

Actor names can be any arbitrary text; however, you can avoid
confusion by using short names with no whitespace.<p>

<<defitem message {message <i>from to text</i> ?<i>narrative</i>?}>>

Defines a message from one actor to one or more other actors, where
<i>from</i> is the name of the sender and <i>to</i> is a list of
the names of the recipients.  The <i>text</i> will be used to label
the message arrows; all excess whitespace will be stripped.<p>

If <i>narrative</i> is given, it is a block of HTML text which
provides an extended narrative for this message.  It is expected to be
plain text, with no formatting or markup.  Excess whitespace and new
lines will be stripped.<p>

Messages and actions are assigned index numbers in sequence, starting
at 1.<p>

<<defitem action {action <i>actor text</i> ?<i>narrative</i>?}>>

Defines an internal action taken by one <i>actor</i>.  The <i>text</i>
is a short description of the action; it will be written in a box the
width of the actor's column. All excess whitespace and newlines will
be stripped, and the text will be wrapped to fill the box.<p>

If <i>narrative</i> is given, it is a block of HTML text which
provides an extended narrative for this action.  It is expected to be
plain text, with no formatting or markup.  Excess whitespace and new
lines will be stripped.<p>

Messages and actions are assigned index numbers in sequence, starting
at 1.<p>

<<defitem comment {comment <i>text</i>}>>

Defines a global comment at this point in the sequence.  The comment
<i>text</i> will will appear in the sequence in a box that spans the
full width of the diagram.  Excess whitespace and newlines will be
stripped, and then <i>text</i> will be word-wrapped into the box,
using as many lines as necessary.<p>

<</deflist>>

<<section EXAMPLE>>

Here is a short example, with the narrative saved as HTML by
<<xref mars_man(1)>>:<p>

<<swallow {
proc examplesequence {spec} {
    set output "<pre>\n$spec\n</pre>\n"
    append output [sequence -narration $spec]
    return $output
}
}>>

<<examplesequence {
    # Sample diagram.
    #
    # This is a .seq file comment; it is ignored.

    # Set the title
    title "Sample Sequence Diagram"

    # Describe the diagram
    narrative {
        This is a sample sequence diagram.  In a real diagram, this
        narrative text would give an overview of the diagram's
        contents.  The narrative text can contain HTML markup.  It
        will automatically be terminated with a &lt;p&gt; tag.
    }

    # Define the actors; if more needs to be said about them, use
    # the narrative block, above.
    actor human
    actor console
    actor sim

    # The sequence proper begins here.

    message human console "ratio 10" {
        The JNEM controller enters a command at jnem_console(1) to
        set the game ratio to 10.
    }

    message console sim "ratio 10" {
        The console forwards the command to jnem_sim(1).
    }

    action sim {
        Set the game ratio to 10.
    }

    message sim console "10" {
        Return the new ratio to the console.
    }
}>>

<<section AUTHOR>>

Will Duquette<p>

<<section HISTORY>>

Original package.<p>

<</manpage>>




