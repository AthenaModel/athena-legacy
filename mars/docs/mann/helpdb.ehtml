<<manpage {marsutil(n) helpdb(n)} "Help Database Object">>

<<swallow {
    package require marsutil

    proc schemaDoc {} {
        set section ::marsutil::helpdb
        set out ""

        # FIRST, are there any schema definitions
        set schema ""

        if {[$section sqlsection schema] ne ""} {
            lappend schema [$section sqlsection schema]
        }

        if {[$section sqlsection tempschema] ne ""} {
            lappend schema [$section sqlsection tempschema]
        }

        # NEXT, document them.
        append out "<pre>\n"
        append out [join $schema "\n\n"]
        append out "</pre>\n\n"

        return $out
    }
}>>

<<section SYNOPSIS>>

<pre>
package require marsutil 1.0
namespace import ::marsutil::helpdb
</pre>

<<itemlist>>

<<section DESCRIPTION>>

The helpdb(n) type provides access to databases of on-line help
information.  Such databases are compiled using <<xref mars_helptool(1)>>
from <<xref help(5)>> input.<p>
It is an SQLite3 format based on <<xref sqldocument(n)>>.<p>

<<section "SCHEMA">>

helpdb(n) adds the following definitions to the database
schema:<p>

Every <<xref helpdb(n)>> database will contain the following
schema definitions:<p>

<<schemaDoc>>

<<section COMMANDS>>

<<deflist commands>>

<<defitem helpdb {helpdb <i>name</i> ?<i>options...?</i>}>>

Creates a new helpdb(n) object called <i>name</i>. The object is
represented as a new Tcl command in the caller's scope;
<<iref helpdb>> returns the fully-qualified form of the
<i>name</i>.<p>

Before the new helpdb(n) can be used, a .helpdb file must be
<<xref sqldocument(n) open>>ed, and possibly
<<xref sqldocument(n) clear>>ed.<p>

<</deflist commands>>

<<section "INSTANCE COMMAND">>

Each instance of helpdb(n) inherits all methods
of the <<xref sqldocument(n)>> object and the underlying SQLite3
database handle.  In addition, it has the following subcommands:<p>

<<deflist instance>>

<<defitem "entity" {<i>obj</i> entity <i>subcommand</i> ?<i>args...</i>?}>>

This command has subcommands relating to entities (pages, images) in
general.<p>

<<deflist entity>>

<<defitem "entity exists" {<i>obj</i> entity exists <i>name</i>}>>

Returns 1 if there is a help page or image called <i>name</i>, and 0
otherwise.<p>

<</deflist entity>>

<<defitem "page" {<i>obj</i> page <i>subcommand</i> ?<i>args...</i>?}>>

This command has subcommands relating to help page entities in
particular.<p>

<<deflist page>>


<<defitem "page children" {<i>obj</i> page children <i>name</i>}>>

Returns a list of the names of the help pages that are children
of the named page.  If name is "", the command returns a
list of the names of the top-level help pages.  If the named page does
not exist, the command returns the empty list.<p>

<<defitem "page exists" {<i>obj</i> page exists <i>name</i>}>>

Returns 1 if there is a help page called <i>name</i>, and 0 otherwise.<p>


<<defitem "page parent" {<i>obj</i> page parent <i>name</i>}>>

Returns the name of the parent page of the help page named
<i>name</i>, or "" if the page does not exist (or is a toplevel
page).<p>

<<defitem "page title" {<i>obj</i> page title <i>name</i>}>>

Returns the title of the help page named <i>name</i>, or "" if the
page does not exist.<p>

<<defitem "page title+text" {<i>obj</i> page title+text <i>name</i>}>>

Returns a two-element list of the title and the body text of the named
help page, or the empty list if the page does not exist.<p>

<</deflist page>>

<<defitem "search" {<i>obj</i> search <i>target</i>}>>

Searches for <i>target</i>, which is an SQLite3 "full text search"
search target, and returns the search results as an HTML text string,
suitable for display in <<xref helpbrowser(n)>>.<p>

<</deflist instance>>

<<section "SEE ALSO">>

<<xref sqldocument(n)>>.

<<section ENVIRONMENT>>

Requires Tcl 8.5 or later.

<<section AUTHOR>>

Will Duquette<p>

<<section HISTORY>>

Original package.

<</manpage>>










