# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    gram.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    Tcltest test suite for gram(n).
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n)


if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2.2
    eval ::tcltest::configure $argv
}

# Define a constraint to comment out tests which shouldn't
# or haven't been updated yet.
::tcltest::testConstraint tbd

# JRAM validated causes; GRAM doesn't.  However, at some point it
# might.  Consequently, define a constraint to eliminate the 
# cause-validation tests.
::tcltest::testConstraint cause

#-----------------------------------------------------------------------
# Load the package to be tested

package require simlib 1.0    ;# gram(n) is part of simlib(n)

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::simlib::test {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Import marsutil(n), for use in the test cases.
    namespace import ::marsutil::*

    # Import the code to be tested
    namespace import ::simlib::*

    #-------------------------------------------------------------------
    # Scenario Definitions

    # Create a simulation clock.

    simclockType myclock

    # Create a run-time database in memory
    sqldocument rdb -clock [namespace current]::myclock
    rdb register ::simlib::gram
    rdb register ::simlib::gramdb
    rdb open :memory:
    rdb clear
    
    gramdb loadfile ./test.gramdb [namespace current]::rdb
    

    # tableSave table
    #
    # Creates a temporary copy of a table in the RDB.

    proc tableSave {table} {
        set temp "temp_${table}_temp"

        rdb eval "
            DROP TABLE IF EXISTS $temp;
            CREATE TEMPORARY TABLE $temp AS SELECT* FROM $table;
        "
    }

    # tableDiff table id labels col1 ?col2?
    #
    # table    A table in the RDB
    # id       Row ID column
    # labels   The name of the label columns
    # col1     Some numeric column in the table
    # col2     Another numeric column in the saved table; defaults to col1
    #
    # Compares a table against the saved table.  Outputs a list of entries
    # for each row that differs on the named column.  Each entry 
    # looks like {key ?key...? diff}.

    proc tableDiff {table id labels col1 {col2 ""}} {
        set temp "temp_${table}_temp"

        set tableLabels ""

        foreach lab $labels {
            lappend tableLabels "$table.$lab AS $lab"
        }

        if {$col2 eq ""} {
            set col2 $col1
        }

        set results [list]

        rdb eval "
            SELECT [join $tableLabels ,],
                   $table.$col1 - $temp.$col2 AS diff
            FROM $table JOIN $temp USING ($id)
            WHERE abs($table.$col1 - $temp.$col2) > 0.00000001
        " row {
            set vec [list]
            foreach lab $labels {
                lappend vec $row($lab)
            }
            lappend vec [format %.8g $row(diff)]

            lappend results $vec
        }

        return $results
    }

    # tableDiffCols table labels col1 col2
    #
    # table    A table in the RDB
    # labels   The name of the label columns
    # col1     A numeric column.
    # col2     Another numeric column
    #
    # Compares col1 and col2 in each row in the table.
    # Outputs a list of entries in which the columns differ. Each entry 
    # looks like {key ?key...? diff}.

    proc tableDiffCols {table labels col1 col2} {
        set results [list]

        rdb eval "
            SELECT [join $labels ,],
                   $col1 - $col2 AS diff
            FROM $table
            WHERE abs($col1 - $col2) > 0.00000001
        " row {
            set vec [list]
            foreach lab $labels {
                lappend vec $row($lab)
            }
            lappend vec [format %.8g $row(diff)]

            lappend results $vec
        }

        return $results
    }

    # dumpLevels
    #
    # Dumps level effect info in a concise form.

    proc dumpLevels {} {
        pprint [rdb query {
            SELECT CASE WHEN prox == -1
                        THEN 'D'
                        ELSE 'I' END      AS d,
                   ts,
                   te,
                   n,
                   g,
                   c,
                   format('%.2f', llimit) AS llimit
            FROM gram_sat_effects 
            WHERE etype='L'
            ORDER BY ts, te, n, g, c
        }]
    }


    # dumpSlopes
    #
    # Dumps slope effect info.

    proc dumpSlopes {} {
        # Add some whitespace so that the tests look nice.
        set block [string map [list \" \'] [jr dump sat slopes]]
        return "\n$block    "
    }

    # dumpCoopLevels
    #
    # Dumps coop level effect info in a concise form.

    proc dumpCoopLevels {} {
        pprint [rdb query {
            SELECT CASE WHEN prox == -1
                        THEN 'D'
                        ELSE 'I' END      AS d,
                   ts,
                   te,
                   n,
                   f,
                   g,
                   format('%.2f', llimit) AS llimit
            FROM gram_coop_effects 
            WHERE etype='L'
            ORDER BY ts, te, n, f, g
        }]
    }

    # dumpCoopSlopes
    #
    # Dumps slope effect info.

    proc dumpCoopSlopes {} {
        # Add some whitespace so that the tests look nice.
        set block [string map [list \" \'] [jr dump coop slopes]]
        return "\n$block    "
    }


    # pprint block
    #
    # Pretty-prints a result block so that the test looks nice
    
    proc pprint {block} {
        set block [string map [list \" \'] $block]
        return "\n$block    "
    }

    # create ?options?
    #
    # Creates a pre-configured GRAM.  All gram options can be
    # used.
    #
    # -clock    Defaults to clock created for this test file
    # -rdb      Defaults to RDB created for this test file
    #
    # Other options
    #
    # -drivers  Defaults to 4.  This many event/situation IDs
    #           will be automatically created.  Specify -driver 0
    #           If none should be created.

    proc create {args} {
        # FIRST, set up the RDB
        rdb clear
        set rdb [namespace current]::rdb
        gramdb loadfile ./test.gramdb $rdb

        # NEXT, get create options
        set drivers [optval args -drivers 4]
        
        gram jr \
            -clock   [namespace current]::myclock        \
            -rdb     $rdb                                \
            -loadcmd [list ::simlib::gramdb loader $rdb] \
            {*}$args

        jr init

        # Add some dummy events/situations
        for {set i 0} {$i < $drivers} {incr i} {
            jr driver add -oneliner "Dummy DRIVER"
        }

        return
    }

    # init ?options?
    #
    # Re-initializes GRAM.  The special options understood by
    # create can be used here as well.
    #
    # -drivers    Defaults to 4.  This many event/situation IDs
    #           will be automatically created.  Specify -driver 0
    #           If none should be created.

    proc init {args} {
        # get options
        set drivers [optval args -drivers 4]

        # re-initialize gram
        jr init

        # Add some dummy events/situations
        for {set i 0} {$i < $drivers} {incr i} {
            jr driver add -oneliner "Dummy DRIVER"
        }

        return
    }

    proc cleanup {} {
        myclock reset
        rdb clear

        catch {jr destroy}
    }

    # notResident n g
    #
    # n       A neighborhood name
    # g       A CIV group name
    #
    # Sets the satisfaction and cooperation to be not tracked for this ng.
    # "jr init" should be called subsequently.
    #
    # NOTE: This is really ugly, because gram(n) assumes
    # that population isn't variable.  To get the right
    # effects cleanly, population really needs to be zero 
    # in the simdb(5) when gram(n) is created or initialized with -simdb.
    
    proc notResident {n g} {
        # FIRST, get rid of the curves
        rdb eval {
            SELECT curve_id FROM gram_ngc
            WHERE n=$n AND g=$g
        } {
            rdb eval {
                DELETE FROM gram_ngc    WHERE curve_id=$curve_id;
                DELETE FROM gram_curves WHERE curve_id=$curve_id;
            }
        }
        
        rdb eval {
            SELECT curve_id FROM gram_nfg
            WHERE n=$n AND f=$g
        } {
            rdb eval {
                DELETE FROM gram_nfg    WHERE curve_id=$curve_id;
                DELETE FROM gram_curves WHERE curve_id=$curve_id;
            }
        }
        
        # NEXT, clear the gram_ng record
        rdb eval {
            UPDATE gram_ng 
            SET population  = 0.0,
                sat_tracked = 0
            WHERE n=$n AND g=$g;
        }
    }

    #-------------------------------------------------------------------
    # Object creation
    #
    # Verify state at creation, as well as creation errors.

    test creation-1.1 {invariant succeeds on creation} -body {
        create
    } -cleanup {
        cleanup
    } -result {}

    test creation-1.2 {cannot create multiple instances on one RDB} -body {
        create

        gram temp_jr \
            -logcomponent temp                          \
            -clock        [namespace current]::myclock  \
            -rdb          [namespace current]::rdb      \
            -loadcmd      [list ::simlib::gramdb loader [namespace current]::rdb]
        
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Error in constructor: RDB ::simlib::test::rdb already in use by GRAM ::simlib::test::jr}


    #-------------------------------------------------------------------
    # Object destruction
    #
    # Verify that the RDB is cleaned up on destruction.

    test destruction-1.1 {rdb clean up} -body {
        create
    } -body {
        # FIRST, destroy the object
        cleanup

        # NEXT, verify that none of the GRAM tables have entries
        # for the object.
        set badTables {}

        foreach table [rdb tables] {
            if {![string match "gram_*" $table]} {
                continue
            }

            set count [rdb onecolumn "
                SELECT count(rowid) FROM $table
            "]

            if {$count > 0} {
                lappend badTables $table
            }
        }

        set badTables
    } -result {}

    #--------------------------------------------------------------------
    # option -loadcmd

    test option_loadcmd-1.1 {-loadcmd missing} -body {
        gram jr
    } -returnCodes {
        error
    } -result {Error in constructor: Assertion failed: $options(-loadcmd) ne ""}


    #--------------------------------------------------------------------
    # option -clock

    test option_clock-1.1 {-clock missing} -body {
        gram jr -loadcmd dummy
    } -returnCodes {
        error
    } -result {Error in constructor: Assertion failed: [info commands $clock] ne ""}

    test option_clock-1.2 {-clock invalid} -body {
        gram jr -loadcmd dummy -clock nonesuch
    } -returnCodes {
        error
    } -result {Error in constructor: Assertion failed: [info commands $clock] ne ""}

    #--------------------------------------------------------------------
    # option -rdb

    test option_rdb-1.1 {-rdb missing} -body {
        gram jr -loadcmd dummy -clock simclock
    } -returnCodes {
        error
    } -result {Error in constructor: Assertion failed: [info commands $rdb] ne ""}

    test option_rdb-1.2 {-rdb invalid} -body {
        gram jr -loadcmd dummy -clock simclock -rdb nonesuch
    } -returnCodes {
        error
    } -result {Error in constructor: Assertion failed: [info commands $rdb] ne ""}

    #-------------------------------------------------------------------
    # init

    test init-1.1 {tables populated on first initialization} -setup {
        create
    } -body {
        rdb eval {
            SELECT count(curve_id) AS count
            FROM gram_curves
        } {}

        expr {$count > 0}
    } -cleanup {
        cleanup
    } -result {1}

    test init-1.2 {-loadcmd not accessed on subsequent inits} -setup {
        create
    } -body {
        # FIRST, get the number of non-remote neighborhoods
        set prox [eproximity index REMOTE]

        set count1 [rdb onecolumn {
            SELECT count(mn_id) FROM gram_mn
            WHERE proximity < $prox
        }]

        # NEXT, set all neighborhoods remote, and reinitialize
        rdb eval {
            UPDATE gram_mn SET proximity=$prox
        } {}

        jr init

        # NEXT, the number of non-remote nbhoods should still be 0
        set count2 [rdb onecolumn {
            SELECT count(mn_id) FROM gram_mn
            WHERE proximity < $prox
        }]

        list [expr {$count1 > 0}] $count2
    } -cleanup {
        cleanup
    } -result {1 0}

    test init-1.3 {Data reloaded on init -reload} -setup {
        create
    } -body {
        # FIRST, set all neighborhoods remote, and reinitialize
        rdb eval {
            UPDATE gram_mn SET proximity=$prox
        } {}

        jr init

        set prox [eproximity index REMOTE]

        set count1 [rdb onecolumn {
            SELECT count(mn_id) FROM gram_mn
            WHERE proximity < $prox
        }]

        # NEXT, reload, and get the count.
        jr init -reload

        set count2 [rdb onecolumn {
            SELECT count(mn_id) FROM gram_mn
            WHERE proximity < $prox
        }]



        list [expr {$count1 > 0}] [expr {$count2 > 0}]
    } -cleanup {
        cleanup
    } -result {0 1}

    # Initial contents of gram_* tables.
    # TBD: I might prefer to have a section in the test suite
    # for each individual table.

    test init-2.1 {initial contents: gram_curves} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_curves
        }]
    } -cleanup {
        cleanup
    } -result {
curve_id curve_type val0  val   delta slope 
-------- ---------- ----- ----- ----- ----- 
1        SAT        0.0   0.0   0.0   0.0   
2        SAT        0.0   0.0   0.0   0.0   
3        SAT        0.0   0.0   0.0   0.0   
4        SAT        -80.0 -80.0 0.0   0.0   
5        SAT        40.0  40.0  0.0   0.0   
6        SAT        -40.0 -40.0 0.0   0.0   
7        SAT        -40.0 -40.0 0.0   0.0   
8        SAT        40.0  40.0  0.0   0.0   
9        SAT        -80.0 -80.0 0.0   0.0   
10       SAT        -80.0 -80.0 0.0   0.0   
11       SAT        -40.0 -40.0 0.0   0.0   
12       SAT        -80.0 -80.0 0.0   0.0   
13       SAT        0.0   0.0   0.0   0.0   
14       SAT        0.0   0.0   0.0   0.0   
15       SAT        0.0   0.0   0.0   0.0   
16       SAT        0.0   0.0   0.0   0.0   
17       SAT        0.0   0.0   0.0   0.0   
18       SAT        0.0   0.0   0.0   0.0   
19       SAT        0.0   0.0   0.0   0.0   
20       SAT        -80.0 -80.0 0.0   0.0   
21       SAT        40.0  40.0  0.0   0.0   
22       SAT        -40.0 -40.0 0.0   0.0   
23       SAT        -40.0 -40.0 0.0   0.0   
24       SAT        40.0  40.0  0.0   0.0   
25       SAT        -80.0 -80.0 0.0   0.0   
26       SAT        -80.0 -80.0 0.0   0.0   
27       SAT        -40.0 -40.0 0.0   0.0   
28       SAT        -80.0 -80.0 0.0   0.0   
29       SAT        0.0   0.0   0.0   0.0   
30       SAT        0.0   0.0   0.0   0.0   
31       SAT        0.0   0.0   0.0   0.0   
32       SAT        0.0   0.0   0.0   0.0   
33       COOP       50.0  50.0  0.0   0.0   
34       COOP       50.0  50.0  0.0   0.0   
35       COOP       50.0  50.0  0.0   0.0   
36       COOP       50.0  50.0  0.0   0.0   
37       COOP       50.0  50.0  0.0   0.0   
38       COOP       50.0  50.0  0.0   0.0   
39       COOP       50.0  50.0  0.0   0.0   
40       COOP       50.0  50.0  0.0   0.0   
41       COOP       50.0  50.0  0.0   0.0   
42       COOP       50.0  50.0  0.0   0.0   
43       COOP       50.0  50.0  0.0   0.0   
44       COOP       50.0  50.0  0.0   0.0   
45       COOP       50.0  50.0  0.0   0.0   
46       COOP       50.0  50.0  0.0   0.0   
47       COOP       50.0  50.0  0.0   0.0   
48       COOP       50.0  50.0  0.0   0.0   
49       COOP       50.0  50.0  0.0   0.0   
50       COOP       50.0  50.0  0.0   0.0   
    }

    test init-2.2 {initial contents: gram_driver} -setup {
        create -drivers 0
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_driver
        }]
    } -cleanup {
        cleanup
    } -result {
driver dtype name  oneliner         last_input 
------ ----- ----- ---------------- ---------- 
0      Trend Trend Long-Term Trends 0          
    }

    test init-2.3 {initial contents: gram_effects} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_effects
        }]
    } -cleanup {
        cleanup
    } -result {
    }

    test init-2.4 {initial contents: gram_contribs} -setup {
        create
    } -body {
        rdb query {
            SELECT * FROM gram_contribs
        }
    } -cleanup {
        cleanup
    } -result {}

    test init-2.5 {initial contents: gram_deltas} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_deltas
        }]
    } -cleanup {
        cleanup
    } -result {
time curve_id delta 
---- -------- ----- 
0    1        0.0   
0    2        0.0   
0    3        0.0   
0    4        0.0   
0    5        0.0   
0    6        0.0   
0    7        0.0   
0    8        0.0   
0    9        0.0   
0    10       0.0   
0    11       0.0   
0    12       0.0   
0    13       0.0   
0    14       0.0   
0    15       0.0   
0    16       0.0   
0    17       0.0   
0    18       0.0   
0    19       0.0   
0    20       0.0   
0    21       0.0   
0    22       0.0   
0    23       0.0   
0    24       0.0   
0    25       0.0   
0    26       0.0   
0    27       0.0   
0    28       0.0   
0    29       0.0   
0    30       0.0   
0    31       0.0   
0    32       0.0   
0    33       0.0   
0    34       0.0   
0    35       0.0   
0    36       0.0   
0    37       0.0   
0    38       0.0   
0    39       0.0   
0    40       0.0   
0    41       0.0   
0    42       0.0   
0    43       0.0   
0    44       0.0   
0    45       0.0   
0    46       0.0   
0    47       0.0   
0    48       0.0   
0    49       0.0   
0    50       0.0   
    }

    test init-2.6 {initial contents: gram_n} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_n
        }]
    } -cleanup {
        cleanup
    } -result {
n_id n  sat   sat0  
---- -- ----- ----- 
1    N1 -30.0 -30.0 
2    N2 -30.0 -30.0 
    }

    test init-2.7 {initial contents: gram_g} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_g
            ORDER BY g_id
        }]
    } -cleanup {
        cleanup
    } -result {
g_id g     gtype sat   sat0  
---- ----- ----- ----- ----- 
1    KURD  CIV   -20.0 -20.0 
2    SHIA  CIV   0.0   0.0   
3    SUNN  CIV   -70.0 -70.0 
4    BLUE  FRC   0.0   0.0   
5    BRIT  FRC   0.0   0.0   
6    OPFOR FRC   0.0   0.0   
7    ORGA  ORG   0.0   0.0   
8    ORGB  ORG   0.0   0.0   
    }

    test init-2.8 {initial contents: gram_c} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_c
            ORDER BY c_id
        }]
    } -cleanup {
        cleanup
    } -result {
c_id c   gtype sat                 sat0                
---- --- ----- ------------------- ------------------- 
1    AUT CIV   -13.333333333333334 -13.333333333333334 
2    CUL CIV   -40.0               -40.0               
3    QOL CIV   -26.666666666666668 -26.666666666666668 
4    SFT CIV   -40.0               -40.0               
5    CAS ORG   0.0                 0.0                 
6    SVC ORG   0.0                 0.0                 
    }

    test init-2.9 {initial contents: gram_mn} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_mn
            ORDER BY mn_id
        }]
    } -cleanup {
        cleanup
    } -result {
mn_id m  n  proximity effects_delay 
----- -- -- --------- ------------- 
1     N1 N1 0         0.0           
2     N1 N2 2         0.0           
3     N2 N1 2         0.0           
4     N2 N2 0         0.0           
    }

    test init-2.10 {initial contents: gram_ng} -setup {
        create
    } -body {
        # OK
        pprint [rdb query {
            SELECT * FROM gram_ng
            ORDER BY ng_id
        }]
    } -cleanup {
        cleanup
    } -result {
ng_id n  g    population rollup_weight effects_factor sat_tracked total_saliency sat   sat0  
----- -- ---- ---------- ------------- -------------- ----------- -------------- ----- ----- 
1     N1 KURD 10000      1.0           1.0            1           4.0            -20.0 -20.0 
2     N1 SHIA 10000      1.0           1.0            1           4.0            0.0   0.0   
3     N1 SUNN 10000      1.0           1.0            1           4.0            -70.0 -70.0 
4     N1 ORGA 0          1.0           1.0            1           2.0            0.0   0.0   
5     N1 ORGB 0          1.0           1.0            1           2.0            0.0   0.0   
6     N2 KURD 10000      1.0           1.0            1           4.0            -20.0 -20.0 
7     N2 SHIA 10000      1.0           1.0            1           4.0            0.0   0.0   
8     N2 SUNN 10000      1.0           1.0            1           4.0            -70.0 -70.0 
9     N2 ORGA 0          1.0           1.0            1           2.0            0.0   0.0   
10    N2 ORGB 0          1.0           1.0            1           2.0            0.0   0.0   
    }

    test init-2.11 {initial contents: gram_nc} -setup {
        create
    } -body {
        # OK
        pprint [rdb query {
            SELECT * FROM gram_nc
            ORDER BY nc_id
        }]
    } -cleanup {
        cleanup
    } -result {
nc_id n  c   sat                 sat0                
----- -- --- ------------------- ------------------- 
1     N1 AUT -13.333333333333334 -13.333333333333334 
2     N1 CUL -40.0               -40.0               
3     N1 QOL -26.666666666666668 -26.666666666666668 
4     N1 SFT -40.0               -40.0               
5     N1 CAS 0.0                 0.0                 
6     N1 SVC 0.0                 0.0                 
7     N2 AUT -13.333333333333334 -13.333333333333334 
8     N2 CUL -40.0               -40.0               
9     N2 QOL -26.666666666666668 -26.666666666666668 
10    N2 SFT -40.0               -40.0               
11    N2 CAS 0.0                 0.0                 
12    N2 SVC 0.0                 0.0                 
    }

    test init-2.12 {initial contents: gram_nfg} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_nfg
            ORDER BY nfg_id
        }]
    } -cleanup {
        cleanup
    } -result {
nfg_id curve_id n  f     g     rel  
------ -------- -- ----- ----- ---- 
1               N1 BLUE  BLUE  1.0  
2               N1 BLUE  BRIT  0.8  
3               N1 BLUE  KURD  0.0  
4               N1 BLUE  OPFOR -0.8 
5               N1 BLUE  ORGA  0.0  
6               N1 BLUE  ORGB  0.0  
7               N1 BLUE  SHIA  0.0  
8               N1 BLUE  SUNN  0.0  
9               N1 BRIT  BLUE  0.8  
10              N1 BRIT  BRIT  1.0  
11              N1 BRIT  KURD  0.0  
12              N1 BRIT  OPFOR -0.8 
13              N1 BRIT  ORGA  0.0  
14              N1 BRIT  ORGB  0.0  
15              N1 BRIT  SHIA  0.0  
16              N1 BRIT  SUNN  0.0  
17     33       N1 KURD  BLUE  0.6  
18     34       N1 KURD  BRIT  0.6  
19              N1 KURD  KURD  1.0  
20     35       N1 KURD  OPFOR -0.6 
21              N1 KURD  ORGA  0.0  
22              N1 KURD  ORGB  0.0  
23              N1 KURD  SHIA  0.6  
24              N1 KURD  SUNN  -0.6 
25              N1 OPFOR BLUE  -0.8 
26              N1 OPFOR BRIT  -0.8 
27              N1 OPFOR KURD  0.0  
28              N1 OPFOR OPFOR 1.0  
29              N1 OPFOR ORGA  0.0  
30              N1 OPFOR ORGB  0.0  
31              N1 OPFOR SHIA  0.0  
32              N1 OPFOR SUNN  0.0  
33              N1 ORGA  BLUE  0.0  
34              N1 ORGA  BRIT  0.0  
35              N1 ORGA  KURD  0.0  
36              N1 ORGA  OPFOR 0.0  
37              N1 ORGA  ORGA  1.0  
38              N1 ORGA  ORGB  0.0  
39              N1 ORGA  SHIA  0.0  
40              N1 ORGA  SUNN  0.0  
41              N1 ORGB  BLUE  0.0  
42              N1 ORGB  BRIT  0.0  
43              N1 ORGB  KURD  0.0  
44              N1 ORGB  OPFOR 0.0  
45              N1 ORGB  ORGA  0.0  
46              N1 ORGB  ORGB  1.0  
47              N1 ORGB  SHIA  0.0  
48              N1 ORGB  SUNN  0.0  
49     36       N1 SHIA  BLUE  0.3  
50     37       N1 SHIA  BRIT  0.3  
51              N1 SHIA  KURD  0.6  
52     38       N1 SHIA  OPFOR -0.3 
53              N1 SHIA  ORGA  0.0  
54              N1 SHIA  ORGB  0.0  
55              N1 SHIA  SHIA  1.0  
56              N1 SHIA  SUNN  0.0  
57     39       N1 SUNN  BLUE  -0.6 
58     40       N1 SUNN  BRIT  -0.6 
59              N1 SUNN  KURD  -0.6 
60     41       N1 SUNN  OPFOR 0.6  
61              N1 SUNN  ORGA  0.0  
62              N1 SUNN  ORGB  0.0  
63              N1 SUNN  SHIA  -0.3 
64              N1 SUNN  SUNN  1.0  
65              N2 BLUE  BLUE  1.0  
66              N2 BLUE  BRIT  0.8  
67              N2 BLUE  KURD  0.0  
68              N2 BLUE  OPFOR -0.8 
69              N2 BLUE  ORGA  0.0  
70              N2 BLUE  ORGB  0.0  
71              N2 BLUE  SHIA  0.0  
72              N2 BLUE  SUNN  0.0  
73              N2 BRIT  BLUE  0.8  
74              N2 BRIT  BRIT  1.0  
75              N2 BRIT  KURD  0.0  
76              N2 BRIT  OPFOR -0.8 
77              N2 BRIT  ORGA  0.0  
78              N2 BRIT  ORGB  0.0  
79              N2 BRIT  SHIA  0.0  
80              N2 BRIT  SUNN  0.0  
81     42       N2 KURD  BLUE  0.6  
82     43       N2 KURD  BRIT  0.6  
83              N2 KURD  KURD  1.0  
84     44       N2 KURD  OPFOR -0.6 
85              N2 KURD  ORGA  0.0  
86              N2 KURD  ORGB  0.0  
87              N2 KURD  SHIA  0.6  
88              N2 KURD  SUNN  -0.6 
89              N2 OPFOR BLUE  -0.8 
90              N2 OPFOR BRIT  -0.8 
91              N2 OPFOR KURD  0.0  
92              N2 OPFOR OPFOR 1.0  
93              N2 OPFOR ORGA  0.0  
94              N2 OPFOR ORGB  0.0  
95              N2 OPFOR SHIA  0.0  
96              N2 OPFOR SUNN  0.0  
97              N2 ORGA  BLUE  0.0  
98              N2 ORGA  BRIT  0.0  
99              N2 ORGA  KURD  0.0  
100             N2 ORGA  OPFOR 0.0  
101             N2 ORGA  ORGA  1.0  
102             N2 ORGA  ORGB  0.0  
103             N2 ORGA  SHIA  0.0  
104             N2 ORGA  SUNN  0.0  
105             N2 ORGB  BLUE  0.0  
106             N2 ORGB  BRIT  0.0  
107             N2 ORGB  KURD  0.0  
108             N2 ORGB  OPFOR 0.0  
109             N2 ORGB  ORGA  0.0  
110             N2 ORGB  ORGB  1.0  
111             N2 ORGB  SHIA  0.0  
112             N2 ORGB  SUNN  0.0  
113    45       N2 SHIA  BLUE  0.3  
114    46       N2 SHIA  BRIT  0.3  
115             N2 SHIA  KURD  0.6  
116    47       N2 SHIA  OPFOR -0.3 
117             N2 SHIA  ORGA  0.0  
118             N2 SHIA  ORGB  0.0  
119             N2 SHIA  SHIA  1.0  
120             N2 SHIA  SUNN  0.0  
121    48       N2 SUNN  BLUE  -0.6 
122    49       N2 SUNN  BRIT  -0.6 
123             N2 SUNN  KURD  -0.6 
124    50       N2 SUNN  OPFOR 0.6  
125             N2 SUNN  ORGA  0.0  
126             N2 SUNN  ORGB  0.0  
127             N2 SUNN  SHIA  -0.3 
128             N2 SUNN  SUNN  1.0  
    }

    test init-2.13 {initial contents: gram_gc} -setup {
        create
    } -body {
        # OK
        pprint [rdb query {
            SELECT * FROM gram_gc
            ORDER BY gc_id
        }]
    } -cleanup {
        cleanup
    } -result {
gc_id g    c   sat   sat0  slope 
----- ---- --- ----- ----- ----- 
1     KURD AUT 0.0   0.0   0.0   
2     KURD CUL 0.0   0.0   0.0   
3     KURD QOL 0.0   0.0   0.0   
4     KURD SFT -80.0 -80.0 0.0   
5     SHIA AUT 40.0  40.0  0.0   
6     SHIA CUL -40.0 -40.0 0.0   
7     SHIA QOL -40.0 -40.0 0.0   
8     SHIA SFT 40.0  40.0  0.0   
9     SUNN AUT -80.0 -80.0 0.0   
10    SUNN CUL -80.0 -80.0 0.0   
11    SUNN QOL -40.0 -40.0 0.0   
12    SUNN SFT -80.0 -80.0 0.0   
13    ORGA CAS 0.0   0.0   0.0   
14    ORGA SVC 0.0   0.0   0.0   
15    ORGB CAS 0.0   0.0   0.0   
16    ORGB SVC 0.0   0.0   0.0   
    }

    test init-2.14 {initial contents: gram_ngc} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_ngc
            ORDER BY ngc_id
        }]
    } -cleanup {
        cleanup
    } -result {
ngc_id ng_id curve_id n  g    c   gtype saliency 
------ ----- -------- -- ---- --- ----- -------- 
1      1     1        N1 KURD AUT CIV   1.0      
2      1     2        N1 KURD CUL CIV   1.0      
3      1     3        N1 KURD QOL CIV   1.0      
4      1     4        N1 KURD SFT CIV   1.0      
5      2     5        N1 SHIA AUT CIV   1.0      
6      2     6        N1 SHIA CUL CIV   1.0      
7      2     7        N1 SHIA QOL CIV   1.0      
8      2     8        N1 SHIA SFT CIV   1.0      
9      3     9        N1 SUNN AUT CIV   1.0      
10     3     10       N1 SUNN CUL CIV   1.0      
11     3     11       N1 SUNN QOL CIV   1.0      
12     3     12       N1 SUNN SFT CIV   1.0      
13     4     13       N1 ORGA CAS ORG   1.0      
14     4     14       N1 ORGA SVC ORG   1.0      
15     5     15       N1 ORGB CAS ORG   1.0      
16     5     16       N1 ORGB SVC ORG   1.0      
17     6     17       N2 KURD AUT CIV   1.0      
18     6     18       N2 KURD CUL CIV   1.0      
19     6     19       N2 KURD QOL CIV   1.0      
20     6     20       N2 KURD SFT CIV   1.0      
21     7     21       N2 SHIA AUT CIV   1.0      
22     7     22       N2 SHIA CUL CIV   1.0      
23     7     23       N2 SHIA QOL CIV   1.0      
24     7     24       N2 SHIA SFT CIV   1.0      
25     8     25       N2 SUNN AUT CIV   1.0      
26     8     26       N2 SUNN CUL CIV   1.0      
27     8     27       N2 SUNN QOL CIV   1.0      
28     8     28       N2 SUNN SFT CIV   1.0      
29     9     29       N2 ORGA CAS ORG   1.0      
30     9     30       N2 ORGA SVC ORG   1.0      
31     10    31       N2 ORGB CAS ORG   1.0      
32     10    32       N2 ORGB SVC ORG   1.0      
    }


    test init-2.15 {initial contents: gram_sat} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_sat
            ORDER BY ngc_id
        }]
    } -cleanup {
        cleanup
    } -result {
ngc_id ng_id n  g    c   gtype saliency curve_id sat0  sat   delta slope 
------ ----- -- ---- --- ----- -------- -------- ----- ----- ----- ----- 
1      1     N1 KURD AUT CIV   1.0      1        0.0   0.0   0.0   0.0   
2      1     N1 KURD CUL CIV   1.0      2        0.0   0.0   0.0   0.0   
3      1     N1 KURD QOL CIV   1.0      3        0.0   0.0   0.0   0.0   
4      1     N1 KURD SFT CIV   1.0      4        -80.0 -80.0 0.0   0.0   
5      2     N1 SHIA AUT CIV   1.0      5        40.0  40.0  0.0   0.0   
6      2     N1 SHIA CUL CIV   1.0      6        -40.0 -40.0 0.0   0.0   
7      2     N1 SHIA QOL CIV   1.0      7        -40.0 -40.0 0.0   0.0   
8      2     N1 SHIA SFT CIV   1.0      8        40.0  40.0  0.0   0.0   
9      3     N1 SUNN AUT CIV   1.0      9        -80.0 -80.0 0.0   0.0   
10     3     N1 SUNN CUL CIV   1.0      10       -80.0 -80.0 0.0   0.0   
11     3     N1 SUNN QOL CIV   1.0      11       -40.0 -40.0 0.0   0.0   
12     3     N1 SUNN SFT CIV   1.0      12       -80.0 -80.0 0.0   0.0   
13     4     N1 ORGA CAS ORG   1.0      13       0.0   0.0   0.0   0.0   
14     4     N1 ORGA SVC ORG   1.0      14       0.0   0.0   0.0   0.0   
15     5     N1 ORGB CAS ORG   1.0      15       0.0   0.0   0.0   0.0   
16     5     N1 ORGB SVC ORG   1.0      16       0.0   0.0   0.0   0.0   
17     6     N2 KURD AUT CIV   1.0      17       0.0   0.0   0.0   0.0   
18     6     N2 KURD CUL CIV   1.0      18       0.0   0.0   0.0   0.0   
19     6     N2 KURD QOL CIV   1.0      19       0.0   0.0   0.0   0.0   
20     6     N2 KURD SFT CIV   1.0      20       -80.0 -80.0 0.0   0.0   
21     7     N2 SHIA AUT CIV   1.0      21       40.0  40.0  0.0   0.0   
22     7     N2 SHIA CUL CIV   1.0      22       -40.0 -40.0 0.0   0.0   
23     7     N2 SHIA QOL CIV   1.0      23       -40.0 -40.0 0.0   0.0   
24     7     N2 SHIA SFT CIV   1.0      24       40.0  40.0  0.0   0.0   
25     8     N2 SUNN AUT CIV   1.0      25       -80.0 -80.0 0.0   0.0   
26     8     N2 SUNN CUL CIV   1.0      26       -80.0 -80.0 0.0   0.0   
27     8     N2 SUNN QOL CIV   1.0      27       -40.0 -40.0 0.0   0.0   
28     8     N2 SUNN SFT CIV   1.0      28       -80.0 -80.0 0.0   0.0   
29     9     N2 ORGA CAS ORG   1.0      29       0.0   0.0   0.0   0.0   
30     9     N2 ORGA SVC ORG   1.0      30       0.0   0.0   0.0   0.0   
31     10    N2 ORGB CAS ORG   1.0      31       0.0   0.0   0.0   0.0   
32     10    N2 ORGB SVC ORG   1.0      32       0.0   0.0   0.0   0.0   
    }

    test init-2.16 {initial contents: gram_sat_influence} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_sat_influence
            ORDER BY direct_ng, influenced_ng
        }]
    } -cleanup {
        cleanup
    } -result {
direct_ng influenced_ng prox delay factor 
--------- ------------- ---- ----- ------ 
1         1             -1   0     1.0    
1         2             0    0     0.6    
1         3             0    0     -0.6   
1         6             2    0     1.0    
1         7             2    0     0.6    
1         8             2    0     -0.6   
2         1             0    0     0.6    
2         2             -1   0     1.0    
2         3             0    0     -0.3   
2         6             2    0     0.6    
2         7             2    0     1.0    
2         8             2    0     -0.3   
3         1             0    0     -0.6   
3         3             -1   0     1.0    
3         6             2    0     -0.6   
3         8             2    0     1.0    
4         4             -1   0     1.0    
4         9             2    0     1.0    
5         5             -1   0     1.0    
5         10            2    0     1.0    
6         1             2    0     1.0    
6         2             2    0     0.6    
6         3             2    0     -0.6   
6         6             -1   0     1.0    
6         7             0    0     0.6    
6         8             0    0     -0.6   
7         1             2    0     0.6    
7         2             2    0     1.0    
7         3             2    0     -0.3   
7         6             0    0     0.6    
7         7             -1   0     1.0    
7         8             0    0     -0.3   
8         1             2    0     -0.6   
8         3             2    0     1.0    
8         6             0    0     -0.6   
8         8             -1   0     1.0    
9         4             2    0     1.0    
9         9             -1   0     1.0    
10        5             2    0     1.0    
10        10            -1   0     1.0    
    }

    test init-2.17 {initial contents: gram_sat_influence_view} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_sat_influence_view
            ORDER BY direct_ng, curve_id
        }]
    } -cleanup {
        cleanup
    } -result {
prox delay factor direct_ng direct_id dn dg   c   curve_id n  g    
---- ----- ------ --------- --------- -- ---- --- -------- -- ---- 
-1   0     1.0    1         1         N1 KURD AUT 1        N1 KURD 
-1   0     1.0    1         2         N1 KURD CUL 2        N1 KURD 
-1   0     1.0    1         3         N1 KURD QOL 3        N1 KURD 
-1   0     1.0    1         4         N1 KURD SFT 4        N1 KURD 
0    0     0.6    1         1         N1 KURD AUT 5        N1 SHIA 
0    0     0.6    1         2         N1 KURD CUL 6        N1 SHIA 
0    0     0.6    1         3         N1 KURD QOL 7        N1 SHIA 
0    0     0.6    1         4         N1 KURD SFT 8        N1 SHIA 
0    0     -0.6   1         1         N1 KURD AUT 9        N1 SUNN 
0    0     -0.6   1         2         N1 KURD CUL 10       N1 SUNN 
0    0     -0.6   1         3         N1 KURD QOL 11       N1 SUNN 
0    0     -0.6   1         4         N1 KURD SFT 12       N1 SUNN 
2    0     1.0    1         1         N1 KURD AUT 17       N2 KURD 
2    0     1.0    1         2         N1 KURD CUL 18       N2 KURD 
2    0     1.0    1         3         N1 KURD QOL 19       N2 KURD 
2    0     1.0    1         4         N1 KURD SFT 20       N2 KURD 
2    0     0.6    1         1         N1 KURD AUT 21       N2 SHIA 
2    0     0.6    1         2         N1 KURD CUL 22       N2 SHIA 
2    0     0.6    1         3         N1 KURD QOL 23       N2 SHIA 
2    0     0.6    1         4         N1 KURD SFT 24       N2 SHIA 
2    0     -0.6   1         1         N1 KURD AUT 25       N2 SUNN 
2    0     -0.6   1         2         N1 KURD CUL 26       N2 SUNN 
2    0     -0.6   1         3         N1 KURD QOL 27       N2 SUNN 
2    0     -0.6   1         4         N1 KURD SFT 28       N2 SUNN 
0    0     0.6    2         5         N1 SHIA AUT 1        N1 KURD 
0    0     0.6    2         6         N1 SHIA CUL 2        N1 KURD 
0    0     0.6    2         7         N1 SHIA QOL 3        N1 KURD 
0    0     0.6    2         8         N1 SHIA SFT 4        N1 KURD 
-1   0     1.0    2         5         N1 SHIA AUT 5        N1 SHIA 
-1   0     1.0    2         6         N1 SHIA CUL 6        N1 SHIA 
-1   0     1.0    2         7         N1 SHIA QOL 7        N1 SHIA 
-1   0     1.0    2         8         N1 SHIA SFT 8        N1 SHIA 
0    0     -0.3   2         5         N1 SHIA AUT 9        N1 SUNN 
0    0     -0.3   2         6         N1 SHIA CUL 10       N1 SUNN 
0    0     -0.3   2         7         N1 SHIA QOL 11       N1 SUNN 
0    0     -0.3   2         8         N1 SHIA SFT 12       N1 SUNN 
2    0     0.6    2         5         N1 SHIA AUT 17       N2 KURD 
2    0     0.6    2         6         N1 SHIA CUL 18       N2 KURD 
2    0     0.6    2         7         N1 SHIA QOL 19       N2 KURD 
2    0     0.6    2         8         N1 SHIA SFT 20       N2 KURD 
2    0     1.0    2         5         N1 SHIA AUT 21       N2 SHIA 
2    0     1.0    2         6         N1 SHIA CUL 22       N2 SHIA 
2    0     1.0    2         7         N1 SHIA QOL 23       N2 SHIA 
2    0     1.0    2         8         N1 SHIA SFT 24       N2 SHIA 
2    0     -0.3   2         5         N1 SHIA AUT 25       N2 SUNN 
2    0     -0.3   2         6         N1 SHIA CUL 26       N2 SUNN 
2    0     -0.3   2         7         N1 SHIA QOL 27       N2 SUNN 
2    0     -0.3   2         8         N1 SHIA SFT 28       N2 SUNN 
0    0     -0.6   3         9         N1 SUNN AUT 1        N1 KURD 
0    0     -0.6   3         10        N1 SUNN CUL 2        N1 KURD 
0    0     -0.6   3         11        N1 SUNN QOL 3        N1 KURD 
0    0     -0.6   3         12        N1 SUNN SFT 4        N1 KURD 
-1   0     1.0    3         9         N1 SUNN AUT 9        N1 SUNN 
-1   0     1.0    3         10        N1 SUNN CUL 10       N1 SUNN 
-1   0     1.0    3         11        N1 SUNN QOL 11       N1 SUNN 
-1   0     1.0    3         12        N1 SUNN SFT 12       N1 SUNN 
2    0     -0.6   3         9         N1 SUNN AUT 17       N2 KURD 
2    0     -0.6   3         10        N1 SUNN CUL 18       N2 KURD 
2    0     -0.6   3         11        N1 SUNN QOL 19       N2 KURD 
2    0     -0.6   3         12        N1 SUNN SFT 20       N2 KURD 
2    0     1.0    3         9         N1 SUNN AUT 25       N2 SUNN 
2    0     1.0    3         10        N1 SUNN CUL 26       N2 SUNN 
2    0     1.0    3         11        N1 SUNN QOL 27       N2 SUNN 
2    0     1.0    3         12        N1 SUNN SFT 28       N2 SUNN 
-1   0     1.0    4         13        N1 ORGA CAS 13       N1 ORGA 
-1   0     1.0    4         14        N1 ORGA SVC 14       N1 ORGA 
2    0     1.0    4         13        N1 ORGA CAS 29       N2 ORGA 
2    0     1.0    4         14        N1 ORGA SVC 30       N2 ORGA 
-1   0     1.0    5         15        N1 ORGB CAS 15       N1 ORGB 
-1   0     1.0    5         16        N1 ORGB SVC 16       N1 ORGB 
2    0     1.0    5         15        N1 ORGB CAS 31       N2 ORGB 
2    0     1.0    5         16        N1 ORGB SVC 32       N2 ORGB 
2    0     1.0    6         17        N2 KURD AUT 1        N1 KURD 
2    0     1.0    6         18        N2 KURD CUL 2        N1 KURD 
2    0     1.0    6         19        N2 KURD QOL 3        N1 KURD 
2    0     1.0    6         20        N2 KURD SFT 4        N1 KURD 
2    0     0.6    6         17        N2 KURD AUT 5        N1 SHIA 
2    0     0.6    6         18        N2 KURD CUL 6        N1 SHIA 
2    0     0.6    6         19        N2 KURD QOL 7        N1 SHIA 
2    0     0.6    6         20        N2 KURD SFT 8        N1 SHIA 
2    0     -0.6   6         17        N2 KURD AUT 9        N1 SUNN 
2    0     -0.6   6         18        N2 KURD CUL 10       N1 SUNN 
2    0     -0.6   6         19        N2 KURD QOL 11       N1 SUNN 
2    0     -0.6   6         20        N2 KURD SFT 12       N1 SUNN 
-1   0     1.0    6         17        N2 KURD AUT 17       N2 KURD 
-1   0     1.0    6         18        N2 KURD CUL 18       N2 KURD 
-1   0     1.0    6         19        N2 KURD QOL 19       N2 KURD 
-1   0     1.0    6         20        N2 KURD SFT 20       N2 KURD 
0    0     0.6    6         17        N2 KURD AUT 21       N2 SHIA 
0    0     0.6    6         18        N2 KURD CUL 22       N2 SHIA 
0    0     0.6    6         19        N2 KURD QOL 23       N2 SHIA 
0    0     0.6    6         20        N2 KURD SFT 24       N2 SHIA 
0    0     -0.6   6         17        N2 KURD AUT 25       N2 SUNN 
0    0     -0.6   6         18        N2 KURD CUL 26       N2 SUNN 
0    0     -0.6   6         19        N2 KURD QOL 27       N2 SUNN 
0    0     -0.6   6         20        N2 KURD SFT 28       N2 SUNN 
2    0     0.6    7         21        N2 SHIA AUT 1        N1 KURD 
2    0     0.6    7         22        N2 SHIA CUL 2        N1 KURD 
2    0     0.6    7         23        N2 SHIA QOL 3        N1 KURD 
2    0     0.6    7         24        N2 SHIA SFT 4        N1 KURD 
2    0     1.0    7         21        N2 SHIA AUT 5        N1 SHIA 
2    0     1.0    7         22        N2 SHIA CUL 6        N1 SHIA 
2    0     1.0    7         23        N2 SHIA QOL 7        N1 SHIA 
2    0     1.0    7         24        N2 SHIA SFT 8        N1 SHIA 
2    0     -0.3   7         21        N2 SHIA AUT 9        N1 SUNN 
2    0     -0.3   7         22        N2 SHIA CUL 10       N1 SUNN 
2    0     -0.3   7         23        N2 SHIA QOL 11       N1 SUNN 
2    0     -0.3   7         24        N2 SHIA SFT 12       N1 SUNN 
0    0     0.6    7         21        N2 SHIA AUT 17       N2 KURD 
0    0     0.6    7         22        N2 SHIA CUL 18       N2 KURD 
0    0     0.6    7         23        N2 SHIA QOL 19       N2 KURD 
0    0     0.6    7         24        N2 SHIA SFT 20       N2 KURD 
-1   0     1.0    7         21        N2 SHIA AUT 21       N2 SHIA 
-1   0     1.0    7         22        N2 SHIA CUL 22       N2 SHIA 
-1   0     1.0    7         23        N2 SHIA QOL 23       N2 SHIA 
-1   0     1.0    7         24        N2 SHIA SFT 24       N2 SHIA 
0    0     -0.3   7         21        N2 SHIA AUT 25       N2 SUNN 
0    0     -0.3   7         22        N2 SHIA CUL 26       N2 SUNN 
0    0     -0.3   7         23        N2 SHIA QOL 27       N2 SUNN 
0    0     -0.3   7         24        N2 SHIA SFT 28       N2 SUNN 
2    0     -0.6   8         25        N2 SUNN AUT 1        N1 KURD 
2    0     -0.6   8         26        N2 SUNN CUL 2        N1 KURD 
2    0     -0.6   8         27        N2 SUNN QOL 3        N1 KURD 
2    0     -0.6   8         28        N2 SUNN SFT 4        N1 KURD 
2    0     1.0    8         25        N2 SUNN AUT 9        N1 SUNN 
2    0     1.0    8         26        N2 SUNN CUL 10       N1 SUNN 
2    0     1.0    8         27        N2 SUNN QOL 11       N1 SUNN 
2    0     1.0    8         28        N2 SUNN SFT 12       N1 SUNN 
0    0     -0.6   8         25        N2 SUNN AUT 17       N2 KURD 
0    0     -0.6   8         26        N2 SUNN CUL 18       N2 KURD 
0    0     -0.6   8         27        N2 SUNN QOL 19       N2 KURD 
0    0     -0.6   8         28        N2 SUNN SFT 20       N2 KURD 
-1   0     1.0    8         25        N2 SUNN AUT 25       N2 SUNN 
-1   0     1.0    8         26        N2 SUNN CUL 26       N2 SUNN 
-1   0     1.0    8         27        N2 SUNN QOL 27       N2 SUNN 
-1   0     1.0    8         28        N2 SUNN SFT 28       N2 SUNN 
2    0     1.0    9         29        N2 ORGA CAS 13       N1 ORGA 
2    0     1.0    9         30        N2 ORGA SVC 14       N1 ORGA 
-1   0     1.0    9         29        N2 ORGA CAS 29       N2 ORGA 
-1   0     1.0    9         30        N2 ORGA SVC 30       N2 ORGA 
2    0     1.0    10        31        N2 ORGB CAS 15       N1 ORGB 
2    0     1.0    10        32        N2 ORGB SVC 16       N1 ORGB 
-1   0     1.0    10        31        N2 ORGB CAS 31       N2 ORGB 
-1   0     1.0    10        32        N2 ORGB SVC 32       N2 ORGB 
    }

    test init-2.18 {initial contents: gram_sat_effects} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_sat_effects
        }]
    } -cleanup {
        cleanup
    } -result {
    }

    test init-2.19 {initial contents: gram_sat_contribs} -setup {
        create
    } -body {
        rdb query {
            SELECT * FROM gram_sat_contribs
        }
    } -cleanup {
        cleanup
    } -result {}


    test init-2.20 {initial contents: gram_coop} -setup {
        create
    } -body {
        # OK
        pprint [rdb query {
            SELECT * FROM gram_coop
            ORDER BY nfg_id
        }]
    } -cleanup {
        cleanup
    } -result {
nfg_id curve_id n  f    g     coop0 coop delta slope 
------ -------- -- ---- ----- ----- ---- ----- ----- 
17     33       N1 KURD BLUE  50.0  50.0 0.0   0.0   
18     34       N1 KURD BRIT  50.0  50.0 0.0   0.0   
20     35       N1 KURD OPFOR 50.0  50.0 0.0   0.0   
49     36       N1 SHIA BLUE  50.0  50.0 0.0   0.0   
50     37       N1 SHIA BRIT  50.0  50.0 0.0   0.0   
52     38       N1 SHIA OPFOR 50.0  50.0 0.0   0.0   
57     39       N1 SUNN BLUE  50.0  50.0 0.0   0.0   
58     40       N1 SUNN BRIT  50.0  50.0 0.0   0.0   
60     41       N1 SUNN OPFOR 50.0  50.0 0.0   0.0   
81     42       N2 KURD BLUE  50.0  50.0 0.0   0.0   
82     43       N2 KURD BRIT  50.0  50.0 0.0   0.0   
84     44       N2 KURD OPFOR 50.0  50.0 0.0   0.0   
113    45       N2 SHIA BLUE  50.0  50.0 0.0   0.0   
114    46       N2 SHIA BRIT  50.0  50.0 0.0   0.0   
116    47       N2 SHIA OPFOR 50.0  50.0 0.0   0.0   
121    48       N2 SUNN BLUE  50.0  50.0 0.0   0.0   
122    49       N2 SUNN BRIT  50.0  50.0 0.0   0.0   
124    50       N2 SUNN OPFOR 50.0  50.0 0.0   0.0   
    }

    test init-2.21 {initial contents: gram_frc_ng} -setup {
        create
    } -body {
        # OK
        pprint [rdb query {
            SELECT * FROM gram_frc_ng
            ORDER BY frc_ng_id
        }]
    } -cleanup {
        cleanup
    } -result {
frc_ng_id n  g     coop coop0 
--------- -- ----- ---- ----- 
1         N1 BLUE  50.0 50.0  
2         N1 BRIT  50.0 50.0  
3         N1 OPFOR 50.0 50.0  
4         N2 BLUE  50.0 50.0  
5         N2 BRIT  50.0 50.0  
6         N2 OPFOR 50.0 50.0  
    }

    #-------------------------------------------------------------------
    # update

    test update_population-1.1 {Updates population values} -setup {
        create
    } -body {
        jr update population N1 KURD 1000 N1 SHIA 2000 N1 SUNN 3000
        pprint [rdb query {
            SELECT n,g,population FROM gram_ng
            ORDER BY ng_id
        }]
    } -cleanup {
        cleanup
    } -result {
n  g    population 
-- ---- ---------- 
N1 KURD 1000       
N1 SHIA 2000       
N1 SUNN 3000       
N1 ORGA 0          
N1 ORGB 0          
N2 KURD 10000      
N2 SHIA 10000      
N2 SUNN 10000      
N2 ORGA 0          
N2 ORGB 0          
    }



    #-------------------------------------------------------------------
    # clear


    test clear-1.1 {No longer initialized} -setup {
        create
    } -body {
        set a [jr initialized]
        jr clear
        set b [jr initialized]
        
        list $a $b
    } -cleanup {
        cleanup
    } -result {1 0}


    test clear-1.2 {Spot check: empty tables} -setup {
        create
    } -body {
        jr clear

        rdb eval {
            SELECT count(curve_id) AS count
            FROM gram_curves
        } {}

        set count
    } -cleanup {
        cleanup
    } -result {0}


   
    #-------------------------------------------------------------------
    # driver

    test driver-1.1 {add new driver IDs} -setup {
        create
        rdb eval {DELETE FROM gram_driver}
    } -body {
        list [jr driver add] [jr driver add] [jr driver add]
    } -cleanup {
        cleanup
    } -result {1 2 3}

    test driver-1.2 {Default oneliner is "unknown"} -setup {
        create
    } -body {
        set driver [jr driver add]
        rdb onecolumn {
            SELECT oneliner
            FROM gram_driver
            WHERE driver=$driver
        }
    } -cleanup {
        cleanup
    } -result {unknown}

    test driver-1.3 {Default input is 0} -setup {
        create
    } -body {
        set driver [jr driver add]
        rdb onecolumn {
            SELECT last_input
            FROM gram_driver
            WHERE driver=$driver
        }
    } -cleanup {
        cleanup
    } -result {0}

    test driver-1.4 {Default dtype is "unknown"} -setup {
        create
    } -body {
        set driver [jr driver add]
        rdb onecolumn {
            SELECT dtype
            FROM gram_driver
            WHERE driver=$driver
        }
    } -cleanup {
        cleanup
    } -result {unknown}

    test driver-2.1 {cget invalid driver} -setup {
        create
    } -body {
        jr driver cget 13 -oneliner
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Cannot cget, unknown Driver ID: "13"}

    test driver-2.2 {cget invalid option} -setup {
        create
    } -body {
        set driver [jr driver add]
        jr driver cget $driver -nonesuch
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Unknown option: "-nonesuch"}

    test driver-2.3 {cget oneliner} -setup {
        create
    } -body {
        set driver [jr driver add]
        jr driver cget $driver -oneliner
    } -cleanup {
        cleanup
    } -result {unknown}

    test driver-2.4 {cget name} -setup {
        create
        rdb eval {DELETE FROM gram_driver}
    } -body {
        set driver [jr driver add]
        jr driver cget $driver -name
    } -cleanup {
        cleanup
    } -result {1}

    test driver-2.5 {cget dtype} -setup {
        create
        rdb eval {DELETE FROM gram_driver}
    } -body {
        set driver [jr driver add]
        jr driver cget $driver -dtype
    } -cleanup {
        cleanup
    } -result {unknown}

    test driver-3.1 {configure invalid driver} -setup {
        create
    } -body {
        jr driver configure 13 -oneliner "Wow!"
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Cannot configure, unknown Driver ID: "13"}

    test driver-3.2 {configure invalid option} -setup {
        create
    } -body {
        set driver [jr driver add]
        jr driver configure $driver -nonesuch "Wow!"
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Unknown option: "-nonesuch"}

    test driver-3.3 {configure oneliner} -setup {
        create
    } -body {
        set driver [jr driver add]
        jr driver configure $driver -oneliner "Wow!"
        jr driver cget $driver -oneliner
    } -cleanup {
        cleanup
    } -result {Wow!}

    test driver-3.3 {configure name} -setup {
        create
    } -body {
        set driver [jr driver add]
        jr driver configure $driver -name "Fred"
        jr driver cget $driver -name
    } -cleanup {
        cleanup
    } -result {Fred}

    test driver-3.4 {configure dtype} -setup {
        create
    } -body {
        set driver [jr driver add]
        jr driver configure $driver -dtype "CIVCAS"
        jr driver cget $driver -dtype
    } -cleanup {
        cleanup
    } -result {CIVCAS}

    test driver-4.1 {add with invalid option} -setup {
        create
        rdb eval {DELETE FROM gram_driver}
    } -body {
        catch {jr driver add -nonesuch "Wow!"} result
        set count [rdb onecolumn {
            SELECT COUNT(driver) FROM gram_driver
        }]

        list $count $result
    } -cleanup {
        cleanup
    } -result {0 {Unknown option: "-nonesuch"}} 


    test driver-4.2 {add with options} -setup {
        create
    } -body {
        set driver [jr driver add -name Fred -oneliner "Wow!" -dtype "CIVCAS"]

        list \
            [jr driver cget $driver -name]     \
            [jr driver cget $driver -oneliner] \
            [jr driver cget $driver -dtype]
    } -cleanup {
        cleanup
    } -result {Fred Wow! CIVCAS}

    #-------------------------------------------------------------------
    # time/advance

    test time-1.1 {time is zero initially} -setup {
        create
    } -body {
        jr time
    } -cleanup {
        cleanup
    } -result {0}
    
    test time-2.1 {time can advance} -setup {
        create
    } -body {
        myclock advance 5
        jr advance
        list [myclock now] [jr time]
    } -cleanup {
        cleanup
    } -result {5 5}
    
    test time-3.1 {init returns time to simclock time} -setup {
        create
    } -body {
        myclock advance 5
        jr advance
        myclock reset
        jr init
        list [myclock now] [jr time]
    } -cleanup {
        cleanup
    } -result {0 0}

    #-------------------------------------------------------------------
    # Tables gram_sat, gram_ngc
    #
    # This section doesn't test the effect of satisfaction inputs
    # or adjustments on these tables; that will be done when the 
    # "sat adjust", "sat level", and "sat slope" methods are tested.

    # 1.*: Initial values

    test table_gram_sat-1.1 {sat=sat0 at time 0} -setup {
        create
    } -body {
        tableDiffCols gram_sat {n g c} sat sat0
    } -cleanup {
        cleanup
    } -result {}

    test table_gram_sat-1.2 {slope is 0.0 at time 0} -setup {
        create
    } -body {
        rdb onecolumn {
            SELECT count(ngc_id) FROM gram_sat
            WHERE slope != 0.0
        }
    } -cleanup {
        cleanup
    } -result {0}
    

    #-------------------------------------------------------------------
    # Table gram_gc

    # 1.*: Initial values

    test table_gram_gc-1.1 {Initial value: sat} -setup {
        create
    } -body {
        # Given our current test.simdb, the neighborhood inputs are
        # all identical.  Further, all CIV pgroups are represented in
        # each neighborhood.  Consequently, sat.gc should initially
        # be the same as sat.ngc for all neighborhoods and groups.
        rdb eval {
            SELECT count(ngc_id)
            FROM gram_sat JOIN gram_gc USING (g,c)
            WHERE gram_sat.sat    != gram_gc.sat
        }
    } -cleanup {
        cleanup
    } -result {0}

    test table_gram_gc-1.2 {Initial value: sat0} -setup {
        create
    } -body {
        # At time 0, sat and sat0 should be the same.
        tableDiffCols gram_gc {g c} sat sat0
    } -cleanup {
        cleanup
    } -result {}
    
    test table_gram_gc-1.3 {Initial value: slope} -setup {
        create
    } -body {
        rdb onecolumn {
            SELECT count(gc_id) FROM gram_gc
            WHERE slope != 0.0
        }
    } -cleanup {
        cleanup
    } -result {0}
    

    #-------------------------------------------------------------------
    # Table gram_ng

    test table_gram_ng-1.1 {value at time 0} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT n, g, sat FROM gram_ng
            ORDER BY ng_id
        }]
    } -cleanup {
        cleanup
    } -result {
n  g    sat   
-- ---- ----- 
N1 KURD -20.0 
N1 SHIA 0.0   
N1 SUNN -70.0 
N1 ORGA 0.0   
N1 ORGB 0.0   
N2 KURD -20.0 
N2 SHIA 0.0   
N2 SUNN -70.0 
N2 ORGA 0.0   
N2 ORGB 0.0   
    }

    test table_gram_ng-1.2 {sat.ng == sat0.ng at time 0} -setup {
        create
    } -body {
        tableDiffCols gram_ng {n g} sat sat0
    } -cleanup {
        cleanup
    } -result {}

    # table_gram_ng-1.3: test deleted, depended on trend0

    test table_gram_ng-1.4 {value with different saliencies} -setup {
        create
    } -body {
        rdb eval {
            UPDATE gram_ngc
            SET saliency=0.5
            WHERE n='N1' AND g='SHIA' AND c='AUT';
        }

        jr init
        
        pprint [rdb query {
            SELECT n, g, format('%.1f',sat) FROM gram_ng
            ORDER BY ng_id
        }]
    } -cleanup {
        cleanup
    } -result {
n  g    format('%.1f',sat) 
-- ---- ------------------ 
N1 KURD -20.0              
N1 SHIA -5.7               
N1 SUNN -70.0              
N1 ORGA 0.0                
N1 ORGB 0.0                
N2 KURD -20.0              
N2 SHIA 0.0                
N2 SUNN -70.0              
N2 ORGA 0.0                
N2 ORGB 0.0                
    }

    #-------------------------------------------------------------------
    # Table gram_nc

    test table_gram_nc-1.1 {value at time 0} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT n, c, format('%.1f',sat) FROM gram_nc
            ORDER BY nc_id
        }]
    } -cleanup {
        cleanup
    } -result {
n  c   format('%.1f',sat) 
-- --- ------------------ 
N1 AUT -13.3              
N1 CUL -40.0              
N1 QOL -26.7              
N1 SFT -40.0              
N1 CAS 0.0                
N1 SVC 0.0                
N2 AUT -13.3              
N2 CUL -40.0              
N2 QOL -26.7              
N2 SFT -40.0              
N2 CAS 0.0                
N2 SVC 0.0                
    }

    test table_gram_nc-1.2 {sat.nc == sat0.nc at time 0} -setup {
        create
    } -body {
        tableDiffCols gram_nc {n c} sat sat0
    } -cleanup {
        cleanup
    } -result {}

    # table_gram_nc-1.3: test deleted, depended on trend0

    test table_gram_nc-1.4 {value with different saliencies} -setup {
        create
    } -body {
        rdb eval {
            UPDATE gram_ngc
            SET saliency=0.5
            WHERE n='N1' AND g='SHIA' AND c='AUT';
        }

        jr init
        
        pprint [rdb query {
            SELECT n, c, format('%.1f',sat) FROM gram_nc
            ORDER BY nc_id
        }]
    } -cleanup {
        cleanup
    } -result {
n  c   format('%.1f',sat) 
-- --- ------------------ 
N1 AUT -24.0              
N1 CUL -40.0              
N1 QOL -26.7              
N1 SFT -40.0              
N1 CAS 0.0                
N1 SVC 0.0                
N2 AUT -13.3              
N2 CUL -40.0              
N2 QOL -26.7              
N2 SFT -40.0              
N2 CAS 0.0                
N2 SVC 0.0                
    }

    test table_gram_nc-1.5 {value with different rollup_weights} -setup {
        create
    } -body {
        rdb eval {
            UPDATE gram_ng
            SET rollup_weight=2.0
            WHERE n='N1' AND g='SHIA';
        }

        jr init
        
        pprint [rdb query {
            SELECT n, c, format('%.1f',sat) FROM gram_nc
            ORDER BY nc_id
        }]
    } -cleanup {
        cleanup
    } -result {
n  c   format('%.1f',sat) 
-- --- ------------------ 
N1 AUT 0.0                
N1 CUL -40.0              
N1 QOL -30.0              
N1 SFT -20.0              
N1 CAS 0.0                
N1 SVC 0.0                
N2 AUT -13.3              
N2 CUL -40.0              
N2 QOL -26.7              
N2 SFT -40.0              
N2 CAS 0.0                
N2 SVC 0.0                
    }

    #-------------------------------------------------------------------
    # Table gram_n

    test table_gram_n-1.1 {value at time 0} -setup {
        create
    } -body {
        # Numbers checked by hand
        pprint [rdb query {
            SELECT n,format('%8.4f',sat) FROM gram_n
        }]
    } -cleanup {
        cleanup
    } -result {
n  format('%8.4f',sat) 
-- ------------------- 
N1 -30.0000            
N2 -30.0000            
    }
    
    test table_gram_n-1.2 {sat.n == sat0.n at time 0} -setup {
        create
    } -body {
        tableDiffCols gram_n {n} sat sat0
    } -cleanup {
        cleanup
    } -result {}

    # table_gram_n-1.3: test deleted, depended on trend0

    test table_gram_n-1.4 {value with different saliences} -setup {
        create
    } -body {
        rdb eval {
            UPDATE gram_ngc
            SET saliency=0.5
            WHERE n='N1' AND g='SHIA' AND c='AUT';
        }

        jr init

        # Numbers checked by hand
        pprint [rdb query {
            SELECT n,format('%8.4f',sat) FROM gram_n
        }]
    } -cleanup {
        cleanup
    } -result {
n  format('%8.4f',sat) 
-- ------------------- 
N1 -33.0435            
N2 -30.0000            
    }

    test table_gram_n-1.5 {value with different rollup_weights} -setup {
        create
    } -body {
        rdb eval {
            UPDATE gram_ng
            SET rollup_weight=2.0
            WHERE n='N1' AND g='SHIA';
        }

        jr init

        # Numbers checked by hand
        pprint [rdb query {
            SELECT n,format('%8.4f',sat) FROM gram_n
        }]
    } -cleanup {
        cleanup
    } -result {
n  format('%8.4f',sat) 
-- ------------------- 
N1 -22.5000            
N2 -30.0000            
    }

    #-------------------------------------------------------------------
    # Table gram_g

    test table_gram_g-1.1 {value at time 0} -setup {
        create
    } -body {
        # Numbers checked by hand
        pprint [rdb query {
            SELECT g,format('%.4f',sat) FROM gram_g
            ORDER BY g_id
        }]
    } -cleanup {
        cleanup
    } -result {
g     format('%.4f',sat) 
----- ------------------ 
KURD  -20.0000           
SHIA  0.0000             
SUNN  -70.0000           
BLUE  0.0000             
BRIT  0.0000             
OPFOR 0.0000             
ORGA  0.0000             
ORGB  0.0000             
    }
    
    test table_gram_g-1.2 {sat.g == sat0.g at time 0} -setup {
        create
    } -body {
        tableDiffCols gram_g {g} sat sat0
    } -cleanup {
        cleanup
    } -result {}

    # table_gram_g-1.3: test deleted, depended on trend0

    #-------------------------------------------------------------------
    # Table gram_c

    test table_gram_c-1.1 {value at time 0} -setup {
        create
    } -body {
        # Numbers checked by hand
        rdb eval {
            SELECT c, format('%.4f',sat) 
            FROM gram_c 
            ORDER BY c_id
        }
    } -cleanup {
        cleanup
    } -result {AUT -13.3333 CUL -40.0000 QOL -26.6667 SFT -40.0000 CAS 0.0000 SVC 0.0000}
    
    test table_gram_c-2.2 {sat.c == sat0.c at time 0} -setup {
        create
    } -body {
        tableDiffCols gram_c {c} sat sat0
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # Tables gram_coop, gram_nfg
    #
    # This section doesn't test the effect of cooperation inputs
    # or adjustments on these tables; that will be done when the 
    # "coop adjust", "coop level", and "coop slope" methods are tested.

    # 1.*: Initial values

    test table_gram_coop-1.1 {coop=coop0 at time 0} -setup {
        create
    } -body {
        tableDiffCols gram_coop {n f g} coop coop0
    } -cleanup {
        cleanup
    } -result {}

    test table_gram_coop-1.2 {slope is 0.0 at time 0} -setup {
        create
    } -body {
        rdb onecolumn {
            SELECT count(nfg_id) FROM gram_coop
            WHERE slope != 0.0
        }
    } -cleanup {
        cleanup
    } -result {0}
    

    #-------------------------------------------------------------------
    # Table gram_contribs, gram_sat_contribs, gram_coop_contribs

    test table_gram_contribs-1.1 {sat contribs retained} -setup {
        create
    } -body {
        jr sat level 1 0 N1 SHIA QOL 5 .1  
        jr sat slope 2 0 N1 SHIA SFT 10
        jr sat level 3 0 N1 SHIA CUL 5 .1  
        jr sat level 4 0 N1 SHIA AUT 5 .1  
        myclock advance 1440
        jr advance

        # Dump the history, skipping Driver 0, the long-term trend.
        pprint [rdb query {
            SELECT time, driver, n, g, c,
                   format('%4.1f',acontrib) AS acontrib
            FROM gram_sat_contribs
            WHERE driver != 0
        }]
    } -cleanup {
        cleanup
    } -result {
time driver n  g    c   acontrib 
---- ------ -- ---- --- -------- 
1440 1      N1 KURD QOL  3.0     
1440 1      N1 SHIA QOL  7.0     
1440 1      N1 SUNN QOL -0.9     
1440 2      N1 KURD SFT 10.8     
1440 2      N1 SHIA SFT  6.0     
1440 2      N1 SUNN SFT -0.6     
1440 3      N1 KURD CUL  3.0     
1440 3      N1 SHIA CUL  7.0     
1440 3      N1 SUNN CUL -0.3     
1440 4      N1 KURD AUT  3.0     
1440 4      N1 SHIA AUT  3.0     
1440 4      N1 SUNN AUT -0.3     
    }

    test table_gram_contribs-1.2 {sat contribs retained over time} -setup {
        create
    } -body {
        jr sat slope 1 0 N1 SHIA QOL 10
        myclock advance 1440
        jr advance
        myclock advance 2880
        jr advance

        pprint [rdb query {
            SELECT time, driver, n, g, c,
                   format('%4.1f',acontrib) AS acontrib
            FROM gram_sat_contribs
            WHERE driver != 0
        }]
    } -cleanup {
        cleanup
    } -result {
time driver n  g    c   acontrib 
---- ------ -- ---- --- -------- 
1440 1      N1 KURD QOL  6.0     
1440 1      N1 SHIA QOL 14.0     
1440 1      N1 SUNN QOL -1.8     
2880 1      N1 KURD QOL  5.6     
2880 1      N1 SHIA QOL 12.6     
2880 1      N1 SUNN QOL -1.7     
    }

    test table_gram_contribs-2.1 {coop contribs retained} -setup {
        create
    } -body {
        jr coop level 1 0 N1 SHIA BLUE  5 .1  
        jr coop level 3 0 N1 SHIA BRIT  5 .1  
        jr coop slope 3 0 N1 SHIA OPFOR 5
        myclock advance 1440
        jr advance

        pprint [rdb query {
            SELECT time, driver, n, f, g,
                   format('%4.1f',acontrib) AS acontrib
            FROM gram_coop_contribs
        }]
    } -cleanup {
        cleanup
    } -result {
time driver n  f    g     acontrib 
---- ------ -- ---- ----- -------- 
1440 1      N1 SHIA BLUE   2.5     
1440 1      N1 SHIA BRIT   2.0     
1440 1      N1 SHIA OPFOR -2.0     
1440 3      N1 SHIA BLUE   0.0     
1440 3      N1 SHIA BRIT   0.5     
1440 3      N1 SHIA OPFOR  0.5     
    }

    test table_gram_contribs-2.2 {coop contribs retained over time} -setup {
        create
    } -body {
        jr coop level 1 0 N1 SHIA BLUE 10 1
        myclock advance 360
        jr advance
        myclock advance 720
        jr advance

        pprint [rdb query {
            SELECT time, driver, n, f, g,
                   format('%4.1f',acontrib) AS acontrib
            FROM gram_coop_contribs
        }]
    } -cleanup {
        cleanup
    } -result {
time driver n  f    g     acontrib 
---- ------ -- ---- ----- -------- 
360  1      N1 SHIA BLUE   3.4     
360  1      N1 SHIA BRIT   2.7     
360  1      N1 SHIA OPFOR -2.7     
720  1      N1 SHIA BLUE   1.0     
720  1      N1 SHIA BRIT   0.8     
720  1      N1 SHIA OPFOR -0.8     
    }

    test table_gram_contribs-3.1 {contribs not retained on request} -setup {
        create
        gram parm set gram.saveHistory no
    } -body {
        jr sat  level 1 0 N1 SHIA QOL  5 .1
        jr coop level 1 0 N1 SHIA BLUE 5 .1
        myclock advance 1440
        jr advance

        rdb eval {SELECT * FROM gram_contribs}
    } -cleanup {
        cleanup
        gram parm set gram.saveHistory yes
    } -result {}

    #-------------------------------------------------------------------
    # Table gram_deltas, gram_sat_deltas, gram_coop_deltas

    test table_gram_deltas-1.1 {Sat deltas retained over time} -setup {
        create
    } -body {
        myclock advance 1440
        jr advance

        pprint [rdb query {
            SELECT time, delta, n, g, c
            FROM gram_sat_deltas
            WHERE curve_id = 1
        }]
    } -cleanup {
        cleanup
    } -result {
time delta n  g    c   
---- ----- -- ---- --- 
0    0.0   N1 KURD AUT 
1440 0.0   N1 KURD AUT 
    }

    test table_gram_deltas-1.2 {Coop deltas retained over time} -setup {
        create
    } -body {
        myclock advance 1440
        jr advance

        pprint [rdb query {
            SELECT time, delta, n, f, g
            FROM gram_coop_deltas
            WHERE curve_id = 33
        }]
    } -cleanup {
        cleanup
    } -result {
time delta n  f    g    
---- ----- -- ---- ---- 
0    0.0   N1 KURD BLUE 
1440 0.0   N1 KURD BLUE 
    }

    test table_gram_deltas-1.4 {Deltas not retained on request} -setup {
        gram parm set gram.saveHistory no
        create
    } -body {
        myclock advance 1440
        jr advance

        rdb query {SELECT * FROM gram_deltas}
    } -cleanup {
        gram parm set gram.saveHistory yes
        cleanup
    } -result {}
    

    #-------------------------------------------------------------------
    # sat adjust

    test sat_adjust-1.1 {short names are OK} -setup {
        create
    } -body {
        jr sat adjust 1 N2 KURD QOL 5
    } -cleanup {
        cleanup
    } -result {1}

    test sat_adjust-1.2 {invalid neighborhood} -setup {
        create
    } -body {
        jr sat adjust 1 DUMMY KURD QOL 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: N1, N2}

    test sat_adjust-1.3 {invalid group} -setup {
        create
    } -body {
        jr sat adjust 1 N2 DUMMY QOL 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: KURD, SHIA, SUNN, ORGA, ORGB}

    test sat_adjust-1.4 {invalid concern} -setup {
        create
    } -body {
        jr sat adjust 1 N2 KURD DUMMY 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: AUT, CUL, QOL, SFT, CAS, SVC}

    test sat_adjust-1.5 {g and c of different types} -setup {
        create
    } -body {
        jr sat adjust 1 N2 KURD SVC 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {g and c must have the same group type, CIV or ORG}

    test sat_adjust-1.6 {g=*, c=* not allowed} -setup {
        create
    } -body {
        tableSave gram_sat
        jr sat adjust 1 N1 * * 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {g and c cannot both be "*"}

    test sat_adjust-2.1 {adjustment: specific n, g, c} -setup {
        create
    } -body {
        tableSave gram_sat
        jr sat adjust 1 N2 SUNN SFT 5
        tableDiff gram_sat ngc_id {n g c} sat
    } -cleanup {
        cleanup
    } -result {{N2 SUNN SFT 5}}

    test sat_adjust-2.2 {adjustment: n=*, specific g, c} -setup {
        create
    } -body {
        tableSave gram_sat
        jr sat adjust 1 * SUNN SFT 5
        tableDiff gram_sat ngc_id {n g c} sat
    } -cleanup {
        cleanup
    } -result {{N1 SUNN SFT 5} {N2 SUNN SFT 5}}

    test sat_adjust-2.3 {adjustment: g=*, specific n, c} -setup {
        create
    } -body {
        tableSave gram_sat
        jr sat adjust 1 N2 * SFT 5
        tableDiff gram_sat ngc_id {n g c} sat
    } -cleanup {
        cleanup
    } -result {{N2 KURD SFT 5} {N2 SHIA SFT 5} {N2 SUNN SFT 5}}

    test sat_adjust-2.4 {adjustment: c=*, specific n, g} -setup {
        create
    } -body {
        tableSave gram_sat
        jr sat adjust 1 N2 SUNN * 5
        tableDiff gram_sat ngc_id {n g c} sat
    } -cleanup {
        cleanup
    } -result {{N2 SUNN AUT 5} {N2 SUNN CUL 5} {N2 SUNN QOL 5} {N2 SUNN SFT 5}}

    test sat_adjust-3.1 {Satisfactions over 100.0 are clamped} -setup {
        create
    } -body {
        tableSave gram_sat
        jr sat adjust 1 N1 SHIA AUT 300.0
        tableDiff gram_sat ngc_id {n g c} sat
    } -cleanup {
        cleanup
    } -result {{N1 SHIA AUT 60}}

    test sat_adjust-3.2 {Satisfactions under -100.0 are clamped} -setup {
        create
    } -body {
        tableSave gram_sat
        jr sat adjust 1 N1 SHIA AUT -300.0
        tableDiff gram_sat ngc_id {n g c} sat
    } -cleanup {
        cleanup
    } -result {{N1 SHIA AUT -140}}

    test sat_adjust-4.1 {sat.ng is recomputed.} -setup {
        create
    } -body {
        # Note, if we adjust by 5 for all concerns, sat.ng should go
        # up by 5 for that pgroup (since all neighborhoods
        # have identical inputs).
        tableSave gram_ng
        jr sat adjust 1 * SUNN * 5
        tableDiff gram_ng ng_id {n g} sat
    } -cleanup {
        cleanup
    } -result {{N1 SUNN 5} {N2 SUNN 5}}

    test sat_adjust-4.2 {sat.nc is recomputed.} -setup {
        create
    } -body {
        # Note, if we adjust by 5 for all groups, sat.nc should go
        # up by 5 for that concern (since all neighborhoods
        # have identical inputs).
        tableSave gram_nc
        jr sat adjust 1 * * CUL 5
        tableDiff gram_nc nc_id {n c} sat
    } -cleanup {
        cleanup
    } -result {{N1 CUL 5} {N2 CUL 5}}

    test sat_adjust-4.3 {sat.gc is recomputed.} -setup {
        create
    } -body {
        # Note, if we adjust by 5 for all neighborhoods, sat.gc should go
        # up by 5 for that pgroup and concern (since all neighborhoods
        # have identical inputs).
        tableSave gram_gc
        jr sat adjust 1 * SUNN SFT 5
        tableDiff gram_gc gc_id {g c} sat
    } -cleanup {
        cleanup
    } -result {{SUNN SFT 5}}

    test sat_adjust-4.4 {sat.n is recomputed.} -setup {
        create
    } -body {
        # Note, if we adjust by 5 for all CIV groups and concerns in a 
        # neighborhood, sat.n should go up by 5 for that neighborhood.
        tableSave gram_n
        jr sat adjust 1 N2 * AUT 5
        jr sat adjust 1 N2 * CUL 5
        jr sat adjust 1 N2 * QOL 5
        jr sat adjust 1 N2 * SFT 5
        tableDiff gram_n n_id {n} sat
    } -cleanup {
        cleanup
    } -result {{N2 5}}

    test sat_adjust-4.5 {sat.g is recomputed.} -setup {
        create
    } -body {
        # Note, if we adjust by 5 for all nbhoods and concerns
        # sat.g should go up by 5 for that group.
        tableSave gram_g
        jr sat adjust 1 * SUNN * 5
        tableDiff gram_g g_id {g} sat
    } -cleanup {
        cleanup
    } -result {{SUNN 5}}

    test sat_adjust-4.6 {sat.c is recomputed.} -setup {
        create
    } -body {
        # Note, if we adjust by 5 for all nbhoods and groups
        # sat.c should go up by 5 for that concern

        tableSave gram_c
        jr sat adjust 1 * * CUL 5
        tableDiff gram_c c_id {c} sat
    } -cleanup {
        cleanup
    } -result {{CUL 5}}

    test sat_adjust-5.1 {gram_contribs is saved} -setup {
        create
    } -body {
        jr sat adjust 1 N1 SHIA AUT 5
        jr sat adjust 2 N1 KURD CUL 3
        pprint [rdb query {SELECT * FROM gram_sat_contribs}]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  g    c   
---- ------ -------- -------- -- ---- --- 
0    1      5.0      5        N1 SHIA AUT 
0    2      3.0      2        N1 KURD CUL 
    }

    test sat_adjust-5.2 {multiple adjusts for one driver accumulate} -setup {
        create
    } -body {
        jr sat adjust 1 N1 KURD CUL 5
        jr sat adjust 1 N1 KURD CUL 3
        pprint [rdb query {SELECT * FROM gram_sat_contribs}]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  g    c   
---- ------ -------- -------- -- ---- --- 
0    1      8.0      2        N1 KURD CUL 
    }

    test sat_adjust-5.3 {Large positive adjustments are clamped} -setup {
        create
    } -body {
        # Curve is initially 0; make it 90.0
        jr sat adjust 1 N1 KURD CUL 90.0

        # Adjust by 20; should get a contribs of 10.0
        jr sat adjust 2 N1 KURD CUL 20

        pprint [rdb query {SELECT * FROM gram_sat_contribs}]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  g    c   
---- ------ -------- -------- -- ---- --- 
0    1      90.0     2        N1 KURD CUL 
0    2      10.0     2        N1 KURD CUL 
    }

    test sat_adjust-5.4 {Large negative adjustments are clamped} -setup {
        create
    } -body {
        # Curve is initially 0; make it -90.0
        jr sat adjust 1 N1 KURD CUL -90.0

        # Adjust by -20; should get a contribs of -10.0
        jr sat adjust 2 N1 KURD CUL -20

        pprint [rdb query {SELECT * FROM gram_sat_contribs}]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  g    c   
---- ------ -------- -------- -- ---- --- 
0    1      -90.0    2        N1 KURD CUL 
0    2      -10.0    2        N1 KURD CUL 
    }

    test sat_adjust-5.5 {Contribs is timestamped} -setup {
        create
    } -body {
        jr sat adjust 1 N1 KURD CUL -20

        myclock advance 5
        jr advance

        jr sat adjust 1 N1 KURD CUL  40

        # Skip the trend contribs
        pprint [rdb query {
            SELECT * FROM gram_sat_contribs
            WHERE driver != 0
        }]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  g    c   
---- ------ -------- -------- -- ---- --- 
0    1      -20.0    2        N1 KURD CUL 
5    1      40.0     2        N1 KURD CUL 
    }

    test sat_adjust-6.1 {gram_deltas is updated} -setup {
        create
    } -body {
        set a [rdb onecolumn {
            SELECT delta FROM gram_sat_deltas
            WHERE n='N1' AND g='SHIA' AND c='AUT'
            AND time=0
        }]

        jr sat adjust 1 N1 SHIA AUT 5

        set b [rdb onecolumn {
            SELECT delta FROM gram_sat_deltas
            WHERE n='N1' AND g='SHIA' AND c='AUT'
            AND time=0
        }]

        list $a $b
    } -cleanup {
        cleanup
    } -result {0.0 5.0}


    test sat_adjust-7.1 {last_input is updated and returned} -setup {
        create
    } -body {
        set a [jr sat adjust 1 N1 SHIA AUT 5]
        set b [jr sat adjust 1 N1 SHIA AUT 5]
        set c [jr sat adjust 1 N1 SHIA AUT 5]
        set d [rdb onecolumn {
            SELECT last_input FROM gram_driver
            WHERE driver=1
        }]

        list $a $b $c $d
    } -cleanup {
        cleanup
    } -result {1 2 3 3}

    test sat_adjust-7.2 {last_input is updated and returned} -setup {
        create
    } -body {
        set a [jr sat adjust 1 N1 SHIA AUT 5]
        set b [jr sat adjust 1 N1 SHIA AUT 5]
        set c [jr sat adjust 1 N1 SHIA AUT 5]
        set d [rdb onecolumn {
            SELECT last_input FROM gram_driver
            WHERE driver=1
        }]

        list $a $b $c $d
    } -cleanup {
        cleanup
    } -result {1 2 3 3}

    #-------------------------------------------------------------------
    # sat set

    test sat_set-1.1 {short names are OK} -setup {
        create
    } -body {
        jr sat set 1 N2 KURD QOL 5
    } -cleanup {
        cleanup
    } -result {1}

    test sat_set-1.2 {invalid neighborhood} -setup {
        create
    } -body {
        jr sat set 1 DUMMY KURD QOL 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: N1, N2}

    test sat_set-1.3 {invalid group} -setup {
        create
    } -body {
        jr sat set 1 N2 DUMMY QOL 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: KURD, SHIA, SUNN, ORGA, ORGB}

    test sat_set-1.4 {invalid concern} -setup {
        create
    } -body {
        jr sat set 1 N2 KURD DUMMY 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: AUT, CUL, QOL, SFT, CAS, SVC}

    test sat_set-1.5 {g and c of different types} -setup {
        create
    } -body {
        jr sat set 1 N2 KURD SVC 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {g and c must have the same group type, CIV or ORG}

    test sat_set-1.6 {g=*, c=* not allowed} -setup {
        create
    } -body {
        tableSave gram_sat
        jr sat set 1 N1 * * 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {g and c cannot both be "*"}

    test sat_set-1.7 {sat in range} -setup {
        create
    } -body {
        jr sat set 1 N1 SUNN SFT 101
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "101", should be a real number in range -100.0, 100.0, or one of: VS, S, A, D, VD}

    test sat_set-2.1 {set: specific n, g, c} -setup {
        create
    } -body {
        tableSave gram_sat
        jr sat set 1 N2 SUNN SFT 5
        tableDiff gram_sat ngc_id {n g c} sat
    } -cleanup {
        cleanup
    } -result {{N2 SUNN SFT 85}}

    test sat_set-2.2 {set: n=*, specific g, c} -setup {
        create
    } -body {
        tableSave gram_sat
        jr sat set 1 * SUNN SFT 5
        tableDiff gram_sat ngc_id {n g c} sat
    } -cleanup {
        cleanup
    } -result {{N1 SUNN SFT 85} {N2 SUNN SFT 85}}

    test sat_set-2.3 {set: g=*, specific n, c} -setup {
        create
    } -body {
        tableSave gram_sat
        jr sat set 1 N2 * SFT 5
        tableDiff gram_sat ngc_id {n g c} sat
    } -cleanup {
        cleanup
    } -result {{N2 KURD SFT 85} {N2 SHIA SFT -35} {N2 SUNN SFT 85}}

    test sat_set-2.4 {set: c=*, specific n, g} -setup {
        create
    } -body {
        tableSave gram_sat
        jr sat set 1 N2 SUNN * 5
        tableDiff gram_sat ngc_id {n g c} sat
    } -cleanup {
        cleanup
    } -result {{N2 SUNN AUT 85} {N2 SUNN CUL 85} {N2 SUNN QOL 45} {N2 SUNN SFT 85}}

    # This one test verifies that satisfaction roll-ups are computed
    # when satisfaction is set.

    test sat_set-3.1 {sat.ng is recomputed.} -setup {
        create
    } -body {
        # Note, if we set to 5 for all concerns, sat.ng should go
        # to 5 for that group (since all neighborhoods
        # have identical inputs).
        tableSave gram_ng
        jr sat set 1 * SUNN * 5
        tableDiff gram_ng ng_id {n g} sat
    } -cleanup {
        cleanup
    } -result {{N1 SUNN 75} {N2 SUNN 75}}

    # sat set uses the code as sat adjust under the hood;
    # verify that contribs are saved, but leave in-depth
    # checks for sat adjust.

    test sat_set-4.1 {gram_contribs is saved} -setup {
        create
    } -body {
        jr sat set 1 N1 SHIA AUT 5
        jr sat set 2 N1 KURD CUL 3
        pprint [rdb query {SELECT * FROM gram_sat_contribs}]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  g    c   
---- ------ -------- -------- -- ---- --- 
0    1      -35.0    5        N1 SHIA AUT 
0    2      3.0      2        N1 KURD CUL 
    }


    test sat_set-5.1 {last_input is updated and returned} -setup {
        create
    } -body {
        set a [jr sat set 1 N1 SHIA AUT 5]
        set b [jr sat set 1 N1 SHIA AUT 10]
        set c [jr sat set 1 N1 SHIA AUT 15]
        set d [rdb onecolumn {
            SELECT last_input FROM gram_driver
            WHERE driver=1
        }]

        list $a $b $c $d
    } -cleanup {
        cleanup
    } -result {1 2 3 3}


    test sat_set-5.2 {last_input is undone} -setup {
        create
    } -body {
        set a [jr sat set 1 N1 SHIA AUT 5]
        set b [jr sat set 1 N1 SHIA AUT 10]
        set c [jr sat set 1 N1 SHIA AUT 15]
        set d [jr sat set 1 N1 SHIA AUT 10 -undo]
        set e [jr sat set 1 N1 SHIA AUT 5 -undo]
        set f [rdb onecolumn {
            SELECT last_input FROM gram_driver
            WHERE driver=1
        }]

        list $a $b $c $d $e $f
    } -cleanup {
        cleanup
    } -result {1 2 3 {} {} 1}

    #-------------------------------------------------------------------
    # sat level
        
    test sat_level-1.1 {ts not numeric} -setup {
        create
    } -body {
        jr sat level 1 DUMMY N1 SHIA SFT 10.0 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {non-numeric ts: "DUMMY"}

    test sat_level-1.2 {ts in past} -setup {
        create
    } -body {
        jr sat level 1 -1 N1 SHIA SFT 10.0 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {Start time is in the past: '312359ZDEC69'}

    test sat_level-1.3 {invalid nbhood} -setup {
        create
    } -body {
        jr sat level 1 0 DUMMY SHIA SFT 10.0 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "DUMMY", should be one of: N1, N2}

    test sat_level-1.4 {invalid group} -setup {
        create
    } -body {
        jr sat level 1 0 N1 DUMMY SFT 10.0 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "DUMMY", should be one of: KURD, SHIA, SUNN, ORGA, ORGB}

    test sat_level-1.5 {invalid concern} -setup {
        create
    } -body {
        jr sat level 1 0 N1 SHIA DUMMY 10.0 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "DUMMY", should be one of: AUT, CUL, QOL, SFT, CAS, SVC}

    test sat_level-1.6 {invalid group/concern combo} -setup {
        create
    } -body {
        jr sat level 1 0 N1 SHIA SVC 10.0 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {g and c must have the same group type, CIV or ORG}

    test sat_level-1.7 {invalid limit: unknown symbol} -setup {
        create
    } -body {
        jr sat level 1 0 N1 SHIA SFT DUMMY 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "DUMMY", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}

    test sat_level-1.8 {invalid days: unknown symbol} -setup {
        create
    } -body {
        jr sat level 1 0 N1 SHIA SFT 10.0 DUMMY
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "DUMMY", should be a real number no less than 0.0, or one of: XL, L, M, S, XS}

    test sat_level-1.9 {negative days} -setup {
        create
    } -body {
        jr sat level 1 0 N1 SHIA SFT 10.0 -1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "-1", should be a real number no less than 0.0, or one of: XL, L, M, S, XS}

    test sat_level-1.10 {Invalid option} -setup {
        create
    } -body {
        jr sat level 1 0 N1 SHIA SFT 10.0 1 -nonesuch foo
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid option: "-nonesuch"}


    test sat_level-1.11 {Non-numeric -s} -setup {
        create
    } -body {
        jr sat level 1 0 N1 SHIA SFT 10.0 1 -s FOO
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "FOO", should be a real number in range 0.0, 1.0}

    test sat_level-1.12 {Negative -s} -setup {
        create
    } -body {
        jr sat level 1 0 N1 SHIA SFT 10.0 1 -s -0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "-0.1", should be a real number in range 0.0, 1.0}

    test sat_level-1.13 {-s greater than 1.0} -setup {
        create
    } -body {
        jr sat level 1 0 N1 SHIA SFT 10.0 1 -s 1.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "1.1", should be a real number in range 0.0, 1.0}


    test sat_level-1.14 {Non-numeric -p} -setup {
        create
    } -body {
        jr sat level 1 0 N1 SHIA SFT 10.0 1 -p FOO
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "FOO", should be a real number in range 0.0, 1.0}

    test sat_level-1.15 {Negative -p} -setup {
        create
    } -body {
        jr sat level 1 0 N1 SHIA SFT 10.0 1 -p -0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "-0.1", should be a real number in range 0.0, 1.0}

    test sat_level-1.16 {-p greater than 1.0} -setup {
        create
    } -body {
        jr sat level 1 0 N1 SHIA SFT 10.0 1 -p 1.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "1.1", should be a real number in range 0.0, 1.0}


    test sat_level-1.17 {Non-numeric -q} -setup {
        create
    } -body {
        jr sat level 1 0 N1 SHIA SFT 10.0 1 -q FOO
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "FOO", should be a real number in range 0.0, 1.0}

    test sat_level-1.18 {Negative -q} -setup {
        create
    } -body {
        jr sat level 1 0 N1 SHIA SFT 10.0 1 -q -0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "-0.1", should be a real number in range 0.0, 1.0}

    test sat_level-1.19 {-q greater than 1.0} -setup {
        create
    } -body {
        jr sat level 1 0 N1 SHIA SFT 10.0 1 -q 1.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "1.1", should be a real number in range 0.0, 1.0}

    test sat_level-1.20 {invalid cause} -constraints cause -setup {
        create
    } -body {
        jr sat level 1 0 N1 SHIA SFT 10.0 1 -cause DUMMY
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value, "DUMMY"}

    test sat_level-2.1 {schedule event for one n,g,c.} -setup {
        create
    } -body {
        jr sat level 1 0 N2 KURD QOL 5.0 0.1
        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te  n  g    c   llimit 
- -- --- -- ---- --- ------ 
D 0  144 N2 KURD QOL 5.00   
I 0  144 N2 SHIA QOL 3.00   
I 0  144 N2 SUNN QOL -3.00  
    }

    test sat_level-2.2 {-s is 0.5} -setup {
        create
    } -body {
        jr sat level 1 0 N2 KURD QOL 5.0 0.1 -s 0.5
        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te  n  g    c   llimit 
- -- --- -- ---- --- ------ 
D 0  144 N2 KURD QOL 5.00   
I 0  144 N2 SHIA QOL 1.50   
I 0  144 N2 SUNN QOL -1.50  
    }

    test sat_level-2.3 {zero magnitude events are ignored} -setup {
        create
    } -body {
        jr sat level 1 0 N2 KURD QOL 0.0 0.1
        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
    }

    test sat_level-2.4 {epsilon events are immediate} -setup {
        create
    } -body {
        jr sat level 1 0 N2 KURD QOL 0.05 0.1
        
        # Note that ts=te for all effects.
        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te n  g    c   llimit 
- -- -- -- ---- --- ------ 
D 0  0  N2 KURD QOL 0.05   
I 0  0  N2 SHIA QOL 0.03   
I 0  0  N2 SUNN QOL -0.03  
    }

    test sat_level-2.5 {zero magnitude indirect effects are ignored.} -setup {
        create
    } -body {
        # Make sure the relationship matrix is all zeroes
        # (unless f=g!)
        
        rdb eval {
            UPDATE gram_nfg SET rel=0.0 
            WHERE f != g
        }

        init


        jr sat level 1 0 N2 KURD QOL 10.0 1
        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te   n  g    c   llimit 
- -- ---- -- ---- --- ------ 
D 0  1440 N2 KURD QOL 10.00  
    }

    test sat_level-2.6 {schedule event in future} -setup {
        create
    } -body {
        jr sat level 1 720 N2 KURD QOL 5.0 0.1
        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
d ts  te  n  g    c   llimit 
- --- --- -- ---- --- ------ 
D 720 864 N2 KURD QOL 5.00   
I 720 864 N2 SHIA QOL 3.00   
I 720 864 N2 SUNN QOL -3.00  
    }

    test sat_level-2.7 {no direct effect if pgroup has zero pop} -setup {
        create
    } -body {
        # FIRST, set SHIA population to 0 in neighborhood N1
        rdb eval {
            UPDATE gram_ng 
            SET population  = 0.0,
                sat_tracked = 0
            WHERE n='N1' AND g='SHIA'
        }

        init


        jr sat level 1 0 N1 SHIA QOL 5.0 0.1

        # Expect indirect effects on KURD and SUNN, but no direct effect
        # on SHIA.
        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te  n  g    c   llimit 
- -- --- -- ---- --- ------ 
I 0  144 N1 KURD QOL 3.00   
I 0  144 N1 SUNN QOL -1.50  
    }

    test sat_level-2.8 {no indirect effect if pgroup has zero pop} -setup {
        create
    } -body {
        # FIRST, set KURD population to 0 in neighborhood N1
        rdb eval {
            UPDATE gram_ng 
            SET population  = 0.0,
                sat_tracked = 0
            WHERE n='N1' AND g='KURD'
        }
        
        init


        jr sat level 1 0 N1 SHIA QOL 5.0 0.1

        # Expect direct effect on SHIA, indirect on SUNN, but no indirect
        # effect on KURD
        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te  n  g    c   llimit 
- -- --- -- ---- --- ------ 
D 0  144 N1 SHIA QOL 5.00   
I 0  144 N1 SUNN QOL -1.50  
    }

    # sat_level-2.9 OBSOLETE

    test sat_level-2.10 {Indirect effects in all nbhoods, N2 near} -setup {
        create
    } -body {
        # Update GRAM's proximity, and re-initialize
        set near [eproximity index near]

        rdb eval {
            UPDATE gram_mn
            SET proximity=$near
            WHERE m='N2' AND n='N1'
        }

        init


        # Enter a level input.
        jr sat level 1 0 N1 SHIA QOL 5.0 0.1 -p 0.5 -q 0.1

        # Expect direct effect on SHIA in N1, full strength indirect
        # on others in N1, 0.5 effect in N2 (since N2 is near).
        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te  n  g    c   llimit 
- -- --- -- ---- --- ------ 
I 0  144 N1 KURD QOL 3.00   
D 0  144 N1 SHIA QOL 5.00   
I 0  144 N1 SUNN QOL -1.50  
I 0  144 N2 KURD QOL 1.50   
I 0  144 N2 SHIA QOL 2.50   
I 0  144 N2 SUNN QOL -0.75  
    }

    test sat_level-2.11 {Indirect effects in all nbhoods, N2 far} -setup {
        create
    } -body {
        jr sat level 1 0 N1 SHIA QOL 5.0 0.1 -p 0.5 -q 0.1

        # Expect direct effect on SHIA in N1, full strength indirect
        # on others in N1, 0.1 effect in N2 (since N2 is far).
        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te  n  g    c   llimit 
- -- --- -- ---- --- ------ 
I 0  144 N1 KURD QOL 3.00   
D 0  144 N1 SHIA QOL 5.00   
I 0  144 N1 SUNN QOL -1.50  
I 0  144 N2 KURD QOL 0.30   
I 0  144 N2 SHIA QOL 0.50   
I 0  144 N2 SUNN QOL -0.15  
    }

    test sat_level-2.12 {Indirect effects in all nbhoods, N2 remote} -setup {
        create
    } -body {
        # Update GRAM's proximity, and re-initialize
        set remote [eproximity index remote]

        rdb eval {
            UPDATE gram_mn
            SET proximity=$remote
            WHERE m='N2' AND n='N1'
        }

        init


        # Enter a level input.
        jr sat level 1 0 N1 SHIA QOL 5.0 0.1 -p 0.5 -q 0.1

        # Expect direct effect on SHIA in N1, full strength indirect
        # on others in N1, no effects in N2 (since N2 is remote).
        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te  n  g    c   llimit 
- -- --- -- ---- --- ------ 
I 0  144 N1 KURD QOL 3.00   
D 0  144 N1 SHIA QOL 5.00   
I 0  144 N1 SUNN QOL -1.50  
    }


    test sat_level-2.13 {Delayed indirect effects} -setup {
        create
    } -body {
        # Update GRAM's delay, and re-initialize
        rdb eval {
            UPDATE gram_mn
            SET effects_delay = 1.0
            WHERE m='N2' AND n='N1'
        }

        init


        # Enter a level input.
        jr sat level 1 0 N1 SHIA QOL 5.0 0.1 -q 0.1

        # Expect direct effect on SHIA in N1, full strength indirect
        # on others in N1, 0.1 effect in N2 delayed 1 day.
        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
d ts   te   n  g    c   llimit 
- ---- ---- -- ---- --- ------ 
I 0    144  N1 KURD QOL 3.00   
D 0    144  N1 SHIA QOL 5.00   
I 0    144  N1 SUNN QOL -1.50  
I 1440 1584 N2 KURD QOL 0.30   
I 1440 1584 N2 SHIA QOL 0.50   
I 1440 1584 N2 SUNN QOL -0.15  
    }

    test sat_level-3.1 {level increases during interval} -setup {
        create
    } -body {
        # FIRST, do a level effect.
        jr sat level 1 0 N2 KURD QOL 10.0 1

        # Advance to noon.
        myclock advance 720
        jr advance
        
        tableDiffCols gram_sat {n g c} sat sat0
    } -cleanup {
        cleanup 
    } -result {{N2 KURD QOL 9} {N2 SHIA QOL 7.3155647} {N2 SUNN QOL -3.135242}}

    test sat_level-3.2 {level increases to limit} -setup {
        create
    } -body {
        # FIRST, do a level effect.
        jr sat level 1 0 N2 KURD QOL 10.0 1

        # Advance a full day
        myclock advance 1440
        jr advance
        
        tableDiffCols gram_sat {n g c} sat sat0
    } -cleanup {
        cleanup 
    } -result {{N2 KURD QOL 10} {N2 SHIA QOL 8.4} {N2 SUNN QOL -3.6}}

    test sat_level-3.3 {slope increases due to level} -setup {
        create
    } -body {
        # FIRST, advance to noon and get the slope
        myclock advance 720
        jr advance
        tableSave gram_sat

        # NEXT, prepare for the next step
        myclock reset
        init


        # NEXT, schedule a level input, and advance to noon.

        jr sat level 1 0 N2 KURD QOL 10.0 1

        myclock advance 720
        jr advance
        
        tableDiff gram_sat ngc_id {n g c} slope
    } -cleanup {
        cleanup 
    } -result {{N2 KURD QOL 18} {N2 SHIA QOL 14.631129} {N2 SUNN QOL -6.270484}}

    test sat_level-3.4 {slope returns to normal after interval} -setup {
        create
    } -body {
        # FIRST, advance two days, in steps and get the slope
        myclock advance 1440
        jr advance
        myclock advance 2880
        jr advance
        
        tableSave gram_sat

        # NEXT, prepare for the next step
        myclock reset
        init


        # NEXT, schedule a level input, and repeat.
        jr sat level 1 0 N2 KURD QOL 10.0 1

        myclock advance 1440
        jr advance
        myclock advance 2880
        jr advance

        tableDiff gram_sat ngc_id {n g c} slope
    } -cleanup {
        cleanup 
    } -result {}

    test sat_level-4.1 {level effects expire from list} -setup {
        create
    } -body {
        jr sat level 1 0 N1 SHIA SFT 10.0 1

        myclock advance 1440
        jr advance

        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
    }

    test sat_level-5.1 {driver is tracked for levels} -setup {
        create
    } -body {
        jr sat level 1 0 N1 SHIA SFT 10.0 1
        jr sat level 2 0 N1 SHIA SFT  5.0 1

        rdb eval {
            SELECT driver FROM gram_effects
            WHERE etype='L' AND prox=-1
        }
    } -cleanup {
        cleanup 
    } -result {1 2}

    test sat_level-5.2 {input runs from 1 for each driver} -setup {
        create
    } -body {
        jr sat level 1 0 N1 SHIA AUT 10.0 1
        jr sat level 1 0 N1 SHIA QOL 10.0 1
        jr sat level 1 0 N1 SHIA SFT 10.0 1
        jr sat level 2 0 N1 SHIA AUT 10.0 1
        jr sat level 2 0 N1 SHIA QOL 10.0 1
        jr sat level 2 0 N1 SHIA SFT  5.0 1

        rdb eval {
            SELECT DISTINCT driver || '.' || input FROM gram_effects
        }
    } -cleanup {
        cleanup 
    } -result {1.1 1.2 1.3 2.1 2.2 2.3}


    test sat_level-6.1 {Inputs with the same cause overlap} -setup {
        create
    } -body {
        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_sat SET sat0 = 0.0}
        init


        # Schedule two effects of differing strength but the same cause
        # on the same pgroup.  The total effect over the timestep should
        # be the maximum of the two.
        jr sat level 1 0 N1 SHIA SFT 10 1.0 -cause CIVCAS
        jr sat level 1 0 N1 SHIA SFT  5 1.0 -cause CIVCAS

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  The actual contribution should be 
        # based on the 10.  A1 should get credit for ~2/3 of the actual
        # contribution and A2 should get credit for ~1/3.
        pprint [jr dump sat level N1 SHIA SFT]

        # Hand check
        # Ratio of SContribs is 9.0 to 4.293, or 2.096.
        # Ratio of AContribs is 6.093 to 2.907 or 2.096.  Check.
        # Sum of AContribs is 6.093 + 2.907 or 9.0.       Check.
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time     Limit AThr  DThr   NTotal NContrib ATotal AContrib Input DN DG   E 
------ ------------ ------------ ----- ----- ------ ------ -------- ------ -------- ----- -- ---- - 
CIVCAS 010000ZJAN70 020000ZJAN70  10.0 100.0 -100.0   9.00   9.000    6.09   6.093  1.1   N1 SHIA D 
'      '            '              5.0 100.0 -100.0   4.29   4.293    2.91   2.907  1.2   N1 SHIA D 
    }

    test sat_level-6.2 {Inputs with the same cause overlap: multiple time steps} -setup {
        create
    } -body {
        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_sat SET sat0 = 0.0}
        init


        # Schedule two effects of differing strength but the same cause
        # on the same pgroup.  The total effect over the timestep should
        # be the maximum of the two.
        jr sat level 1 0 N1 SHIA SFT 10 1.0 -cause CIVCAS
        jr sat level 1 0 N1 SHIA SFT  5 1.0 -cause CIVCAS

        # Advance time.
        myclock advance 360
        jr advance
        myclock advance 720
        jr advance

        # Dump the results.  The actual contribution should be 
        # based on the 10.  A1 should get credit for ~2/3 of the actual
        # contribution and A2 should get credit for ~1/3.
        pprint [jr dump sat level N1 SHIA SFT]
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time     Limit AThr  DThr   NTotal NContrib ATotal AContrib Input DN DG   E 
------ ------------ ------------ ----- ----- ------ ------ -------- ------ -------- ----- -- ---- - 
CIVCAS 010000ZJAN70 020000ZJAN70  10.0 100.0 -100.0   9.00   2.162    6.00   1.306  1.1   N1 SHIA D 
'      '            '              5.0 100.0 -100.0   4.29   1.173    2.85   0.709  1.2   N1 SHIA D 
    }

    test sat_level-6.3 {Inputs with different causes are independent} -setup {
        create
    } -body {
        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_sat SET sat0 = 0.0}
        init


        # Schedule two effects of differing strength but the same cause
        # on the same pgroup.  The total effect over the timestep should
        # be the maximum of the two.
        jr sat level 1 0 N1 SHIA SFT 10 1.0 -cause CIVCAS
        jr sat level 1 0 N1 SHIA SFT  5 1.0 -cause HOSCAP

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  Each should have its own contribution; the
        # actual contribution should be scaled contribution.
        pprint [jr dump sat level N1 SHIA SFT]

    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time     Limit AThr  DThr   NTotal NContrib ATotal AContrib Input DN DG   E 
------ ------------ ------------ ----- ----- ------ ------ -------- ------ -------- ----- -- ---- - 
CIVCAS 010000ZJAN70 020000ZJAN70  10.0 100.0 -100.0   9.00   9.000    9.00   9.000  1.1   N1 SHIA D 
HOSCAP '            '              5.0 100.0 -100.0   4.29   4.293    4.29   4.293  1.2   N1 SHIA D 
    }
   
    test sat_level-6.4 {Effects from different inputs with same cause} -setup {
        create
    } -body {
        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_sat SET sat0 = 0.0}
        init


        # Schedule effects on SHIA and KURD, and look at the indirect effects
        # on SUNN.
        jr sat level 1 0 N1 SHIA SFT 10 1.0 -cause CIVCAS
        jr sat level 1 0 N1 KURD SFT 10 1.0 -cause CIVCAS

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  Each should have its own contribution; the
        # actual contribution should be scaled contribution.
        pprint [jr dump sat level N1 SUNN SFT]

        # Hand check
        # Ratio of AContribs is -1.669 to -3.556 or 0.469.  Check.
        # Sum of AContribs is -1.669 + -3.556 or -5.225.    Check.
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time     Limit AThr  DThr   NTotal NContrib ATotal AContrib Input DN DG   E 
------ ------------ ------------ ----- ----- ------ ------ -------- ------ -------- ----- -- ---- - 
CIVCAS 010000ZJAN70 020000ZJAN70  -3.0 100.0 -100.0  -2.45  -2.452   -1.67  -1.669  1.1   N1 SHIA I 
'      '            '             -6.0 100.0 -100.0  -5.23  -5.225   -3.56  -3.556  1.2   N1 KURD I 
    }

    test sat_level-6.5 {Positive and negative effects for the same cause} -setup {
        create
    } -body {
        # Set sat0 to -50.0.  Positive effects should be multiplied by 1.5 and 
        # negative effects by 0.5.
        rdb eval {UPDATE gram_sat SET sat0 = -50.0}
        init


        # Schedule effects on KURD and SUNN, and look at the indirect effects
        # on KURD.
        jr sat level 1 0 N1 KURD SFT -10 1.0 -cause CIVCAS
        jr sat level 1 0 N1 SUNN SFT -10 1.0 -cause CIVCAS

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  Each should have its own contribution; the
        # actual contribution should be scaled contribution.
        pprint [jr dump sat level N1 KURD SFT]

        # NOTE: This test is in response to bug 1817.  Before the "Absit Problem" was
        # fixed, the positive nominal 6.0 would have been scaled to 9.0 and the -10.0
        # would have been scaled to -5.0 yielding approximately a +4 gain in response to
        # the negative inputs.
        #
        # As a result of the bug fix, the scaling is done based on the net nominal
        # contribution, which is -4.0.  Hence, the scaling factor is 0.5, and we
        # see that, indeed, the actual contribution is half the nominal contribution.
        #
        # TBD: What's going on with the ATotal?  That doesn't look right.
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time     Limit AThr  DThr   NTotal NContrib ATotal AContrib Input DN DG   E 
------ ------------ ------------ ----- ----- ------ ------ -------- ------ -------- ----- -- ---- - 
CIVCAS 010000ZJAN70 020000ZJAN70   6.0 100.0 -100.0   5.23   5.225    2.61   2.613  1.2   N1 SUNN I 
'      '            '            -10.0 100.0 -100.0  -9.00  -9.000   -4.50  -4.500  1.1   N1 KURD D 
    }



    # sat_level-7.*: Automatic causes

    test sat_level-7.1 {Causes are tagged automatically if -cause is not given} -setup {
        create
    } -body {
        jr sat level 1 0 N1 SHIA SFT 10 10

        rdb eval {
            SELECT DISTINCT cause 
            FROM gram_effects
        }
    } -cleanup {
        cleanup
    } -result {D1}

    # sat_level-8.*: "level" returns input

    test sat_level-8.1 {Returns input, case 1: input is ignored.} -setup {
        create
    } -body {
        set a [jr sat level 1 0 N1 SHIA SFT 0 1]
        set b [jr sat level 1 0 N1 SHIA QOL 0 1]

        # Skip TREND driver
        set c [rdb eval {
            SELECT input FROM gram_effects
            WHERE driver != 0
        }]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 2 {}}

    test sat_level-8.2 {Returns input, case 2: normal input.} -setup {
        create
    } -body {
        set a [jr sat level 1 0 N1 SHIA SFT 10 1]
        set b [jr sat level 1 0 N1 SHIA QOL 10 1]
        set c [rdb eval {SELECT DISTINCT input FROM gram_effects}]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 2 {1 2}}

    # sat_level-9.*: Thresholds
    
    test sat_level-9.1 {Positive, sat0 >= athresh} -setup {
        create
    } -body {
        set a [jr sat.ngc N1 SHIA AUT]
        
        # Note: $a == 40.0, so it's greater than -athresh
        jr sat level 1 0 N1 SHIA AUT 10 0.1 -athresh 30.0
        
        myclock advance 720
        jr advance
        
        set b [jr sat.ngc N1 SHIA AUT]
        
        expr {$a == $b}
    } -cleanup {
        cleanup
    } -result {1}

    test sat_level-9.2 {Positive, sat0+delta < athresh} -setup {
        create
    } -body {
        set a [jr sat.ngc N1 SHIA CUL]
        
        # Note: $a == -40.0, so it's well less than -athresh
        jr sat level 1 0 N1 SHIA CUL 10 0.1 -athresh 30.0
        
        myclock advance 720
        jr advance
        
        set b [jr sat.ngc N1 SHIA CUL]
        
        list $a $b
    } -cleanup {
        cleanup
    } -result {-40.0 -26.0}
    
    test sat_level-9.3 {Positive, sat0+delta > athresh} -setup {
        create
    } -body {
        set a [format %.1f [jr sat.ngc N1 SHIA SFT]]
        
        # Note: $a == 40.0, so it's justless than -athresh.
        jr sat level 1 0 N1 SHIA SFT 10 0.9 -athresh 41.0

        # Step twice; we should get an increase on the first, but
        # not on the second.
        myclock advance 720
        jr advance
        set b [format %.1f [jr sat.ngc N1 SHIA SFT]]

        myclock advance 1440
        jr advance
        
        set c [format %.1f [jr sat.ngc N1 SHIA SFT]]
        
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {40.0 45.5 45.5}

    test sat_level-9.4 {Negative, sat0 <= dthresh} -setup {
        create
    } -body {
        set a [jr sat.ngc N1 SHIA CUL]
        
        # Note: $a == -40.0, so it's less than -dthresh
        jr sat level 1 0 N1 SHIA CUL -10 0.1 -dthresh -30.0
        
        myclock advance 720
        jr advance
        
        set b [jr sat.ngc N1 SHIA CUL]
        
        expr {$a == $b}
    } -cleanup {
        cleanup
    } -result {1}
    
    test sat_level-9.5 {Negative, sat0+delta > dthresh} -setup {
        create
    } -body {
        set a [jr sat.ngc N1 SHIA SFT]
        
        # Note: $a == 40.0, so it's well greater than -dthresh
        jr sat level 1 0 N1 SHIA SFT -10 0.1 -dthresh -30.0
        
        myclock advance 720
        jr advance
        
        set b [jr sat.ngc N1 SHIA SFT]
        
        list $a $b
    } -cleanup {
        cleanup
    } -result {40.0 26.0}
    
    test sat_level-9.6 {Negative, sat0+delta < dthresh} -setup {
        create
    } -body {
        set a [format %.1f [jr sat.ngc N1 SHIA CUL]]
        
        # Note: $a == -40.0, so it's just greater than -dthresh.
        jr sat level 1 0 N1 SHIA CUL -10 0.9 -dthresh -41.0

        # Step twice; we should get a decrease on the first, but
        # not on the second.
        myclock advance 720
        jr advance
        set b [format %.1f [jr sat.ngc N1 SHIA CUL]]

        myclock advance 1440
        jr advance
        
        set c [format %.1f [jr sat.ngc N1 SHIA CUL]]
        
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {-40.0 -45.5 -45.5}

    #-------------------------------------------------------------------
    # sat slope
    #
    # sat_slope-1.*: Argument checking
    # sat_slope-2.*: Scheduling
    # sat_slope-3.*: Effect on sat.ngc
    # sat_slope-4.*: Expiration
    # sat_slope-5.*: Tracking of contributions
    # sat_slope-6.*: Cause interactions
    # sat_slope-7.*: Scheduling returns input

    test sat_slope-1.1 {ts not numeric} -setup {
        create
    } -body {
        jr sat slope 1 DUMMY N1 SHIA SFT 100.0
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {non-numeric ts: "DUMMY"}


    test sat_slope-1.2 {ts in the past.} -setup {
        create
    } -body {
        jr sat slope 1 -1 N1 SHIA SFT 100.0
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Start time is in the past: '312359ZDEC69'}

    test sat_slope-1.3 {invalid nbhood} -setup {
        create
    } -body {
        jr sat slope 1 0 DUMMY SHIA SFT 100.0
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "DUMMY", should be one of: N1, N2}

    test sat_slope-1.4 {invalid pgroup} -setup {
        create
    } -body {
        jr sat slope 1 0 N1 DUMMY QOL 100.0
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: KURD, SHIA, SUNN, ORGA, ORGB}

    test sat_slope-1.5 {invalid concern} -setup {
        create
    } -body {
        jr sat slope 1 0 N1 SHIA DUMMY 100.0
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: AUT, CUL, QOL, SFT, CAS, SVC}

    test sat_slope-1.6 {invalid group/concern combo} -setup {
        create
    } -body {
        jr sat slope 1 0 N1 SHIA SVC 100.0
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {g and c must have the same group type, CIV or ORG}

    test sat_slope-1.7 {invalid slope: unknown symbol} -setup {
        create
    } -body {
        jr sat slope 1 0 N1 SHIA SFT DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}

    # test sat_slope-1.8 {invalid limit: unknown symbol} OBSOLETE

    test sat_slope-1.9 {Invalid option} -setup {
        create
    } -body {
        jr sat slope 1 0 N1 SHIA SFT 100.0 -nonesuch foo
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid option: "-nonesuch"}

    test sat_slope-1.10 {Non-numeric -s} -setup {
        create
    } -body {
        jr sat slope 1 0 N1 SHIA SFT 100.0 -s FOO
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "FOO", should be a real number in range 0.0, 1.0}

    test sat_slope-1.11 {Negative -s} -setup {
        create
    } -body {
        jr sat slope 1 0 N1 SHIA SFT 100.0 -s -0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "-0.1", should be a real number in range 0.0, 1.0}

    test sat_slope-1.12 {-s greater than 1.0} -setup {
        create
    } -body {
        jr sat slope 1 0 N1 SHIA SFT 100.0 -s 1.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "1.1", should be a real number in range 0.0, 1.0}

    test sat_slope-1.13 {Non-numeric -p} -setup {
        create
    } -body {
        jr sat slope 1 0 N1 SHIA SFT 100.0 -p FOO
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "FOO", should be a real number in range 0.0, 1.0}

    test sat_slope-1.14 {Negative -p} -setup {
        create
    } -body {
        jr sat slope 1 0 N1 SHIA SFT 100.0 -p -0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "-0.1", should be a real number in range 0.0, 1.0}

    test sat_slope-1.15 {-p greater than 1.0} -setup {
        create
    } -body {
        jr sat slope 1 0 N1 SHIA SFT 100.0 -p 1.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "1.1", should be a real number in range 0.0, 1.0}

    test sat_slope-1.16 {Non-numeric -q} -setup {
        create
    } -body {
        jr sat slope 1 0 N1 SHIA SFT 100.0 -q FOO
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "FOO", should be a real number in range 0.0, 1.0}

    test sat_slope-1.17 {Negative -q} -setup {
        create
    } -body {
        jr sat slope 1 0 N1 SHIA SFT 100.0 -q -0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "-0.1", should be a real number in range 0.0, 1.0}

    test sat_slope-1.18 {-q greater than 1.0} -setup {
        create
    } -body {
        jr sat slope 1 0 N1 SHIA SFT 100.0 -q 1.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "1.1", should be a real number in range 0.0, 1.0}

    test sat_slope-1.19 {invalid cause} -constraints cause -setup {
        create
    } -body {
        jr sat slope 1 0 N1 SHIA SFT 10.0 -cause DUMMY
    } -cleanup {sat_level-9
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value, "DUMMY"}

    test sat_slope-1.20 {slope scheduled for an driver in decreasing time sequence} -setup {
        create
    } -body {
        jr sat slope 1 10 N1 SHIA SFT 10.0
        jr sat slope 1  5 N1 SHIA SFT 10.0
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {slope scheduled in decreasing time sequence: 5 < 10}
    
    # sat_slope-2.*: Scheduling

    test sat_slope-2.1 {schedule slope for one n,g,c.} -setup {
        create
    } -body {
        jr sat slope 1 0 N2 KURD SFT 100.0
        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG   Cause E Start Time   End Time Nbhd Grp  Con Slope AThresh DThresh Nominal Actual 
----- -- ---- ----- - ------------ -------- ---- ---- --- ----- ------- ------- ------- ------ 
1.1   N2 KURD D1    D 010000ZJAN70 n/a      N2   KURD SFT 100.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N2   SHIA SFT  60.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N2   SUNN SFT -60.0 100.0   -100.0    0.0     0.0  
    }

    test sat_slope-2.2 {schedule slope for one n,g,c, -s 0.5} -setup {
        create 
    } -body {
        jr sat slope 1 0 N2 KURD SFT 100.0 -s 0.5
        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG   Cause E Start Time   End Time Nbhd Grp  Con Slope AThresh DThresh Nominal Actual 
----- -- ---- ----- - ------------ -------- ---- ---- --- ----- ------- ------- ------- ------ 
1.1   N2 KURD D1    D 010000ZJAN70 n/a      N2   KURD SFT 100.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N2   SHIA SFT  30.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N2   SUNN SFT -30.0 100.0   -100.0    0.0     0.0  
    }

    test sat_slope-2.3 {successive inputs for a driver stack} -setup {
        create 
    } -body {
        jr sat slope 1  0 N2 KURD SFT 100.0
        jr sat slope 1  5 N2 KURD SFT  75.0
        jr sat slope 1 10 N2 KURD SFT   0.0
        jr sat slope 1 15 N2 KURD SFT 100.0
        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG   Cause E Start Time   End Time     Nbhd Grp  Con Slope AThresh DThresh Nominal Actual 
----- -- ---- ----- - ------------ ------------ ---- ---- --- ----- ------- ------- ------- ------ 
1.4   N2 KURD D1    D 010000ZJAN70 010005ZJAN70 N2   KURD SFT 100.0 100.0   -100.0    0.0     0.0  
'     '  '    '     D 010005ZJAN70 010010ZJAN70 N2   KURD SFT  75.0 100.0   -100.0    0.0     0.0  
'     '  '    '     D 010010ZJAN70 010015ZJAN70 N2   KURD SFT   0.0 100.0   -100.0    0.0     0.0  
'     '  '    '     D 010015ZJAN70 n/a          N2   KURD SFT 100.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 010005ZJAN70 N2   SHIA SFT  60.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010005ZJAN70 010010ZJAN70 N2   SHIA SFT  45.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010010ZJAN70 010015ZJAN70 N2   SHIA SFT   0.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010015ZJAN70 n/a          N2   SHIA SFT  60.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 010005ZJAN70 N2   SUNN SFT -60.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010005ZJAN70 010010ZJAN70 N2   SUNN SFT -45.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010010ZJAN70 010015ZJAN70 N2   SUNN SFT   0.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010015ZJAN70 n/a          N2   SUNN SFT -60.0 100.0   -100.0    0.0     0.0  
    }

    test sat_slope-2.4 {no direct effect if pgroup has zero pop} -setup {
        create

        # FIRST, set SHIA population to 0 in neighborhood N1
        rdb eval {
            UPDATE gram_ng 
            SET population  = 0.0,
                sat_tracked = 0
            WHERE n='N1' AND g='SHIA'
        }
        
        init 
    } -body {
        jr sat slope 1 0 N1 SHIA SFT 100.0

        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG   Cause E Start Time   End Time Nbhd Grp  Con Slope AThresh DThresh Nominal Actual 
----- -- ---- ----- - ------------ -------- ---- ---- --- ----- ------- ------- ------- ------ 
1.1   N1 SHIA D1    I 010000ZJAN70 n/a      N1   KURD SFT  60.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N1   SUNN SFT -30.0 100.0   -100.0    0.0     0.0  
    }

    test sat_slope-2.5 {no indirect effect if pgroup has zero pop} -setup {
        create 

        # FIRST, set SHIA population to 0 in neighborhood N1
        rdb eval {
            UPDATE gram_ng 
            SET population  = 0.0,
                sat_tracked = 0
            WHERE n='N1' AND g='SHIA'
        }
        
        init 
    } -body {
        jr sat slope 1 0 N1 KURD SFT 100.0

        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG   Cause E Start Time   End Time Nbhd Grp  Con Slope AThresh DThresh Nominal Actual 
----- -- ---- ----- - ------------ -------- ---- ---- --- ----- ------- ------- ------- ------ 
1.1   N1 KURD D1    D 010000ZJAN70 n/a      N1   KURD SFT 100.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N1   SUNN SFT -60.0 100.0   -100.0    0.0     0.0  
    }

    # sat_slope-2.6 OBSOLETE

    test sat_slope-2.7 {Indirect effects in all nbhoods, N2 near} -setup {
        create

        # Update GRAM's proximity, and re-initialize
        set near [eproximity index near]

        rdb eval {
            UPDATE gram_mn
            SET proximity=$near
            WHERE m='N2' AND n='N1'
        }

        init 
    }  -body {
        # Enter slope input
        jr sat slope 1 0 N1 KURD SFT 100.0 -p 0.5 -q 0.1

        # Expect direct effect on SHIA, indirect on others, in both 
        # neighborhoods; 0.5 effect in N2 since N2 is near.
        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG   Cause E Start Time   End Time Nbhd Grp  Con Slope AThresh DThresh Nominal Actual 
----- -- ---- ----- - ------------ -------- ---- ---- --- ----- ------- ------- ------- ------ 
1.1   N1 KURD D1    D 010000ZJAN70 n/a      N1   KURD SFT 100.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N1   SHIA SFT  60.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N1   SUNN SFT -60.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N2   KURD SFT  50.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N2   SHIA SFT  30.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N2   SUNN SFT -30.0 100.0   -100.0    0.0     0.0  
    }

    test sat_slope-2.8 {Indirect effects in all nbhoods, N2 far} -setup {
        create 
    } -body {
        jr sat slope 1 0 N1 KURD SFT 100.0 -p 0.5 -q 0.1

        # Expect direct effect on SHIA, indirect on others, in both 
        # neighborhoods; 0.1 effect in N2 since N2 is far.
        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG   Cause E Start Time   End Time Nbhd Grp  Con Slope AThresh DThresh Nominal Actual 
----- -- ---- ----- - ------------ -------- ---- ---- --- ----- ------- ------- ------- ------ 
1.1   N1 KURD D1    D 010000ZJAN70 n/a      N1   KURD SFT 100.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N1   SHIA SFT  60.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N1   SUNN SFT -60.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N2   KURD SFT  10.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N2   SHIA SFT   6.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N2   SUNN SFT  -6.0 100.0   -100.0    0.0     0.0  
    }

    test sat_slope-2.9 {Indirect effects in all nbhoods, N2 remote} -setup {
        create

        # Update GRAM's proximity, and re-initialize
        set remote [eproximity index remote]

        rdb eval {
            UPDATE gram_mn
            SET proximity=$remote
            WHERE m='N2' AND n='N1'
        }

        init 
    } -body {
        # Enter a slope input.
        jr sat slope 1 0 N1 KURD SFT 100.0 -p 0.5 -q 0.1

        # Expect direct effect on SHIA, indirect on others in N1;
        # no effects in N2 since N2 is remote.
        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG   Cause E Start Time   End Time Nbhd Grp  Con Slope AThresh DThresh Nominal Actual 
----- -- ---- ----- - ------------ -------- ---- ---- --- ----- ------- ------- ------- ------ 
1.1   N1 KURD D1    D 010000ZJAN70 n/a      N1   KURD SFT 100.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N1   SHIA SFT  60.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N1   SUNN SFT -60.0 100.0   -100.0    0.0     0.0  
    }

    test sat_slope-2.10 {effects_factor != 1.0} -setup {
        create

        # Update the effects_factor
        rdb eval {
            UPDATE gram_ng
            SET effects_factor = 2.0
            WHERE n='N1' AND g='KURD'
        }

        init 
    }  -body {
        # Create a slope input
        jr sat slope 1 0 N1 KURD SFT 100.0 -p 0.5 -q 0.1

        # Expect direct effect on SHIA, indirect on others, in both 
        # neighborhoods; effect in N2 is 0.2 (2.0 * 0.1).
        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG   Cause E Start Time   End Time Nbhd Grp  Con Slope AThresh DThresh Nominal Actual 
----- -- ---- ----- - ------------ -------- ---- ---- --- ----- ------- ------- ------- ------ 
1.1   N1 KURD D1    D 010000ZJAN70 n/a      N1   KURD SFT 100.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N1   SHIA SFT  60.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N1   SUNN SFT -60.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N2   KURD SFT  20.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N2   SHIA SFT  12.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N2   SUNN SFT -12.0 100.0   -100.0    0.0     0.0  
    }

    test sat_slope-2.11 {delayed indirect effects} -setup {
        create

        # Update GRAM's delay, and re-initialize
        rdb eval {
            UPDATE gram_mn
            SET effects_delay = 1.0
            WHERE m='N2' AND n='N1'
        }

        init 
    }  -body {
        # Enter a slope input.
        jr sat slope 1 0 N1 KURD SFT 100.0 -p 0.5 -q 0.1

        # Expect direct effect on SHIA, indirect on others, in both 
        # neighborhoods; 0.1 effect in N2 delayed 1 day.
        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG   Cause E Start Time   End Time Nbhd Grp  Con Slope AThresh DThresh Nominal Actual 
----- -- ---- ----- - ------------ -------- ---- ---- --- ----- ------- ------- ------- ------ 
1.1   N1 KURD D1    D 010000ZJAN70 n/a      N1   KURD SFT 100.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N1   SHIA SFT  60.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N1   SUNN SFT -60.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 020000ZJAN70 n/a      N2   KURD SFT  10.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 020000ZJAN70 n/a      N2   SHIA SFT   6.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 020000ZJAN70 n/a      N2   SUNN SFT  -6.0 100.0   -100.0    0.0     0.0  
    }

    test sat_slope-2.12 {far effects are terminated if -q becomes 0} -setup {
        create         

        # Update GRAM's delay, and re-initialize
        rdb eval {
            UPDATE gram_mn
            SET effects_delay = 1.0
            WHERE m='N2' AND n='N1'
        }

        init 
    }  -body {
        # At time 0, schedule a slope input with far effects.
        jr sat slope 1 0 N1 KURD SFT 100.0 -p 1.0 -q 1.0

        # At time 10, schedule a new slope input without far effects.
        jr sat slope 1 10 N1 KURD SFT 50.0 -p 1.0        

        # Expect direct effect on SHIA, indirect on others, in both 
        # neighborhoods; 1.0 effect in N2 delayed 1 day; and then,
        # 10 minutes later, indirect effects remain near but 
        # are terminated far.
        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG   Cause E Start Time   End Time     Nbhd Grp  Con Slope AThresh DThresh Nominal Actual 
----- -- ---- ----- - ------------ ------------ ---- ---- --- ----- ------- ------- ------- ------ 
1.2   N1 KURD D1    D 010000ZJAN70 010010ZJAN70 N1   KURD SFT 100.0 100.0   -100.0    0.0     0.0  
'     '  '    '     D 010010ZJAN70 n/a          N1   KURD SFT  50.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 010010ZJAN70 N1   SHIA SFT  60.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010010ZJAN70 n/a          N1   SHIA SFT  30.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 010010ZJAN70 N1   SUNN SFT -60.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010010ZJAN70 n/a          N1   SUNN SFT -30.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 020000ZJAN70 020010ZJAN70 N2   KURD SFT 100.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 020010ZJAN70 n/a          N2   KURD SFT   0.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 020000ZJAN70 020010ZJAN70 N2   SHIA SFT  60.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 020010ZJAN70 n/a          N2   SHIA SFT   0.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 020000ZJAN70 020010ZJAN70 N2   SUNN SFT -60.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 020010ZJAN70 n/a          N2   SUNN SFT   0.0 100.0   -100.0    0.0     0.0  
    }
    
    test sat_slope-2.13 {Causes are tagged automatically if -cause is not given} -setup {
        create 
    } -body {
        jr sat slope 1 0 N1 SHIA SFT 10

        rdb eval {SELECT DISTINCT cause FROM gram_effects}
    } -cleanup {
        cleanup
    } -result {D1}

    # sat_slope-3.*: Effect on sat.ngc

    test sat_slope-3.1 {sat increases} -setup {
        create 
    } -body {
        # NEXT, do a slope effect.
        jr sat slope 1 0 N2 KURD QOL 100.0

        # Advance to noon
        myclock advance 720
        jr advance

        tableDiffCols gram_sat {n g c} sat sat0
    } -cleanup {
        cleanup
    } -result {{N2 KURD QOL 50} {N2 SHIA QOL 42} {N2 SUNN QOL -18}}

    # test sat_slope-3.2 {sat increases to limit} -setup OBSOLETE

    test sat_slope-3.3 {successive slope records take effect} -setup {
        create 
    } -body {
        # NEXT, do a level effect.
        jr sat slope 1 0   N2 KURD QOL 100.0
        jr sat slope 1 360 N2 KURD QOL   0.0

        # Advance to noon; should get only 25.0 points of increase.
        myclock advance 720
        jr advance

        tableDiffCols gram_sat {n g c} sat sat0
    } -cleanup {
        cleanup
    } -result {{N2 KURD QOL 25} {N2 SHIA QOL 21} {N2 SUNN QOL -9}}

    # sat_slope-4.*: Expiration

    # test sat_slope-4.1 {slope records expire due to limit} obsolete

    test sat_slope-4.2 {slope records expire due to time} -setup {
        create 
    } -body {
        jr sat slope 1 0   N2 KURD QOL 100.0
        jr sat slope 1 360 N2 KURD QOL   0.0

        # Advance to noon; records should expire.
        myclock advance 720
        jr advance

        dumpSlopes
    } -cleanup {
        cleanup
    } -result {
    }

    test sat_slope-4.3 {negative slopes don't expire immediately} -setup {
        create 
    } -body {
        jr sat slope 1 [myclock now] N1 SHIA SFT -10
        myclock advance 5
        jr advance
        dumpSlopes
    } -cleanup {
        cleanup
    } -result {
Input DN DG   Cause E Start Time   End Time Nbhd Grp  Con Slope AThresh DThresh Nominal Actual 
----- -- ---- ----- - ------------ -------- ---- ---- --- ----- ------- ------- ------- ------ 
1.1   N1 SHIA D1    D 010000ZJAN70 n/a      N1   SHIA SFT -10.0 100.0   -100.0   -0.0    -0.0  
'     '  '    '     I 010000ZJAN70 n/a      N1   KURD SFT  -6.0 100.0   -100.0   -0.0    -0.0  
'     '  '    '     I 010000ZJAN70 n/a      N1   SUNN SFT   3.0 100.0   -100.0    0.0     0.0  
    }

    # test sat_slope-4.4 {negative slopes reach their limit} OBSOLETE

    # sat_slope-5.*: Tracking of contributions

    test sat_slope-5.1 {gram_effects tracks total change} -setup {
        create 
    } -body {
        jr sat slope 1 0 N2 KURD QOL 100.0

        # Advance to noon
        myclock advance 720
        jr advance

        dumpSlopes
    } -cleanup {
        cleanup
    } -result {
Input DN DG   Cause E Start Time   End Time Nbhd Grp  Con Slope AThresh DThresh Nominal Actual 
----- -- ---- ----- - ------------ -------- ---- ---- --- ----- ------- ------- ------- ------ 
1.1   N2 KURD D1    D 010000ZJAN70 n/a      N2   KURD QOL 100.0 100.0   -100.0   50.0    50.0  
'     '  '    '     I 010000ZJAN70 n/a      N2   SHIA QOL  60.0 100.0   -100.0   30.0    42.0  
'     '  '    '     I 010000ZJAN70 n/a      N2   SUNN QOL -60.0 100.0   -100.0  -30.0   -18.0  
    }

    test sat_slope-5.2 {change is tracked across sequential effects} -setup {
        create 
    } -body {
        jr sat slope 1    0 N2 KURD QOL 100.0
        jr sat slope 1  360 N2 KURD QOL   0.0
        jr sat slope 1  720 N2 KURD QOL 100.0

        # Advance 18 hours.
        myclock advance 1080
        jr advance

        pprint [rdb query {
            SELECT id,ts,te,slope,nominal,actual FROM gram_effects
            ORDER BY ts
        }]
    } -cleanup {
        cleanup
    } -result {
id ts  te       slope nominal actual 
-- --- -------- ----- ------- ------ 
1  720 99999999 100.0 50.0    50.0   
2  720 99999999 60.0  30.0    42.0   
3  720 99999999 -60.0 -30.0   -18.0  
    }

    # sat_slope-6.*: Cause interactions

    test sat_slope-6.1 {Inputs with the same cause overlap} -setup {
        create

        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_sat SET sat0 = 0.0}
        init 
    } -body {
        # Schedule two effects of differing strength but the same cause
        # on the same pgroup.  The total effect over the timestep should
        # be the maximum of the two.
        jr sat slope 1 0 N1 SHIA SFT 10 -cause CIVCAS
        jr sat slope 2 0 N1 SHIA SFT  5 -cause CIVCAS

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  The actual contribution should be 
        # based on the 10.  A1 should get credit for 2/3 of the actual
        # contribution and A2 should get credit for 1/3.
        pprint [jr dump sat slope N1 SHIA SFT]

        # Hand check
        # Ratio of AContribs is 3.33 to 1.67 or 2.0.  Check.
        # Sum of AContribs is 3.33 + 1.67 or 5.0      Check.
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time Slope AThr  DThr   NTotal NContrib ATotal AContrib Input DN DG   E 
------ ------------ -------- ----- ----- ------ ------ -------- ------ -------- ----- -- ---- - 
CIVCAS 010000ZJAN70 n/a       10.0 100.0 -100.0   5.00   5.000    3.33   3.333  1.1   N1 SHIA D 
'      '            '          5.0 100.0 -100.0   2.50   2.500    1.67   1.667  2.1   N1 SHIA D 
    }

    test sat_slope-6.2 {Inputs with the same cause overlap: multiple time steps} -setup {
        create

        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_sat SET sat0 = 0.0}
        init 
    } -body {
        # Schedule two effects of differing strength but the same cause
        # on the same pgroup.  The total effect over the timestep should
        # be the maximum of the two.
        jr sat slope 1 0 N1 SHIA SFT 10 -cause CIVCAS
        jr sat slope 2 0 N1 SHIA SFT  5 -cause CIVCAS

        # Advance time.
        myclock advance 360
        jr advance
        myclock advance 720
        jr advance

        # Dump the results.  The actual contribution should be 
        # based on the 10.  A1 should get credit for ~2/3 of the actual
        # contribution and A2 should get credit for ~1/3.
        pprint [jr dump sat slope N1 SHIA SFT]
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time Slope AThr  DThr   NTotal NContrib ATotal AContrib Input DN DG   E 
------ ------------ -------- ----- ----- ------ ------ -------- ------ -------- ----- -- ---- - 
CIVCAS 010000ZJAN70 n/a       10.0 100.0 -100.0   5.00   2.500    3.29   1.625  1.1   N1 SHIA D 
'      '            '          5.0 100.0 -100.0   2.50   1.250    1.65   0.812  2.1   N1 SHIA D 
    }
   
    test sat_slope-6.3 {Inputs with different causes are independent} -setup {
        create

        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_sat SET sat0 = 0.0}
        init 
    } -body {

        # Schedule two effects of differing strength but the same cause
        # on the same pgroup.  The total effect over the timestep should
        # be the maximum of the two.
        jr sat slope 1 0 N1 SHIA SFT 10 -cause CIVCAS
        jr sat slope 2 0 N1 SHIA SFT  5 -cause HOSCAP

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  Each should have its own contribution; the
        # actual contribution should be scaled contribution.
        pprint [jr dump sat slope N1 SHIA SFT]

    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time Slope AThr  DThr   NTotal NContrib ATotal AContrib Input DN DG   E 
------ ------------ -------- ----- ----- ------ ------ -------- ------ -------- ----- -- ---- - 
CIVCAS 010000ZJAN70 n/a       10.0 100.0 -100.0   5.00   5.000    5.00   5.000  1.1   N1 SHIA D 
HOSCAP '            '          5.0 100.0 -100.0   2.50   2.500    2.50   2.500  2.1   N1 SHIA D 
    }
   
    test sat_slope-6.4 {Effects from different inputs with same cause} -setup {
        create

        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_sat SET sat0 = 0.0}
        init 
    } -body {
        # Schedule effects on SHIA and KURD, and look at the indirect effects
        # on SUNN.
        jr sat slope 1 0 N1 SHIA SFT 10 -cause CIVCAS
        jr sat slope 2 0 N1 KURD SFT 10 -cause CIVCAS

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  Each should have its own contribution; the
        # actual contribution should be scaled contribution.
        pprint [jr dump sat slope N1 SUNN SFT]

        # Hand check
        # Ratio of AContribs is -1.0 to -2.0 or 0.5.  Check.
        # Sum of AContribs is -1.0 + -2.0 or -3.0.    Check.
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time Slope AThr  DThr   NTotal NContrib ATotal AContrib Input DN DG   E 
------ ------------ -------- ----- ----- ------ ------ -------- ------ -------- ----- -- ---- - 
CIVCAS 010000ZJAN70 n/a       -3.0 100.0 -100.0  -1.50  -1.500   -1.00  -1.000  1.1   N1 SHIA I 
'      '            '         -6.0 100.0 -100.0  -3.00  -3.000   -2.00  -2.000  2.1   N1 KURD I 
    }

    test sat_slope-6.5 {Chained effects in timestep are combined} -setup {
        create

        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_sat SET sat0 = 0.0}
        init 
    } -body {
        # Schedule chained effects
        jr sat slope 1   0 N1 SHIA SFT 10 -cause CIVCAS
        jr sat slope 1 360 N1 SHIA SFT  0 -cause CIVCAS
        jr sat slope 1 720 N1 SHIA SFT 10 -cause CIVCAS

        # Advance time by 18 hours so that we get 6 hours of each of the positive
        # effects.
        myclock advance 1080
        jr advance

        # Dump the results.  Should get 12 hours of 10.0 slope as a single
        # contribution, for a nominal effect of 5.0.  The actual effect
        # should be 50/50 for the two positive effects.
        pprint [jr dump sat slope N1 SHIA SFT]

        # Hand check: the first two effects have expired.  The third shows a
        # nominal total of 5.0, which is correct since that's a running
        # total for the chain.  Further, it shows that the actual contribution
        # is 2.5, which is appropriate since this effect was active for
        # half the time.
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time Slope AThr  DThr   NTotal NContrib ATotal AContrib Input DN DG   E 
------ ------------ -------- ----- ----- ------ ------ -------- ------ -------- ----- -- ---- - 
CIVCAS 011200ZJAN70 n/a       10.0 100.0 -100.0   5.00   5.000    5.00   5.000  1.3   N1 SHIA D 
    }

    test sat_slope-6.6 {different causes have distinct chains} -setup {
        create 
    } -body {
        # If we create two inputs for the same n,g,c with different
        # causes, we get different chains
        jr sat slope 1  5 N1 SHIA SFT 10.0 -cause PATROL
        jr sat slope 1 10 N1 SHIA SFT 10.0 -cause GUARD

        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG   Cause  E Start Time   End Time Nbhd Grp  Con Slope AThresh DThresh Nominal Actual 
----- -- ---- ------ - ------------ -------- ---- ---- --- ----- ------- ------- ------- ------ 
1.1   N1 SHIA PATROL D 010005ZJAN70 n/a      N1   SHIA SFT  10.0 100.0   -100.0    0.0     0.0  
'     '  '    '      I 010005ZJAN70 n/a      N1   KURD SFT   6.0 100.0   -100.0    0.0     0.0  
'     '  '    '      I 010005ZJAN70 n/a      N1   SUNN SFT  -3.0 100.0   -100.0    0.0     0.0  
1.2   '  '    GUARD  D 010010ZJAN70 n/a      N1   SHIA SFT  10.0 100.0   -100.0    0.0     0.0  
'     '  '    '      I 010010ZJAN70 n/a      N1   KURD SFT   6.0 100.0   -100.0    0.0     0.0  
'     '  '    '      I 010010ZJAN70 n/a      N1   SUNN SFT  -3.0 100.0   -100.0    0.0     0.0  
    }
    
    test sat_slope-6.7 {different causes have distinct chains: update} -setup {
        create 
    } -body {
        # If we update for one cause, it doesn't affect the other
        jr sat slope 1  5 N1 SHIA SFT 10.0 -cause PATROL
        jr sat slope 1 10 N1 SHIA SFT 10.0 -cause GUARD
        jr sat slope 1 15 N1 SHIA SFT  5.0 -cause PATROL

        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG   Cause  E Start Time   End Time     Nbhd Grp  Con Slope AThresh DThresh Nominal Actual 
----- -- ---- ------ - ------------ ------------ ---- ---- --- ----- ------- ------- ------- ------ 
1.2   N1 SHIA GUARD  D 010010ZJAN70 n/a          N1   SHIA SFT  10.0 100.0   -100.0    0.0     0.0  
'     '  '    '      I 010010ZJAN70 n/a          N1   KURD SFT   6.0 100.0   -100.0    0.0     0.0  
'     '  '    '      I 010010ZJAN70 n/a          N1   SUNN SFT  -3.0 100.0   -100.0    0.0     0.0  
1.3   '  '    PATROL D 010005ZJAN70 010015ZJAN70 N1   SHIA SFT  10.0 100.0   -100.0    0.0     0.0  
'     '  '    '      D 010015ZJAN70 n/a          N1   SHIA SFT   5.0 100.0   -100.0    0.0     0.0  
'     '  '    '      I 010005ZJAN70 010015ZJAN70 N1   KURD SFT   6.0 100.0   -100.0    0.0     0.0  
'     '  '    '      I 010015ZJAN70 n/a          N1   KURD SFT   3.0 100.0   -100.0    0.0     0.0  
'     '  '    '      I 010005ZJAN70 010015ZJAN70 N1   SUNN SFT  -3.0 100.0   -100.0    0.0     0.0  
'     '  '    '      I 010015ZJAN70 n/a          N1   SUNN SFT  -1.5 100.0   -100.0    0.0     0.0  
    }
    
    test sat_slope-6.8 {different causes have distinct chains: end} -setup {
        create 
    } -body {
        # If we update for one cause, it doesn't affect the other
        jr sat slope 1  5 N1 SHIA SFT 10.0 -cause PATROL
        jr sat slope 1 10 N1 SHIA SFT 10.0 -cause GUARD
        jr sat slope 1 15 N1 SHIA SFT  0.0 -cause PATROL

        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG   Cause  E Start Time   End Time     Nbhd Grp  Con Slope AThresh DThresh Nominal Actual 
----- -- ---- ------ - ------------ ------------ ---- ---- --- ----- ------- ------- ------- ------ 
1.2   N1 SHIA GUARD  D 010010ZJAN70 n/a          N1   SHIA SFT  10.0 100.0   -100.0    0.0     0.0  
'     '  '    '      I 010010ZJAN70 n/a          N1   KURD SFT   6.0 100.0   -100.0    0.0     0.0  
'     '  '    '      I 010010ZJAN70 n/a          N1   SUNN SFT  -3.0 100.0   -100.0    0.0     0.0  
1.3   '  '    PATROL D 010005ZJAN70 010015ZJAN70 N1   SHIA SFT  10.0 100.0   -100.0    0.0     0.0  
'     '  '    '      D 010015ZJAN70 n/a          N1   SHIA SFT   0.0 100.0   -100.0    0.0     0.0  
'     '  '    '      I 010005ZJAN70 010015ZJAN70 N1   KURD SFT   6.0 100.0   -100.0    0.0     0.0  
'     '  '    '      I 010015ZJAN70 n/a          N1   KURD SFT   0.0 100.0   -100.0    0.0     0.0  
'     '  '    '      I 010005ZJAN70 010015ZJAN70 N1   SUNN SFT  -3.0 100.0   -100.0    0.0     0.0  
'     '  '    '      I 010015ZJAN70 n/a          N1   SUNN SFT   0.0 100.0   -100.0    0.0     0.0  
    }

    # sat_slope-7.*: Scheduling returns input

    test sat_slope-7.1 {Return input, case 1: one nbhood, 0 limit} -setup {
        create 
    } -body {
        set a [jr sat slope 1 0 N1 SHIA SFT 0]
        set b [jr sat slope 1 0 N1 SHIA QOL 0]
        set c [rdb eval {SELECT DISTINCT input FROM gram_effects}]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 2 {}}

    test sat_slope-7.2 {Return input, case 2: one nbhood, terminate} -setup {
        create 
    } -body {
        set a [jr sat slope 1 0 N1 SHIA SFT 10]
        set b [jr sat slope 1 0 N1 SHIA QOL 10]
        set c [jr sat slope 1 0 N1 SHIA SFT 0]
        set d [jr sat slope 1 0 N1 SHIA QOL 0]
        set e [rdb eval {SELECT DISTINCT input FROM gram_effects}]

        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {1 2 3 4 {3 4}}

    # sat_slope-7.3 OBSOLETE

    # sat_slope-7.4 OBSOLETE

    test sat_slope-7.5 {Return input, case 5: nominal case} -setup {
        create 
    } -body {
        set a [jr sat slope 1 0 N1 SHIA SFT 10]
        set b [jr sat slope 1 0 N1 SHIA QOL 10]
        set c [rdb eval {SELECT DISTINCT input FROM gram_effects}]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 2 {1 2}}

    # sat_slope-8.*: Thresholds
    
    test sat_slope-8.1 {Positive, sat0 >= athresh} -setup {
        create 
    } -body {
        set a [jr sat.ngc N1 SHIA AUT]
        
        # Note: $a == 40.0, so it's greater than -athresh
        jr sat slope 1 0 N1 SHIA AUT 10 -athresh 30.0
        
        myclock advance 720
        jr advance
        
        set b [jr sat.ngc N1 SHIA AUT]
        
        expr {$a == $b}
    } -cleanup {
        cleanup
    } -result {1}

    test sat_slope-8.2 {Positive, sat0+delta < athresh} -setup {
        create 
    } -body {
        set a [jr sat.ngc N1 SHIA CUL]
        
        # Note: $a == -40.0, so it's well less than -athresh
        jr sat slope 1 0 N1 SHIA CUL 10 -athresh 30.0
        
        myclock advance 720
        jr advance
        
        set b [jr sat.ngc N1 SHIA CUL]
        
        list $a $b
    } -cleanup {
        cleanup
    } -result {-40.0 -33.0}
    
    test sat_slope-8.3 {Positive, sat0+delta > athresh} -setup {
        create 
    } -body {
        set a [format %.1f [jr sat.ngc N1 SHIA SFT]]
        
        # Note: $a == 40.0, so it's just less than -athresh.
        jr sat slope 1 0 N1 SHIA SFT 10 -athresh 41.0

        # Step twice; we should get an increase on the first, but
        # not on the second.
        myclock advance 720
        jr advance
        set b [format %.1f [jr sat.ngc N1 SHIA SFT]]

        myclock advance 1440
        jr advance
        
        set c [format %.1f [jr sat.ngc N1 SHIA SFT]]
        
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {40.0 43.0 43.0}

    test sat_slope-8.4 {Negative, sat0 <= dthresh} -setup {
        create 
    } -body {
        set a [jr sat.ngc N1 SHIA CUL]
        
        # Note: $a == -40.0, so it's less than -dthresh
        jr sat slope 1 0 N1 SHIA CUL -10 -dthresh -30.0
        
        myclock advance 720
        jr advance
        
        set b [jr sat.ngc N1 SHIA CUL]
        
        expr {$a == $b}
    } -cleanup {
        cleanup
    } -result {1}
    
    test sat_slope-8.5 {Negative, sat0+delta > dthresh} -setup {
        create 
    } -body {
        set a [jr sat.ngc N1 SHIA SFT]
        
        # Note: $a == 40.0, so it's well greater than -dthresh
        jr sat slope 1 0 N1 SHIA SFT -10 -dthresh -30.0
        
        myclock advance 720
        jr advance
        
        set b [jr sat.ngc N1 SHIA SFT]
        
        list $a $b
    } -cleanup {
        cleanup
    } -result {40.0 33.0}
    
    test sat_slope-8.6 {Negative, sat0+delta < dthresh} -setup {
        create 
    } -body {
        set a [format %.1f [jr sat.ngc N1 SHIA CUL]]
        
        # Note: $a == -40.0, so it's just greater than -dthresh.
        jr sat slope 1 0 N1 SHIA CUL -10 -dthresh -41.0

        # Step twice; we should get a decrease on the first, but
        # not on the second.
        myclock advance 720
        jr advance
        set b [format %.1f [jr sat.ngc N1 SHIA CUL]]

        myclock advance 1440
        jr advance
        
        set c [format %.1f [jr sat.ngc N1 SHIA CUL]]
        
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {-40.0 -43.0 -43.0}


    #-------------------------------------------------------------------
    # sat drivers
    #
    # 1.* -- Error checking
    # 2.* -- Valid inputs, no history data
    # 3.* -- Normal aggregation
    # 4.* -- Mood

    # mkhistory
    #
    # We know that the contributions are being recorded correctly.
    # Consequently, for these tests we don't need validate that, but only
    # that they are being aggregated properly. This routine creates a
    # set of simply history values using "sat adjust".

    proc mkhistory {} {
        jr sat adjust 1 N1 KURD AUT 1
        jr sat adjust 1 N1 KURD QOL 2
        jr sat adjust 1 N1 SHIA AUT 3
        jr sat adjust 1 N1 SHIA QOL 4
        jr sat adjust 1 N2 KURD AUT 5
        jr sat adjust 1 N2 KURD QOL 6
        jr sat adjust 1 N2 SHIA AUT 7
        jr sat adjust 1 N2 SHIA QOL 8

        jr sat adjust 2 N1 KURD AUT -1
        jr sat adjust 2 N1 KURD QOL -2
        jr sat adjust 2 N1 SHIA AUT -3
        jr sat adjust 2 N1 SHIA QOL -4
        jr sat adjust 2 N2 KURD AUT -5
        jr sat adjust 2 N2 KURD QOL -6
        jr sat adjust 2 N2 SHIA AUT -7
        jr sat adjust 2 N2 SHIA QOL -8

        myclock advance 10
        jr advance

        jr sat adjust 1 N1 KURD AUT 1
        jr sat adjust 1 N1 KURD QOL 2
        jr sat adjust 1 N1 SHIA AUT 3
        jr sat adjust 1 N1 SHIA QOL 4
        jr sat adjust 1 N2 KURD AUT 5
        jr sat adjust 1 N2 KURD QOL 6
        jr sat adjust 1 N2 SHIA AUT 7
        jr sat adjust 1 N2 SHIA QOL 8

        jr sat adjust 2 N1 KURD AUT -1
        jr sat adjust 2 N1 KURD QOL -2
        jr sat adjust 2 N1 SHIA AUT -3
        jr sat adjust 2 N1 SHIA QOL -4
        jr sat adjust 2 N2 KURD AUT -5
        jr sat adjust 2 N2 KURD QOL -6
        jr sat adjust 2 N2 SHIA AUT -7
        jr sat adjust 2 N2 SHIA QOL -8
    }

    test sat_drivers-1.1 {invalid -nbhood} -setup {
        create
    } -body {
        jr sat drivers -nbhood DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: N1, N2}

    test sat_drivers-1.2 {invalid -group} -setup {
        create
    } -body {
        jr sat drivers -group DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: KURD, SHIA, SUNN, ORGA, ORGB}

    test sat_drivers-1.3 {invalid -concern} -setup {
        create
    } -body {
        jr sat drivers -concern DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: AUT, CUL, QOL, SFT, CAS, SVC}

    test sat_drivers-1.4 {-group/-concern mismatch} -setup {
        create
    } -body {
        jr sat drivers -group SHIA -concern SVC
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {-group and -concern must have the same group type, CIV or ORG}

    test sat_drivers-1.5 {invalid -start} -setup {
        create
    } -body {
        jr sat drivers -start DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", expected integer}

    test sat_drivers-1.6 {invalid -end} -setup {
        create
    } -body {
        jr sat drivers -end DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", expected integer}

    test sat_drivers-1.7 {-start > -end} -setup {
        create
    } -body {
        jr sat drivers -start 10 -end 9
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {-start > -end}

    test sat_drivers-2.1 {Default case, no data} -setup {
        create
    } -body {
        jr sat drivers
        rdb query {SELECT * FROM gram_sat_drivers}
    } -cleanup {
        cleanup
    } -result {}

    test sat_drivers-2.2 {-nbhood, no data} -setup {
        create
    } -body {
        jr sat drivers -nbhood N1
        rdb query {SELECT * FROM gram_sat_drivers}
    } -cleanup {
        cleanup
    } -result {}

    test sat_drivers-2.3 {-group, no data} -setup {
        create
    } -body {
        jr sat drivers -group SHIA
        rdb query {SELECT * FROM gram_sat_drivers}
    } -cleanup {
        cleanup
    } -result {}

    test sat_drivers-2.4 {-concern, no data} -setup {
        create
    } -body {
        jr sat drivers -concern AUT
        rdb query {SELECT * FROM gram_sat_drivers}
    } -cleanup {
        cleanup
    } -result {}

    test sat_drivers-2.5 {-concern mood, no data} -setup {
        create
    } -body {
        jr sat drivers -concern mood
        rdb query {SELECT * FROM gram_sat_drivers}
    } -cleanup {
        cleanup
    } -result {}

    test sat_drivers-2.6 {-start, no data} -setup {
        create
    } -body {
        jr sat drivers -start 5
        rdb query {SELECT * FROM gram_sat_drivers}
    } -cleanup {
        cleanup
    } -result {}

    test sat_drivers-2.7 {-end, no data} -setup {
        create
    } -body {
        jr sat drivers -start 5
        rdb query {SELECT * FROM gram_sat_drivers}
    } -cleanup {
        cleanup
    } -result {}

    test sat_drivers-2.8 {all options, no data} -setup {
        create
    } -body {
        jr sat drivers -nbhood N1 -group SHIA -concern AUT -start 5 -end 10
        rdb query {SELECT * FROM gram_sat_drivers}
    } -cleanup {
        cleanup
    } -result {}

    test sat_drivers-2.9 {all options + mood, no data} -setup {
        create
    } -body {
        jr sat drivers -nbhood N1 -group SHIA -concern mood -start 5 -end 10
        rdb query {SELECT * FROM gram_sat_drivers}
    } -cleanup {
        cleanup
    } -result {}

    test sat_drivers-3.1 {defaults} -setup {
        create
        mkhistory
    } -body {
        jr sat drivers
        pprint [rdb query {SELECT * FROM gram_sat_drivers}]
    } -cleanup {
        cleanup
    } -result {
driver n  g    c   acontrib 
------ -- ---- --- -------- 
1      N1 KURD AUT 2.0      
1      N1 KURD QOL 4.0      
1      N1 SHIA AUT 6.0      
1      N1 SHIA QOL 8.0      
1      N2 KURD AUT 10.0     
1      N2 KURD QOL 12.0     
1      N2 SHIA AUT 14.0     
1      N2 SHIA QOL 16.0     
2      N1 KURD AUT -2.0     
2      N1 KURD QOL -4.0     
2      N1 SHIA AUT -6.0     
2      N1 SHIA QOL -8.0     
2      N2 KURD AUT -10.0    
2      N2 KURD QOL -12.0    
2      N2 SHIA AUT -14.0    
2      N2 SHIA QOL -16.0    
    }

    test sat_drivers-3.2 {-nbhood} -setup {
        create
        mkhistory
    } -body {
        jr sat drivers -nbhood N1
        pprint [rdb query {SELECT * FROM gram_sat_drivers}]
    } -cleanup {
        cleanup
    } -result {
driver n  g    c   acontrib 
------ -- ---- --- -------- 
1      N1 KURD AUT 2.0      
1      N1 KURD QOL 4.0      
1      N1 SHIA AUT 6.0      
1      N1 SHIA QOL 8.0      
2      N1 KURD AUT -2.0     
2      N1 KURD QOL -4.0     
2      N1 SHIA AUT -6.0     
2      N1 SHIA QOL -8.0     
    }

    test sat_drivers-3.3 {-group} -setup {
        create
        mkhistory
    } -body {
        jr sat drivers -group SHIA
        pprint [rdb query {SELECT * FROM gram_sat_drivers}]
    } -cleanup {
        cleanup
    } -result {
driver n  g    c   acontrib 
------ -- ---- --- -------- 
1      N1 SHIA AUT 6.0      
1      N1 SHIA QOL 8.0      
1      N2 SHIA AUT 14.0     
1      N2 SHIA QOL 16.0     
2      N1 SHIA AUT -6.0     
2      N1 SHIA QOL -8.0     
2      N2 SHIA AUT -14.0    
2      N2 SHIA QOL -16.0    
    }

    test sat_drivers-3.4 {-concern} -setup {
        create
        mkhistory
    } -body {
        jr sat drivers -concern AUT
        pprint [rdb query {SELECT * FROM gram_sat_drivers}]
    } -cleanup {
        cleanup
    } -result {
driver n  g    c   acontrib 
------ -- ---- --- -------- 
1      N1 KURD AUT 2.0      
1      N1 SHIA AUT 6.0      
1      N2 KURD AUT 10.0     
1      N2 SHIA AUT 14.0     
2      N1 KURD AUT -2.0     
2      N1 SHIA AUT -6.0     
2      N2 KURD AUT -10.0    
2      N2 SHIA AUT -14.0    
    }

    test sat_drivers-3.5 {-start} -setup {
        create
        mkhistory
    } -body {
        jr sat drivers -start 5
        pprint [rdb query {SELECT * FROM gram_sat_drivers}]
    } -cleanup {
        cleanup
    } -result {
driver n  g    c   acontrib 
------ -- ---- --- -------- 
1      N1 KURD AUT 1.0      
1      N1 KURD QOL 2.0      
1      N1 SHIA AUT 3.0      
1      N1 SHIA QOL 4.0      
1      N2 KURD AUT 5.0      
1      N2 KURD QOL 6.0      
1      N2 SHIA AUT 7.0      
1      N2 SHIA QOL 8.0      
2      N1 KURD AUT -1.0     
2      N1 KURD QOL -2.0     
2      N1 SHIA AUT -3.0     
2      N1 SHIA QOL -4.0     
2      N2 KURD AUT -5.0     
2      N2 KURD QOL -6.0     
2      N2 SHIA AUT -7.0     
2      N2 SHIA QOL -8.0     
    }

    test sat_drivers-3.5 {-end} -setup {
        create
        mkhistory
    } -body {
        jr sat drivers -end 5
        pprint [rdb query {SELECT * FROM gram_sat_drivers}]
    } -cleanup {
        cleanup
    } -result {
driver n  g    c   acontrib 
------ -- ---- --- -------- 
1      N1 KURD AUT 1.0      
1      N1 KURD QOL 2.0      
1      N1 SHIA AUT 3.0      
1      N1 SHIA QOL 4.0      
1      N2 KURD AUT 5.0      
1      N2 KURD QOL 6.0      
1      N2 SHIA AUT 7.0      
1      N2 SHIA QOL 8.0      
2      N1 KURD AUT -1.0     
2      N1 KURD QOL -2.0     
2      N1 SHIA AUT -3.0     
2      N1 SHIA QOL -4.0     
2      N2 KURD AUT -5.0     
2      N2 KURD QOL -6.0     
2      N2 SHIA AUT -7.0     
2      N2 SHIA QOL -8.0     
    }

    test sat_drivers-3.6 {all options} -setup {
        create
        mkhistory
    } -body {
        jr sat drivers -nbhood N2 -group SHIA -concern AUT -start 0 -end 5
        pprint [rdb query {SELECT * FROM gram_sat_drivers}]
    } -cleanup {
        cleanup
    } -result {
driver n  g    c   acontrib 
------ -- ---- --- -------- 
1      N2 SHIA AUT 7.0      
2      N2 SHIA AUT -7.0     
    }

    test sat_drivers-4.1 {-concern mood} -setup {
        create
        mkhistory
    } -body {
        jr sat drivers -nbhood N1 -group SHIA -concern mood
        pprint [rdb query {SELECT * FROM gram_sat_drivers}]

        # The mood should be (6 + 8 + 0 + 0)/4 == 14/4 == 3.5
    } -cleanup {
        cleanup
    } -result {
driver n  g    c    acontrib 
------ -- ---- ---- -------- 
1      N1 SHIA AUT  6.0      
1      N1 SHIA QOL  8.0      
2      N1 SHIA AUT  -6.0     
2      N1 SHIA QOL  -8.0     
1      N1 SHIA mood 3.5      
2      N1 SHIA mood -3.5     
    }

    #-------------------------------------------------------------------
    # coop adjust
    #
    # 1.* -- Error checking
    # 2.* -- Effect on coop.nfg
    # 3.* -- Adjusted values are clamped
    # 4.* -- Contribs is saved

    test coop_adjust-1.1 {short names are OK} -setup {
        create
    } -body {
        jr coop adjust 1 N2 KURD BLUE 5
    } -cleanup {
        cleanup
    } -result {1}

    test coop_adjust-1.2 {n is unknown} -setup {
        create
    } -body {
        jr coop adjust 1 DUMMY KURD BLUE 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: N1, N2}

    test coop_adjust-1.3 {f is unknown} -setup {
        create
    } -body {
        jr coop adjust 1 N2 DUMMY BLUE 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: KURD, SHIA, SUNN}

    test coop_adjust-1.4 {f has wrong group type} -setup {
        create
    } -body {
        jr coop adjust 1 N2 ORGA BLUE 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "ORGA", should be one of: KURD, SHIA, SUNN}


    test coop_adjust-1.5 {g is unknown} -setup {
        create
    } -body {
        jr coop adjust 1 N2 KURD DUMMY 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: BLUE, BRIT, OPFOR}

    test coop_adjust-1.6 {g has wrong group type} -setup {
        create
    } -body {
        jr coop adjust 1 N2 KURD ORGA 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "ORGA", should be one of: BLUE, BRIT, OPFOR}

    test coop_adjust-2.1 {adjustment: specific n, f, g} -setup {
        create
    } -body {
        tableSave gram_coop
        jr coop adjust 1 N2 SUNN BLUE 5
        tableDiff gram_coop nfg_id {n f g} coop
    } -cleanup {
        cleanup
    } -result {{N2 SUNN BLUE 5}}

    test coop_adjust-2.2 {adjustment: n=*, specific f, g} -setup {
        create
    } -body {
        tableSave gram_coop
        jr coop adjust 1 * SUNN BLUE 5
        tableDiff gram_coop nfg_id {n f g} coop
    } -cleanup {
        cleanup
    } -result {{N1 SUNN BLUE 5} {N2 SUNN BLUE 5}}

    test coop_adjust-2.3 {adjustment: f=*, specific n, g} -setup {
        create
    } -body {
        tableSave gram_coop
        jr coop adjust 1 N2 * BLUE 5
        tableDiff gram_coop nfg_id {n f g} coop
    } -cleanup {
        cleanup
    } -result {{N2 KURD BLUE 5} {N2 SHIA BLUE 5} {N2 SUNN BLUE 5}}

    test coop_adjust-2.4 {adjustment: g=*, specific n, f} -setup {
        create
    } -body {
        tableSave gram_coop
        jr coop adjust 1 N2 SHIA * 5
        tableDiff gram_coop nfg_id {n f g} coop
    } -cleanup {
        cleanup
    } -result {{N2 SHIA BLUE 5} {N2 SHIA BRIT 5} {N2 SHIA OPFOR 5}}

    test coop_adjust-2.5 {adjustment: n,f,g=*} -setup {
        create
    } -body {
        tableSave gram_coop
        jr coop adjust 1 * * * 5
        tableDiff gram_coop nfg_id {n f g} coop
    } -cleanup {
        cleanup
    } -result {{N1 KURD BLUE 5} {N1 KURD BRIT 5} {N1 KURD OPFOR 5} {N1 SHIA BLUE 5} {N1 SHIA BRIT 5} {N1 SHIA OPFOR 5} {N1 SUNN BLUE 5} {N1 SUNN BRIT 5} {N1 SUNN OPFOR 5} {N2 KURD BLUE 5} {N2 KURD BRIT 5} {N2 KURD OPFOR 5} {N2 SHIA BLUE 5} {N2 SHIA BRIT 5} {N2 SHIA OPFOR 5} {N2 SUNN BLUE 5} {N2 SUNN BRIT 5} {N2 SUNN OPFOR 5}}

    

    # 3.*: Adjusted values are clamped

    test coop_adjust-3.1 {Cooperations over 100.0 are clamped} -setup {
        create
    } -body {
        tableSave gram_coop
        jr coop adjust 1 N2 SHIA BLUE 300.0
        tableDiff gram_coop nfg_id {n f g} coop
    } -cleanup {
        cleanup
    } -result {{N2 SHIA BLUE 50}}

    test coop_adjust-3.2 {Cooperations under -100.0 are clamped} -setup {
        create
    } -body {
        tableSave gram_coop
        jr coop adjust 1 N2 SHIA BLUE -300.0
        tableDiff gram_coop nfg_id {n f g} coop
    } -cleanup {
        cleanup
    } -result {{N2 SHIA BLUE -50}}

    # 4.*: Contribs is saved

    test coop_adjust-4.1 {gram_contribs is saved} -setup {
        create
    } -body {
        jr coop adjust 1 N1 SHIA BLUE 5
        jr coop adjust 2 N1 KURD BLUE 3
        pprint [rdb query {SELECT * FROM gram_coop_contribs}]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  f    g    
---- ------ -------- -------- -- ---- ---- 
0    1      5.0      36       N1 SHIA BLUE 
0    2      3.0      33       N1 KURD BLUE 
    }

    test coop_adjust-4.2 {multiple adjusts for one driver accumulate} -setup {
        create
    } -body {
        jr coop adjust 1 N1 KURD BLUE 5
        jr coop adjust 1 N1 KURD BLUE 3
        pprint [rdb query {SELECT * FROM gram_coop_contribs}]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  f    g    
---- ------ -------- -------- -- ---- ---- 
0    1      8.0      33       N1 KURD BLUE 
    }

    test coop_adjust-4.3 {Large positive adjustments are clamped} -setup {
        create
    } -body {
        # Curve is initially 50; make it 90.0
        jr coop adjust 1 N1 KURD BLUE 40.0

        # Adjust by 20; should get a contribs of 10.0
        jr coop adjust 2 N1 KURD BLUE 20

        pprint [rdb query {SELECT * FROM gram_coop_contribs}]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  f    g    
---- ------ -------- -------- -- ---- ---- 
0    1      40.0     33       N1 KURD BLUE 
0    2      10.0     33       N1 KURD BLUE 
    }

    test coop_adjust-4.4 {Large negative adjustments are clamped} -setup {
        create
    } -body {
        # Curve is initially 50; make it 10.0
        jr coop adjust 1 N1 KURD BLUE -40.0

        # Adjust by -20; should get a contribs of -10.0
        jr coop adjust 2 N1 KURD BLUE -20

        pprint [rdb query {SELECT * FROM gram_coop_contribs}]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  f    g    
---- ------ -------- -------- -- ---- ---- 
0    1      -40.0    33       N1 KURD BLUE 
0    2      -10.0    33       N1 KURD BLUE 
    }

    test coop_adjust-4.5 {Contribs is timestamped} -setup {
        create
    } -body {
        jr coop adjust 1 N1 KURD BLUE -20

        myclock advance 5
        jr advance

        jr coop adjust 1 N1 KURD BLUE  40

        pprint [rdb query {SELECT * FROM gram_coop_contribs}]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  f    g    
---- ------ -------- -------- -- ---- ---- 
0    1      -20.0    33       N1 KURD BLUE 
5    1      40.0     33       N1 KURD BLUE 
    }

    test coop_adjust-5.1 {gram_deltas is updated} -setup {
        create
    } -body {
        set a [rdb onecolumn {
            SELECT delta FROM gram_coop_deltas
            WHERE n='N1' AND f='SHIA' AND g='BLUE'
            AND time=0
        }]

        jr coop adjust 1 N1 SHIA BLUE 5

        set b [rdb onecolumn {
            SELECT delta FROM gram_coop_deltas
            WHERE n='N1' AND f='SHIA' AND g='BLUE'
            AND time=0
        }]

        list $a $b
    } -cleanup {
        cleanup
    } -result {0.0 5.0}


    test coop_adjust-6.1 {last_input is updated and returned} -setup {
        create
    } -body {
        set a [jr coop adjust 1 N1 SHIA BLUE 5]
        set b [jr coop adjust 1 N1 SHIA BLUE 5]
        set c [jr coop adjust 1 N1 SHIA BLUE 5]
        set d [rdb onecolumn {
            SELECT last_input FROM gram_driver
            WHERE driver=1
        }]

        list $a $b $c $d
    } -cleanup {
        cleanup
    } -result {1 2 3 3}




    #-------------------------------------------------------------------
    # coop set
    #
    # 1.* -- Error checking
    # 2.* -- Effect on coop.nfg
    # 3.* -- Contribs are saved

    test coop_set-1.1 {short names are OK} -setup {
        create
    } -body {
        jr coop set 1 N2 KURD BLUE 5
    } -cleanup {
        cleanup
    } -result {1}

    test coop_set-1.2 {n is unknown} -setup {
        create
    } -body {
        jr coop set 1 DUMMY KURD BLUE 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: N1, N2}

    test coop_set-1.3 {f is unknown} -setup {
        create
    } -body {
        jr coop set 1 N2 DUMMY BLUE 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: KURD, SHIA, SUNN}

    test coop_set-1.4 {f has wrong group type} -setup {
        create
    } -body {
        jr coop set 1 N2 ORGA BLUE 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "ORGA", should be one of: KURD, SHIA, SUNN}


    test coop_set-1.5 {g is unknown} -setup {
        create
    } -body {
        jr coop set 1 N2 KURD DUMMY 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: BLUE, BRIT, OPFOR}

    test coop_set-1.6 {g has wrong group type} -setup {
        create
    } -body {
        jr coop set 1 N2 KURD ORGA 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "ORGA", should be one of: BLUE, BRIT, OPFOR}

    test coop_set-1.7 {coop is out of range} -setup {
        create
    } -body {
        jr coop set 1 N2 KURD BLUE 101
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "101", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}

    test coop_set-2.1 {set: specific n, f, g} -setup {
        create
    } -body {
        tableSave gram_coop
        jr coop set 1 N2 SUNN BLUE 5
        tableDiff gram_coop nfg_id {n f g} coop
    } -cleanup {
        cleanup
    } -result {{N2 SUNN BLUE -45}}

    test coop_set-2.2 {set: n=*, specific f, g} -setup {
        create
    } -body {
        tableSave gram_coop
        jr coop set 1 * SUNN BLUE 5
        tableDiff gram_coop nfg_id {n f g} coop
    } -cleanup {
        cleanup
    } -result {{N1 SUNN BLUE -45} {N2 SUNN BLUE -45}}

    test coop_set-2.3 {set: f=*, specific n, g} -setup {
        create
    } -body {
        tableSave gram_coop
        jr coop set 1 N2 * BLUE 5
        tableDiff gram_coop nfg_id {n f g} coop
    } -cleanup {
        cleanup
    } -result {{N2 KURD BLUE -45} {N2 SHIA BLUE -45} {N2 SUNN BLUE -45}}

    test coop_set-2.4 {set: g=*, specific n, f} -setup {
        create
    } -body {
        tableSave gram_coop
        jr coop set 1 N2 SHIA * 5
        tableDiff gram_coop nfg_id {n f g} coop
    } -cleanup {
        cleanup
    } -result {{N2 SHIA BLUE -45} {N2 SHIA BRIT -45} {N2 SHIA OPFOR -45}}

    # 3.*: Contribs are saved
    #
    # Note: this routine uses the same code as "coop adjust" to make
    # the actual change.  Thus, there's no need to repeat all of
    # the tests.

    test coop_set-4.1 {gram_contribs is saved} -setup {
        create
    } -body {
        jr coop set 1 N1 SHIA BLUE 5
        jr coop set 2 N1 KURD BLUE 3
        pprint [rdb query {SELECT * FROM gram_coop_contribs}]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  f    g    
---- ------ -------- -------- -- ---- ---- 
0    1      -45.0    36       N1 SHIA BLUE 
0    2      -47.0    33       N1 KURD BLUE 
    }


    test coop_set-5.1 {last_input is updated and returned} -setup {
        create
    } -body {
        set a [jr coop set 1 N1 SHIA BLUE 5]
        set b [jr coop set 1 N1 SHIA BLUE 10]
        set c [jr coop set 1 N1 SHIA BLUE 15]
        set d [rdb onecolumn {
            SELECT last_input FROM gram_driver
            WHERE driver=1
        }]

        list $a $b $c $d
    } -cleanup {
        cleanup
    } -result {1 2 3 3}


    test coop_set-5.2 {last_input is undone} -setup {
        create
    } -body {
        set a [jr coop set 1 N1 SHIA BLUE 5]
        set b [jr coop set 1 N1 SHIA BLUE 10]
        set c [jr coop set 1 N1 SHIA BLUE 15]
        set d [jr coop set 1 N1 SHIA BLUE 10 -undo]
        set e [jr coop set 1 N1 SHIA BLUE 5 -undo]
        set f [rdb onecolumn {
            SELECT last_input FROM gram_driver
            WHERE driver=1
        }]

        list $a $b $c $d $e $f
    } -cleanup {
        cleanup
    } -result {1 2 3 {} {} 1}


    #-------------------------------------------------------------------
    # coop level
    #
    # 1.*: error checking
    # 2.*: scheduling
        
    test coop_level-1.1 {ts not numeric} -setup {
        create
    } -body {
        jr coop level 1 DUMMY N1 SHIA BLUE 10.0 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {non-numeric ts: "DUMMY"}

    test coop_level-1.2 {ts in past} -setup {
        create
    } -body {
        jr coop level 1 -1 N1 SHIA BLUE 10.0 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {Start time is in the past: '312359ZDEC69'}

    test coop_level-1.3 {n is unknown} -setup {
        create
    } -body {
        jr coop level 1 0 DUMMY SHIA BLUE 10.0 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "DUMMY", should be one of: N1, N2}

    test coop_level-1.4 {f is unknown} -setup {
        create
    } -body {
        jr coop level 1 0 N1 DUMMY BLUE 10.0 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "DUMMY", should be one of: KURD, SHIA, SUNN}

    test coop_level-1.5 {g is unknown} -setup {
        create
    } -body {
        jr coop level 1 0 N1 SHIA DUMMY 10.0 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "DUMMY", should be one of: BLUE, BRIT, OPFOR}

    test coop_level-1.6 {invalid limit: unknown symbol} -setup {
        create
    } -body {
        jr coop level 1 0 N1 SHIA BLUE DUMMY 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "DUMMY", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}

    test coop_level-1.7 {invalid days: unknown symbol} -setup {
        create
    } -body {
        jr coop level 1 0 N1 SHIA BLUE 10.0 DUMMY
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "DUMMY", should be a real number no less than 0.0, or one of: XL, L, M, S, XS}

    test coop_level-1.8 {negative days} -setup {
        create
    } -body {
        jr coop level 1 0 N1 SHIA BLUE 10.0 -1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "-1", should be a real number no less than 0.0, or one of: XL, L, M, S, XS}

    test coop_level-1.9 {Invalid option} -setup {
        create
    } -body {
        jr coop level 1 0 N1 SHIA BLUE 10.0 1 -nonesuch foo
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid option: "-nonesuch"}


    test coop_level-1.10 {Non-numeric -s} -setup {
        create
    } -body {
        jr coop level 1 0 N1 SHIA BLUE 10.0 1 -s FOO
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "FOO", should be a real number in range 0.0, 1.0}

    test coop_level-1.11 {Negative -s} -setup {
        create
    } -body {
        jr coop level 1 0 N1 SHIA BLUE 10.0 1 -s -0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "-0.1", should be a real number in range 0.0, 1.0}

    test coop_level-1.12 {-s greater than 1.0} -setup {
        create
    } -body {
        jr coop level 1 0 N1 SHIA BLUE 10.0 1 -s 1.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "1.1", should be a real number in range 0.0, 1.0}


    test coop_level-1.13 {Non-numeric -p} -setup {
        create
    } -body {
        jr coop level 1 0 N1 SHIA BLUE 10.0 1 -p FOO
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "FOO", should be a real number in range 0.0, 1.0}

    test coop_level-1.14 {Negative -p} -setup {
        create
    } -body {
        jr coop level 1 0 N1 SHIA BLUE 10.0 1 -p -0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "-0.1", should be a real number in range 0.0, 1.0}

    test coop_level-1.15 {-p greater than 1.0} -setup {
        create
    } -body {
        jr coop level 1 0 N1 SHIA BLUE 10.0 1 -p 1.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "1.1", should be a real number in range 0.0, 1.0}


    test coop_level-1.16 {Non-numeric -q} -setup {
        create
    } -body {
        jr coop level 1 0 N1 SHIA BLUE 10.0 1 -q FOO
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "FOO", should be a real number in range 0.0, 1.0}

    test coop_level-1.17 {Negative -q} -setup {
        create
    } -body {
        jr coop level 1 0 N1 SHIA BLUE 10.0 1 -q -0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "-0.1", should be a real number in range 0.0, 1.0}

    test coop_level-1.18 {-q greater than 1.0} -setup {
        create
    } -body {
        jr coop level 1 0 N1 SHIA BLUE 10.0 1 -q 1.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "1.1", should be a real number in range 0.0, 1.0}

    test coop_level-1.19 {invalid cause} -constraints cause -setup {
        create
    } -body {
        jr coop level 1 0 N1 SHIA BLUE 10.0 1 -cause DUMMY
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value, "DUMMY"}

    # 2.*: Scheduling

    test coop_level-2.1 {schedule for one n,f,g.} -setup {
        create
    } -body {
        jr coop level 1 0 N2 KURD BRIT 10.0 0.1
        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te  n  f    g     llimit 
- -- --- -- ---- ----- ------ 
I 0  144 N2 KURD BLUE  8.00   
D 0  144 N2 KURD BRIT  10.00  
I 0  144 N2 KURD OPFOR -8.00  
    }

    test coop_level-2.2 {schedule with -s 0.5} -setup {
        create
    } -body {
        jr coop level 1 0 N2 KURD BRIT 10.0 0.1 -s 0.5
        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te  n  f    g     llimit 
- -- --- -- ---- ----- ------ 
I 0  144 N2 KURD BLUE  4.00   
D 0  144 N2 KURD BRIT  10.00  
I 0  144 N2 KURD OPFOR -4.00  
    }

    test coop_level-2.3 {zero magnitude events are ignored} -setup {
        create
    } -body {
        jr coop level 1 0 N2 KURD BRIT 0.0 0.1
        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
    }

    test coop_level-2.4 {epsilon events are immediate} -setup {
        create
    } -body {
        jr coop level 1 0 N2 KURD BRIT 0.05 0.1
        
        # Note that ts=te for all effects.
        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te n  f    g     llimit 
- -- -- -- ---- ----- ------ 
I 0  0  N2 KURD BLUE  0.04   
D 0  0  N2 KURD BRIT  0.05   
I 0  0  N2 KURD OPFOR -0.04  
    }

    test coop_level-2.5 {zero magnitude indirect effects are ignored.} -setup {
        create
    } -body {
        # Make sure the relationship matrix is all zeroes
        # (unless f=g!)
        
        rdb eval {
            UPDATE gram_nfg SET rel=0.0 
            WHERE f != g
        }

        init


        jr coop level 1 0 N2 KURD BRIT 10.0 1
        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te   n  f    g    llimit 
- -- ---- -- ---- ---- ------ 
D 0  1440 N2 KURD BRIT 10.00  
    }

    test coop_level-2.6 {schedule event in future} -setup {
        create
    } -body {
        jr coop level 1 720 N2 KURD BRIT 10.0 0.1
        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
d ts  te  n  f    g     llimit 
- --- --- -- ---- ----- ------ 
I 720 864 N2 KURD BLUE  8.00   
D 720 864 N2 KURD BRIT  10.00  
I 720 864 N2 KURD OPFOR -8.00  
    }

    test coop_level-2.7 {no effect if pgroup has zero pop} -setup {
        create
    } -body {
        # FIRST, set SHIA population to 0 in neighborhood N1
        rdb eval {
            UPDATE gram_ng 
            SET population  = 0.0,
                sat_tracked = 0
            WHERE n='N1' AND g='SHIA'
        }

        init


        jr coop level 1 0 N1 SHIA BRIT 5.0 0.1

        # Expect no effects in N1, since SHIA is not resident.
        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
    }

    test coop_level-2.8 {Indirect effects in all nbhoods, N2 near} -setup {
        create
    } -body {
        # Update GRAM's proximity, and re-initialize
        set near [eproximity index near]

        rdb eval {
            UPDATE gram_mn
            SET proximity=$near
            WHERE m='N2' AND n='N1'
        }

        init


        # Enter a level input.
        jr coop level 1 0 N1 SHIA BRIT 10.0 0.1 -p 0.5 -q 0.1

        # Expect direct effect on SHIA with BRIT in N1, full strength indirect
        # on SHIA with others in N1, 0.5 effect in N2 (since N2 is near).
        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te  n  f    g     llimit 
- -- --- -- ---- ----- ------ 
I 0  144 N1 SHIA BLUE  8.00   
D 0  144 N1 SHIA BRIT  10.00  
I 0  144 N1 SHIA OPFOR -8.00  
I 0  144 N2 SHIA BLUE  4.00   
I 0  144 N2 SHIA BRIT  5.00   
I 0  144 N2 SHIA OPFOR -4.00  
    }

    test coop_level-2.9 {Indirect effects in all nbhoods, N2 far} -setup {
        create
    } -body {
        jr coop level 1 0 N1 SHIA BRIT 10.0 0.1 -p 0.5 -q 0.1

        # Expect direct effect on SHIA with BRIT in N1, full strength 
        # indirect effect on SHIA with others in N1, 0.1 effect in N2 
        # (since N2 is far).
        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te  n  f    g     llimit 
- -- --- -- ---- ----- ------ 
I 0  144 N1 SHIA BLUE  8.00   
D 0  144 N1 SHIA BRIT  10.00  
I 0  144 N1 SHIA OPFOR -8.00  
I 0  144 N2 SHIA BLUE  0.80   
I 0  144 N2 SHIA BRIT  1.00   
I 0  144 N2 SHIA OPFOR -0.80  
    }

    test coop_level-2.10 {Indirect effects in all nbhoods, N2 remote} -setup {
        create
    } -body {
        # Update GRAM's proximity, and re-initialize
        set remote [eproximity index remote]

        rdb eval {
            UPDATE gram_mn
            SET proximity=$remote
            WHERE m='N2' AND n='N1'
        }

        init


        # Enter a level input.
        jr coop level 1 0 N1 SHIA BRIT 10.0 0.1 -p 0.5 -q 0.1

        # Expect the direct effect on SHIA with BRIT in N1, and
        # full strength indirect on SHIA with others in N1, but
        # no effects in N2 (since N2 is remote).
        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te  n  f    g     llimit 
- -- --- -- ---- ----- ------ 
I 0  144 N1 SHIA BLUE  8.00   
D 0  144 N1 SHIA BRIT  10.00  
I 0  144 N1 SHIA OPFOR -8.00  
    }

    test coop_level-2.11 {Delayed indirect effects} -setup {
        create
    } -body {
        # Update GRAM's delay, and re-initialize
        rdb eval {
            UPDATE gram_mn
            SET effects_delay = 1.0
            WHERE m='N2' AND n='N1'
        }

        init


        # Enter a level input.
        jr coop level 1 0 N1 SHIA BRIT 10.0 0.1 -q 0.1

        # Expect direct effect on SHIA with BRIT in N1, full strength indirect
        # on SHIA with others in N1, 0.1 effect in N2 delayed 1 day.
        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
d ts   te   n  f    g     llimit 
- ---- ---- -- ---- ----- ------ 
I 0    144  N1 SHIA BLUE  8.00   
D 0    144  N1 SHIA BRIT  10.00  
I 0    144  N1 SHIA OPFOR -8.00  
I 1440 1584 N2 SHIA BLUE  0.80   
I 1440 1584 N2 SHIA BRIT  1.00   
I 1440 1584 N2 SHIA OPFOR -0.80  
    }

    test coop_level-3.1 {level increases during interval} -setup {
        create
    } -body {
        # FIRST, do a level effect.
        jr coop level 1 0 N2 KURD BRIT 10.0 1

        # Advance to noon.
        myclock advance 720
        jr advance
        
        tableDiffCols gram_coop {n f g} coop coop0
    } -cleanup {
        cleanup 
    } -result {{N2 KURD BLUE 3.5527864} {N2 KURD BRIT 4.5} {N2 KURD OPFOR -3.5527864}}

    test coop_level-3.2 {level increases to limit} -setup {
        create
    } -body {
        # FIRST, do a level effect.
        jr coop level 1 0 N2 KURD BRIT 10.0 1

        # Advance a full day
        myclock advance 1440
        jr advance
        
        # Because we're doing it in a single step, the scaling
        # should be perfect.  We're starting at 50, so the results
        # should be exactly 1/2 the nominal.
        tableDiffCols gram_coop {n f g} coop coop0
    } -cleanup {
        cleanup 
    } -result {{N2 KURD BLUE 4} {N2 KURD BRIT 5} {N2 KURD OPFOR -4}}

    test coop_level-3.3 {slope increases due to level} -setup {
        create
    } -body {
        # FIRST, advance to noon and get the slope
        myclock advance 720
        jr advance
        tableSave gram_coop

        # NEXT, prepare for the next step
        myclock reset
        init


        # NEXT, schedule a level input, and advance to noon.

        jr coop level 1 0 N2 KURD BRIT 10.0 1

        myclock advance 720
        jr advance
        
        tableDiff gram_coop nfg_id {n f g} slope
    } -cleanup {
        cleanup 
    } -result {{N2 KURD BLUE 7.1055728} {N2 KURD BRIT 9} {N2 KURD OPFOR -7.1055728}}

    test coop_level-3.4 {slope returns to normal after interval} -setup {
        create
    } -body {
        # FIRST, advance two days, in steps and get the slope
        myclock advance 1440
        jr advance
        myclock advance 2880
        jr advance
        
        tableSave gram_coop

        # NEXT, prepare for the next step
        myclock reset
        init


        # NEXT, schedule a level input, and repeat.
        jr coop level 1 0 N2 KURD BRIT 10.0 1

        myclock advance 1440
        jr advance
        myclock advance 2880
        jr advance

        tableDiff gram_coop nfg_id {n f g} slope
    } -cleanup {
        cleanup 
    } -result {}

    test coop_level-4.1 {level effects expire from list} -setup {
        create
    } -body {
        jr coop level 1 0 N1 SHIA OPFOR 10.0 1

        myclock advance 1440
        jr advance

        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
    }

    test coop_level-5.1 {driver is tracked for levels} -setup {
        create
    } -body {
        jr coop level 1 0 N1 SHIA OPFOR 10.0 1
        jr coop level 2 0 N1 SHIA OPFOR  5.0 1

        rdb eval {
            SELECT driver FROM gram_effects
            WHERE etype='L' AND prox=-1
        }
    } -cleanup {
        cleanup 
    } -result {1 2}

    test coop_level-5.2 {input runs from 1 for each driver} -setup {
        create 
    } -body {
        jr coop level 1 0 N1 SHIA BLUE  10.0 1
        jr coop level 1 0 N1 SHIA BRIT  10.0 1
        jr coop level 1 0 N1 SHIA OPFOR 10.0 1
        jr coop level 2 0 N1 SHIA BLUE  10.0 1
        jr coop level 2 0 N1 SHIA BRIT  10.0 1
        jr coop level 2 0 N1 SHIA OPFOR  5.0 1

        rdb eval {
            SELECT DISTINCT driver || '.' || input FROM gram_effects
        }
    } -cleanup {
        cleanup 
    } -result {1.1 1.2 1.3 2.1 2.2 2.3}


    test coop_level-6.1 {Inputs with the same cause overlap} -setup {
        create
    } -body {
        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_coop SET coop0 = 0.0}
        init


        # Schedule two effects of differing strength but the same cause
        # on the same pgroup.  The total effect over the timestep should
        # be the maximum of the two.
        jr coop level 1 0 N1 SHIA OPFOR 10 1.0 -cause CIVCAS
        jr coop level 1 0 N1 SHIA OPFOR  5 1.0 -cause CIVCAS

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  The actual contribution should be 
        # based on the 10.  A1 should get credit for ~2/3 of the actual
        # contribution and A2 should get credit for ~1/3.
        pprint [jr dump coop level N1 SHIA OPFOR]

        # Hand check
        # Ratio of AContribs is 6.093 to 2.907 or 2.096.  Check.
        # Sum of AContribs is 6.093 + 2.907 or 9.0.       Check.
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time     Limit AThr  DThr  NTotal NContrib ATotal AContrib Input DN DF   DG    E 
------ ------------ ------------ ----- ----- ----- ------ -------- ------ -------- ----- -- ---- ----- - 
CIVCAS 010000ZJAN70 020000ZJAN70  10.0 100.0   0.0   9.00   9.000    6.09   6.093  1.1   N1 SHIA OPFOR D 
'      '            '              5.0 100.0   0.0   4.29   4.293    2.91   2.907  1.2   N1 SHIA OPFOR D 
    }

    test coop_level-6.2 {Inputs with the same cause overlap: multiple time steps} -setup {
        create
    } -body {
        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_sat SET sat0 = 0.0}
        init


        # Schedule two effects of differing strength but the same cause
        # on the same pgroup.  The total effect over the timestep should
        # be the maximum of the two.
        jr coop level 1 0 N1 SHIA OPFOR 10 1.0 -cause CIVCAS
        jr coop level 1 0 N1 SHIA OPFOR  5 1.0 -cause CIVCAS

        # Advance time.
        myclock advance 360
        jr advance
        myclock advance 720
        jr advance

        # Dump the results.  The actual contribution should be 
        # based on the 10.  A1 should get credit for ~2/3 of the actual
        # contribution and A2 should get credit for ~1/3.
        pprint [jr dump coop level N1 SHIA OPFOR]

        # Hand check
        # Ratio of AContribs in second time step is 0.653 to 0.354, or 1.84.  Check
        # Sum of AContribs in second time step is 0.653 + 0.354, or 1.007.    Check
        # Ratio of NTotals over the two time steps is 9.00 to 4.29, or 2.1.
        # Ratio of ATotals over the two time steps is 3.00 to 1.43, or 2.1.   Check
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time     Limit AThr  DThr  NTotal NContrib ATotal AContrib Input DN DF   DG    E 
------ ------------ ------------ ----- ----- ----- ------ -------- ------ -------- ----- -- ---- ----- - 
CIVCAS 010000ZJAN70 020000ZJAN70  10.0 100.0   0.0   9.00   2.162    3.00   0.653  1.1   N1 SHIA OPFOR D 
'      '            '              5.0 100.0   0.0   4.29   1.173    1.43   0.354  1.2   N1 SHIA OPFOR D 
    }

    test coop_level-6.3 {Inputs with different causes are independent} -setup {
        create
    } -body {
        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_coop SET coop0 = 0.0}
        init


        # Schedule two effects of differing strength and different causes
        # on the same pgroup.  The effects should be independent
        jr coop level 1 0 N1 SHIA OPFOR 10 1.0 -cause CIVCAS
        jr coop level 1 0 N1 SHIA OPFOR  5 1.0 -cause HOSCAP

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  Each should have its own contribution; the
        # actual contribution should be scaled contribution.
        pprint [jr dump coop level N1 SHIA OPFOR]

    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time     Limit AThr  DThr  NTotal NContrib ATotal AContrib Input DN DF   DG    E 
------ ------------ ------------ ----- ----- ----- ------ -------- ------ -------- ----- -- ---- ----- - 
CIVCAS 010000ZJAN70 020000ZJAN70  10.0 100.0   0.0   9.00   9.000    9.00   9.000  1.1   N1 SHIA OPFOR D 
HOSCAP '            '              5.0 100.0   0.0   4.29   4.293    4.29   4.293  1.2   N1 SHIA OPFOR D 
    }
   
    test coop_level-6.4 {Effects from different inputs with same cause} -setup {
        create
    } -body {
        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_coop SET coop0 = 0.0}
        init


        jr coop level 1 0 N1 SHIA OPFOR 10 1.0 -cause CIVCAS -p 1.0 -q 1.0
        jr coop level 1 0 N2 SHIA OPFOR 10 1.0 -cause CIVCAS -p 1.0 -q 1.0

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  Each should have its own contribution; the
        # actual contribution should be scaled contribution.
        pprint [jr dump coop level N1 SHIA OPFOR]

        # Hand check
        # Ratio of Acontribs is 1.0.  Check.
        # Sum of AContribs is 9.0. Check.
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time     Limit AThr  DThr  NTotal NContrib ATotal AContrib Input DN DF   DG    E 
------ ------------ ------------ ----- ----- ----- ------ -------- ------ -------- ----- -- ---- ----- - 
CIVCAS 010000ZJAN70 020000ZJAN70  10.0 100.0   0.0   9.00   9.000    4.50   4.500  1.1   N1 SHIA OPFOR D 
'      '            '             10.0 100.0   0.0   9.00   9.000    4.50   4.500  1.2   N2 SHIA OPFOR I 
    }

    # coop_level-7.*: Automatic causes

    test coop_level-7.1 {Causes are tagged automatically if -cause is not given} -setup {
        create 
    } -body {
        jr coop level 1 0 N1 SHIA OPFOR 10 10

        rdb eval {
            SELECT DISTINCT cause 
            FROM gram_effects
        }
    } -cleanup {
        cleanup
    } -result {D1}

    # coop_level-8.*: "level" returns input

    test coop_level-8.1 {Returns input, case 1: input is ignored.} -setup {
        create 
    } -body {
        set a [jr coop level 1 0 N1 SHIA OPFOR 0 1]
        set b [jr coop level 1 0 N1 SHIA BRIT 0 1]

        set c [rdb eval {SELECT input FROM gram_effects}]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 2 {}}

    test coop_level-8.2 {Returns input, case 2: normal input.} -setup {
        create
    } -body {
        set a [jr coop level 1 0 N1 SHIA OPFOR 10 1]
        set b [jr coop level 1 0 N1 SHIA BRIT 10 1]
        set c [rdb eval {SELECT DISTINCT input FROM gram_effects}]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 2 {1 2}}

    # coop_level-9.*: Thresholds
    
    test coop_level-9.1 {Positive, coop0 >= athresh} -setup {
        create 
    } -body {
        set a [jr coop.nfg N1 SHIA BLUE]
        
        # Note: $a == 50.0, so it's greater than -athresh
        jr coop level 1 0 N1 SHIA BLUE 10 0.1 -athresh 30.0
        
        myclock advance 720
        jr advance
        
        set b [jr coop.nfg N1 SHIA BLUE]
        
        expr {$a == $b}
    } -cleanup {
        cleanup
    } -result {1}

    test coop_level-9.2 {Positive, coop0+delta < athresh} -setup {
        create 
    } -body {
        set a [jr coop.nfg N1 SHIA BLUE]
        
        # Note: $a == 50.0, so it's well less than -athresh
        jr coop level 1 0 N1 SHIA BLUE 10 0.1 -athresh 90.0
        
        myclock advance 720
        jr advance
        
        set b [jr coop.nfg N1 SHIA BLUE]
        
        list $a $b
    } -cleanup {
        cleanup
    } -result {50.0 55.0}
    
    test coop_level-9.3 {Positive, coop0+delta > athresh} -setup {
        create 
    } -body {
        set a [format %.1f [jr coop.nfg N1 SHIA BLUE]]
        
        # Note: $a == 50.0, so it's justless than -athresh.
        jr coop level 1 0 N1 SHIA BLUE 10 0.9 -athresh 51.0

        # Step twice; we should get an increase on the first, but
        # not on the second.
        myclock advance 720
        jr advance
        set b [format %.1f [jr coop.nfg N1 SHIA BLUE]]

        myclock advance 1440
        jr advance
        
        set c [format %.1f [jr coop.nfg N1 SHIA BLUE]]
        
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {50.0 54.6 54.6}

    test coop_level-9.4 {Negative, coop0 <= dthresh} -setup {
        create 
    } -body {
        set a [jr coop.nfg N1 SHIA BLUE]
        
        # Note: $a == 50.0, so it's less than -dthresh
        jr coop level 1 0 N1 SHIA BLUE -10 0.1 -dthresh 60.0
        
        myclock advance 720
        jr advance
        
        set b [jr coop.nfg N1 SHIA BLUE]
        
        expr {$a == $b}
    } -cleanup {
        cleanup
    } -result {1}
    
    test coop_level-9.5 {Negative, coop0+delta > dthresh} -setup {
        create 
    } -body {
        set a [jr coop.nfg N1 SHIA BLUE]
        
        # Note: $a == 50.0, so it's well greater than -dthresh
        jr coop level 1 0 N1 SHIA BLUE -10 0.1 -dthresh 10.0
        
        myclock advance 720
        jr advance
        
        set b [jr coop.nfg N1 SHIA BLUE]
        
        list $a $b
    } -cleanup {
        cleanup
    } -result {50.0 45.0}
    
    test coop_level-9.6 {Negative, coop0+delta < dthresh} -setup {
        create 
    } -body {
        set a [format %.1f [jr coop.nfg N1 SHIA BLUE]]
        
        # Note: $a == 50.0, so it's just greater than -dthresh.
        jr coop level 1 0 N1 SHIA BLUE -10 0.9 -dthresh 49.0

        # Step twice; we should get a decrease on the first, but
        # not on the second.
        myclock advance 720
        jr advance
        set b [format %.1f [jr coop.nfg N1 SHIA BLUE]]

        myclock advance 1440
        jr advance
        
        set c [format %.1f [jr coop.nfg N1 SHIA BLUE]]
        
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {50.0 45.4 45.4}


    #-------------------------------------------------------------------
    # coop slope
    #
    # coop_slope-1.*: Argument checking
    # coop_slope-2.*: Scheduling
    # coop_slope-3.*: Affect on coop.nfg
    # coop_slope-4.*: Expiration
    # coop_slope-5.*: Tracking of contributions
    # coop_slope-6.*: Cause interactions
    # coop_slope-7.*: Scheduling returns input

    test coop_slope-1.1 {ts not numeric} -setup {
        create
    } -body {
        jr coop slope 1 DUMMY N1 SHIA BRIT 100.0
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {non-numeric ts: "DUMMY"}


    test coop_slope-1.2 {ts in the past.} -setup {
        create
    } -body {
        jr coop slope 1 -1 N1 SHIA BRIT 100.0
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Start time is in the past: '312359ZDEC69'}

    test coop_slope-1.3 {invalid nbhood} -setup {
        create
    } -body {
        jr coop slope 1 0 DUMMY SHIA BRIT 100.0
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "DUMMY", should be one of: N1, N2}

    test coop_slope-1.4 {invalid pgroup} -setup {
        create
    } -body {
        jr coop slope 1 0 N1 DUMMY BLUE 100.0
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: KURD, SHIA, SUNN}

    test coop_slope-1.5 {invalid concern} -setup {
        create
    } -body {
        jr coop slope 1 0 N1 SHIA DUMMY 100.0
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: BLUE, BRIT, OPFOR}

    test coop_slope-1.6 {invalid slope: unknown symbol} -setup {
        create
    } -body {
        jr coop slope 1 0 N1 SHIA BRIT DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}

    # test coop_slope-1.7 {invalid limit: unknown symbol} OBSOLETE

    test coop_slope-1.8 {Invalid option} -setup {
        create
    } -body {
        jr coop slope 1 0 N1 SHIA BRIT 100.0 -nonesuch foo
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid option: "-nonesuch"}


    test coop_slope-1.9 {Non-numeric -s} -setup {
        create
    } -body {
        jr coop slope 1 0 N1 SHIA BRIT 100.0 -s FOO
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "FOO", should be a real number in range 0.0, 1.0}

    test coop_slope-1.10 {Negative -s} -setup {
        create
    } -body {
        jr coop slope 1 0 N1 SHIA BRIT 100.0 -s -0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "-0.1", should be a real number in range 0.0, 1.0}

    test coop_slope-1.11 {-s greater than 1.0} -setup {
        create
    } -body {
        jr coop slope 1 0 N1 SHIA BRIT 100.0 -s 1.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "1.1", should be a real number in range 0.0, 1.0}


    test coop_slope-1.12 {Non-numeric -p} -setup {
        create
    } -body {
        jr coop slope 1 0 N1 SHIA BRIT 100.0 -p FOO
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "FOO", should be a real number in range 0.0, 1.0}

    test coop_slope-1.13 {Negative -p} -setup {
        create
    } -body {
        jr coop slope 1 0 N1 SHIA BRIT 100.0 -p -0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "-0.1", should be a real number in range 0.0, 1.0}

    test coop_slope-1.14 {-p greater than 1.0} -setup {
        create
    } -body {
        jr coop slope 1 0 N1 SHIA BRIT 100.0 -p 1.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "1.1", should be a real number in range 0.0, 1.0}


    test coop_slope-1.15 {Non-numeric -q} -setup {
        create
    } -body {
        jr coop slope 1 0 N1 SHIA BRIT 100.0 -q FOO
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "FOO", should be a real number in range 0.0, 1.0}

    test coop_slope-1.16 {Negative -q} -setup {
        create
    } -body {
        jr coop slope 1 0 N1 SHIA BRIT 100.0 -q -0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "-0.1", should be a real number in range 0.0, 1.0}

    test coop_slope-1.17 {-q greater than 1.0} -setup {
        create
    } -body {
        jr coop slope 1 0 N1 SHIA BRIT 100.0 -q 1.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "1.1", should be a real number in range 0.0, 1.0}

    test coop_slope-1.18 {invalid cause} -constraints cause -setup {
        create
    } -body {
        jr coop slope 1 0 N1 SHIA BRIT 10.0 -cause DUMMY
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value, "DUMMY"}

    test coop_slope-1.19 {slope scheduled for an driver in decreasing time sequence} -setup {
        create
    } -body {
        jr coop slope 1 10 N1 SHIA BRIT 10.0
        jr coop slope 1  5 N1 SHIA BRIT 10.0
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {slope scheduled in decreasing time sequence: 5 < 10}

    
    # coop_slope-2.*: Scheduling

    test coop_slope-2.1 {schedule slope for one n,g,c.} -setup {
        create
    } -body {
        jr coop slope 1 0 N2 KURD BRIT 100.0
        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DF   DG   Cause E Start Time   End Time N  F    G     Slope AThresh DThresh Nominal Actual 
----- -- ---- ---- ----- - ------------ -------- -- ---- ----- ----- ------- ------- ------- ------ 
1.1   N2 KURD BRIT D1    I 010000ZJAN70 n/a      N2 KURD BLUE   80.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     D 010000ZJAN70 n/a      N2 KURD BRIT  100.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 n/a      N2 KURD OPFOR -80.0 100.0     0.0     0.0     0.0  
    }

    test coop_slope-2.2 {schedule slope with -s 0.5} -setup {
        create
    } -body {
        jr coop slope 1 0 N2 KURD BRIT 100.0 -s 0.5
        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DF   DG   Cause E Start Time   End Time N  F    G     Slope AThresh DThresh Nominal Actual 
----- -- ---- ---- ----- - ------------ -------- -- ---- ----- ----- ------- ------- ------- ------ 
1.1   N2 KURD BRIT D1    I 010000ZJAN70 n/a      N2 KURD BLUE   40.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     D 010000ZJAN70 n/a      N2 KURD BRIT  100.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 n/a      N2 KURD OPFOR -40.0 100.0     0.0     0.0     0.0  
    }

    test coop_slope-2.3 {successive inputs for a driver stack} -setup {
        create
    } -body {
        jr coop slope 1  0 N2 KURD BRIT 100.0
        jr coop slope 1  5 N2 KURD BRIT  75.0
        jr coop slope 1 10 N2 KURD BRIT   0.0
        jr coop slope 1 15 N2 KURD BRIT 100.0
        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DF   DG   Cause E Start Time   End Time     N  F    G     Slope AThresh DThresh Nominal Actual 
----- -- ---- ---- ----- - ------------ ------------ -- ---- ----- ----- ------- ------- ------- ------ 
1.4   N2 KURD BRIT D1    I 010000ZJAN70 010005ZJAN70 N2 KURD BLUE   80.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010005ZJAN70 010010ZJAN70 N2 KURD BLUE   60.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010010ZJAN70 010015ZJAN70 N2 KURD BLUE    0.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010015ZJAN70 n/a          N2 KURD BLUE   80.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     D 010000ZJAN70 010005ZJAN70 N2 KURD BRIT  100.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     D 010005ZJAN70 010010ZJAN70 N2 KURD BRIT   75.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     D 010010ZJAN70 010015ZJAN70 N2 KURD BRIT    0.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     D 010015ZJAN70 n/a          N2 KURD BRIT  100.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 010005ZJAN70 N2 KURD OPFOR -80.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010005ZJAN70 010010ZJAN70 N2 KURD OPFOR -60.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010010ZJAN70 010015ZJAN70 N2 KURD OPFOR   0.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010015ZJAN70 n/a          N2 KURD OPFOR -80.0 100.0     0.0     0.0     0.0  
    }

    test coop_slope-2.4 {no effect if pgroup has zero pop in nbhood} -setup {
        create
    } -body {
        # FIRST, set SHIA population to 0 in neighborhood N1
        rdb eval {
            UPDATE gram_ng 
            SET population  = 0.0,
                sat_tracked = 0
            WHERE n='N1' AND g='SHIA'
        }
        
        init


        jr coop slope 1 0 N1 SHIA BRIT 100.0

        # Note: Result should be empty, as all modeled effects involve SHIA.
        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
    }

    test coop_slope-2.5 {Indirect effects in all nbhoods, N2 near} -setup {
        create
    }  -body {
        # Update GRAM's proximity, and re-initialize
        set near [eproximity index near]

        rdb eval {
            UPDATE gram_mn
            SET proximity=$near
            WHERE m='N2' AND n='N1'
        }

        init


        # Enter slope input
        jr coop slope 1 0 N1 KURD BRIT 100.0 -p 0.5 -q 0.1

        # Expect direct effect on BRIT, indirect on others, in both 
        # neighborhoods; 0.5 effect in N2 since N2 is near.
        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DF   DG   Cause E Start Time   End Time N  F    G     Slope AThresh DThresh Nominal Actual 
----- -- ---- ---- ----- - ------------ -------- -- ---- ----- ----- ------- ------- ------- ------ 
1.1   N1 KURD BRIT D1    I 010000ZJAN70 n/a      N1 KURD BLUE   80.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     D 010000ZJAN70 n/a      N1 KURD BRIT  100.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 n/a      N1 KURD OPFOR -80.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 n/a      N2 KURD BLUE   40.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 n/a      N2 KURD BRIT   50.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 n/a      N2 KURD OPFOR -40.0 100.0     0.0     0.0     0.0  
    }

    test coop_slope-2.6 {Indirect effects in all nbhoods, N2 far} -setup {
        create
    } -body {
        jr coop slope 1 0 N1 KURD BRIT 100.0 -p 0.5 -q 0.1

        # Expect direct effect on BRIT, indirect on others, in both 
        # neighborhoods; 0.1 effect in N2 since N2 is far.
        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DF   DG   Cause E Start Time   End Time N  F    G     Slope AThresh DThresh Nominal Actual 
----- -- ---- ---- ----- - ------------ -------- -- ---- ----- ----- ------- ------- ------- ------ 
1.1   N1 KURD BRIT D1    I 010000ZJAN70 n/a      N1 KURD BLUE   80.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     D 010000ZJAN70 n/a      N1 KURD BRIT  100.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 n/a      N1 KURD OPFOR -80.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 n/a      N2 KURD BLUE    8.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 n/a      N2 KURD BRIT   10.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 n/a      N2 KURD OPFOR  -8.0 100.0     0.0     0.0     0.0  
    }

    test coop_slope-2.7 {Indirect effects in all nbhoods, N2 remote} -setup {
        create
    } -body {
        # Update GRAM's proximity, and re-initialize
        set remote [eproximity index remote]

        rdb eval {
            UPDATE gram_mn
            SET proximity=$remote
            WHERE m='N2' AND n='N1'
        }

        init


        # Enter a slope input.
        jr coop slope 1 0 N1 KURD BRIT 100.0 -p 0.5 -q 0.1

        # Expect direct effect on SHIA, indirect on others in N1;
        # no effects in N2 since N2 is remote.
        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DF   DG   Cause E Start Time   End Time N  F    G     Slope AThresh DThresh Nominal Actual 
----- -- ---- ---- ----- - ------------ -------- -- ---- ----- ----- ------- ------- ------- ------ 
1.1   N1 KURD BRIT D1    I 010000ZJAN70 n/a      N1 KURD BLUE   80.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     D 010000ZJAN70 n/a      N1 KURD BRIT  100.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 n/a      N1 KURD OPFOR -80.0 100.0     0.0     0.0     0.0  
    }

    test coop_slope-2.8 {effects_factor != 1.0} -setup {
        create
    }  -body {
        # Update the effects_factor
        rdb eval {
            UPDATE gram_ng
            SET effects_factor = 2.0
            WHERE n='N1' AND g='KURD'
        }

        init


        # Create a slope input
        jr coop slope 1 0 N1 KURD BRIT 100.0 -p 0.5 -q 0.1

        # Expect direct effect on BRIT, indirect on others, in both 
        # neighborhoods; effect in N2 is 0.2 (2.0 * 0.1).
        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DF   DG   Cause E Start Time   End Time N  F    G     Slope AThresh DThresh Nominal Actual 
----- -- ---- ---- ----- - ------------ -------- -- ---- ----- ----- ------- ------- ------- ------ 
1.1   N1 KURD BRIT D1    I 010000ZJAN70 n/a      N1 KURD BLUE   80.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     D 010000ZJAN70 n/a      N1 KURD BRIT  100.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 n/a      N1 KURD OPFOR -80.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 n/a      N2 KURD BLUE   16.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 n/a      N2 KURD BRIT   20.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 n/a      N2 KURD OPFOR -16.0 100.0     0.0     0.0     0.0  
    }

    test coop_slope-2.9 {delayed indirect effects} -setup {
        create
    }  -body {
        # Update GRAM's delay, and re-initialize
        rdb eval {
            UPDATE gram_mn
            SET effects_delay = 1.0
            WHERE m='N2' AND n='N1'
        }

        init


        # Enter a slope input.
        jr coop slope 1 0 N1 KURD BRIT 100.0 -p 0.5 -q 0.1

        # Expect direct effect on BRIT, indirect on others, in both 
        # neighborhoods; 0.1 effect in N2 delayed 1 day.
        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DF   DG   Cause E Start Time   End Time N  F    G     Slope AThresh DThresh Nominal Actual 
----- -- ---- ---- ----- - ------------ -------- -- ---- ----- ----- ------- ------- ------- ------ 
1.1   N1 KURD BRIT D1    I 010000ZJAN70 n/a      N1 KURD BLUE   80.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     D 010000ZJAN70 n/a      N1 KURD BRIT  100.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 n/a      N1 KURD OPFOR -80.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 020000ZJAN70 n/a      N2 KURD BLUE    8.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 020000ZJAN70 n/a      N2 KURD BRIT   10.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 020000ZJAN70 n/a      N2 KURD OPFOR  -8.0 100.0     0.0     0.0     0.0  
    }

    test coop_slope-2.10 {far effects are terminated if -q becomes 0} -setup {
        create
    }  -body {
        # Update GRAM's delay, and re-initialize
        rdb eval {
            UPDATE gram_mn
            SET effects_delay = 1.0
            WHERE m='N2' AND n='N1'
        }

        init


        # At time 0, schedule a slope input with far effects.
        jr coop slope 1 0 N1 KURD BRIT 100.0 -p 1.0 -q 1.0

        # At time 10, schedule a new slope input without far effects.
        jr coop slope 1 10 N1 KURD BRIT 50.0 -p 1.0        

        # Expect direct effect on BRIT, indirect on others, in both 
        # neighborhoods; 1.0 effect in N2 delayed 1 day; and then,
        # 10 minutes later, indirect effects remain near but 
        # are terminated far.
        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DF   DG   Cause E Start Time   End Time     N  F    G     Slope AThresh DThresh Nominal Actual 
----- -- ---- ---- ----- - ------------ ------------ -- ---- ----- ----- ------- ------- ------- ------ 
1.2   N1 KURD BRIT D1    I 010000ZJAN70 010010ZJAN70 N1 KURD BLUE   80.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010010ZJAN70 n/a          N1 KURD BLUE   40.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     D 010000ZJAN70 010010ZJAN70 N1 KURD BRIT  100.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     D 010010ZJAN70 n/a          N1 KURD BRIT   50.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 010010ZJAN70 N1 KURD OPFOR -80.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010010ZJAN70 n/a          N1 KURD OPFOR -40.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 020000ZJAN70 020010ZJAN70 N2 KURD BLUE   80.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 020010ZJAN70 n/a          N2 KURD BLUE    0.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 020000ZJAN70 020010ZJAN70 N2 KURD BRIT  100.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 020010ZJAN70 n/a          N2 KURD BRIT    0.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 020000ZJAN70 020010ZJAN70 N2 KURD OPFOR -80.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 020010ZJAN70 n/a          N2 KURD OPFOR   0.0 100.0     0.0     0.0     0.0  
    }
    
    test coop_slope-2.11 {Causes are tagged automatically if -cause is not given} -setup {
        create 
    } -body {
        jr coop slope 1 0 N1 SHIA BRIT 10

        rdb eval {SELECT DISTINCT cause FROM gram_effects}
    } -cleanup {
        cleanup
    } -result {D1}

    # coop_slope-3.*: Effect on coop.nfg

    test coop_slope-3.1 {coop increases} -setup {
        create
    } -body {
        jr coop slope 1 0 N2 KURD BLUE 100.0

        # Advance to noon
        myclock advance 720
        jr advance

        tableDiffCols gram_coop {n f g} coop coop0
    } -cleanup {
        cleanup
    } -result {{N2 KURD BLUE 25} {N2 KURD BRIT 20} {N2 KURD OPFOR -20}}

    # test coop_slope-3.2 {sat increases to limit} OBSOLETE

    test coop_slope-3.3 {successive slope records take effect} -setup {
        create
    } -body {
        jr coop slope 1 0   N2 KURD BLUE 100.0
        jr coop slope 1 360 N2 KURD BLUE   0.0

        # Advance to noon; should get only 25.0, scaled down by 1/2.
        myclock advance 720
        jr advance

        tableDiffCols gram_coop {n f g} coop coop0
    } -cleanup {
        cleanup
    } -result {{N2 KURD BLUE 12.5} {N2 KURD BRIT 10} {N2 KURD OPFOR -10}}

    # coop_slope-4.*: Expiration

    # test coop_slope-4.1 {slope records expire due to limit} OBSOLETE

    test coop_slope-4.2 {slope records expire due to time} -setup {
        create
    } -body {
        jr coop slope 1 0   N2 KURD BLUE 100.0
        jr coop slope 1 360 N2 KURD BLUE   0.0

        # Advance to noon; records should expire.
        myclock advance 720
        jr advance

        dumpCoopSlopes
    } -cleanup {
        cleanup
    } -result {
    }

    test coop_slope-4.3 {negative slopes don't expire immediately} -setup {
        create
    } -body {
        jr coop slope 1 [myclock now] N1 SHIA BRIT -10
        myclock advance 5
        jr advance
        dumpCoopSlopes
    } -cleanup {
        cleanup
    } -result {
Input DN DF   DG   Cause E Start Time   End Time N  F    G     Slope AThresh DThresh Nominal Actual 
----- -- ---- ---- ----- - ------------ -------- -- ---- ----- ----- ------- ------- ------- ------ 
1.1   N1 SHIA BRIT D1    I 010000ZJAN70 n/a      N1 SHIA BLUE   -8.0 100.0     0.0    -0.0    -0.0  
'     '  '    '    '     D 010000ZJAN70 n/a      N1 SHIA BRIT  -10.0 100.0     0.0    -0.0    -0.0  
'     '  '    '    '     I 010000ZJAN70 n/a      N1 SHIA OPFOR   8.0 100.0     0.0     0.0     0.0  
    }

    # test coop_slope-4.4 {negative slopes reach their limit} OBSOLETE

    # coop_slope-5.*: Tracking of contributions

    test coop_slope-5.1 {gram_effects tracks total change} -setup {
        create
    } -body {
        jr coop slope 1 0 N2 KURD BLUE 100.0

        # Advance to noon
        myclock advance 720
        jr advance

        dumpCoopSlopes
    } -cleanup {
        cleanup
    } -result {
Input DN DF   DG   Cause E Start Time   End Time N  F    G     Slope AThresh DThresh Nominal Actual 
----- -- ---- ---- ----- - ------------ -------- -- ---- ----- ----- ------- ------- ------- ------ 
1.1   N2 KURD BLUE D1    D 010000ZJAN70 n/a      N2 KURD BLUE  100.0 100.0     0.0    50.0    25.0  
'     '  '    '    '     I 010000ZJAN70 n/a      N2 KURD BRIT   80.0 100.0     0.0    40.0    20.0  
'     '  '    '    '     I 010000ZJAN70 n/a      N2 KURD OPFOR -80.0 100.0     0.0   -40.0   -20.0  
    }

    test coop_slope-5.2 {change is tracked across sequential effects} -setup {
        create 
    } -body {
        jr coop slope 1    0 N2 KURD BLUE 100.0
        jr coop slope 1  360 N2 KURD BLUE   0.0
        jr coop slope 1  720 N2 KURD BLUE 100.0

        # Advance 18 hours.
        myclock advance 1080
        jr advance

        pprint [rdb query {
            SELECT id,ts,te,slope,nominal,actual FROM gram_effects
            ORDER BY ts
        }]
    } -cleanup {
        cleanup
    } -result {
id ts  te       slope nominal actual 
-- --- -------- ----- ------- ------ 
1  720 99999999 100.0 50.0    25.0   
2  720 99999999 80.0  40.0    20.0   
3  720 99999999 -80.0 -40.0   -20.0  
    }

    # coop_slope-6.*: Cause interactions

    test coop_slope-6.1 {Inputs with the same cause overlap} -setup {
        create
    } -body {
        # Set coop0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_coop SET coop0 = 0.0}
        init


        # Schedule two effects of differing strength but the same cause
        # on the same pgroup.  The total effect over the timestep should
        # be the maximum of the two.
        jr coop slope 1 0 N1 SHIA BRIT 10 -cause CIVCAS
        jr coop slope 2 0 N1 SHIA BRIT  5 -cause CIVCAS

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  The actual contribution should be 
        # based on the 10.  A1 should get credit for 2/3 of the actual
        # contribution and A2 should get credit for 1/3.
        pprint [jr dump coop slope N1 SHIA BRIT]

        # Hand check
        # Ratio of AContribs is 3.33 to 1.67 or 2.0.  Check.
        # Sum of AContribs is 3.33 + 1.67 or 5.0      Check.
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time Slope AThr  DThr  NTotal NContrib ATotal AContrib Input DN DF   DG   E 
------ ------------ -------- ----- ----- ----- ------ -------- ------ -------- ----- -- ---- ---- - 
CIVCAS 010000ZJAN70 n/a       10.0 100.0   0.0   5.00   5.000    3.33   3.333  1.1   N1 SHIA BRIT D 
'      '            '          5.0 100.0   0.0   2.50   2.500    1.67   1.667  2.1   N1 SHIA BRIT D 
    }

    test coop_slope-6.2 {Inputs with the same cause overlap: multiple time steps} -setup {
        create
    } -body {
        # Set coop0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_coop SET coop0 = 0.0}
        init


        # Schedule two effects of differing strength but the same cause
        # on the same pgroup.  The total effect over the timestep should
        # be the maximum of the two.
        jr coop slope 1 0 N1 SHIA BRIT 10 -cause CIVCAS
        jr coop slope 2 0 N1 SHIA BRIT  5 -cause CIVCAS

        # Advance time.
        myclock advance 360
        jr advance
        myclock advance 720
        jr advance

        # Dump the results.  The actual contribution should be 
        # based on the 10.  A1 should get credit for ~2/3 of the actual
        # contribution and A2 should get credit for ~1/3.
        pprint [jr dump coop slope N1 SHIA BRIT]

        # Hand check
        # Ratio of AContribs in second time step is 1.625 to 0.812, or 2.0    Check
        # Sum of AContribs in second time step is 1.625 + 0.812, or 2.438.    Check
        # Ratio of NTotals over the two time steps is 5.00 to 2.5 or 2.0
        # Ratio of ATotals over the two time steps is 3.29 to 1.65 or 2.0     Check
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time Slope AThr  DThr  NTotal NContrib ATotal AContrib Input DN DF   DG   E 
------ ------------ -------- ----- ----- ----- ------ -------- ------ -------- ----- -- ---- ---- - 
CIVCAS 010000ZJAN70 n/a       10.0 100.0   0.0   5.00   2.500    3.29   1.625  1.1   N1 SHIA BRIT D 
'      '            '          5.0 100.0   0.0   2.50   1.250    1.65   0.812  2.1   N1 SHIA BRIT D 
    }
   
    test coop_slope-6.3 {Inputs with different causes are independent} -setup {
        create
    } -body {
        # Set coop0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_coop SET coop0 = 0.0}
        init


        # Schedule two effects of differing strength but the same cause
        # on the same pgroup.  The total effect over the timestep should
        # be the maximum of the two.
        jr coop slope 1 0 N1 SHIA BRIT 10 -cause CIVCAS
        jr coop slope 2 0 N1 SHIA BRIT  5 -cause HOSCAP

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  Each should have its own contribution; the
        # actual contribution should be scaled contribution.
        pprint [jr dump coop slope N1 SHIA BRIT]

    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time Slope AThr  DThr  NTotal NContrib ATotal AContrib Input DN DF   DG   E 
------ ------------ -------- ----- ----- ----- ------ -------- ------ -------- ----- -- ---- ---- - 
CIVCAS 010000ZJAN70 n/a       10.0 100.0   0.0   5.00   5.000    5.00   5.000  1.1   N1 SHIA BRIT D 
HOSCAP '            '          5.0 100.0   0.0   2.50   2.500    2.50   2.500  2.1   N1 SHIA BRIT D 
    }
   
    test coop_slope-6.4 {Effects from different inputs with same cause} -setup {
        create
    } -body {
        # Schedule effects on BLUE and BRIT, and look at the indirect effects
        # on OPFOR.
        jr coop slope 1 0 N1 SHIA BLUE 10 -cause CIVCAS
        jr coop slope 2 0 N1 SHIA BRIT 10 -cause CIVCAS

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  Each should have its own contribution; the
        # actual contribution should be scaled contribution.
        pprint [jr dump coop slope N1 SHIA OPFOR]

        # Hand check
        # Ratio of SContribs is -2 to -2 or 1.0
        # Ratio of AContribs is -1 to -1, or 1.0.  Check.
        # Sum of AContribs is   -1 + -1, or -2.0.  Check.
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time Slope AThr  DThr  NTotal NContrib ATotal AContrib Input DN DF   DG   E 
------ ------------ -------- ----- ----- ----- ------ -------- ------ -------- ----- -- ---- ---- - 
CIVCAS 010000ZJAN70 n/a       -8.0 100.0   0.0  -4.00  -4.000   -1.00  -1.000  1.1   N1 SHIA BLUE I 
'      '            '         -8.0 100.0   0.0  -4.00  -4.000   -1.00  -1.000  2.1   N1 SHIA BRIT I 
    }

    test coop_slope-6.5 {Chained effects in timestep are combined} -setup {
        create
    } -body {
        # Set coop0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_coop SET coop0 = 0.0}
        init


        # Schedule chained effects
        jr coop slope 1   0 N1 SHIA BRIT 10 -cause CIVCAS
        jr coop slope 1 360 N1 SHIA BRIT  0 -cause CIVCAS
        jr coop slope 1 720 N1 SHIA BRIT 10 -cause CIVCAS

        # Advance time by 18 hours so that we get 6 hours of each of the positive
        # effects.
        myclock advance 1080
        jr advance

        # Dump the results.  Should get 12 hours of 10.0 slope as a single
        # contribution, for a nominal effect of 5.0.
        pprint [jr dump coop slope N1 SHIA BRIT]

        # Hand check: the chain shows a nominal total of 5.0, which is 
        # correct since that's the running total for the chain.  Due
        # to carefully done scaling, the scaled and actual effect is the
        # same.
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time Slope AThr  DThr  NTotal NContrib ATotal AContrib Input DN DF   DG   E 
------ ------------ -------- ----- ----- ----- ------ -------- ------ -------- ----- -- ---- ---- - 
CIVCAS 011200ZJAN70 n/a       10.0 100.0   0.0   5.00   5.000    5.00   5.000  1.3   N1 SHIA BRIT D 
    }

    test coop_slope-6.6 {different causes have distinct chains} -setup {
        create
    } -body {
        # If we create two inputs for the same n,f,g with different
        # causes, we get different chains
        jr coop slope 1  5 N1 SHIA BRIT 10.0 -cause PATROL
        jr coop slope 1 10 N1 SHIA BRIT 10.0 -cause GUARD

        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DF   DG   Cause  E Start Time   End Time N  F    G     Slope AThresh DThresh Nominal Actual 
----- -- ---- ---- ------ - ------------ -------- -- ---- ----- ----- ------- ------- ------- ------ 
1.1   N1 SHIA BRIT PATROL I 010005ZJAN70 n/a      N1 SHIA BLUE    8.0 100.0     0.0     0.0     0.0  
'     '  '    '    '      D 010005ZJAN70 n/a      N1 SHIA BRIT   10.0 100.0     0.0     0.0     0.0  
'     '  '    '    '      I 010005ZJAN70 n/a      N1 SHIA OPFOR  -8.0 100.0     0.0     0.0     0.0  
1.2   '  '    '    GUARD  I 010010ZJAN70 n/a      N1 SHIA BLUE    8.0 100.0     0.0     0.0     0.0  
'     '  '    '    '      D 010010ZJAN70 n/a      N1 SHIA BRIT   10.0 100.0     0.0     0.0     0.0  
'     '  '    '    '      I 010010ZJAN70 n/a      N1 SHIA OPFOR  -8.0 100.0     0.0     0.0     0.0  
    }
    
    test coop_slope-6.7 {different causes have distinct chains: update} -setup {
        create
    } -body {
        # If we update for one cause, it doesn't affect the other
        jr coop slope 1  5 N1 SHIA BRIT 10.0 -cause PATROL
        jr coop slope 1 10 N1 SHIA BRIT 10.0 -cause GUARD
        jr coop slope 1 15 N1 SHIA BRIT  5.0 -cause PATROL

        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DF   DG   Cause  E Start Time   End Time     N  F    G     Slope AThresh DThresh Nominal Actual 
----- -- ---- ---- ------ - ------------ ------------ -- ---- ----- ----- ------- ------- ------- ------ 
1.2   N1 SHIA BRIT GUARD  I 010010ZJAN70 n/a          N1 SHIA BLUE    8.0 100.0     0.0     0.0     0.0  
'     '  '    '    '      D 010010ZJAN70 n/a          N1 SHIA BRIT   10.0 100.0     0.0     0.0     0.0  
'     '  '    '    '      I 010010ZJAN70 n/a          N1 SHIA OPFOR  -8.0 100.0     0.0     0.0     0.0  
1.3   '  '    '    PATROL I 010005ZJAN70 010015ZJAN70 N1 SHIA BLUE    8.0 100.0     0.0     0.0     0.0  
'     '  '    '    '      I 010015ZJAN70 n/a          N1 SHIA BLUE    4.0 100.0     0.0     0.0     0.0  
'     '  '    '    '      D 010005ZJAN70 010015ZJAN70 N1 SHIA BRIT   10.0 100.0     0.0     0.0     0.0  
'     '  '    '    '      D 010015ZJAN70 n/a          N1 SHIA BRIT    5.0 100.0     0.0     0.0     0.0  
'     '  '    '    '      I 010005ZJAN70 010015ZJAN70 N1 SHIA OPFOR  -8.0 100.0     0.0     0.0     0.0  
'     '  '    '    '      I 010015ZJAN70 n/a          N1 SHIA OPFOR  -4.0 100.0     0.0     0.0     0.0  
    }
    
    test coop_slope-6.8 {different causes have distinct chains: end} -setup {
        create
    } -body {
        # If we update for one cause, it doesn't affect the other
        jr coop slope 1  5 N1 SHIA BRIT 10.0 -cause PATROL
        jr coop slope 1 10 N1 SHIA BRIT 10.0 -cause GUARD
        jr coop slope 1 15 N1 SHIA BRIT  0.0 -cause PATROL

        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DF   DG   Cause  E Start Time   End Time     N  F    G     Slope AThresh DThresh Nominal Actual 
----- -- ---- ---- ------ - ------------ ------------ -- ---- ----- ----- ------- ------- ------- ------ 
1.2   N1 SHIA BRIT GUARD  I 010010ZJAN70 n/a          N1 SHIA BLUE    8.0 100.0     0.0     0.0     0.0  
'     '  '    '    '      D 010010ZJAN70 n/a          N1 SHIA BRIT   10.0 100.0     0.0     0.0     0.0  
'     '  '    '    '      I 010010ZJAN70 n/a          N1 SHIA OPFOR  -8.0 100.0     0.0     0.0     0.0  
1.3   '  '    '    PATROL I 010005ZJAN70 010015ZJAN70 N1 SHIA BLUE    8.0 100.0     0.0     0.0     0.0  
'     '  '    '    '      I 010015ZJAN70 n/a          N1 SHIA BLUE    0.0 100.0     0.0     0.0     0.0  
'     '  '    '    '      D 010005ZJAN70 010015ZJAN70 N1 SHIA BRIT   10.0 100.0     0.0     0.0     0.0  
'     '  '    '    '      D 010015ZJAN70 n/a          N1 SHIA BRIT    0.0 100.0     0.0     0.0     0.0  
'     '  '    '    '      I 010005ZJAN70 010015ZJAN70 N1 SHIA OPFOR  -8.0 100.0     0.0     0.0     0.0  
'     '  '    '    '      I 010015ZJAN70 n/a          N1 SHIA OPFOR   0.0 100.0     0.0     0.0     0.0  
    }

    # coop_slope-7.*: Scheduling returns input

    test coop_slope-7.1 {Return input, case 1: one nbhood, 0 limit} -setup {
        create 
    } -body {
        set a [jr coop slope 1 0 N1 SHIA BRIT 0]
        set b [jr coop slope 1 0 N1 SHIA BLUE 0]
        set c [rdb eval {SELECT DISTINCT input FROM gram_effects}]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 2 {}}

    test coop_slope-7.2 {Return input, case 2: one nbhood, terminate} -setup {
        create 
    } -body {
        set a [jr coop slope 1 0 N1 SHIA BRIT 10]
        set b [jr coop slope 1 0 N1 SHIA BLUE 10]
        set c [jr coop slope 1 0 N1 SHIA BRIT 0]
        set d [jr coop slope 1 0 N1 SHIA BLUE 0]
        set e [rdb eval {SELECT DISTINCT input FROM gram_effects}]

        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {1 2 3 4 {3 4}}

    # coop_slope-7.3 OBSOLETE
    # coop_slope-7.4 OBSOLETE

    test coop_slope-7.5 {Return input, case 5: nominal case} -setup {
        create
    } -body {
        set a [jr coop slope 1 0 N1 SHIA BRIT 10]
        set b [jr coop slope 1 0 N1 SHIA BLUE 10]
        set c [rdb eval {SELECT DISTINCT input FROM gram_effects}]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 2 {1 2}}


    # coop_slope-8.*: Thresholds
    
    test coop_slope-8.1 {Positive, coop0 >= athresh} -setup {
        create 
    } -body {
        set a [jr coop.nfg N1 SHIA BLUE]
        
        # Note: $a == 50.0, so it's greater than -athresh
        jr coop slope 1 0 N1 SHIA BLUE 10 -athresh 30.0
        
        myclock advance 720
        jr advance
        
        set b [jr coop.nfg N1 SHIA BLUE]
        
        expr {$a == $b}
    } -cleanup {
        cleanup
    } -result {1}

    test coop_slope-8.2 {Positive, coop0+delta < athresh} -setup {
        create 
    } -body {
        set a [jr coop.nfg N1 SHIA BLUE]
        
        # Note: $a == 50.0, so it's well less than -athresh
        jr coop slope 1 0 N1 SHIA BLUE 10 -athresh 90.0
        
        myclock advance 720
        jr advance
        
        set b [jr coop.nfg N1 SHIA BLUE]
        
        list $a $b
    } -cleanup {
        cleanup
    } -result {50.0 52.5}
    
    test coop_slope-8.3 {Positive, coop0+delta > athresh} -setup {
        create 
    } -body {
        set a [format %.1f [jr coop.nfg N1 SHIA BLUE]]
        
        # Note: $a == 50.0, so it's justless than -athresh.
        jr coop slope 1 0 N1 SHIA BLUE 10 -athresh 51.0

        # Step twice; we should get an increase on the first, but
        # not on the second.
        myclock advance 720
        jr advance
        set b [format %.1f [jr coop.nfg N1 SHIA BLUE]]

        myclock advance 1440
        jr advance
        
        set c [format %.1f [jr coop.nfg N1 SHIA BLUE]]
        
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {50.0 52.5 52.5}

    test coop_slope-8.4 {Negative, coop0 <= dthresh} -setup {
        create 
    } -body {
        set a [jr coop.nfg N1 SHIA BLUE]
        
        # Note: $a == 50.0, so it's less than -dthresh
        jr coop slope 1 0 N1 SHIA BLUE -10 -dthresh 60.0
        
        myclock advance 720
        jr advance
        
        set b [jr coop.nfg N1 SHIA BLUE]
        
        expr {$a == $b}
    } -cleanup {
        cleanup
    } -result {1}
    
    test coop_slope-8.5 {Negative, coop0+delta > dthresh} -setup {
        create 
    } -body {
        set a [jr coop.nfg N1 SHIA BLUE]
        
        # Note: $a == 50.0, so it's well greater than -dthresh
        jr coop slope 1 0 N1 SHIA BLUE -10 -dthresh 10.0
        
        myclock advance 720
        jr advance
        
        set b [jr coop.nfg N1 SHIA BLUE]
        
        list $a $b
    } -cleanup {
        cleanup
    } -result {50.0 47.5}
    
    test coop_slope-8.6 {Negative, coop0+delta < dthresh} -setup {
        create 
    } -body {
        set a [format %.1f [jr coop.nfg N1 SHIA BLUE]]
        
        # Note: $a == 50.0, so it's just greater than -dthresh.
        jr coop slope 1 0 N1 SHIA BLUE -10 -dthresh 49.0

        # Step twice; we should get a decrease on the first, but
        # not on the second.
        myclock advance 720
        jr advance
        set b [format %.1f [jr coop.nfg N1 SHIA BLUE]]

        myclock advance 1440
        jr advance
        
        set c [format %.1f [jr coop.nfg N1 SHIA BLUE]]
        
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {50.0 47.5 47.5}

    #-------------------------------------------------------------------
    # cancel

    test cancel-1.1 {cancel situations by driver} -setup {
        create 
    } -body {
        # Create two pairs of inputs; verify that only one pair
        # gets deleted.
        jr sat  level 1 0 N1 SHIA SFT  10 1 
        jr sat  slope 1 0 N1 SHIA SFT  10
        jr coop level 1 0 N1 SHIA BLUE 10 1
        jr coop slope 1 0 N1 SHIA BLUE 10

        jr sat  level 2 0 N1 SUNN SFT  20 2 
        jr sat  slope 2 0 N1 SUNN SFT  20
        jr coop level 2 0 N1 SUNN BLUE 20 2
        jr coop slope 2 0 N1 SUNN BLUE 10

        jr cancel 1

        pprint "[jr dump sat levels]\n[jr dump coop levels]\n[jr dump sat slopes]\n[jr dump coop slopes]"
    } -cleanup {
        cleanup
    } -result {
Input DN DG   Cause E Start Time   End Time     Nbhd Grp  Con Days  Limit AThresh DThresh Nominal Actual 
----- -- ---- ----- - ------------ ------------ ---- ---- --- ----- ----- ------- ------- ------- ------ 
2.1   N1 SUNN D2    D 010000ZJAN70 030000ZJAN70 N1   SUNN SFT 2.000  20.0 100.0   -100.0    0.00    0.00 
'     '  '    '     I 010000ZJAN70 030000ZJAN70 N1   KURD SFT 2.000 -12.0 100.0   -100.0    0.00    0.00 

Input DN DF   DG   Cause E Start Time   End Time     N  F    G     Days  Limit AThresh DThresh Nominal Actual 
----- -- ---- ---- ----- - ------------ ------------ -- ---- ----- ----- ----- ------- ------- ------- ------ 
2.3   N1 SUNN BLUE D2    D 010000ZJAN70 030000ZJAN70 N1 SUNN BLUE  2.000  20.0 100.0     0.0     0.00    0.00 
'     '  '    '    '     I 010000ZJAN70 030000ZJAN70 N1 SUNN BRIT  2.000  16.0 100.0     0.0     0.00    0.00 
'     '  '    '    '     I 010000ZJAN70 030000ZJAN70 N1 SUNN OPFOR 2.000 -16.0 100.0     0.0     0.00    0.00 

Input DN DG   Cause E Start Time   End Time Nbhd Grp  Con Slope AThresh DThresh Nominal Actual 
----- -- ---- ----- - ------------ -------- ---- ---- --- ----- ------- ------- ------- ------ 
2.2   N1 SUNN D2    D 010000ZJAN70 n/a      N1   SUNN SFT  20.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a      N1   KURD SFT -12.0 100.0   -100.0    0.0     0.0  

Input DN DF   DG   Cause E Start Time   End Time N  F    G     Slope AThresh DThresh Nominal Actual 
----- -- ---- ---- ----- - ------------ -------- -- ---- ----- ----- ------- ------- ------- ------ 
2.4   N1 SUNN BLUE D2    D 010000ZJAN70 n/a      N1 SUNN BLUE   10.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 n/a      N1 SUNN BRIT    8.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 n/a      N1 SUNN OPFOR  -8.0 100.0     0.0     0.0     0.0  
    }

    test cancel-2.1 {cancel deletes gram_contribs} -setup {
        create 
    } -body {
        jr sat  level 1 0 N1 SHIA SFT  10 1 
        jr sat  slope 1 0 N1 SHIA SFT  10
        jr coop level 1 0 N1 SHIA BLUE 10 1

        myclock advance 1440
        jr advance
        jr cancel 1
        
        rdb eval {SELECT * FROM gram_contribs}
    } -cleanup {
        cleanup
    } -result {}

    test cancel-3.1 {cancel removes satisfaction contributions} -setup {
        create 
    } -body {
        # FIRST, set satisfaction to 0.0, for easy scaling and detection.
        rdb eval {
            UPDATE gram_sat
            SET sat = 0.0
        }

        jr sat level 1 0 N1 SHIA SFT  10 1 

        myclock advance 1440
        jr advance

        set a [rdb onecolumn {
            SELECT sat FROM gram_sat
            WHERE n='N1' AND g='SHIA' AND c='SFT'
        }]

        jr cancel 1
        
        set b [rdb onecolumn {
            SELECT sat FROM gram_sat
            WHERE n='N1' AND g='SHIA' AND c='SFT'
        }]

        list $a $b
    } -cleanup {
        cleanup
    } -result {10.0 0.0}

    test cancel-3.2 {cancel removes cooperation contributions} -setup {
        create
    } -body {
        # FIRST, set cooperation to 0.0, for easy scaling and detection.
        rdb eval {
            UPDATE gram_coop
            SET coop = 0.0
        }

        jr coop level 1 0 N1 SHIA BLUE  10 1 

        myclock advance 1440
        jr advance

        set a [rdb onecolumn {
            SELECT coop FROM gram_coop
            WHERE n='N1' AND f='SHIA' AND g='BLUE'
        }]

        jr cancel 1
        
        set b [rdb onecolumn {
            SELECT coop FROM gram_coop
            WHERE n='N1' AND f='SHIA' AND g='BLUE'
        }]

        list $a $b
    } -cleanup {
        cleanup
    } -result {10.0 0.0}


    test cancel-4.1 {cancel updates gram_deltas} -setup {
        create
    } -body {
        # FIRST, advance time by several steps.  The satisfaction trend
        # will update the values.
        jr sat slope 0 0 N1 SHIA AUT 20
        myclock advance 1440
        jr advance

        myclock advance 2880
        jr advance

        # NEXT, get the number of curves where the current value
        # isn't the same as the initial value.
        set a [rdb eval {
            SELECT COUNT(curve_id) 
            FROM gram_deltas JOIN gram_curves USING (curve_id)
            WHERE gram_deltas.delta != 0.0
            AND time=2880
        }] 

        # NEXT, cancel driver 0 (the long-term trend)
        jr cancel 0

        # NEXT, get the updated number; should be 0. 
        set b [rdb eval {
            SELECT COUNT(curve_id) 
            FROM gram_deltas JOIN gram_curves USING (curve_id)
            WHERE gram_deltas.delta != 0.0
            AND time=2880
        }] 

        list $a $b
    } -cleanup {
        cleanup
    } -result {3 0}

    test cancel-5.1 {cancel leaves driver in place} -setup {
        create
    } -body {
        # FIRST, cancel driver 0 (the long-term trend)
        jr cancel 0

        # NEXT, get the set of drivers.
        rdb eval {
            SELECT * FROM gram_driver WHERE driver=0
        }
    } -cleanup {
        cleanup
    } -result {0 unknown CANCELLED {} 0}

    test cancel-5.2 {cancel -delete deletes driver} -setup {
        create
    } -body {
        # FIRST, cancel driver 0 (the long-term trend), deleting it
        # altogether
        jr cancel 0 -delete

        # NEXT, get the set of drivers.
        rdb eval {
            SELECT * FROM gram_driver WHERE driver=0
        }
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # terminate
    #
    # 1.*:  Error checking
    # 2.*:  Basic operations

    test terminate-1.1 {Invalid driver} -setup {
        create
    } -body {
        jr terminate dummy 0
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Cannot terminate, unknown Driver ID: "dummy"}
    
    test terminate-1.2 {Invalid ts} -setup {
        create
    } -body {
        jr terminate 1 dummy
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "dummy", expected integer}

    test terminate-1.3 {ts prior to now} -setup {
        create
    } -body {
        jr terminate 1 -1
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Start time is in the past: "-1"}

    # 2.*: Basic Operations

    test terminate-2.1 {terminates sat slopes} -setup {
        create 
    } -body {
        jr sat slope 1 0  N1 SHIA QOL 10 -p 1.0 -q 1.0
        jr terminate 1 60

        dumpSlopes
    } -cleanup {
        cleanup
    } -result {
Input DN DG   Cause E Start Time   End Time     Nbhd Grp  Con Slope AThresh DThresh Nominal Actual 
----- -- ---- ----- - ------------ ------------ ---- ---- --- ----- ------- ------- ------- ------ 
1.2   N1 SHIA D1    D 010000ZJAN70 010100ZJAN70 N1   SHIA QOL  10.0 100.0   -100.0    0.0     0.0  
'     '  '    '     D 010100ZJAN70 n/a          N1   SHIA QOL   0.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 010100ZJAN70 N1   KURD QOL   6.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010100ZJAN70 n/a          N1   KURD QOL   0.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 010100ZJAN70 N1   SUNN QOL  -3.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010100ZJAN70 n/a          N1   SUNN QOL   0.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 010100ZJAN70 N2   KURD QOL   6.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010100ZJAN70 n/a          N2   KURD QOL   0.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 010100ZJAN70 N2   SHIA QOL  10.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010100ZJAN70 n/a          N2   SHIA QOL   0.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 010100ZJAN70 N2   SUNN QOL  -3.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010100ZJAN70 n/a          N2   SUNN QOL   0.0 100.0   -100.0    0.0     0.0  
    }

    
    test terminate-2.2 {terminates coop slopes} -setup {
        create
    } -body {
        jr coop slope 1 0  N1 SHIA BLUE 10 -p 1.0 -q 1.0
        jr terminate 1 60

        dumpCoopSlopes
    } -cleanup {
        cleanup
    } -result {
Input DN DF   DG   Cause E Start Time   End Time     N  F    G     Slope AThresh DThresh Nominal Actual 
----- -- ---- ---- ----- - ------------ ------------ -- ---- ----- ----- ------- ------- ------- ------ 
1.2   N1 SHIA BLUE D1    D 010000ZJAN70 010100ZJAN70 N1 SHIA BLUE   10.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     D 010100ZJAN70 n/a          N1 SHIA BLUE    0.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 010100ZJAN70 N1 SHIA BRIT    8.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010100ZJAN70 n/a          N1 SHIA BRIT    0.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 010100ZJAN70 N1 SHIA OPFOR  -8.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010100ZJAN70 n/a          N1 SHIA OPFOR   0.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 010100ZJAN70 N2 SHIA BLUE   10.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010100ZJAN70 n/a          N2 SHIA BLUE    0.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 010100ZJAN70 N2 SHIA BRIT    8.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010100ZJAN70 n/a          N2 SHIA BRIT    0.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010000ZJAN70 010100ZJAN70 N2 SHIA OPFOR  -8.0 100.0     0.0     0.0     0.0  
'     '  '    '    '     I 010100ZJAN70 n/a          N2 SHIA OPFOR   0.0 100.0     0.0     0.0     0.0  
    }

    test terminate-2.3 {terminates only for the given driver} -setup {
        create 
    } -body {
        jr sat slope 1 0  N1 SHIA QOL 10
        jr sat slope 2 0  N1 SUNN SFT 10
        
        jr terminate 1 60

        dumpSlopes
    } -cleanup {
        cleanup
    } -result {
Input DN DG   Cause E Start Time   End Time     Nbhd Grp  Con Slope AThresh DThresh Nominal Actual 
----- -- ---- ----- - ------------ ------------ ---- ---- --- ----- ------- ------- ------- ------ 
1.2   N1 SHIA D1    D 010000ZJAN70 010100ZJAN70 N1   SHIA QOL  10.0 100.0   -100.0    0.0     0.0  
'     '  '    '     D 010100ZJAN70 n/a          N1   SHIA QOL   0.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 010100ZJAN70 N1   KURD QOL   6.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010100ZJAN70 n/a          N1   KURD QOL   0.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 010100ZJAN70 N1   SUNN QOL  -3.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010100ZJAN70 n/a          N1   SUNN QOL   0.0 100.0   -100.0    0.0     0.0  
2.1   '  SUNN D2    D 010000ZJAN70 n/a          N1   SUNN SFT  10.0 100.0   -100.0    0.0     0.0  
'     '  '    '     I 010000ZJAN70 n/a          N1   KURD SFT  -6.0 100.0   -100.0    0.0     0.0  
    }

    test terminate-2.4 {levels are unaffected} -setup {
        create
    } -body {
        jr sat level 1 0  N1 SHIA QOL 10 5
        jr terminate 1 60

        dumpLevels
    } -cleanup {
        cleanup
    } -result {
d ts te   n  g    c   llimit 
- -- ---- -- ---- --- ------ 
I 0  7200 N1 KURD QOL 6.00   
D 0  7200 N1 SHIA QOL 10.00  
I 0  7200 N1 SUNN QOL -3.00  
    }


    #-------------------------------------------------------------------
    # sat.ngc

    test sat_ngc-1.1 {Invalid nbhood} -setup {
        create
    } -body {
        jr sat.ngc DUMMY SHIA AUT
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: N1, N2}

    test sat_ngc-1.2 {Invalid group} -setup {
        create
    } -body {
        jr sat.ngc N2 DUMMY AUT
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: KURD, SHIA, SUNN, ORGA, ORGB}

    test sat_ngc-1.3 {Invalid concern} -setup {
        create
    } -body {
        jr sat.ngc N2 SHIA DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: AUT, CUL, QOL, SFT, CAS, SVC}

    test sat_ngc-1.4 {ngc, type mismatch} -setup {
        create
    } -body {
        jr sat.ngc N2 SHIA CAS
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {g and c must have the same group type, CIV or ORG}

    test sat_ngc-2.1 {ngc, group resident} -setup {
        create
    } -body {
        jr sat.ngc N1 SUNN AUT
    } -cleanup {
        cleanup
    } -result {-80.0}

    test sat_ngc-2.2 {ngc, group not resident} -setup {
        create
    } -body {
        notResident N1 SUNN
        init


        jr sat.ngc N1 SUNN AUT
    } -cleanup {
        cleanup
    } -result {0.0}


    #-------------------------------------------------------------------
    # sat.ng

    test sat_ng-1.1 {Invalid nbhood} -setup {
        create
    } -body {
        jr sat.ng DUMMY SHIA
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: N1, N2}

    test sat_ng-1.2 {Invalid group} -setup {
        create
    } -body {
        jr sat.ng N2 DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: KURD, SHIA, SUNN, ORGA, ORGB}

    test sat_ng-2.1 {group resident} -setup {
        create
    } -body {
        jr sat.ng N1 SUNN
    } -cleanup {
        cleanup
    } -result {-70.0}

    test sat_ng-2.2 {group not resident} -setup {
        create
    } -body {
        notResident N1 SUNN
        init


        jr sat.ng N1 SUNN
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # sat.nc

    test sat_nc-1.1 {Invalid nbhood} -setup {
        create
    } -body {
        jr sat.nc DUMMY AUT
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: N1, N2}

    test sat_nc-1.2 {Invalid concern} -setup {
        create
    } -body {
        jr sat.nc N2 DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: AUT, CUL, QOL, SFT, CAS, SVC}

    test sat_nc-2.1 {query} -setup {
        create
    } -body {
        jr sat.nc N1 AUT
    } -cleanup {
        cleanup
    } -result {-13.333333333333334}

    #-------------------------------------------------------------------
    # sat.gc

    test sat_gc-1.1 {Invalid group} -setup {
        create
    } -body {
        jr sat.gc DUMMY AUT
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: KURD, SHIA, SUNN, ORGA, ORGB}

    test sat_gc-1.2 {Invalid concern} -setup {
        create
    } -body {
        jr sat.gc SHIA DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: AUT, CUL, QOL, SFT, CAS, SVC}

    test sat_gc-1.3 {gc, type mismatch} -setup {
        create
    } -body {
        jr sat.gc SHIA CAS
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {g and c must have the same group type, CIV or ORG}

    test sat_gc-2.1 {query} -setup {
        create
    } -body {
        jr sat.gc SUNN AUT
    } -cleanup {
        cleanup
    } -result {-80.0}


    #-------------------------------------------------------------------
    # sat.n

    test sat_n-1.1 {Invalid nbhood} -setup {
        create
    } -body {
        jr sat.n DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: N1, N2}

    test sat_n-2.1 {query} -setup {
        create
    } -body {
        jr sat.n N1
    } -cleanup {
        cleanup
    } -result {-30.0}


    #-------------------------------------------------------------------
    # sat.g

    test sat_g-1.1 {Invalid group} -setup {
        create
    } -body {
        jr sat.g DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: KURD, SHIA, SUNN, ORGA, ORGB}

    test sat_g-2.1 {query} -setup {
        create
    } -body {
        jr sat.g SUNN
    } -cleanup {
        cleanup
    } -result {-70.0}

    #-------------------------------------------------------------------
    # sat.c

    test sat_c-1.1 {Invalid concern} -setup {
        create
    } -body {
        jr sat.c DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: AUT, CUL, QOL, SFT, CAS, SVC}

    test sat_c-2.1 {query} -setup {
        create
    } -body {
        jr sat.c AUT
    } -cleanup {
        cleanup
    } -result {-13.333333333333334}


    #-------------------------------------------------------------------
    # coop.nfg

    test coop_nfg-1.1 {Invalid nbhood} -setup {
        create
    } -body {
        jr coop.nfg DUMMY SHIA BLUE
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: N1, N2}

    test coop_nfg-1.2 {Invalid civ group} -setup {
        create
    } -body {
        jr coop.nfg N2 DUMMY BLUE
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: KURD, SHIA, SUNN}

    test coop_nfg-1.3 {Invalid frc group} -setup {
        create
    } -body {
        jr coop.nfg N2 SHIA DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: BLUE, BRIT, OPFOR}

    test coop_nfg-1.4 {f not resident} -setup {
        create
    } -body {
        notResident N1 SUNN
        jr coop.nfg N1 SUNN BLUE
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Group SUNN does not reside in nbhood N1}

    test coop_nfg-2.1 {Retrieve value} -setup {
        create
    } -body {
        jr coop.nfg N1 SUNN BLUE
    } -cleanup {
        cleanup
    } -result {50.0}


    #-------------------------------------------------------------------
    # coop.ng

    test coop_ng-1.1 {Invalid nbhood} -setup {
        create
    } -body {
        jr coop.ng DUMMY BLUE
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: N1, N2}

    test coop_ng-1.2 {Invalid group} -setup {
        create
    } -body {
        jr coop.ng N2 DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: BLUE, BRIT, OPFOR}

    test coop_ng-2.1 {get value} -setup {
        create
    } -body {
        jr coop.ng N1 BLUE
    } -cleanup {
        cleanup
    } -result {50.0}

    #-------------------------------------------------------------------
    # nbhoodGroups

    test nbhoodGroups-1.1 {Groups in first neighborhood} -setup {
        create
    } -body {
        jr nbhoodGroups N1
    } -cleanup {
        cleanup
    } -result {KURD SHIA SUNN}

    test nbhoodGroups-1.2 {Skip inactive groups} -setup {
        create
    } -body {
        rdb eval {
            UPDATE gram_ng 
            SET population  = 0,
                sat_tracked = 0
            WHERE g='KURD'
        }

        init


        jr nbhoodGroups N1
    } -cleanup {
        cleanup
    } -result {SHIA SUNN}


    #-------------------------------------------------------------------
    # -logger/-logcomponent

    test gram_logger-1.1 {Logging: disabled by default.} -body {
        create

        # Ensure empty -result
        set foo ""
    } -cleanup {
        cleanup
    } -output {}

    test gram_logger-1.2 {Logging: enabled as gram by default.} -setup {
        logger mylogger
    } -body {
        create -logger [namespace current]::mylogger

        # Ensure empty -result
        set foo ""
    } -cleanup {
        cleanup
        mylogger destroy
    } -match glob -output {* normal gram Created
}

    test gram_logger-1.3 {Logging: -logcomponent} -setup {
        logger mylogger
    } -body {
        create \
            -logger [namespace current]::mylogger \
            -logcomponent foo

        # Ensure empty -result
        set foo ""
    } -cleanup {
        cleanup
        mylogger destroy
    } -match glob -output {* normal foo Created
}

    #-------------------------------------------------------------------
    # checkpoint/restore
    #
    # Note: This only handles checkpoint and restore of non-RDB data.

    test gram_checkpoint-1.1 {can take checkpoint} -setup {
        create
    } -body {
        array set ckpt [jr checkpoint]

        # Do some spot checks
        assert {[jr time]           eq $ckpt(time)}
    } -cleanup {
        cleanup
    } -result {}
    
    test gram_checkpoint-1.2 {can checkpoint advanced gram} -setup {
        create
    } -body {
        # FIRST, advance the clock and save a checkpoint
        myclock advance 1440
        jr advance

        array set ckpt [jr checkpoint]

        # Do some spot checks
        assert {[jr time]           == 1440}
        assert {[jr time]           eq $ckpt(time)}

        # NEXT, initialize and then restore, and check against
        # the checkpoint again.

        jr init
        jr restore [array get ckpt]

        assert {[jr time]           == 1440}
        assert {[jr time]           eq $ckpt(time)}
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # Bug Fix Tests

    test bug_1830-1.1 {Slopes don't create 0.0 contributions} -setup {
        create
    } -body {
        # FIRST, create a slope effect at time 5, and advance to time 5.
        jr sat slope 1 5 N1 SHIA AUT 10

        myclock advance 5
        jr advance

        # NEXT, there should be nothing in the gram_sat_contribs table.
        rdb query {SELECT * FROM gram_sat_contribs}
    } -cleanup {
        cleanup
    } -result {}




    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::simlib::test












