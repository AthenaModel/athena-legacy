# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    gram2.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    Tcltest test suite for gram(n) V2.0
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n)


if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2.2
    eval ::tcltest::configure $argv
}

# Define a constraint to comment out tests which shouldn't
# or haven't been updated yet:
#
# * Tests requiring coop indirect effects in other neighborhoods
#   depend on removing "n" from coop and then revising the coop
#   influence mechanism.

::tcltest::testConstraint tbd

#-----------------------------------------------------------------------
# Load the package to be tested

package require simlib 2.0    ;# gram(n) is part of simlib(n)

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::simlib::test {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Import marsutil(n), for use in the test cases.
    namespace import ::marsutil::*

    # Import the code to be tested
    namespace import ::simlib::*

    #-------------------------------------------------------------------
    # Scenario Definitions

    # Create a simulation clock.

    simclockType myclock

    # Create a run-time database in memory
    sqldocument rdb -clock [namespace current]::myclock
    rdb register ::simlib::gram
    rdb register ::simlib::gramdb
    rdb open :memory:
    rdb clear
    
    gramdb loadfile ./test.gramdb2 [namespace current]::rdb
    

    # tableSave table
    #
    # Creates a temporary copy of a table in the RDB.

    proc tableSave {table} {
        set temp "temp_${table}_temp"

        rdb eval "
            DROP TABLE IF EXISTS $temp;
            CREATE TEMPORARY TABLE $temp AS SELECT* FROM $table;
        "
    }

    # tableDiff table id labels col1 ?col2?
    #
    # table    A table in the RDB
    # id       Row ID column
    # labels   The name of the label columns
    # col1     Some numeric column in the table
    # col2     Another numeric column in the saved table; defaults to col1
    #
    # Compares a table against the saved table.  Outputs a list of entries
    # for each row that differs on the named column.  Each entry 
    # looks like {key ?key...? diff}.

    proc tableDiff {table id labels col1 {col2 ""}} {
        set temp "temp_${table}_temp"

        set tableLabels ""

        foreach lab $labels {
            lappend tableLabels "$table.$lab AS $lab"
        }

        if {$col2 eq ""} {
            set col2 $col1
        }

        set results [list]

        rdb eval "
            SELECT [join $tableLabels ,],
                   $table.$col1 - $temp.$col2 AS diff
            FROM $table JOIN $temp USING ($id)
            WHERE abs($table.$col1 - $temp.$col2) > 0.00000001
        " row {
            set vec [list]
            foreach lab $labels {
                lappend vec $row($lab)
            }
            lappend vec [format %.8g $row(diff)]

            lappend results $vec
        }

        return $results
    }

    # tableDiffCols table labels col1 col2
    #
    # table    A table in the RDB
    # labels   The name of the label columns
    # col1     A numeric column.
    # col2     Another numeric column
    #
    # Compares col1 and col2 in each row in the table.
    # Outputs a list of entries in which the columns differ. Each entry 
    # looks like {key ?key...? diff}.

    proc tableDiffCols {table labels col1 col2} {
        set results [list]

        rdb eval "
            SELECT [join $labels ,],
                   $col1 - $col2 AS diff
            FROM $table
            WHERE abs($col1 - $col2) > 0.00000001
        " row {
            set vec [list]
            foreach lab $labels {
                lappend vec $row($lab)
            }
            lappend vec [format %.8g $row(diff)]

            lappend results $vec
        }

        return $results
    }

    # dumpLevels
    #
    # Dumps level effect info in a concise form.

    proc dumpLevels {} {
        pprint [rdb query {
            SELECT CASE WHEN prox == -1
                        THEN 'D'
                        ELSE 'I' END      AS d,
                   ts,
                   te,
                   n,
                   g,
                   c,
                   format('%.2f', llimit) AS llimit
            FROM gram_sat_effects 
            WHERE etype='L'
            ORDER BY ts, te, n, g, c
        }]
    }


    # dumpSlopes
    #
    # Dumps slope effect info.

    proc dumpSlopes {} {
        # Add some whitespace so that the tests look nice.
        set block [string map [list \" \'] [jr dump sat slopes]]
        return "\n$block    "
    }

    # dumpCoopLevels
    #
    # Dumps coop level effect info in a concise form.

    proc dumpCoopLevels {} {
        pprint [rdb query {
            SELECT CASE WHEN prox == -1
                        THEN 'D'
                        ELSE 'I' END      AS d,
                   ts,
                   te,
                   n,
                   f,
                   g,
                   format('%.2f', llimit) AS llimit
            FROM gram_coop_effects 
            WHERE etype='L'
            ORDER BY ts, te, n, f, g
        }]
    }

    # dumpCoopSlopes
    #
    # Dumps slope effect info.

    proc dumpCoopSlopes {} {
        # Add some whitespace so that the tests look nice.
        set block [string map [list \" \'] [jr dump coop slopes]]
        return "\n$block    "
    }

    # pprint block
    #
    # Pretty-prints a result block so that the test looks nice
    
    proc pprint {block} {
        set block [string map [list \" \'] $block]
        return "\n$block    "
    }

    # create ?options?
    #
    # Creates a pre-configured GRAM.  All gram options can be
    # used.
    #
    # -clock    Defaults to clock created for this test file
    # -rdb      Defaults to RDB created for this test file
    #
    # -drivers  Defaults to 4.  This many event/situation IDs
    #           will be automatically created.  Specify -driver 0
    #           If none should be created.
    #
    # -gramdb   gramdb2(5) contents; defaults to contents of
    #           test.gramdb2.

    proc create {args} {
        # FIRST, set up the RDB
        rdb clear
        set rdb [namespace current]::rdb

        set gramdb [optval args -gramdb]

        if {$gramdb eq ""} {
            gramdb loadfile ./test.gramdb2 $rdb
        } else {
            gramdb load $gramdb $rdb
        }

        # NEXT, set the gram.epsilon to 0.1, to preserve the existing tests.
        gram parm set gram.epsilon 0.1

        # NEXT, get create options
        set drivers [optval args -drivers 4]

        gram jr \
            -clock   [namespace current]::myclock        \
            -rdb     $rdb                                \
            -loadcmd [list ::simlib::gramdb loader $rdb] \
            {*}$args

        jr init

        # Add some dummy events/situations
        for {set i 0} {$i < $drivers} {incr i} {
            jr driver add -oneliner "Dummy DRIVER"
        }

        return
    }

    # init ?options?
    #
    # Re-initializes GRAM.  The special options understood by
    # create can be used here as well.
    #
    # -drivers    Defaults to 4.  This many event/situation IDs
    #           will be automatically created.  Specify -driver 0
    #           If none should be created.

    proc init {args} {
        # get options
        set drivers [optval args -drivers 4]

        # re-initialize gram
        jr init

        # Add some dummy events/situations
        for {set i 0} {$i < $drivers} {incr i} {
            jr driver add -oneliner "Dummy DRIVER"
        }

        return
    }

    # kill group...
    #
    # Marks the named civilian groups to be dead, i.e.,
    # gram_g.alive = 0.  The group names are
    # glob-style wildcards.

    proc kill {args} {
        foreach g $args {
            rdb eval {
                UPDATE gram_g 
                SET alive      = 0,
                    population = 0
                WHERE g GLOB $g
            }
        }
    }

    proc cleanup {} {
        myclock reset
        rdb clear

        catch {jr destroy}
    }

    #-------------------------------------------------------------------
    # Object creation
    #
    # Verify state at creation, as well as creation errors.

    test creation-1.1 {invariant succeeds on creation} -body {
        create
    } -cleanup {
        cleanup
    } -result {}

    test creation-1.2 {cannot create multiple instances on one RDB} -body {
        create

        gram temp_jr \
            -logcomponent temp                          \
            -clock        [namespace current]::myclock  \
            -rdb          [namespace current]::rdb      \
            -loadcmd      [list ::simlib::gramdb loader [namespace current]::rdb]
        
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Error in constructor: RDB ::simlib::test::rdb already in use by GRAM ::simlib::test::jr}


    #-------------------------------------------------------------------
    # Object destruction
    #
    # Verify that the RDB is cleaned up on destruction.

    test destruction-1.1 {rdb clean up} -body {
        create
    } -body {
        # FIRST, destroy the object
        cleanup

        # NEXT, verify that none of the GRAM tables have entries
        # for the object.
        set badTables {}

        foreach table [rdb tables] {
            if {![string match "gram_*" $table]} {
                continue
            }

            set count [rdb onecolumn "
                SELECT count(rowid) FROM $table
            "]

            if {$count > 0} {
                lappend badTables $table
            }
        }

        set badTables
    } -result {}

    #--------------------------------------------------------------------
    # option -loadcmd

    test option_loadcmd-1.1 {-loadcmd missing} -body {
        gram jr
    } -returnCodes {
        error
    } -result {Error in constructor: Assertion failed: $options(-loadcmd) ne ""}


    #--------------------------------------------------------------------
    # option -clock

    test option_clock-1.1 {-clock missing} -body {
        gram jr -loadcmd dummy
    } -returnCodes {
        error
    } -result {Error in constructor: Assertion failed: [info commands $clock] ne ""}

    test option_clock-1.2 {-clock invalid} -body {
        gram jr -loadcmd dummy -clock nonesuch
    } -returnCodes {
        error
    } -result {Error in constructor: Assertion failed: [info commands $clock] ne ""}

    #--------------------------------------------------------------------
    # option -rdb

    test option_rdb-1.1 {-rdb missing} -body {
        gram jr -loadcmd dummy -clock simclock
    } -returnCodes {
        error
    } -result {Error in constructor: Assertion failed: [info commands $rdb] ne ""}

    test option_rdb-1.2 {-rdb invalid} -body {
        gram jr -loadcmd dummy -clock simclock -rdb nonesuch
    } -returnCodes {
        error
    } -result {Error in constructor: Assertion failed: [info commands $rdb] ne ""}

    #-------------------------------------------------------------------
    # init

    test init-1.1 {tables populated on first initialization} -setup {
        create
    } -body {
        rdb eval {
            SELECT count(curve_id) AS count
            FROM gram_curves
        } {}

        expr {$count > 0}
    } -cleanup {
        cleanup
    } -result {1}

    test init-1.2 {-loadcmd not accessed on subsequent inits} -setup {
        create
    } -body {
        # FIRST, get the number of non-remote neighborhoods
        set prox [eproximity index REMOTE]

        set count1 [rdb onecolumn {
            SELECT count(mn_id) FROM gram_mn
            WHERE proximity < $prox
        }]

        # NEXT, set all neighborhoods remote, and reinitialize
        rdb eval {
            UPDATE gram_mn SET proximity=$prox
        } {}

        jr init

        # NEXT, the number of non-remote nbhoods should still be 0
        set count2 [rdb onecolumn {
            SELECT count(mn_id) FROM gram_mn
            WHERE proximity < $prox
        }]

        list [expr {$count1 > 0}] $count2
    } -cleanup {
        cleanup
    } -result {1 0}

    test init-1.3 {Data reloaded on init -reload} -setup {
        create
    } -body {
        # FIRST, set all neighborhoods remote, and reinitialize
        rdb eval {
            UPDATE gram_mn SET proximity=$prox
        } {}

        jr init

        set prox [eproximity index REMOTE]

        set count1 [rdb onecolumn {
            SELECT count(mn_id) FROM gram_mn
            WHERE proximity < $prox
        }]

        # NEXT, reload, and get the count.
        jr init -reload

        set count2 [rdb onecolumn {
            SELECT count(mn_id) FROM gram_mn
            WHERE proximity < $prox
        }]



        list [expr {$count1 > 0}] [expr {$count2 > 0}]
    } -cleanup {
        cleanup
    } -result {0 1}


    test init-1.4 {Can have scenario with empty neighborhoods.} -setup {
        # We have a neighborhood with a live group,
        # a neighborhood with a dead group,
        # and a neighborhood with no groups.
        create -gramdb {
            table gramdb_n {
                record n N1 { }
                record n N2 { }
                record n N3 { }
            }

            table gramdb_civ_g {
                record g C1 {
                    field n N1
                    field population 1
                }

                record g C2  {
                    field n N2
                    field population 0
                }
            }

            table gramdb_frc_g {
                record g F1  { }
            }
        }
    } -body {
        # Verify that we can initialize and advance time in this 
        # situation.
        jr init
        myclock advance 5
        jr advance
    } -cleanup {
        cleanup
    } -result {}


    # Initial contents of gram_* tables.
    # TBD: I might prefer to have a section in the test suite
    # for each individual table.

    test init-2.1 {initial contents: gram_curves} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_curves
        }]
    } -cleanup {
        cleanup
    } -result {
curve_id curve_type val0  val   delta slope 
-------- ---------- ----- ----- ----- ----- 
1        SAT        0.0   0.0   0.0   0.0   
2        SAT        0.0   0.0   0.0   0.0   
3        SAT        0.0   0.0   0.0   0.0   
4        SAT        -80.0 -80.0 0.0   0.0   
5        SAT        0.0   0.0   0.0   0.0   
6        SAT        0.0   0.0   0.0   0.0   
7        SAT        0.0   0.0   0.0   0.0   
8        SAT        -80.0 -80.0 0.0   0.0   
9        SAT        40.0  40.0  0.0   0.0   
10       SAT        -40.0 -40.0 0.0   0.0   
11       SAT        -40.0 -40.0 0.0   0.0   
12       SAT        40.0  40.0  0.0   0.0   
13       SAT        40.0  40.0  0.0   0.0   
14       SAT        -40.0 -40.0 0.0   0.0   
15       SAT        -40.0 -40.0 0.0   0.0   
16       SAT        40.0  40.0  0.0   0.0   
17       SAT        -80.0 -80.0 0.0   0.0   
18       SAT        -80.0 -80.0 0.0   0.0   
19       SAT        -40.0 -40.0 0.0   0.0   
20       SAT        -80.0 -80.0 0.0   0.0   
21       SAT        -80.0 -80.0 0.0   0.0   
22       SAT        -80.0 -80.0 0.0   0.0   
23       SAT        -40.0 -40.0 0.0   0.0   
24       SAT        -80.0 -80.0 0.0   0.0   
25       COOP       50.0  50.0  0.0   0.0   
26       COOP       50.0  50.0  0.0   0.0   
27       COOP       50.0  50.0  0.0   0.0   
28       COOP       50.0  50.0  0.0   0.0   
29       COOP       50.0  50.0  0.0   0.0   
30       COOP       50.0  50.0  0.0   0.0   
31       COOP       50.0  50.0  0.0   0.0   
32       COOP       50.0  50.0  0.0   0.0   
33       COOP       50.0  50.0  0.0   0.0   
34       COOP       50.0  50.0  0.0   0.0   
35       COOP       50.0  50.0  0.0   0.0   
36       COOP       50.0  50.0  0.0   0.0   
37       COOP       50.0  50.0  0.0   0.0   
38       COOP       50.0  50.0  0.0   0.0   
39       COOP       50.0  50.0  0.0   0.0   
40       COOP       50.0  50.0  0.0   0.0   
41       COOP       50.0  50.0  0.0   0.0   
42       COOP       50.0  50.0  0.0   0.0   
    }

    test init-2.2 {initial contents: gram_driver} -setup {
        create -drivers 0
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_driver
        }]
    } -cleanup {
        cleanup
    } -result {
driver dtype name  oneliner         last_input 
------ ----- ----- ---------------- ---------- 
0      Trend Trend Long-Term Trends 0          
    }

    test init-2.3 {initial contents: gram_effects} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_effects
        }]
    } -cleanup {
        cleanup
    } -result {
    }

    test init-2.4 {initial contents: gram_contribs} -setup {
        create
    } -body {
        rdb query {
            SELECT * FROM gram_contribs
        }
    } -cleanup {
        cleanup
    } -result {}

    test init-2.5 {initial contents: gram_deltas} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_deltas
        }]
    } -cleanup {
        cleanup
    } -result {
time curve_id delta 
---- -------- ----- 
0    1        0.0   
0    2        0.0   
0    3        0.0   
0    4        0.0   
0    5        0.0   
0    6        0.0   
0    7        0.0   
0    8        0.0   
0    9        0.0   
0    10       0.0   
0    11       0.0   
0    12       0.0   
0    13       0.0   
0    14       0.0   
0    15       0.0   
0    16       0.0   
0    17       0.0   
0    18       0.0   
0    19       0.0   
0    20       0.0   
0    21       0.0   
0    22       0.0   
0    23       0.0   
0    24       0.0   
0    25       0.0   
0    26       0.0   
0    27       0.0   
0    28       0.0   
0    29       0.0   
0    30       0.0   
0    31       0.0   
0    32       0.0   
0    33       0.0   
0    34       0.0   
0    35       0.0   
0    36       0.0   
0    37       0.0   
0    38       0.0   
0    39       0.0   
0    40       0.0   
0    41       0.0   
0    42       0.0   
    }

    test init-2.6 {initial contents: gram_n} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_n
        }]
    } -cleanup {
        cleanup
    } -result {
n_id n  sat   sat0  
---- -- ----- ----- 
1    N1 -30.0 -30.0 
2    N2 -30.0 -30.0 
    }

    test init-2.7 {initial contents: gram_g} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_g
            ORDER BY g_id
        }]
    } -cleanup {
        cleanup
    } -result {
g_id g     n  population alive parent ancestor total_saliency sat   sat0  
---- ----- -- ---------- ----- ------ -------- -------------- ----- ----- 
1    KURD1 N1 10000      1            KURD1    4.0            -20.0 -20.0 
2    KURD2 N2 10000      1            KURD2    4.0            -20.0 -20.0 
3    SHIA1 N1 10000      1            SHIA1    4.0            0.0   0.0   
4    SHIA2 N2 10000      1            SHIA2    4.0            0.0   0.0   
5    SUNN1 N1 10000      1            SUNN1    4.0            -70.0 -70.0 
6    SUNN2 N2 10000      1            SUNN2    4.0            -70.0 -70.0 
    }

    test init-2.8 {initial contents: gram_frc_g} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_frc_g
            ORDER BY g_id
        }]
    } -cleanup {
        cleanup
    } -result {
g_id g     
---- ----- 
1    BLUE  
2    BRIT  
3    OPFOR 
    }

    test init-2.9 {initial contents: gram_c} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_c
            ORDER BY c_id
        }]
    } -cleanup {
        cleanup
    } -result {
c_id c   
---- --- 
1    AUT 
2    CUL 
3    QOL 
4    SFT 
    }

    test init-2.10 {initial contents: gram_mn} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_mn
            ORDER BY mn_id
        }]
    } -cleanup {
        cleanup
    } -result {
mn_id m  n  proximity effects_delay 
----- -- -- --------- ------------- 
1     N1 N1 0         0.0           
2     N1 N2 2         0.0           
3     N2 N1 2         0.0           
4     N2 N2 0         0.0           
    }

    test init-2.13 {initial contents: gram_fg} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_fg
            ORDER BY fg_id
        }]
    } -cleanup {
        cleanup
    } -result {
fg_id f     g     rel  prox delay 
----- ----- ----- ---- ---- ----- 
1     KURD1 KURD1 1.0  -1   0     
2     KURD1 KURD2 1.0  2    0     
3     KURD1 SHIA1 0.6  0    0     
4     KURD1 SHIA2 0.6  2    0     
5     KURD1 SUNN1 -0.6 0    0     
6     KURD1 SUNN2 -0.6 2    0     
7     KURD2 KURD1 1.0  2    0     
8     KURD2 KURD2 1.0  -1   0     
9     KURD2 SHIA1 0.6  2    0     
10    KURD2 SHIA2 0.6  0    0     
11    KURD2 SUNN1 -0.6 2    0     
12    KURD2 SUNN2 -0.6 0    0     
13    SHIA1 KURD1 0.6  0    0     
14    SHIA1 KURD2 0.6  2    0     
15    SHIA1 SHIA1 1.0  -1   0     
16    SHIA1 SHIA2 1.0  2    0     
17    SHIA1 SUNN1 0.0  0    0     
18    SHIA1 SUNN2 0.0  2    0     
19    SHIA2 KURD1 0.6  2    0     
20    SHIA2 KURD2 0.6  0    0     
21    SHIA2 SHIA1 1.0  2    0     
22    SHIA2 SHIA2 1.0  -1   0     
23    SHIA2 SUNN1 0.0  2    0     
24    SHIA2 SUNN2 0.0  0    0     
25    SUNN1 KURD1 -0.6 0    0     
26    SUNN1 KURD2 -0.6 2    0     
27    SUNN1 SHIA1 -0.3 0    0     
28    SUNN1 SHIA2 -0.3 2    0     
29    SUNN1 SUNN1 1.0  -1   0     
30    SUNN1 SUNN2 1.0  2    0     
31    SUNN2 KURD1 -0.6 2    0     
32    SUNN2 KURD2 -0.6 0    0     
33    SUNN2 SHIA1 -0.3 2    0     
34    SUNN2 SHIA2 -0.3 0    0     
35    SUNN2 SUNN1 1.0  2    0     
36    SUNN2 SUNN2 1.0  -1   0     
    }

    test init-2.14 {initial contents: gram_coop_fg} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_coop_fg
            ORDER BY fg_id
        }]
    } -cleanup {
        cleanup
    } -result {
fg_id curve_id f     g     
----- -------- ----- ----- 
1     25       KURD1 BLUE  
2     26       KURD1 BRIT  
3     27       KURD1 OPFOR 
4     28       KURD2 BLUE  
5     29       KURD2 BRIT  
6     30       KURD2 OPFOR 
7     31       SHIA1 BLUE  
8     32       SHIA1 BRIT  
9     33       SHIA1 OPFOR 
10    34       SHIA2 BLUE  
11    35       SHIA2 BRIT  
12    36       SHIA2 OPFOR 
13    37       SUNN1 BLUE  
14    38       SUNN1 BRIT  
15    39       SUNN1 OPFOR 
16    40       SUNN2 BLUE  
17    41       SUNN2 BRIT  
18    42       SUNN2 OPFOR 
    }

    test init-2.15 {initial contents: gram_frc_fg} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_frc_fg
            ORDER BY fg_id
        }]
    } -cleanup {
        cleanup
    } -result {
fg_id n f     g     rel  
----- - ----- ----- ---- 
1       BLUE  BLUE  1.0  
2       BLUE  BRIT  0.8  
3       BLUE  OPFOR -0.8 
4       BRIT  BLUE  0.8  
5       BRIT  BRIT  1.0  
6       BRIT  OPFOR -0.8 
7       OPFOR BLUE  -0.8 
8       OPFOR BRIT  -0.8 
9       OPFOR OPFOR 1.0  
    }

    test init-2.16 {initial contents: gram_gc} -setup {
        create
    } -body {
        # OK
        pprint [rdb query {
            SELECT * FROM gram_gc
            ORDER BY gc_id
        }]
    } -cleanup {
        cleanup
    } -result {
gc_id g_id curve_id g     c   saliency 
----- ---- -------- ----- --- -------- 
1     1    1        KURD1 AUT 1.0      
2     1    2        KURD1 CUL 1.0      
3     1    3        KURD1 QOL 1.0      
4     1    4        KURD1 SFT 1.0      
5     2    5        KURD2 AUT 1.0      
6     2    6        KURD2 CUL 1.0      
7     2    7        KURD2 QOL 1.0      
8     2    8        KURD2 SFT 1.0      
9     3    9        SHIA1 AUT 1.0      
10    3    10       SHIA1 CUL 1.0      
11    3    11       SHIA1 QOL 1.0      
12    3    12       SHIA1 SFT 1.0      
13    4    13       SHIA2 AUT 1.0      
14    4    14       SHIA2 CUL 1.0      
15    4    15       SHIA2 QOL 1.0      
16    4    16       SHIA2 SFT 1.0      
17    5    17       SUNN1 AUT 1.0      
18    5    18       SUNN1 CUL 1.0      
19    5    19       SUNN1 QOL 1.0      
20    5    20       SUNN1 SFT 1.0      
21    6    21       SUNN2 AUT 1.0      
22    6    22       SUNN2 CUL 1.0      
23    6    23       SUNN2 QOL 1.0      
24    6    24       SUNN2 SFT 1.0      
    }


    test init-2.18 {initial contents: gram_sat} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_sat
            ORDER BY gc_id
        }]
    } -cleanup {
        cleanup
    } -result {
gc_id g_id n  g     alive c   saliency curve_id sat0  sat   delta slope 
----- ---- -- ----- ----- --- -------- -------- ----- ----- ----- ----- 
1     1    N1 KURD1 1     AUT 1.0      1        0.0   0.0   0.0   0.0   
2     1    N1 KURD1 1     CUL 1.0      2        0.0   0.0   0.0   0.0   
3     1    N1 KURD1 1     QOL 1.0      3        0.0   0.0   0.0   0.0   
4     1    N1 KURD1 1     SFT 1.0      4        -80.0 -80.0 0.0   0.0   
5     2    N2 KURD2 1     AUT 1.0      5        0.0   0.0   0.0   0.0   
6     2    N2 KURD2 1     CUL 1.0      6        0.0   0.0   0.0   0.0   
7     2    N2 KURD2 1     QOL 1.0      7        0.0   0.0   0.0   0.0   
8     2    N2 KURD2 1     SFT 1.0      8        -80.0 -80.0 0.0   0.0   
9     3    N1 SHIA1 1     AUT 1.0      9        40.0  40.0  0.0   0.0   
10    3    N1 SHIA1 1     CUL 1.0      10       -40.0 -40.0 0.0   0.0   
11    3    N1 SHIA1 1     QOL 1.0      11       -40.0 -40.0 0.0   0.0   
12    3    N1 SHIA1 1     SFT 1.0      12       40.0  40.0  0.0   0.0   
13    4    N2 SHIA2 1     AUT 1.0      13       40.0  40.0  0.0   0.0   
14    4    N2 SHIA2 1     CUL 1.0      14       -40.0 -40.0 0.0   0.0   
15    4    N2 SHIA2 1     QOL 1.0      15       -40.0 -40.0 0.0   0.0   
16    4    N2 SHIA2 1     SFT 1.0      16       40.0  40.0  0.0   0.0   
17    5    N1 SUNN1 1     AUT 1.0      17       -80.0 -80.0 0.0   0.0   
18    5    N1 SUNN1 1     CUL 1.0      18       -80.0 -80.0 0.0   0.0   
19    5    N1 SUNN1 1     QOL 1.0      19       -40.0 -40.0 0.0   0.0   
20    5    N1 SUNN1 1     SFT 1.0      20       -80.0 -80.0 0.0   0.0   
21    6    N2 SUNN2 1     AUT 1.0      21       -80.0 -80.0 0.0   0.0   
22    6    N2 SUNN2 1     CUL 1.0      22       -80.0 -80.0 0.0   0.0   
23    6    N2 SUNN2 1     QOL 1.0      23       -40.0 -40.0 0.0   0.0   
24    6    N2 SUNN2 1     SFT 1.0      24       -80.0 -80.0 0.0   0.0   
    }


    test init-2.21 {initial contents: gram_sat_effects} -setup {
        create
    } -body {
        pprint [rdb query {
            SELECT * FROM gram_sat_effects
        }]
    } -cleanup {
        cleanup
    } -result {
    }

    test init-2.22 {initial contents: gram_sat_contribs} -setup {
        create
    } -body {
        rdb query {
            SELECT * FROM gram_sat_contribs
        }
    } -cleanup {
        cleanup
    } -result {}


    test init-2.23 {initial contents: gram_coop} -setup {
        create
    } -body {
        # OK
        pprint [rdb query {
            SELECT * FROM gram_coop
            ORDER BY fg_id
        }]
    } -cleanup {
        cleanup
    } -result {
fg_id curve_id f     n  alive g     coop0 coop delta slope 
----- -------- ----- -- ----- ----- ----- ---- ----- ----- 
1     25       KURD1 N1 1     BLUE  50.0  50.0 0.0   0.0   
2     26       KURD1 N1 1     BRIT  50.0  50.0 0.0   0.0   
3     27       KURD1 N1 1     OPFOR 50.0  50.0 0.0   0.0   
4     28       KURD2 N2 1     BLUE  50.0  50.0 0.0   0.0   
5     29       KURD2 N2 1     BRIT  50.0  50.0 0.0   0.0   
6     30       KURD2 N2 1     OPFOR 50.0  50.0 0.0   0.0   
7     31       SHIA1 N1 1     BLUE  50.0  50.0 0.0   0.0   
8     32       SHIA1 N1 1     BRIT  50.0  50.0 0.0   0.0   
9     33       SHIA1 N1 1     OPFOR 50.0  50.0 0.0   0.0   
10    34       SHIA2 N2 1     BLUE  50.0  50.0 0.0   0.0   
11    35       SHIA2 N2 1     BRIT  50.0  50.0 0.0   0.0   
12    36       SHIA2 N2 1     OPFOR 50.0  50.0 0.0   0.0   
13    37       SUNN1 N1 1     BLUE  50.0  50.0 0.0   0.0   
14    38       SUNN1 N1 1     BRIT  50.0  50.0 0.0   0.0   
15    39       SUNN1 N1 1     OPFOR 50.0  50.0 0.0   0.0   
16    40       SUNN2 N2 1     BLUE  50.0  50.0 0.0   0.0   
17    41       SUNN2 N2 1     BRIT  50.0  50.0 0.0   0.0   
18    42       SUNN2 N2 1     OPFOR 50.0  50.0 0.0   0.0   
    }

    test init-2.24 {initial contents: gram_frc_ng} -setup {
        create
    } -body {
        # OK
        pprint [rdb query {
            SELECT * FROM gram_frc_ng
            ORDER BY frc_ng_id
        }]
    } -cleanup {
        cleanup
    } -result {
frc_ng_id n  g     coop coop0 
--------- -- ----- ---- ----- 
1         N1 BLUE  50.0 50.0  
2         N1 BRIT  50.0 50.0  
3         N1 OPFOR 50.0 50.0  
4         N2 BLUE  50.0 50.0  
5         N2 BRIT  50.0 50.0  
6         N2 OPFOR 50.0 50.0  
    }


    #-------------------------------------------------------------------
    # update

    test update_population-1.1 {Updates population values} -setup {
        create
    } -body {
        jr update population KURD1 1000 SHIA1 2000 SUNN1 3000
        pprint [rdb query {
            SELECT g,population FROM gram_g
            ORDER BY g_id
        }]
    } -cleanup {
        cleanup
    } -result {
g     population 
----- ---------- 
KURD1 1000       
KURD2 10000      
SHIA1 2000       
SHIA2 10000      
SUNN1 3000       
SUNN2 10000      
    }



    #-------------------------------------------------------------------
    # clear


    test clear-1.1 {No longer initialized} -setup {
        create
    } -body {
        set a [jr initialized]
        jr clear
        set b [jr initialized]
        
        list $a $b
    } -cleanup {
        cleanup
    } -result {1 0}


    test clear-1.2 {Spot check: empty tables} -setup {
        create
    } -body {
        jr clear

        rdb eval {
            SELECT count(curve_id) AS count
            FROM gram_curves
        } {}

        set count
    } -cleanup {
        cleanup
    } -result {0}


   
    #-------------------------------------------------------------------
    # driver

    test driver-1.1 {add new driver IDs} -setup {
        create
        rdb eval {DELETE FROM gram_driver}
    } -body {
        list [jr driver add] [jr driver add] [jr driver add]
    } -cleanup {
        cleanup
    } -result {1 2 3}

    test driver-1.2 {Default oneliner is "unknown"} -setup {
        create
    } -body {
        set driver [jr driver add]
        rdb onecolumn {
            SELECT oneliner
            FROM gram_driver
            WHERE driver=$driver
        }
    } -cleanup {
        cleanup
    } -result {unknown}

    test driver-1.3 {Default input is 0} -setup {
        create
    } -body {
        set driver [jr driver add]
        rdb onecolumn {
            SELECT last_input
            FROM gram_driver
            WHERE driver=$driver
        }
    } -cleanup {
        cleanup
    } -result {0}

    test driver-1.4 {Default dtype is "unknown"} -setup {
        create
    } -body {
        set driver [jr driver add]
        rdb onecolumn {
            SELECT dtype
            FROM gram_driver
            WHERE driver=$driver
        }
    } -cleanup {
        cleanup
    } -result {unknown}

    test driver-2.1 {cget invalid driver} -setup {
        create
    } -body {
        jr driver cget 13 -oneliner
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Cannot cget, unknown Driver ID: "13"}

    test driver-2.2 {cget invalid option} -setup {
        create
    } -body {
        set driver [jr driver add]
        jr driver cget $driver -nonesuch
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Unknown option: "-nonesuch"}

    test driver-2.3 {cget oneliner} -setup {
        create
    } -body {
        set driver [jr driver add]
        jr driver cget $driver -oneliner
    } -cleanup {
        cleanup
    } -result {unknown}

    test driver-2.4 {cget name} -setup {
        create
        rdb eval {DELETE FROM gram_driver}
    } -body {
        set driver [jr driver add]
        jr driver cget $driver -name
    } -cleanup {
        cleanup
    } -result {1}

    test driver-2.5 {cget dtype} -setup {
        create
        rdb eval {DELETE FROM gram_driver}
    } -body {
        set driver [jr driver add]
        jr driver cget $driver -dtype
    } -cleanup {
        cleanup
    } -result {unknown}

    test driver-3.1 {configure invalid driver} -setup {
        create
    } -body {
        jr driver configure 13 -oneliner "Wow!"
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Cannot configure, unknown Driver ID: "13"}

    test driver-3.2 {configure invalid option} -setup {
        create
    } -body {
        set driver [jr driver add]
        jr driver configure $driver -nonesuch "Wow!"
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Unknown option: "-nonesuch"}

    test driver-3.3 {configure oneliner} -setup {
        create
    } -body {
        set driver [jr driver add]
        jr driver configure $driver -oneliner "Wow!"
        jr driver cget $driver -oneliner
    } -cleanup {
        cleanup
    } -result {Wow!}

    test driver-3.3 {configure name} -setup {
        create
    } -body {
        set driver [jr driver add]
        jr driver configure $driver -name "Fred"
        jr driver cget $driver -name
    } -cleanup {
        cleanup
    } -result {Fred}

    test driver-3.4 {configure dtype} -setup {
        create
    } -body {
        set driver [jr driver add]
        jr driver configure $driver -dtype "CIVCAS"
        jr driver cget $driver -dtype
    } -cleanup {
        cleanup
    } -result {CIVCAS}

    test driver-4.1 {add with invalid option} -setup {
        create
        rdb eval {DELETE FROM gram_driver}
    } -body {
        catch {jr driver add -nonesuch "Wow!"} result
        set count [rdb onecolumn {
            SELECT COUNT(driver) FROM gram_driver
        }]

        list $count $result
    } -cleanup {
        cleanup
    } -result {0 {Unknown option: "-nonesuch"}} 


    test driver-4.2 {add with options} -setup {
        create
    } -body {
        set driver [jr driver add -name Fred -oneliner "Wow!" -dtype "CIVCAS"]

        list \
            [jr driver cget $driver -name]     \
            [jr driver cget $driver -oneliner] \
            [jr driver cget $driver -dtype]
    } -cleanup {
        cleanup
    } -result {Fred Wow! CIVCAS}

    #-------------------------------------------------------------------
    # advance/time

    test advance-1.1 {time is zero initially} -setup {
        create
    } -body {
        jr time
    } -cleanup {
        cleanup
    } -result {0}
    
    test advance-2.1 {time can advance} -setup {
        create
    } -body {
        myclock advance 5
        jr advance
        list [myclock now] [jr time]
    } -cleanup {
        cleanup
    } -result {5 5}
    
    test advance-3.1 {init returns time to simclock time} -setup {
        create
    } -body {
        myclock advance 5
        jr advance
        myclock reset
        jr init
        list [myclock now] [jr time]
    } -cleanup {
        cleanup
    } -result {0 0}


    test advance-4.1 {groups are marked dead on advance} -setup {
        create
        jr update population SHIA1 0 SHIA2 0
    } -body {
        myclock advance 5
        jr advance
        pprint [rdb query {
            SELECT g, population, alive FROM gram_g
        }]
    } -cleanup {
        cleanup
    } -result {
g     population alive 
----- ---------- ----- 
KURD1 10000      1     
KURD2 10000      1     
SHIA1 0          0     
SHIA2 0          0     
SUNN1 10000      1     
SUNN2 10000      1     
    }


    #-------------------------------------------------------------------
    # Tables gram_sat, gram_gc
    #
    # This section doesn't test the effect of satisfaction inputs
    # or adjustments on these tables; that will be done when the 
    # "sat adjust", "sat level", and "sat slope" methods are tested.

    # 1.*: Initial values

    test table_gram_sat-1.1 {sat=sat0 at time 0} -setup {
        create
    } -body {
        tableDiffCols gram_sat {n g c} sat sat0
    } -cleanup {
        cleanup
    } -result {}

    test table_gram_sat-1.2 {slope is 0.0 at time 0} -setup {
        create
    } -body {
        rdb onecolumn {
            SELECT count(gc_id) FROM gram_sat
            WHERE slope != 0.0
        }
    } -cleanup {
        cleanup
    } -result {0}
    


    #-------------------------------------------------------------------
    # Table gram_n

    test table_gram_n-1.1 {value at time 0} -setup {
        create
    } -body {
        # Numbers checked by hand
        pprint [rdb query {
            SELECT n,format('%8.4f',sat) FROM gram_n
        }]
    } -cleanup {
        cleanup
    } -result {
n  format('%8.4f',sat) 
-- ------------------- 
N1 -30.0000            
N2 -30.0000            
    }
    
    test table_gram_n-1.2 {sat.n == sat0.n at time 0} -setup {
        create
    } -body {
        tableDiffCols gram_n {n} sat sat0
    } -cleanup {
        cleanup
    } -result {}

    test table_gram_n-1.3 {value with different saliences} -setup {
        create
    } -body {
        rdb eval {
            UPDATE gram_gc
            SET saliency=0.5
            WHERE g='SHIA1' AND c='AUT';
        }

        jr init

        # Numbers checked by hand
        pprint [rdb query {
            SELECT n,format('%8.4f',sat) FROM gram_n
        }]
    } -cleanup {
        cleanup
    } -result {
n  format('%8.4f',sat) 
-- ------------------- 
N1 -33.0435            
N2 -30.0000            
    }

    test table_gram_n-1.5 {value with different populations} -setup {
        create
    } -body {
        rdb eval {
            UPDATE gram_g
            SET population=20000
            WHERE g='SHIA1';
        }

        jr init

        # Numbers checked by hand
        pprint [rdb query {
            SELECT n,format('%8.4f',sat) FROM gram_n
        }]
    } -cleanup {
        cleanup
    } -result {
n  format('%8.4f',sat) 
-- ------------------- 
N1 -22.5000            
N2 -30.0000            
    }

    test table_gram_n-1.6 {sat.n is 0.0 when population.n is 0.} -setup {
        create
    } -body {
        kill *

        jr init

        # Numbers checked by hand
        pprint [rdb query {
            SELECT n,format('%3.1f',sat) FROM gram_n
        }]
    } -cleanup {
        cleanup
    } -result {
n  format('%3.1f',sat) 
-- ------------------- 
N1 0.0                 
N2 0.0                 
    }


    #-------------------------------------------------------------------
    # Table gram_frc_ng

    test table_gram_frc_ng-1.1 {value at time 0} -setup {
        create
    } -body {
        # Numbers checked by hand
        pprint [rdb query {
            SELECT n,g,format('%5.2f',coop) FROM gram_frc_ng
        }]
    } -cleanup {
        cleanup
    } -result {
n  g     format('%5.2f',coop) 
-- ----- -------------------- 
N1 BLUE  50.00                
N1 BRIT  50.00                
N1 OPFOR 50.00                
N2 BLUE  50.00                
N2 BRIT  50.00                
N2 OPFOR 50.00                
    }
    
    test table_gram_frc_ng-1.2 {coop.ng == coop0.ng at time 0} -setup {
        create
    } -body {
        tableDiffCols gram_frc_ng {n g} coop coop0
    } -cleanup {
        cleanup
    } -result {}


    test table_gram_frc_ng-1.3 {coop.ng is 0.0 when pop.n is 0.} -setup {
        create
    } -body {
        kill *
        jr init

        # Numbers checked by hand
        pprint [rdb query {
            SELECT n,g,format('%5.2f',coop) FROM gram_frc_ng
        }]
    } -cleanup {
        cleanup
    } -result {
n  g     format('%5.2f',coop) 
-- ----- -------------------- 
N1 BLUE   0.00                
N1 BRIT   0.00                
N1 OPFOR  0.00                
N2 BLUE   0.00                
N2 BRIT   0.00                
N2 OPFOR  0.00                
    }


    #-------------------------------------------------------------------
    # Table gram_g

    test table_gram_g-1.1 {value at time 0} -setup {
        create
    } -body {
        # Numbers checked by hand
        pprint [rdb query {
            SELECT g,format('%.4f',sat) FROM gram_g
            ORDER BY g_id
        }]
    } -cleanup {
        cleanup
    } -result {
g     format('%.4f',sat) 
----- ------------------ 
KURD1 -20.0000           
KURD2 -20.0000           
SHIA1 0.0000             
SHIA2 0.0000             
SUNN1 -70.0000           
SUNN2 -70.0000           
    }
    
    test table_gram_g-1.2 {sat.g == sat0.g at time 0} -setup {
        create
    } -body {
        tableDiffCols gram_g {g} sat sat0
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # Tables gram_coop
    #
    # This section doesn't test the effect of cooperation inputs
    # or adjustments on these tables; that will be done when the 
    # "coop adjust", "coop level", and "coop slope" methods are tested.

    # 1.*: Initial values

    test table_gram_coop-1.1 {coop=coop0 at time 0} -setup {
        create
    } -body {
        tableDiffCols gram_coop {f g} coop coop0
    } -cleanup {
        cleanup
    } -result {}

    test table_gram_coop-1.2 {slope is 0.0 at time 0} -setup {
        create
    } -body {
        rdb onecolumn {
            SELECT count(fg_id) FROM gram_coop
            WHERE slope != 0.0
        }
    } -cleanup {
        cleanup
    } -result {0}
    

    #-------------------------------------------------------------------
    # Table gram_contribs, gram_sat_contribs, gram_coop_contribs

    test table_gram_contribs-1.1 {sat contribs retained} -setup {
        create
    } -body {
        jr sat level 1 0 SHIA1 QOL 5 .1  
        jr sat slope 2 0 SHIA1 SFT 10
        jr sat level 3 0 SHIA1 CUL 5 .1  
        jr sat level 4 0 SHIA1 AUT 5 .1  
        myclock advance 1440
        jr advance

        # Dump the history, skipping Driver 0, the long-term trend.
        pprint [rdb query {
            SELECT time, driver, n, g, c,
                   format('%4.1f',acontrib) AS acontrib
            FROM gram_sat_contribs
            WHERE driver != 0
        }]
    } -cleanup {
        cleanup
    } -result {
time driver n  g     c   acontrib 
---- ------ -- ----- --- -------- 
1440 1      N1 KURD1 QOL  3.0     
1440 1      N1 SHIA1 QOL  7.0     
1440 1      N1 SUNN1 QOL -0.9     
1440 2      N1 KURD1 SFT 10.8     
1440 2      N1 SHIA1 SFT  6.0     
1440 2      N1 SUNN1 SFT -0.6     
1440 3      N1 KURD1 CUL  3.0     
1440 3      N1 SHIA1 CUL  7.0     
1440 3      N1 SUNN1 CUL -0.3     
1440 4      N1 KURD1 AUT  3.0     
1440 4      N1 SHIA1 AUT  3.0     
1440 4      N1 SUNN1 AUT -0.3     
    }

    test table_gram_contribs-1.2 {sat contribs retained over time} -setup {
        create
    } -body {
        jr sat slope 1 0 SHIA1 QOL 10
        myclock advance 1440
        jr advance
        myclock advance 2880
        jr advance

        pprint [rdb query {
            SELECT time, driver, n, g, c,
                   format('%4.1f',acontrib) AS acontrib
            FROM gram_sat_contribs
            WHERE driver != 0
        }]
    } -cleanup {
        cleanup
    } -result {
time driver n  g     c   acontrib 
---- ------ -- ----- --- -------- 
1440 1      N1 KURD1 QOL  6.0     
1440 1      N1 SHIA1 QOL 14.0     
1440 1      N1 SUNN1 QOL -1.8     
2880 1      N1 KURD1 QOL  5.6     
2880 1      N1 SHIA1 QOL 12.6     
2880 1      N1 SUNN1 QOL -1.7     
    }

    test table_gram_contribs-2.1 {coop contribs retained} -setup {
        create
    } -body {
        jr coop level 1 0 SHIA1 BLUE  5 .1  
        jr coop level 3 0 SHIA1 BRIT  5 .1  
        jr coop slope 3 0 SHIA1 OPFOR 5
        myclock advance 1440
        jr advance

        pprint [rdb query {
            SELECT time, driver, n, f, g,
                   format('%4.1f',acontrib) AS acontrib
            FROM gram_coop_contribs
        }]
    } -cleanup {
        cleanup
    } -result {
time driver n  f     g     acontrib 
---- ------ -- ----- ----- -------- 
1440 1      N1 SHIA1 BLUE   2.5     
1440 1      N1 SHIA1 BRIT   2.0     
1440 1      N1 SHIA1 OPFOR -2.0     
1440 3      N1 SHIA1 BLUE   0.0     
1440 3      N1 SHIA1 BRIT   0.5     
1440 3      N1 SHIA1 OPFOR  0.5     
    }

    test table_gram_contribs-2.2 {coop contribs retained over time} -setup {
        create
    } -body {
        jr coop level 1 0 SHIA1 BLUE 10 1
        myclock advance 360
        jr advance
        myclock advance 720
        jr advance

        pprint [rdb query {
            SELECT time, driver, n, f, g,
                   format('%4.1f',acontrib) AS acontrib
            FROM gram_coop_contribs
        }]
    } -cleanup {
        cleanup
    } -result {
time driver n  f     g     acontrib 
---- ------ -- ----- ----- -------- 
360  1      N1 SHIA1 BLUE   3.4     
360  1      N1 SHIA1 BRIT   2.7     
360  1      N1 SHIA1 OPFOR -2.7     
720  1      N1 SHIA1 BLUE   1.0     
720  1      N1 SHIA1 BRIT   0.8     
720  1      N1 SHIA1 OPFOR -0.8     
    }

    test table_gram_contribs-3.1 {contribs not retained on request} -setup {
        create
        gram parm set gram.saveHistory no
    } -body {
        jr sat  level 1 0 SHIA1 QOL  5 .1
        jr coop level 1 0 SHIA1 BLUE 5 .1
        myclock advance 1440
        jr advance

        rdb eval {SELECT * FROM gram_contribs}
    } -cleanup {
        cleanup
        gram parm set gram.saveHistory yes
    } -result {}

    #-------------------------------------------------------------------
    # Table gram_deltas, gram_sat_deltas, gram_coop_deltas

    test table_gram_deltas-1.1 {Sat deltas retained over time} -setup {
        create
    } -body {
        myclock advance 1440
        jr advance

        pprint [rdb query {
            SELECT time, delta, n, g, c
            FROM gram_sat_deltas
            WHERE curve_id = 1
        }]
    } -cleanup {
        cleanup
    } -result {
time delta n  g     c   
---- ----- -- ----- --- 
0    0.0   N1 KURD1 AUT 
1440 0.0   N1 KURD1 AUT 
    }

    test table_gram_deltas-1.2 {Coop deltas retained over time} -setup {
        create
    } -body {
        myclock advance 1440
        jr advance

        pprint [rdb query {
            SELECT time, delta, n, f, g
            FROM gram_coop_deltas
            WHERE curve_id = 25
        }]
    } -cleanup {
        cleanup
    } -result {
time delta n  f     g    
---- ----- -- ----- ---- 
0    0.0   N1 KURD1 BLUE 
1440 0.0   N1 KURD1 BLUE 
    }

    test table_gram_deltas-1.4 {Deltas not retained on request} -setup {
        gram parm set gram.saveHistory no
        create
    } -body {
        myclock advance 1440
        jr advance

        rdb query {SELECT * FROM gram_deltas}
    } -cleanup {
        gram parm set gram.saveHistory yes
        cleanup
    } -result {}
    

    #-------------------------------------------------------------------
    # Table gram_hist_g

    test table_gram_hist_g-1.1 {group data retained} -setup {
        create
    } -body {
        myclock advance 5
        jr advance

        jr update population SHIA1 0
        myclock advance 10
        jr advance

        jr civgroup move SHIA2 N1
        myclock advance 15
        jr advance

        pprint [rdb query {SELECT * FROM gram_hist_g}]
    } -cleanup {
        cleanup
    } -result {
time g     n  alive population 
---- ----- -- ----- ---------- 
0    KURD1 N1 1     10000      
0    KURD2 N2 1     10000      
0    SHIA1 N1 1     10000      
0    SHIA2 N2 1     10000      
0    SUNN1 N1 1     10000      
0    SUNN2 N2 1     10000      
5    KURD1 N1 1     10000      
5    KURD2 N2 1     10000      
5    SHIA1 N1 1     10000      
5    SHIA2 N2 1     10000      
5    SUNN1 N1 1     10000      
5    SUNN2 N2 1     10000      
10   KURD1 N1 1     10000      
10   KURD2 N2 1     10000      
10   SHIA1 N1 0     0          
10   SHIA2 N2 1     10000      
10   SUNN1 N1 1     10000      
10   SUNN2 N2 1     10000      
15   KURD1 N1 1     10000      
15   KURD2 N2 1     10000      
15   SHIA1 N1 0     0          
15   SHIA2 N1 1     10000      
15   SUNN1 N1 1     10000      
15   SUNN2 N2 1     10000      
    }

    #-------------------------------------------------------------------
    # sat adjust

    test sat_adjust-1.1 {invalid driver} -setup {
        create
    } -body {
        jr sat adjust DUMMY SHIA1 QOL 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Cannot sat adjust, unknown Driver ID: "DUMMY"}

    test sat_adjust-1.2 {invalid group} -setup {
        create
    } -body {
        jr sat adjust 1 DUMMY QOL 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: KURD1, KURD2, SHIA1, SHIA2, SUNN1, SUNN2}

    test sat_adjust-1.3 {group is dead} -setup {
        create
        kill SHIA1
    } -body {
        jr sat adjust 1 SHIA1 QOL 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Group is dead: "SHIA1"}

    test sat_adjust-1.4 {invalid concern} -setup {
        create
    } -body {
        jr sat adjust 1 KURD2 DUMMY 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: AUT, CUL, QOL, SFT}

    test sat_adjust-2.1 {adjustment: specific g, c} -setup {
        create
    } -body {
        tableSave gram_sat
        jr sat adjust 1 SUNN2 SFT 5
        tableDiff gram_sat gc_id {g c} sat
    } -cleanup {
        cleanup
    } -result {{SUNN2 SFT 5}}

    test sat_adjust-2.2 {adjustment: g=*, specific c} -setup {
        create
    } -body {
        tableSave gram_sat
        jr sat adjust 1 * SFT 5
        tableDiff gram_sat gc_id {g c} sat
    } -cleanup {
        cleanup
    } -result {{KURD1 SFT 5} {KURD2 SFT 5} {SHIA1 SFT 5} {SHIA2 SFT 5} {SUNN1 SFT 5} {SUNN2 SFT 5}}

    test sat_adjust-2.3 {adjustment: g=*, dead groups are skipped} -setup {
        create
        kill SHIA1 SHIA2
    } -body {
        tableSave gram_sat
        jr sat adjust 1 * SFT 5
        tableDiff gram_sat gc_id {g c} sat
    } -cleanup {
        cleanup
    } -result {{KURD1 SFT 5} {KURD2 SFT 5} {SUNN1 SFT 5} {SUNN2 SFT 5}}

    test sat_adjust-2.4 {adjustment: c=*, specific g} -setup {
        create
    } -body {
        tableSave gram_sat
        jr sat adjust 1 SUNN2 * 5
        tableDiff gram_sat gc_id {g c} sat
    } -cleanup {
        cleanup
    } -result {{SUNN2 AUT 5} {SUNN2 CUL 5} {SUNN2 QOL 5} {SUNN2 SFT 5}}

    test sat_adjust-2.5 {adjustment: g=*, c=*} -setup {
        create
    } -body {
        tableSave gram_sat
        jr sat adjust 1 * * 5
        tableDiff gram_sat gc_id {g c} sat
    } -cleanup {
        cleanup
    } -result {{KURD1 AUT 5} {KURD1 CUL 5} {KURD1 QOL 5} {KURD1 SFT 5} {KURD2 AUT 5} {KURD2 CUL 5} {KURD2 QOL 5} {KURD2 SFT 5} {SHIA1 AUT 5} {SHIA1 CUL 5} {SHIA1 QOL 5} {SHIA1 SFT 5} {SHIA2 AUT 5} {SHIA2 CUL 5} {SHIA2 QOL 5} {SHIA2 SFT 5} {SUNN1 AUT 5} {SUNN1 CUL 5} {SUNN1 QOL 5} {SUNN1 SFT 5} {SUNN2 AUT 5} {SUNN2 CUL 5} {SUNN2 QOL 5} {SUNN2 SFT 5}}

    test sat_adjust-3.1 {Satisfactions over 100.0 are clamped} -setup {
        create
    } -body {
        tableSave gram_sat
        jr sat adjust 1 SHIA1 AUT 300.0
        tableDiff gram_sat gc_id {g c} sat
    } -cleanup {
        cleanup
    } -result {{SHIA1 AUT 60}}

    test sat_adjust-3.2 {Satisfactions under -100.0 are clamped} -setup {
        create
    } -body {
        tableSave gram_sat
        jr sat adjust 1 SHIA1 AUT -300.0
        tableDiff gram_sat gc_id {g c} sat
    } -cleanup {
        cleanup
    } -result {{SHIA1 AUT -140}}

    test sat_adjust-4.1 {sat.n is recomputed.} -setup {
        create
    } -body {
        # Note, if we adjust by 5 for all CIV groups and concerns in a 
        # neighborhood, sat.n should go up by 5 for that neighborhood.
        tableSave gram_n
        jr sat adjust 1 * AUT 5
        jr sat adjust 1 * CUL 5
        jr sat adjust 1 * QOL 5
        jr sat adjust 1 * SFT 5
        tableDiff gram_n n_id {n} sat
    } -cleanup {
        cleanup
    } -result {{N1 5} {N2 5}}

    test sat_adjust-4.2 {sat.g is recomputed.} -setup {
        create
    } -body {
        # Note, if we adjust by 5 for all concerns
        # sat.g should go up by 5 for that group.
        tableSave gram_g
        jr sat adjust 1 SUNN1 * 5
        tableDiff gram_g g_id {g} sat
    } -cleanup {
        cleanup
    } -result {{SUNN1 5}}

    test sat_adjust-5.1 {gram_contribs is saved} -setup {
        create
    } -body {
        jr sat adjust 1 SHIA1 AUT 5
        jr sat adjust 2 KURD1 CUL 3
        pprint [rdb query {SELECT * FROM gram_sat_contribs}]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  g     c   
---- ------ -------- -------- -- ----- --- 
0    1      5.0      9        N1 SHIA1 AUT 
0    2      3.0      2        N1 KURD1 CUL 
    }

    test sat_adjust-5.2 {multiple adjusts for one driver accumulate} -setup {
        create
    } -body {
        jr sat adjust 1 KURD1 CUL 5
        jr sat adjust 1 KURD1 CUL 3
        pprint [rdb query {SELECT * FROM gram_sat_contribs}]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  g     c   
---- ------ -------- -------- -- ----- --- 
0    1      8.0      2        N1 KURD1 CUL 
    }

    test sat_adjust-5.3 {Large positive adjustments are clamped} -setup {
        create
    } -body {
        # Curve is initially 0; make it 90.0
        jr sat adjust 1 KURD1 CUL 90.0

        # Adjust by 20; should get a contribs of 10.0
        jr sat adjust 2 KURD1 CUL 20

        pprint [rdb query {SELECT * FROM gram_sat_contribs}]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  g     c   
---- ------ -------- -------- -- ----- --- 
0    1      90.0     2        N1 KURD1 CUL 
0    2      10.0     2        N1 KURD1 CUL 
    }

    test sat_adjust-5.4 {Large negative adjustments are clamped} -setup {
        create
    } -body {
        # Curve is initially 0; make it -90.0
        jr sat adjust 1 KURD1 CUL -90.0

        # Adjust by -20; should get a contribs of -10.0
        jr sat adjust 2 KURD1 CUL -20

        pprint [rdb query {SELECT * FROM gram_sat_contribs}]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  g     c   
---- ------ -------- -------- -- ----- --- 
0    1      -90.0    2        N1 KURD1 CUL 
0    2      -10.0    2        N1 KURD1 CUL 
    }

    test sat_adjust-5.5 {Contribs is timestamped} -setup {
        create
    } -body {
        jr sat adjust 1 KURD1 CUL -20

        myclock advance 5
        jr advance

        jr sat adjust 1 KURD1 CUL  40

        # Skip the trend contribs
        pprint [rdb query {
            SELECT * FROM gram_sat_contribs
            WHERE driver != 0
        }]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  g     c   
---- ------ -------- -------- -- ----- --- 
0    1      -20.0    2        N1 KURD1 CUL 
5    1      40.0     2        N1 KURD1 CUL 
    }

    test sat_adjust-6.1 {gram_deltas is updated} -setup {
        create
    } -body {
        set a [rdb onecolumn {
            SELECT delta FROM gram_sat_deltas
            WHERE g='SHIA1' AND c='AUT'
            AND time=0
        }]

        jr sat adjust 1 SHIA1 AUT 5

        set b [rdb onecolumn {
            SELECT delta FROM gram_sat_deltas
            WHERE g='SHIA1' AND c='AUT'
            AND time=0
        }]

        list $a $b
    } -cleanup {
        cleanup
    } -result {0.0 5.0}


    test sat_adjust-7.1 {last_input is updated and returned} -setup {
        create
    } -body {
        set a [jr sat adjust 1 SHIA1 AUT 5]
        set b [jr sat adjust 1 SHIA1 AUT 5]
        set c [jr sat adjust 1 SHIA1 AUT 5]
        set d [rdb onecolumn {
            SELECT last_input FROM gram_driver
            WHERE driver=1
        }]

        list $a $b $c $d
    } -cleanup {
        cleanup
    } -result {1 2 3 3}

    #-------------------------------------------------------------------
    # sat set

    test sat_set-1.1 {invalid driver} -setup {
        create
    } -body {
        jr sat set DUMMY SHIA1 QOL 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Cannot sat set, unknown Driver ID: "DUMMY"}

    test sat_set-1.2 {invalid group} -setup {
        create
    } -body {
        jr sat set 1 DUMMY QOL 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: KURD1, KURD2, SHIA1, SHIA2, SUNN1, SUNN2}

    test sat_set-1.3 {group is dead} -setup {
        create
        kill SHIA1
    } -body {
        jr sat set 1 SHIA1 QOL 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Group is dead: "SHIA1"}

    test sat_set-1.4 {invalid concern} -setup {
        create
    } -body {
        jr sat set 1 KURD2 DUMMY 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: AUT, CUL, QOL, SFT}

    test sat_set-1.5 {sat in range} -setup {
        create
    } -body {
        jr sat set 1 SUNN1 SFT 101
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "101", should be a real number in range -100.0, 100.0, or one of: VS, S, A, D, VD}

    test sat_set-2.1 {set: specific g, c} -setup {
        create
    } -body {
        tableSave gram_sat
        jr sat set 1 SUNN2 SFT 5
        tableDiff gram_sat gc_id {g c} sat
    } -cleanup {
        cleanup
    } -result {{SUNN2 SFT 85}}

    test sat_set-2.2 {set: g=*, specific c} -setup {
        create
    } -body {
        tableSave gram_sat
        jr sat set 1 * SFT 5
        tableDiff gram_sat gc_id {g c} sat
    } -cleanup {
        cleanup
    } -result {{KURD1 SFT 85} {KURD2 SFT 85} {SHIA1 SFT -35} {SHIA2 SFT -35} {SUNN1 SFT 85} {SUNN2 SFT 85}}

    test sat_set-2.3 {set: g=*, skip dead groups} -setup {
        create
        kill SHIA1 SHIA2
    } -body {
        tableSave gram_sat
        jr sat set 1 * SFT 5
        tableDiff gram_sat gc_id {g c} sat
    } -cleanup {
        cleanup
    } -result {{KURD1 SFT 85} {KURD2 SFT 85} {SUNN1 SFT 85} {SUNN2 SFT 85}}

    test sat_set-2.4 {set: c=*, specific g} -setup {
        create
    } -body {
        tableSave gram_sat
        jr sat set 1 SUNN2 * 5
        tableDiff gram_sat gc_id {g c} sat
    } -cleanup {
        cleanup
    } -result {{SUNN2 AUT 85} {SUNN2 CUL 85} {SUNN2 QOL 45} {SUNN2 SFT 85}}

    test sat_set-2.5 {set: g=*, c=*} -setup {
        create
    } -body {
        tableSave gram_sat
        jr sat set 1 * * 5
        tableDiff gram_sat gc_id {g c} sat
    } -cleanup {
        cleanup
    } -result {{KURD1 AUT 5} {KURD1 CUL 5} {KURD1 QOL 5} {KURD1 SFT 85} {KURD2 AUT 5} {KURD2 CUL 5} {KURD2 QOL 5} {KURD2 SFT 85} {SHIA1 AUT -35} {SHIA1 CUL 45} {SHIA1 QOL 45} {SHIA1 SFT -35} {SHIA2 AUT -35} {SHIA2 CUL 45} {SHIA2 QOL 45} {SHIA2 SFT -35} {SUNN1 AUT 85} {SUNN1 CUL 85} {SUNN1 QOL 45} {SUNN1 SFT 85} {SUNN2 AUT 85} {SUNN2 CUL 85} {SUNN2 QOL 45} {SUNN2 SFT 85}}

    # This one test verifies that satisfaction roll-ups are computed
    # when satisfaction is set.

    test sat_set-3.1 {sat.g is recomputed.} -setup {
        create
    } -body {
        # Note, if we set to 5 for all concerns, sat.g should go
        # to 5 for that group
        tableSave gram_g
        jr sat set 1 SUNN1 * 5
        tableDiff gram_g g_id {g} sat
    } -cleanup {
        cleanup
    } -result {{SUNN1 75}}

    # sat set uses the code as sat adjust under the hood;
    # verify that contribs are saved, but leave in-depth
    # checks for sat adjust.

    test sat_set-4.1 {gram_contribs is saved} -setup {
        create
    } -body {
        jr sat set 1 SHIA1 AUT 5
        jr sat set 2 KURD1 CUL 3
        pprint [rdb query {SELECT * FROM gram_sat_contribs}]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  g     c   
---- ------ -------- -------- -- ----- --- 
0    1      -35.0    9        N1 SHIA1 AUT 
0    2      3.0      2        N1 KURD1 CUL 
    }


    test sat_set-5.1 {last_input is updated and returned} -setup {
        create
    } -body {
        set a [jr sat set 1 SHIA1 AUT 5]
        set b [jr sat set 1 SHIA1 AUT 10]
        set c [jr sat set 1 SHIA1 AUT 15]
        set d [rdb onecolumn {
            SELECT last_input FROM gram_driver
            WHERE driver=1
        }]

        list $a $b $c $d
    } -cleanup {
        cleanup
    } -result {1 2 3 3}


    test sat_set-5.2 {last_input is undone} -setup {
        create
    } -body {
        set a [jr sat set 1 SHIA1 AUT 5]
        set b [jr sat set 1 SHIA1 AUT 10]
        set c [jr sat set 1 SHIA1 AUT 15]
        set d [jr sat set 1 SHIA1 AUT 10 -undo]
        set e [jr sat set 1 SHIA1 AUT 5 -undo]
        set f [rdb onecolumn {
            SELECT last_input FROM gram_driver
            WHERE driver=1
        }]

        list $a $b $c $d $e $f
    } -cleanup {
        cleanup
    } -result {1 2 3 {} {} 1}

    #-------------------------------------------------------------------
    # sat level
        
    test sat_level-1.1 {invalid driver} -setup {
        create
    } -body {
        jr sat level DUMMY 1 SHIA1 SFT 10.0 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {Cannot sat level, unknown Driver ID: "DUMMY"}

    test sat_level-1.2 {ts not numeric} -setup {
        create
    } -body {
        jr sat level 1 DUMMY SHIA1 SFT 10.0 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {non-numeric ts: "DUMMY"}

    test sat_level-1.3 {ts in past} -setup {
        create
    } -body {
        jr sat level 1 -1 SHIA1 SFT 10.0 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {Start time is in the past: '312359ZDEC69'}

    test sat_level-1.4 {invalid group} -setup {
        create
    } -body {
        jr sat level 1 0 DUMMY SFT 10.0 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "DUMMY", should be one of: KURD1, KURD2, SHIA1, SHIA2, SUNN1, SUNN2}

    test sat_level-1.5 {group is dead, no -allowdead given} -setup {
        create
        kill SHIA1
    } -body {
        jr sat level 1 0 SHIA1 SFT 10.0 1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {Group is dead: "SHIA1"}

    test sat_level-1.6 {invalid concern} -setup {
        create
    } -body {
        jr sat level 1 0 SHIA1 DUMMY 10.0 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "DUMMY", should be one of: AUT, CUL, QOL, SFT}

    test sat_level-1.7 {invalid limit: unknown symbol} -setup {
        create
    } -body {
        jr sat level 1 0 SHIA1 SFT DUMMY 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "DUMMY", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}

    test sat_level-1.8 {invalid days: unknown symbol} -setup {
        create
    } -body {
        jr sat level 1 0 SHIA1 SFT 10.0 DUMMY
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "DUMMY", should be a real number no less than 0.0, or one of: XL, L, M, S, XS}

    test sat_level-1.9 {negative days} -setup {
        create
    } -body {
        jr sat level 1 0 SHIA1 SFT 10.0 -1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "-1", should be a real number no less than 0.0, or one of: XL, L, M, S, XS}

    test sat_level-1.10 {Invalid option} -setup {
        create
    } -body {
        jr sat level 1 0 SHIA1 SFT 10.0 1 -nonesuch foo
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid option: "-nonesuch"}


    test sat_level-1.11 {Non-numeric -s} -setup {
        create
    } -body {
        jr sat level 1 0 SHIA1 SFT 10.0 1 -s FOO
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "FOO", should be a real number in range 0.0, 1.0}

    test sat_level-1.12 {Negative -s} -setup {
        create
    } -body {
        jr sat level 1 0 SHIA1 SFT 10.0 1 -s -0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "-0.1", should be a real number in range 0.0, 1.0}

    test sat_level-1.13 {-s greater than 1.0} -setup {
        create
    } -body {
        jr sat level 1 0 SHIA1 SFT 10.0 1 -s 1.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "1.1", should be a real number in range 0.0, 1.0}


    test sat_level-1.14 {Non-numeric -p} -setup {
        create
    } -body {
        jr sat level 1 0 SHIA1 SFT 10.0 1 -p FOO
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "FOO", should be a real number in range 0.0, 1.0}

    test sat_level-1.15 {Negative -p} -setup {
        create
    } -body {
        jr sat level 1 0 SHIA1 SFT 10.0 1 -p -0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "-0.1", should be a real number in range 0.0, 1.0}

    test sat_level-1.16 {-p greater than 1.0} -setup {
        create
    } -body {
        jr sat level 1 0 SHIA1 SFT 10.0 1 -p 1.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "1.1", should be a real number in range 0.0, 1.0}


    test sat_level-1.17 {Non-numeric -q} -setup {
        create
    } -body {
        jr sat level 1 0 SHIA1 SFT 10.0 1 -q FOO
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "FOO", should be a real number in range 0.0, 1.0}

    test sat_level-1.18 {Negative -q} -setup {
        create
    } -body {
        jr sat level 1 0 SHIA1 SFT 10.0 1 -q -0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "-0.1", should be a real number in range 0.0, 1.0}

    test sat_level-1.19 {-q greater than 1.0} -setup {
        create
    } -body {
        jr sat level 1 0 SHIA1 SFT 10.0 1 -q 1.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "1.1", should be a real number in range 0.0, 1.0}

    # TBD: Test -athresh
    # TBD: Test -dthresh

    test sat_level-2.1 {schedule event for one n,g,c.} -setup {
        create
    } -body {
        jr sat level 1 0 KURD2 QOL 5.0 0.1
        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te  n  g     c   llimit 
- -- --- -- ----- --- ------ 
D 0  144 N2 KURD2 QOL 5.00   
I 0  144 N2 SHIA2 QOL 3.00   
I 0  144 N2 SUNN2 QOL -3.00  
    }

    test sat_level-2.2 {-s is 0.5} -setup {
        create
    } -body {
        jr sat level 1 0 KURD2 QOL 5.0 0.1 -s 0.5
        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te  n  g     c   llimit 
- -- --- -- ----- --- ------ 
D 0  144 N2 KURD2 QOL 5.00   
I 0  144 N2 SHIA2 QOL 1.50   
I 0  144 N2 SUNN2 QOL -1.50  
    }

    test sat_level-2.3 {zero magnitude events are ignored} -setup {
        create
    } -body {
        jr sat level 1 0 KURD2 QOL 0.0 0.1
        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
    }

    test sat_level-2.4 {epsilon events take one day} -setup {
        create
    } -body {
        jr sat level 1 0 KURD2 QOL 0.05 0.1
        
        # Note that ts=te for all effects.
        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te n  g     c   llimit 
- -- -- -- ----- --- ------ 
D 0  1  N2 KURD2 QOL 0.05   
I 0  1  N2 SHIA2 QOL 0.03   
I 0  1  N2 SUNN2 QOL -0.03  
    }

    test sat_level-2.5 {zero magnitude indirect effects are ignored.} -setup {
        create
    } -body {
        # Make sure the relationship matrix is all zeroes
        # (unless f=g!)
        
        rdb eval {
            UPDATE gram_fg SET rel=0.0 
            WHERE f != g
        }

        init


        jr sat level 1 0 KURD2 QOL 10.0 1
        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te   n  g     c   llimit 
- -- ---- -- ----- --- ------ 
D 0  1440 N2 KURD2 QOL 10.00  
    }

    test sat_level-2.6 {schedule event in future} -setup {
        create
    } -body {
        jr sat level 1 720 KURD2 QOL 5.0 0.1
        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
d ts  te  n  g     c   llimit 
- --- --- -- ----- --- ------ 
D 720 864 N2 KURD2 QOL 5.00   
I 720 864 N2 SHIA2 QOL 3.00   
I 720 864 N2 SUNN2 QOL -3.00  
    }

    test sat_level-2.9 {Indirect effects in all nbhoods, N2 near} -setup {
        create
    } -body {
        # Update GRAM's proximity, and re-initialize
        set near [eproximity index near]

        rdb eval {
            UPDATE gram_mn
            SET proximity=$near
            WHERE m='N2' AND n='N1'
        }

        init


        # Enter a level input.
        jr sat level 1 0 SHIA1 QOL 5.0 0.1 -p 0.5 -q 0.1

        # Expect direct effect on SHIA1 in N1, full strength indirect
        # on others in N1, 0.5 effect in N2 (since N2 is near).
        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te  n  g     c   llimit 
- -- --- -- ----- --- ------ 
I 0  144 N1 KURD1 QOL 3.00   
D 0  144 N1 SHIA1 QOL 5.00   
I 0  144 N1 SUNN1 QOL -1.50  
I 0  144 N2 KURD2 QOL 1.50   
I 0  144 N2 SHIA2 QOL 2.50   
I 0  144 N2 SUNN2 QOL -0.75  
    }

    test sat_level-2.10 {Indirect effects in all nbhoods, N2 far} -setup {
        create
    } -body {
        jr sat level 1 0 SHIA1 QOL 5.0 0.1 -p 0.5 -q 0.1

        # Expect direct effect on SHIA1 in N1, full strength indirect
        # on others in N1, 0.1 effect in N2 (since N2 is far).
        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te  n  g     c   llimit 
- -- --- -- ----- --- ------ 
I 0  144 N1 KURD1 QOL 3.00   
D 0  144 N1 SHIA1 QOL 5.00   
I 0  144 N1 SUNN1 QOL -1.50  
I 0  144 N2 KURD2 QOL 0.30   
I 0  144 N2 SHIA2 QOL 0.50   
I 0  144 N2 SUNN2 QOL -0.15  
    }

    test sat_level-2.11 {Indirect effects in all nbhoods, N2 remote} -setup {
        create
    } -body {
        # Update GRAM's proximity, and re-initialize
        set remote [eproximity index remote]

        rdb eval {
            UPDATE gram_mn
            SET proximity=$remote
            WHERE m='N2' AND n='N1'
        }

        init


        # Enter a level input.
        jr sat level 1 0 SHIA1 QOL 5.0 0.1 -p 0.5 -q 0.1

        # Expect direct effect on SHIA1 in N1, full strength indirect
        # on others in N1, no effects in N2 (since N2 is remote).
        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te  n  g     c   llimit 
- -- --- -- ----- --- ------ 
I 0  144 N1 KURD1 QOL 3.00   
D 0  144 N1 SHIA1 QOL 5.00   
I 0  144 N1 SUNN1 QOL -1.50  
    }

    test sat_level-2.12 {Inputs with tiny days take one tick} -setup {
        create
    } -body {
        jr sat level 1 0 KURD2 QOL 50 0.0001
        
        # Note that ts=te for all effects.
        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te n  g     c   llimit 
- -- -- -- ----- --- ------ 
D 0  1  N2 KURD2 QOL 50.00  
I 0  1  N2 SHIA2 QOL 30.00  
I 0  1  N2 SUNN2 QOL -30.00 
    }




    test sat_level-2.12 {Delayed indirect effects} -setup {
        create
    } -body {
        # Update GRAM's delay and re-initialize.
        rdb eval {
            UPDATE gram_mn
            SET effects_delay = 1.0
            WHERE m='N2' AND n='N1'
        }

        init


        # Enter a level input.
        jr sat level 1 0 SHIA1 QOL 5.0 0.1 -q 0.1

        # Expect direct effect on SHIA1 in N1, full strength indirect
        # on others in N1, 0.1 effect in N2 delayed 1 day.
        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
d ts   te   n  g     c   llimit 
- ---- ---- -- ----- --- ------ 
I 0    144  N1 KURD1 QOL 3.00   
D 0    144  N1 SHIA1 QOL 5.00   
I 0    144  N1 SUNN1 QOL -1.50  
I 1440 1584 N2 KURD2 QOL 0.30   
I 1440 1584 N2 SHIA2 QOL 0.50   
I 1440 1584 N2 SUNN2 QOL -0.15  
    }

    test sat_level-3.1 {level increases during interval} -setup {
        create
    } -body {
        # FIRST, do a level effect.
        jr sat level 1 0 KURD2 QOL 10.0 1

        # Advance to noon.
        myclock advance 720
        jr advance
        
        tableDiffCols gram_sat {g c} sat sat0
    } -cleanup {
        cleanup 
    } -result {{KURD2 QOL 9} {SHIA2 QOL 7.3155647} {SUNN2 QOL -3.135242}}

    test sat_level-3.2 {level increases to limit} -setup {
        create
    } -body {
        # FIRST, do a level effect.
        jr sat level 1 0 KURD2 QOL 10.0 1

        # Advance a full day
        myclock advance 1440
        jr advance
        
        tableDiffCols gram_sat {g c} sat sat0
    } -cleanup {
        cleanup 
    } -result {{KURD2 QOL 10} {SHIA2 QOL 8.4} {SUNN2 QOL -3.6}}

    test sat_level-3.3 {slope increases due to level} -setup {
        create
    } -body {
        # FIRST, advance to noon and get the slope
        myclock advance 720
        jr advance

        tableSave gram_sat

        # NEXT, prepare for the next step
        myclock reset
        init

        # NEXT, schedule a level input, and advance to noon.
        jr sat level 1 0 KURD2 QOL 10.0 1

        myclock advance 720
        jr advance
        
        tableDiff gram_sat gc_id {g c} slope
    } -cleanup {
        cleanup 
    } -result {{KURD2 QOL 18} {SHIA2 QOL 14.631129} {SUNN2 QOL -6.270484}}

    test sat_level-3.4 {slope returns to normal after interval} -setup {
        create
    } -body {
        # FIRST, advance two days, in steps and get the slope
        myclock advance 1440
        jr advance
        myclock advance 2880
        jr advance
        
        tableSave gram_sat

        # NEXT, prepare for the next step
        myclock reset
        init


        # NEXT, schedule a level input, and repeat.
        jr sat level 1 0 KURD2 QOL 10.0 1

        myclock advance 1440
        jr advance
        myclock advance 2880
        jr advance

        tableDiff gram_sat gc_id {g c} slope
    } -cleanup {
        cleanup 
    } -result {}

    test sat_level-4.1 {level effects expire from list} -setup {
        create
    } -body {
        jr sat level 1 0 SHIA1 SFT 10.0 1

        myclock advance 1440
        jr advance

        dumpLevels
    } -cleanup {
        cleanup 
    } -result {
    }

    test sat_level-5.1 {driver is tracked for levels} -setup {
        create
    } -body {
        jr sat level 1 0 SHIA1 SFT 10.0 1
        jr sat level 2 0 SHIA1 SFT  5.0 1

        rdb eval {
            SELECT driver FROM gram_effects
            WHERE etype='L' AND prox=-1
        }
    } -cleanup {
        cleanup 
    } -result {1 2}

    test sat_level-5.2 {input runs from 1 for each driver} -setup {
        create
    } -body {
        jr sat level 1 0 SHIA1 AUT 10.0 1
        jr sat level 1 0 SHIA1 QOL 10.0 1
        jr sat level 1 0 SHIA1 SFT 10.0 1
        jr sat level 2 0 SHIA1 AUT 10.0 1
        jr sat level 2 0 SHIA1 QOL 10.0 1
        jr sat level 2 0 SHIA1 SFT  5.0 1

        rdb eval {
            SELECT DISTINCT driver || '.' || input FROM gram_effects
        }
    } -cleanup {
        cleanup 
    } -result {1.1 1.2 1.3 2.1 2.2 2.3}


    test sat_level-6.1 {Inputs with the same cause overlap} -setup {
        create
    } -body {
        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_sat SET sat0 = 0.0}
        init


        # Schedule two effects of differing strength but the same cause
        # on the same pgroup.  The total effect over the timestep should
        # be the maximum of the two.
        jr sat level 1 0 SHIA1 SFT 10 1.0 -cause CIVCAS
        jr sat level 1 0 SHIA1 SFT  5 1.0 -cause CIVCAS

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  The actual contribution should be 
        # based on the 10.  A1 should get credit for ~2/3 of the actual
        # contribution and A2 should get credit for ~1/3.
        pprint [jr dump sat level SHIA1 SFT]

        # Hand check
        # Ratio of SContribs is 9.0 to 4.293, or 2.096.
        # Ratio of AContribs is 6.093 to 2.907 or 2.096.  Check.
        # Sum of AContribs is 6.093 + 2.907 or 9.0.       Check.
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time     Limit AThr  DThr   NTotal NContrib ATotal AContrib Input DN DG    E 
------ ------------ ------------ ----- ----- ------ ------ -------- ------ -------- ----- -- ----- - 
CIVCAS 010000ZJAN70 020000ZJAN70  10.0 100.0 -100.0   9.00   9.000    6.09   6.093  1.1   N1 SHIA1 D 
'      '            '              5.0 100.0 -100.0   4.29   4.293    2.91   2.907  1.2   N1 SHIA1 D 
    }

    test sat_level-6.2 {Inputs with the same cause overlap: multiple time steps} -setup {
        create
    } -body {
        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_sat SET sat0 = 0.0}
        init


        # Schedule two effects of differing strength but the same cause
        # on the same pgroup.  The total effect over the timestep should
        # be the maximum of the two.
        jr sat level 1 0 SHIA1 SFT 10 1.0 -cause CIVCAS
        jr sat level 1 0 SHIA1 SFT  5 1.0 -cause CIVCAS

        # Advance time.
        myclock advance 360
        jr advance
        myclock advance 720
        jr advance

        # Dump the results.  The actual contribution should be 
        # based on the 10.  A1 should get credit for ~2/3 of the actual
        # contribution and A2 should get credit for ~1/3.
        pprint [jr dump sat level SHIA1 SFT]
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time     Limit AThr  DThr   NTotal NContrib ATotal AContrib Input DN DG    E 
------ ------------ ------------ ----- ----- ------ ------ -------- ------ -------- ----- -- ----- - 
CIVCAS 010000ZJAN70 020000ZJAN70  10.0 100.0 -100.0   9.00   2.162    6.00   1.306  1.1   N1 SHIA1 D 
'      '            '              5.0 100.0 -100.0   4.29   1.173    2.85   0.709  1.2   N1 SHIA1 D 
    }

    test sat_level-6.3 {Inputs with different causes are independent} -setup {
        create
    } -body {
        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_sat SET sat0 = 0.0}
        init


        # Schedule two effects of differing strength but the same cause
        # on the same pgroup.  The total effect over the timestep should
        # be the maximum of the two.
        jr sat level 1 0 SHIA1 SFT 10 1.0 -cause CIVCAS
        jr sat level 1 0 SHIA1 SFT  5 1.0 -cause HOSCAP

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  Each should have its own contribution; the
        # actual contribution should be scaled contribution.
        pprint [jr dump sat level SHIA1 SFT]

    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time     Limit AThr  DThr   NTotal NContrib ATotal AContrib Input DN DG    E 
------ ------------ ------------ ----- ----- ------ ------ -------- ------ -------- ----- -- ----- - 
CIVCAS 010000ZJAN70 020000ZJAN70  10.0 100.0 -100.0   9.00   9.000    9.00   9.000  1.1   N1 SHIA1 D 
HOSCAP '            '              5.0 100.0 -100.0   4.29   4.293    4.29   4.293  1.2   N1 SHIA1 D 
    }
   
    test sat_level-6.4 {Effects from different inputs with same cause} -setup {
        create
    } -body {
        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_sat SET sat0 = 0.0}
        init


        # Schedule effects on SHIA1 and KURD1, and look at the indirect effects
        # on SUNN1.
        jr sat level 1 0 SHIA1 SFT 10 1.0 -cause CIVCAS
        jr sat level 1 0 KURD1 SFT 10 1.0 -cause CIVCAS

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  Each should have its own contribution; the
        # actual contribution should be scaled contribution.
        pprint [jr dump sat level SUNN1 SFT]

        # Hand check
        # Ratio of AContribs is -1.669 to -3.556 or 0.469.  Check.
        # Sum of AContribs is -1.669 + -3.556 or -5.225.    Check.
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time     Limit AThr  DThr   NTotal NContrib ATotal AContrib Input DN DG    E 
------ ------------ ------------ ----- ----- ------ ------ -------- ------ -------- ----- -- ----- - 
CIVCAS 010000ZJAN70 020000ZJAN70  -3.0 100.0 -100.0  -2.45  -2.452   -1.67  -1.669  1.1   N1 SHIA1 I 
'      '            '             -6.0 100.0 -100.0  -5.23  -5.225   -3.56  -3.556  1.2   N1 KURD1 I 
    }

    test sat_level-6.5 {Positive and negative effects for the same cause} -setup {
        create
    } -body {
        # Set sat0 to -50.0.  Positive effects should be multiplied by 1.5 and 
        # negative effects by 0.5.
        rdb eval {UPDATE gram_sat SET sat0 = -50.0}
        init


        # Schedule effects on KURD1 and SUNN1, and look at the indirect effects
        # on KURD1.
        jr sat level 1 0 KURD1 SFT -10 1.0 -cause CIVCAS
        jr sat level 1 0 SUNN1 SFT -10 1.0 -cause CIVCAS

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  Each should have its own contribution; the
        # actual contribution should be scaled contribution.
        pprint [jr dump sat level KURD1 SFT]

        # NOTE: This test is in response to bug 1817.  Before the "Absit Problem" was
        # fixed, the positive nominal 6.0 would have been scaled to 9.0 and the -10.0
        # would have been scaled to -5.0 yielding approximately a +4 gain in response to
        # the negative inputs.
        #
        # As a result of the bug fix, the scaling is done based on the net nominal
        # contribution, which is -4.0.  Hence, the scaling factor is 0.5, and we
        # see that, indeed, the actual contribution is half the nominal contribution.
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time     Limit AThr  DThr   NTotal NContrib ATotal AContrib Input DN DG    E 
------ ------------ ------------ ----- ----- ------ ------ -------- ------ -------- ----- -- ----- - 
CIVCAS 010000ZJAN70 020000ZJAN70   6.0 100.0 -100.0   5.23   5.225    2.61   2.613  1.2   N1 SUNN1 I 
'      '            '            -10.0 100.0 -100.0  -9.00  -9.000   -4.50  -4.500  1.1   N1 KURD1 D 
    }



    # sat_level-7.*: Automatic causes

    test sat_level-7.1 {Causes are tagged automatically if -cause is not given} -setup {
        create
    } -body {
        jr sat level 1 0 SHIA1 SFT 10 10

        rdb eval {
            SELECT DISTINCT cause 
            FROM gram_effects
        }
    } -cleanup {
        cleanup
    } -result {D1}

    # sat_level-8.*: "level" returns input

    test sat_level-8.1 {Returns input, case 1: input is ignored.} -setup {
        create
    } -body {
        set a [jr sat level 1 0 SHIA1 SFT 0 1]
        set b [jr sat level 1 0 SHIA1 QOL 0 1]

        # Skip TREND driver
        set c [rdb eval {
            SELECT input FROM gram_effects
            WHERE driver != 0
        }]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 2 {}}

    test sat_level-8.2 {Returns input, case 2: normal input.} -setup {
        create
    } -body {
        set a [jr sat level 1 0 SHIA1 SFT 10 1]
        set b [jr sat level 1 0 SHIA1 QOL 10 1]
        set c [rdb eval {SELECT DISTINCT input FROM gram_effects}]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 2 {1 2}}

    # sat_level-9.*: Thresholds
    
    test sat_level-9.1 {Positive, sat0 >= athresh} -setup {
        create
    } -body {
        set a [jr sat.gc SHIA1 AUT]
        
        # Note: $a == 40.0, so it's greater than -athresh
        jr sat level 1 0 SHIA1 AUT 10 0.1 -athresh 30.0
        
        myclock advance 720
        jr advance
        
        set b [jr sat.gc SHIA1 AUT]
        
        expr {$a == $b}
    } -cleanup {
        cleanup
    } -result {1}

    test sat_level-9.2 {Positive, sat0+delta < athresh} -setup {
        create
    } -body {
        set a [jr sat.gc SHIA1 CUL]
        
        # Note: $a == -40.0, so it's well less than -athresh
        jr sat level 1 0 SHIA1 CUL 10 0.1 -athresh 30.0
        
        myclock advance 720
        jr advance
        
        set b [jr sat.gc SHIA1 CUL]
        
        list $a $b
    } -cleanup {
        cleanup
    } -result {-40.0 -26.0}
    
    test sat_level-9.3 {Positive, sat0+delta > athresh} -setup {
        create
    } -body {
        set a [format %.1f [jr sat.gc SHIA1 SFT]]
        
        # Note: $a == 40.0, so it's justless than -athresh.
        jr sat level 1 0 SHIA1 SFT 10 0.9 -athresh 41.0

        # Step twice; we should get an increase on the first, but
        # not on the second.
        myclock advance 720
        jr advance
        set b [format %.1f [jr sat.gc SHIA1 SFT]]

        myclock advance 1440
        jr advance
        
        set c [format %.1f [jr sat.gc SHIA1 SFT]]
        
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {40.0 45.5 45.5}

    test sat_level-9.4 {Negative, sat0 <= dthresh} -setup {
        create
    } -body {
        set a [jr sat.gc SHIA1 CUL]
        
        # Note: $a == -40.0, so it's less than -dthresh
        jr sat level 1 0 SHIA1 CUL -10 0.1 -dthresh -30.0
        
        myclock advance 720
        jr advance
        
        set b [jr sat.gc SHIA1 CUL]
        
        expr {$a == $b}
    } -cleanup {
        cleanup
    } -result {1}
    
    test sat_level-9.5 {Negative, sat0+delta > dthresh} -setup {
        create
    } -body {
        set a [jr sat.gc SHIA1 SFT]
        
        # Note: $a == 40.0, so it's well greater than -dthresh
        jr sat level 1 0 SHIA1 SFT -10 0.1 -dthresh -30.0
        
        myclock advance 720
        jr advance
        
        set b [jr sat.gc SHIA1 SFT]
        
        list $a $b
    } -cleanup {
        cleanup
    } -result {40.0 26.0}
    
    test sat_level-9.6 {Negative, sat0+delta < dthresh} -setup {
        create
    } -body {
        set a [format %.1f [jr sat.gc SHIA1 CUL]]
        
        # Note: $a == -40.0, so it's just greater than -dthresh.
        jr sat level 1 0 SHIA1 CUL -10 0.9 -dthresh -41.0

        # Step twice; we should get a decrease on the first, but
        # not on the second.
        myclock advance 720
        jr advance
        set b [format %.1f [jr sat.gc SHIA1 CUL]]

        myclock advance 1440
        jr advance
        
        set c [format %.1f [jr sat.gc SHIA1 CUL]]
        
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {-40.0 -45.5 -45.5}

    
    # Dead groups

    test sat_level-10.1 {Dead groups get no effects.} -setup {
        create
        kill SHIA2
    } -body {
        jr sat level 1 0 SHIA1 CUL 10 0.1 -p 1.0 -q 1.0
        dumpLevels
    } -cleanup {
        cleanup
    } -result {
d ts te  n  g     c   llimit 
- -- --- -- ----- --- ------ 
I 0  144 N1 KURD1 CUL 6.00   
D 0  144 N1 SHIA1 CUL 10.00  
I 0  144 N1 SUNN1 CUL -3.00  
I 0  144 N2 KURD2 CUL 6.00   
I 0  144 N2 SUNN2 CUL -3.00  
    }

    test sat_level-10.2 {Indirect effects with -allowdead.} -setup {
        create
        kill SHIA1 SHIA2
    } -body {
        jr sat level 1 0 SHIA1 CUL 10 0.1 -p 1.0 -q 1.0 -allowdead
        dumpLevels
    } -cleanup {
        cleanup
    } -result {
d ts te  n  g     c   llimit 
- -- --- -- ----- --- ------ 
I 0  144 N1 KURD1 CUL 6.00   
I 0  144 N1 SUNN1 CUL -3.00  
I 0  144 N2 KURD2 CUL 6.00   
I 0  144 N2 SUNN2 CUL -3.00  
    }
    

    #-------------------------------------------------------------------
    # sat slope
    #
    # sat_slope-1.*: Argument checking
    # sat_slope-2.*: Scheduling
    # sat_slope-3.*: Effect on sat.ngc
    # sat_slope-4.*: Expiration
    # sat_slope-5.*: Tracking of contributions
    # sat_slope-6.*: Cause interactions
    # sat_slope-7.*: Scheduling returns input

    test sat_slope-1.1 {Invalid driver} -setup {
        create
    } -body {
        jr sat slope DUMMY 0 SHIA1 SFT 100.0
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {Cannot sat slope, unknown Driver ID: "DUMMY"}


    test sat_slope-1.2 {ts not numeric} -setup {
        create
    } -body {
        jr sat slope 1 DUMMY SHIA1 SFT 100.0
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {non-numeric ts: "DUMMY"}


    test sat_slope-1.3 {ts in the past.} -setup {
        create
    } -body {
        jr sat slope 1 -1 SHIA1 SFT 100.0
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Start time is in the past: '312359ZDEC69'}

    test sat_slope-1.4 {invalid group} -setup {
        create
    } -body {
        jr sat slope 1 0 DUMMY QOL 100.0
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: KURD1, KURD2, SHIA1, SHIA2, SUNN1, SUNN2}

    test sat_slope-1.5 {group is dead, no -allowdead given} -setup {
        create
        kill SHIA1
    } -body {
        jr sat slope 1 0 SHIA1 SFT 10.0
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {Group is dead: "SHIA1"}

    test sat_slope-1.6 {invalid concern} -setup {
        create
    } -body {
        jr sat slope 1 0 SHIA1 DUMMY 100.0
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: AUT, CUL, QOL, SFT}

    test sat_slope-1.7 {invalid slope: unknown symbol} -setup {
        create
    } -body {
        jr sat slope 1 0 SHIA1 SFT DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}

    # NOTE: Options are processed using the same code as for [sat level].  Option errors
    # are tested there.
    test sat_slope-1.8 {Invalid option} -setup {
        create
    } -body {
        jr sat slope 1 0 SHIA1 SFT 100.0 -nonesuch foo
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid option: "-nonesuch"}

    test sat_slope-1.9 {slope scheduled for a driver in decreasing time sequence} -setup {
        create
    } -body {
        jr sat slope 1 10 SHIA1 SFT 10.0
        jr sat slope 1  5 SHIA1 SFT 10.0
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {slope scheduled in decreasing time sequence: 5 < 10}
    
    # sat_slope-2.*: Scheduling

    test sat_slope-2.1 {schedule slope for one g,c.} -setup {
        create
    } -body {
        jr sat slope 1 0 KURD2 SFT 100.0
        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG    Cause E Start Time   End Time Nbhd Grp   Con Slope AThresh DThresh Nominal Actual 
----- -- ----- ----- - ------------ -------- ---- ----- --- ----- ------- ------- ------- ------ 
1.1   N2 KURD2 D1    D 010000ZJAN70 n/a      N2   KURD2 SFT 100.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N2   SHIA2 SFT  60.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N2   SUNN2 SFT -60.0 100.0   -100.0    0.0     0.0  
    }

    test sat_slope-2.2 {schedule slope for one g,c, -s 0.5} -setup {
        create 
    } -body {
        jr sat slope 1 0 KURD2 SFT 100.0 -s 0.5
        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG    Cause E Start Time   End Time Nbhd Grp   Con Slope AThresh DThresh Nominal Actual 
----- -- ----- ----- - ------------ -------- ---- ----- --- ----- ------- ------- ------- ------ 
1.1   N2 KURD2 D1    D 010000ZJAN70 n/a      N2   KURD2 SFT 100.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N2   SHIA2 SFT  30.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N2   SUNN2 SFT -30.0 100.0   -100.0    0.0     0.0  
    }

    test sat_slope-2.3 {successive inputs for a driver stack} -setup {
        create 
    } -body {
        jr sat slope 1  0 KURD2 SFT 100.0
        jr sat slope 1  5 KURD2 SFT  75.0
        jr sat slope 1 10 KURD2 SFT   0.0
        jr sat slope 1 15 KURD2 SFT 100.0
        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG    Cause E Start Time   End Time     Nbhd Grp   Con Slope AThresh DThresh Nominal Actual 
----- -- ----- ----- - ------------ ------------ ---- ----- --- ----- ------- ------- ------- ------ 
1.4   N2 KURD2 D1    D 010000ZJAN70 010005ZJAN70 N2   KURD2 SFT 100.0 100.0   -100.0    0.0     0.0  
'     '  '     '     D 010005ZJAN70 010010ZJAN70 N2   KURD2 SFT  75.0 100.0   -100.0    0.0     0.0  
'     '  '     '     D 010010ZJAN70 010015ZJAN70 N2   KURD2 SFT   0.0 100.0   -100.0    0.0     0.0  
'     '  '     '     D 010015ZJAN70 n/a          N2   KURD2 SFT 100.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 010005ZJAN70 N2   SHIA2 SFT  60.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010005ZJAN70 010010ZJAN70 N2   SHIA2 SFT  45.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010010ZJAN70 010015ZJAN70 N2   SHIA2 SFT   0.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010015ZJAN70 n/a          N2   SHIA2 SFT  60.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 010005ZJAN70 N2   SUNN2 SFT -60.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010005ZJAN70 010010ZJAN70 N2   SUNN2 SFT -45.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010010ZJAN70 010015ZJAN70 N2   SUNN2 SFT   0.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010015ZJAN70 n/a          N2   SUNN2 SFT -60.0 100.0   -100.0    0.0     0.0  
    }

    test sat_slope-2.4 {Indirect effects in all nbhoods, N2 near} -setup {
        create

        # Update GRAM's proximity, and re-initialize
        set near [eproximity index near]

        rdb eval {
            UPDATE gram_mn
            SET proximity=$near
            WHERE m='N2' AND n='N1'
        }

        init 
    }  -body {
        # Enter slope input
        jr sat slope 1 0 KURD1 SFT 100.0 -p 0.5 -q 0.1

        # Expect direct effect on SHIA1, indirect on others, in both 
        # neighborhoods; 0.5 effect in N2 since N2 is near.
        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG    Cause E Start Time   End Time Nbhd Grp   Con Slope AThresh DThresh Nominal Actual 
----- -- ----- ----- - ------------ -------- ---- ----- --- ----- ------- ------- ------- ------ 
1.1   N1 KURD1 D1    D 010000ZJAN70 n/a      N1   KURD1 SFT 100.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N1   SHIA1 SFT  60.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N1   SUNN1 SFT -60.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N2   KURD2 SFT  50.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N2   SHIA2 SFT  30.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N2   SUNN2 SFT -30.0 100.0   -100.0    0.0     0.0  
    }

    test sat_slope-2.5 {Indirect effects in all nbhoods, N2 far} -setup {
        create 
    } -body {
        jr sat slope 1 0 KURD1 SFT 100.0 -p 0.5 -q 0.1

        # Expect direct effect on SHIA1, indirect on others, in both 
        # neighborhoods; 0.1 effect in N2 since N2 is far.
        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG    Cause E Start Time   End Time Nbhd Grp   Con Slope AThresh DThresh Nominal Actual 
----- -- ----- ----- - ------------ -------- ---- ----- --- ----- ------- ------- ------- ------ 
1.1   N1 KURD1 D1    D 010000ZJAN70 n/a      N1   KURD1 SFT 100.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N1   SHIA1 SFT  60.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N1   SUNN1 SFT -60.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N2   KURD2 SFT  10.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N2   SHIA2 SFT   6.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N2   SUNN2 SFT  -6.0 100.0   -100.0    0.0     0.0  
    }

    test sat_slope-2.6 {Indirect effects in all nbhoods, N2 remote} -setup {
        create

        # Update GRAM's proximity, and re-initialize
        set remote [eproximity index remote]

        rdb eval {
            UPDATE gram_mn
            SET proximity=$remote
            WHERE m='N2' AND n='N1'
        }

        init 
    } -body {
        # Enter a slope input.
        jr sat slope 1 0 KURD1 SFT 100.0 -p 0.5 -q 0.1

        # Expect direct effect on SHIA1, indirect on others in N1;
        # no effects in N2 since N2 is remote.
        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG    Cause E Start Time   End Time Nbhd Grp   Con Slope AThresh DThresh Nominal Actual 
----- -- ----- ----- - ------------ -------- ---- ----- --- ----- ------- ------- ------- ------ 
1.1   N1 KURD1 D1    D 010000ZJAN70 n/a      N1   KURD1 SFT 100.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N1   SHIA1 SFT  60.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N1   SUNN1 SFT -60.0 100.0   -100.0    0.0     0.0  
    }


    test sat_slope-2.8 {delayed indirect effects} -setup {
        create

        # Update GRAM's delay, and re-initialize
        rdb eval {
            UPDATE gram_mn
            SET effects_delay = 1.0
            WHERE m='N2' AND n='N1'
        }

        init 
    }  -body {
        # Enter a slope input.
        jr sat slope 1 0 KURD1 SFT 100.0 -p 0.5 -q 0.1

        # Expect direct effect on KURD, indirect on others, in both 
        # neighborhoods; 0.1 effect in N2 delayed 1 day.
        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG    Cause E Start Time   End Time Nbhd Grp   Con Slope AThresh DThresh Nominal Actual 
----- -- ----- ----- - ------------ -------- ---- ----- --- ----- ------- ------- ------- ------ 
1.1   N1 KURD1 D1    D 010000ZJAN70 n/a      N1   KURD1 SFT 100.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N1   SHIA1 SFT  60.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N1   SUNN1 SFT -60.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 020000ZJAN70 n/a      N2   KURD2 SFT  10.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 020000ZJAN70 n/a      N2   SHIA2 SFT   6.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 020000ZJAN70 n/a      N2   SUNN2 SFT  -6.0 100.0   -100.0    0.0     0.0  
    }

    test sat_slope-2.9 {far effects are terminated if -q becomes 0} -setup {
        create         

        # Update GRAM's delay, and re-initialize
        rdb eval {
            UPDATE gram_mn
            SET effects_delay = 1.0
            WHERE m='N2' AND n='N1'
        }

        init 
    }  -body {
        # At time 0, schedule a slope input with far effects.
        jr sat slope 1 0 KURD1 SFT 100.0 -p 1.0 -q 1.0

        # At time 10, schedule a new slope input without far effects.
        jr sat slope 1 10 KURD1 SFT 50.0 -p 1.0        

        # Expect direct effect on KURD, indirect on others, in both 
        # neighborhoods; 1.0 effect in N2 delayed 1 day; and then,
        # 10 minutes later, indirect effects remain near but 
        # are terminated far.
        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG    Cause E Start Time   End Time     Nbhd Grp   Con Slope AThresh DThresh Nominal Actual 
----- -- ----- ----- - ------------ ------------ ---- ----- --- ----- ------- ------- ------- ------ 
1.2   N1 KURD1 D1    D 010000ZJAN70 010010ZJAN70 N1   KURD1 SFT 100.0 100.0   -100.0    0.0     0.0  
'     '  '     '     D 010010ZJAN70 n/a          N1   KURD1 SFT  50.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 010010ZJAN70 N1   SHIA1 SFT  60.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010010ZJAN70 n/a          N1   SHIA1 SFT  30.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 010010ZJAN70 N1   SUNN1 SFT -60.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010010ZJAN70 n/a          N1   SUNN1 SFT -30.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 020000ZJAN70 020010ZJAN70 N2   KURD2 SFT 100.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 020010ZJAN70 n/a          N2   KURD2 SFT   0.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 020000ZJAN70 020010ZJAN70 N2   SHIA2 SFT  60.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 020010ZJAN70 n/a          N2   SHIA2 SFT   0.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 020000ZJAN70 020010ZJAN70 N2   SUNN2 SFT -60.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 020010ZJAN70 n/a          N2   SUNN2 SFT   0.0 100.0   -100.0    0.0     0.0  
    }
    
    test sat_slope-2.13 {Causes are tagged automatically if -cause is not given} -setup {
        create 
    } -body {
        jr sat slope 1 0 SHIA1 SFT 10

        rdb eval {SELECT DISTINCT cause FROM gram_effects}
    } -cleanup {
        cleanup
    } -result {D1}

    # sat_slope-3.*: Effect on sat.gc

    test sat_slope-3.1 {sat increases} -setup {
        create 
    } -body {
        # NEXT, do a slope effect.
        jr sat slope 1 0 KURD2 QOL 100.0

        # Advance to noon
        myclock advance 720
        jr advance

        tableDiffCols gram_sat {g c} sat sat0
    } -cleanup {
        cleanup
    } -result {{KURD2 QOL 50} {SHIA2 QOL 42} {SUNN2 QOL -18}}

    test sat_slope-3.2 {successive slope records take effect} -setup {
        create 
    } -body {
        # NEXT, do a level effect.
        jr sat slope 1 0   KURD2 QOL 100.0
        jr sat slope 1 360 KURD2 QOL   0.0

        # Advance to noon; should get only 25.0 points of increase.
        myclock advance 720
        jr advance

        tableDiffCols gram_sat {g c} sat sat0
    } -cleanup {
        cleanup
    } -result {{KURD2 QOL 25} {SHIA2 QOL 21} {SUNN2 QOL -9}}

    # sat_slope-4.*: Expiration

    test sat_slope-4.1 {slope records expire due to time} -setup {
        create 
    } -body {
        jr sat slope 1 0   KURD2 QOL 100.0
        jr sat slope 1 360 KURD2 QOL   0.0

        # Advance to noon; records should expire.
        myclock advance 720
        jr advance

        dumpSlopes
    } -cleanup {
        cleanup
    } -result {
    }

    test sat_slope-4.2 {negative slopes don't expire immediately} -setup {
        create 
    } -body {
        jr sat slope 1 [myclock now] SHIA1 SFT -10
        myclock advance 5
        jr advance
        dumpSlopes
    } -cleanup {
        cleanup
    } -result {
Input DN DG    Cause E Start Time   End Time Nbhd Grp   Con Slope AThresh DThresh Nominal Actual 
----- -- ----- ----- - ------------ -------- ---- ----- --- ----- ------- ------- ------- ------ 
1.1   N1 SHIA1 D1    D 010000ZJAN70 n/a      N1   SHIA1 SFT -10.0 100.0   -100.0   -0.0    -0.0  
'     '  '     '     I 010000ZJAN70 n/a      N1   KURD1 SFT  -6.0 100.0   -100.0   -0.0    -0.0  
'     '  '     '     I 010000ZJAN70 n/a      N1   SUNN1 SFT   3.0 100.0   -100.0    0.0     0.0  
    }

    # sat_slope-5.*: Tracking of contributions

    test sat_slope-5.1 {gram_effects tracks total change} -setup {
        create 
    } -body {
        jr sat slope 1 0 KURD2 QOL 100.0

        # Advance to noon
        myclock advance 720
        jr advance

        dumpSlopes
    } -cleanup {
        cleanup
    } -result {
Input DN DG    Cause E Start Time   End Time Nbhd Grp   Con Slope AThresh DThresh Nominal Actual 
----- -- ----- ----- - ------------ -------- ---- ----- --- ----- ------- ------- ------- ------ 
1.1   N2 KURD2 D1    D 010000ZJAN70 n/a      N2   KURD2 QOL 100.0 100.0   -100.0   50.0    50.0  
'     '  '     '     I 010000ZJAN70 n/a      N2   SHIA2 QOL  60.0 100.0   -100.0   30.0    42.0  
'     '  '     '     I 010000ZJAN70 n/a      N2   SUNN2 QOL -60.0 100.0   -100.0  -30.0   -18.0  
    }

    test sat_slope-5.2 {change is tracked across sequential effects} -setup {
        create 
    } -body {
        jr sat slope 1    0 KURD2 QOL 100.0
        jr sat slope 1  360 KURD2 QOL   0.0
        jr sat slope 1  720 KURD2 QOL 100.0

        # Advance 18 hours.
        myclock advance 1080
        jr advance

        pprint [rdb query {
            SELECT id,ts,te,slope,nominal,actual FROM gram_effects
            ORDER BY ts
        }]
    } -cleanup {
        cleanup
    } -result {
id ts  te       slope nominal actual 
-- --- -------- ----- ------- ------ 
1  720 99999999 100.0 50.0    50.0   
2  720 99999999 60.0  30.0    42.0   
3  720 99999999 -60.0 -30.0   -18.0  
    }

    # sat_slope-6.*: Cause interactions

    test sat_slope-6.1 {Inputs with the same cause overlap} -setup {
        create

        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_sat SET sat0 = 0.0}
        init 
    } -body {
        # Schedule two effects of differing strength but the same cause
        # on the same pgroup.  The total effect over the timestep should
        # be the maximum of the two.
        jr sat slope 1 0 SHIA1 SFT 10 -cause CIVCAS
        jr sat slope 2 0 SHIA1 SFT  5 -cause CIVCAS

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  The actual contribution should be 
        # based on the 10.  A1 should get credit for 2/3 of the actual
        # contribution and A2 should get credit for 1/3.
        pprint [jr dump sat slope SHIA1 SFT]

        # Hand check
        # Ratio of AContribs is 3.33 to 1.67 or 2.0.  Check.
        # Sum of AContribs is 3.33 + 1.67 or 5.0      Check.
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time Slope AThr  DThr   NTotal NContrib ATotal AContrib Input DN DG    E 
------ ------------ -------- ----- ----- ------ ------ -------- ------ -------- ----- -- ----- - 
CIVCAS 010000ZJAN70 n/a       10.0 100.0 -100.0   5.00   5.000    3.33   3.333  1.1   N1 SHIA1 D 
'      '            '          5.0 100.0 -100.0   2.50   2.500    1.67   1.667  2.1   N1 SHIA1 D 
    }

    test sat_slope-6.2 {Inputs with the same cause overlap: multiple time steps} -setup {
        create

        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_sat SET sat0 = 0.0}
        init 
    } -body {
        # Schedule two effects of differing strength but the same cause
        # on the same pgroup.  The total effect over the timestep should
        # be the maximum of the two.
        jr sat slope 1 0 SHIA1 SFT 10 -cause CIVCAS
        jr sat slope 2 0 SHIA1 SFT  5 -cause CIVCAS

        # Advance time.
        myclock advance 360
        jr advance
        myclock advance 720
        jr advance

        # Dump the results.  The actual contribution should be 
        # based on the 10.  A1 should get credit for ~2/3 of the actual
        # contribution and A2 should get credit for ~1/3.
        pprint [jr dump sat slope SHIA1 SFT]
    } -cleanup {
        cleanup
    } -match glob -result {
Cause  Start Time   End Time Slope AThr  DThr   NTotal NContrib ATotal AContrib Input DN DG    E 
------ ------------ -------- ----- ----- ------ ------ -------- ------ -------- ----- -- ----- - 
CIVCAS 010000ZJAN70 n/a       10.0 100.0 -100.0   5.00   2.500    3.29   1.625  1.1   N1 SHIA1 D 
'      '            '          5.0 100.0 -100.0   2.50   1.250    1.65   0.81[23]  2.1   N1 SHIA1 D 
    }
   
    test sat_slope-6.3 {Inputs with different causes are independent} -setup {
        create

        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_sat SET sat0 = 0.0}
        init 
    } -body {

        # Schedule two effects of differing strength but the same cause
        # on the same pgroup.  The total effect over the timestep should
        # be the maximum of the two.
        jr sat slope 1 0 SHIA1 SFT 10 -cause CIVCAS
        jr sat slope 2 0 SHIA1 SFT  5 -cause HOSCAP

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  Each should have its own contribution; the
        # actual contribution should be scaled contribution.
        pprint [jr dump sat slope SHIA1 SFT]

    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time Slope AThr  DThr   NTotal NContrib ATotal AContrib Input DN DG    E 
------ ------------ -------- ----- ----- ------ ------ -------- ------ -------- ----- -- ----- - 
CIVCAS 010000ZJAN70 n/a       10.0 100.0 -100.0   5.00   5.000    5.00   5.000  1.1   N1 SHIA1 D 
HOSCAP '            '          5.0 100.0 -100.0   2.50   2.500    2.50   2.500  2.1   N1 SHIA1 D 
    }
   
    test sat_slope-6.4 {Effects from different inputs with same cause} -setup {
        create

        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_sat SET sat0 = 0.0}
        init 
    } -body {
        # Schedule effects on SHIA1 and KURD1, and look at the indirect effects
        # on SUNN1.
        jr sat slope 1 0 SHIA1 SFT 10 -cause CIVCAS
        jr sat slope 2 0 KURD1 SFT 10 -cause CIVCAS

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  Each should have its own contribution; the
        # actual contribution should be scaled contribution.
        pprint [jr dump sat slope SUNN1 SFT]

        # Hand check
        # Ratio of AContribs is -1.0 to -2.0 or 0.5.  Check.
        # Sum of AContribs is -1.0 + -2.0 or -3.0.    Check.
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time Slope AThr  DThr   NTotal NContrib ATotal AContrib Input DN DG    E 
------ ------------ -------- ----- ----- ------ ------ -------- ------ -------- ----- -- ----- - 
CIVCAS 010000ZJAN70 n/a       -3.0 100.0 -100.0  -1.50  -1.500   -1.00  -1.000  1.1   N1 SHIA1 I 
'      '            '         -6.0 100.0 -100.0  -3.00  -3.000   -2.00  -2.000  2.1   N1 KURD1 I 
    }

    test sat_slope-6.5 {Chained effects in timestep are combined} -setup {
        create

        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_sat SET sat0 = 0.0}
        init 
    } -body {
        # Schedule chained effects
        jr sat slope 1   0 SHIA1 SFT 10 -cause CIVCAS
        jr sat slope 1 360 SHIA1 SFT  0 -cause CIVCAS
        jr sat slope 1 720 SHIA1 SFT 10 -cause CIVCAS

        # Advance time by 18 hours so that we get 6 hours of each of the positive
        # effects.
        myclock advance 1080
        jr advance

        # Dump the results.  Should get 12 hours of 10.0 slope as a single
        # contribution, for a nominal effect of 5.0.  The actual effect
        # should be 50/50 for the two positive effects.
        pprint [jr dump sat slope SHIA1 SFT]

        # Hand check: the first two effects have expired.  The third shows a
        # nominal total of 5.0, which is correct since that's a running
        # total for the chain.  Further, it shows that the actual contribution
        # is 2.5, which is appropriate since this effect was active for
        # half the time.
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time Slope AThr  DThr   NTotal NContrib ATotal AContrib Input DN DG    E 
------ ------------ -------- ----- ----- ------ ------ -------- ------ -------- ----- -- ----- - 
CIVCAS 011200ZJAN70 n/a       10.0 100.0 -100.0   5.00   5.000    5.00   5.000  1.3   N1 SHIA1 D 
    }

    test sat_slope-6.6 {different causes have distinct chains} -setup {
        create 
    } -body {
        # If we create two inputs for the same n,g,c with different
        # causes, we get different chains
        jr sat slope 1  5 SHIA1 SFT 10.0 -cause PATROL
        jr sat slope 1 10 SHIA1 SFT 10.0 -cause GUARD

        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG    Cause  E Start Time   End Time Nbhd Grp   Con Slope AThresh DThresh Nominal Actual 
----- -- ----- ------ - ------------ -------- ---- ----- --- ----- ------- ------- ------- ------ 
1.1   N1 SHIA1 PATROL D 010005ZJAN70 n/a      N1   SHIA1 SFT  10.0 100.0   -100.0    0.0     0.0  
'     '  '     '      I 010005ZJAN70 n/a      N1   KURD1 SFT   6.0 100.0   -100.0    0.0     0.0  
'     '  '     '      I 010005ZJAN70 n/a      N1   SUNN1 SFT  -3.0 100.0   -100.0    0.0     0.0  
1.2   '  '     GUARD  D 010010ZJAN70 n/a      N1   SHIA1 SFT  10.0 100.0   -100.0    0.0     0.0  
'     '  '     '      I 010010ZJAN70 n/a      N1   KURD1 SFT   6.0 100.0   -100.0    0.0     0.0  
'     '  '     '      I 010010ZJAN70 n/a      N1   SUNN1 SFT  -3.0 100.0   -100.0    0.0     0.0  
    }
    
    test sat_slope-6.7 {different causes have distinct chains: update} -setup {
        create 
    } -body {
        # If we update for one cause, it doesn't affect the other
        jr sat slope 1  5 SHIA1 SFT 10.0 -cause PATROL
        jr sat slope 1 10 SHIA1 SFT 10.0 -cause GUARD
        jr sat slope 1 15 SHIA1 SFT  5.0 -cause PATROL

        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG    Cause  E Start Time   End Time     Nbhd Grp   Con Slope AThresh DThresh Nominal Actual 
----- -- ----- ------ - ------------ ------------ ---- ----- --- ----- ------- ------- ------- ------ 
1.2   N1 SHIA1 GUARD  D 010010ZJAN70 n/a          N1   SHIA1 SFT  10.0 100.0   -100.0    0.0     0.0  
'     '  '     '      I 010010ZJAN70 n/a          N1   KURD1 SFT   6.0 100.0   -100.0    0.0     0.0  
'     '  '     '      I 010010ZJAN70 n/a          N1   SUNN1 SFT  -3.0 100.0   -100.0    0.0     0.0  
1.3   '  '     PATROL D 010005ZJAN70 010015ZJAN70 N1   SHIA1 SFT  10.0 100.0   -100.0    0.0     0.0  
'     '  '     '      D 010015ZJAN70 n/a          N1   SHIA1 SFT   5.0 100.0   -100.0    0.0     0.0  
'     '  '     '      I 010005ZJAN70 010015ZJAN70 N1   KURD1 SFT   6.0 100.0   -100.0    0.0     0.0  
'     '  '     '      I 010015ZJAN70 n/a          N1   KURD1 SFT   3.0 100.0   -100.0    0.0     0.0  
'     '  '     '      I 010005ZJAN70 010015ZJAN70 N1   SUNN1 SFT  -3.0 100.0   -100.0    0.0     0.0  
'     '  '     '      I 010015ZJAN70 n/a          N1   SUNN1 SFT  -1.5 100.0   -100.0    0.0     0.0  
    }
    
    test sat_slope-6.8 {different causes have distinct chains: end} -setup {
        create 
    } -body {
        # If we update for one cause, it doesn't affect the other
        jr sat slope 1  5 SHIA1 SFT 10.0 -cause PATROL
        jr sat slope 1 10 SHIA1 SFT 10.0 -cause GUARD
        jr sat slope 1 15 SHIA1 SFT  0.0 -cause PATROL

        dumpSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DG    Cause  E Start Time   End Time     Nbhd Grp   Con Slope AThresh DThresh Nominal Actual 
----- -- ----- ------ - ------------ ------------ ---- ----- --- ----- ------- ------- ------- ------ 
1.2   N1 SHIA1 GUARD  D 010010ZJAN70 n/a          N1   SHIA1 SFT  10.0 100.0   -100.0    0.0     0.0  
'     '  '     '      I 010010ZJAN70 n/a          N1   KURD1 SFT   6.0 100.0   -100.0    0.0     0.0  
'     '  '     '      I 010010ZJAN70 n/a          N1   SUNN1 SFT  -3.0 100.0   -100.0    0.0     0.0  
1.3   '  '     PATROL D 010005ZJAN70 010015ZJAN70 N1   SHIA1 SFT  10.0 100.0   -100.0    0.0     0.0  
'     '  '     '      D 010015ZJAN70 n/a          N1   SHIA1 SFT   0.0 100.0   -100.0    0.0     0.0  
'     '  '     '      I 010005ZJAN70 010015ZJAN70 N1   KURD1 SFT   6.0 100.0   -100.0    0.0     0.0  
'     '  '     '      I 010015ZJAN70 n/a          N1   KURD1 SFT   0.0 100.0   -100.0    0.0     0.0  
'     '  '     '      I 010005ZJAN70 010015ZJAN70 N1   SUNN1 SFT  -3.0 100.0   -100.0    0.0     0.0  
'     '  '     '      I 010015ZJAN70 n/a          N1   SUNN1 SFT   0.0 100.0   -100.0    0.0     0.0  
    }

    # sat_slope-7.*: Scheduling returns input

    test sat_slope-7.1 {Return input, case 1: one nbhood, 0 limit} -setup {
        create 
    } -body {
        set a [jr sat slope 1 0 SHIA1 SFT 0]
        set b [jr sat slope 1 0 SHIA1 QOL 0]
        set c [rdb eval {SELECT DISTINCT input FROM gram_effects}]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 2 {}}

    test sat_slope-7.2 {Return input, case 2: one nbhood, terminate} -setup {
        create 
    } -body {
        set a [jr sat slope 1 0 SHIA1 SFT 10]
        set b [jr sat slope 1 0 SHIA1 QOL 10]
        set c [jr sat slope 1 0 SHIA1 SFT 0]
        set d [jr sat slope 1 0 SHIA1 QOL 0]
        set e [rdb eval {SELECT DISTINCT input FROM gram_effects}]

        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {1 2 3 4 {3 4}}

    test sat_slope-7.5 {Return input, case 5: nominal case} -setup {
        create 
    } -body {
        set a [jr sat slope 1 0 SHIA1 SFT 10]
        set b [jr sat slope 1 0 SHIA1 QOL 10]
        set c [rdb eval {SELECT DISTINCT input FROM gram_effects}]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 2 {1 2}}

    # sat_slope-8.*: Thresholds
    
    test sat_slope-8.1 {Positive, sat0 >= athresh} -setup {
        create 
    } -body {
        set a [jr sat.gc SHIA1 AUT]
        
        # Note: $a == 40.0, so it's greater than -athresh
        jr sat slope 1 0 SHIA1 AUT 10 -athresh 30.0
        
        myclock advance 720
        jr advance
        
        set b [jr sat.gc SHIA1 AUT]
        
        expr {$a == $b}
    } -cleanup {
        cleanup
    } -result {1}

    test sat_slope-8.2 {Positive, sat0+delta < athresh} -setup {
        create 
    } -body {
        set a [jr sat.gc SHIA1 CUL]
        
        # Note: $a == -40.0, so it's well less than -athresh
        jr sat slope 1 0 SHIA1 CUL 10 -athresh 30.0
        
        myclock advance 720
        jr advance
        
        set b [jr sat.gc SHIA1 CUL]
        
        list $a $b
    } -cleanup {
        cleanup
    } -result {-40.0 -33.0}
    
    test sat_slope-8.3 {Positive, sat0+delta > athresh} -setup {
        create 
    } -body {
        set a [format %.1f [jr sat.gc SHIA1 SFT]]
        
        # Note: $a == 40.0, so it's just less than -athresh.
        jr sat slope 1 0 SHIA1 SFT 10 -athresh 41.0

        # Step twice; we should get an increase on the first, but
        # not on the second.
        myclock advance 720
        jr advance
        set b [format %.1f [jr sat.gc SHIA1 SFT]]

        myclock advance 1440
        jr advance
        
        set c [format %.1f [jr sat.gc SHIA1 SFT]]
        
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {40.0 43.0 43.0}

    test sat_slope-8.4 {Negative, sat0 <= dthresh} -setup {
        create 
    } -body {
        set a [jr sat.gc SHIA1 CUL]
        
        # Note: $a == -40.0, so it's less than -dthresh
        jr sat slope 1 0 SHIA1 CUL -10 -dthresh -30.0
        
        myclock advance 720
        jr advance
        
        set b [jr sat.gc SHIA1 CUL]
        
        expr {$a == $b}
    } -cleanup {
        cleanup
    } -result {1}
    
    test sat_slope-8.5 {Negative, sat0+delta > dthresh} -setup {
        create 
    } -body {
        set a [jr sat.gc SHIA1 SFT]
        
        # Note: $a == 40.0, so it's well greater than -dthresh
        jr sat slope 1 0 SHIA1 SFT -10 -dthresh -30.0
        
        myclock advance 720
        jr advance
        
        set b [jr sat.gc SHIA1 SFT]
        
        list $a $b
    } -cleanup {
        cleanup
    } -result {40.0 33.0}
    
    test sat_slope-8.6 {Negative, sat0+delta < dthresh} -setup {
        create 
    } -body {
        set a [format %.1f [jr sat.gc SHIA1 CUL]]
        
        # Note: $a == -40.0, so it's just greater than -dthresh.
        jr sat slope 1 0 SHIA1 CUL -10 -dthresh -41.0

        # Step twice; we should get a decrease on the first, but
        # not on the second.
        myclock advance 720
        jr advance
        set b [format %.1f [jr sat.gc SHIA1 CUL]]

        myclock advance 1440
        jr advance
        
        set c [format %.1f [jr sat.gc SHIA1 CUL]]
        
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {-40.0 -43.0 -43.0}

    # Dead groups

    test sat_slope-9.1 {Dead groups get no effects.} -setup {
        create
        kill SHIA2
    } -body {
        jr sat slope 1 0 SHIA1 CUL 10 -p 1.0 -q 1.0
        dumpSlopes
    } -cleanup {
        cleanup
    } -result {
Input DN DG    Cause E Start Time   End Time Nbhd Grp   Con Slope AThresh DThresh Nominal Actual 
----- -- ----- ----- - ------------ -------- ---- ----- --- ----- ------- ------- ------- ------ 
1.1   N1 SHIA1 D1    D 010000ZJAN70 n/a      N1   SHIA1 CUL  10.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N1   KURD1 CUL   6.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N1   SUNN1 CUL  -3.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N2   KURD2 CUL   6.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N2   SUNN2 CUL  -3.0 100.0   -100.0    0.0     0.0  
    }

    test sat_slope-9.2 {Indirect effects with -allowdead.} -setup {
        create
        kill SHIA1 SHIA2
    } -body {
        jr sat slope 1 0 SHIA1 CUL 10 -p 1.0 -q 1.0 -allowdead
        dumpSlopes
    } -cleanup {
        cleanup
    } -result {
Input DN DG    Cause E Start Time   End Time Nbhd Grp   Con Slope AThresh DThresh Nominal Actual 
----- -- ----- ----- - ------------ -------- ---- ----- --- ----- ------- ------- ------- ------ 
1.1   N1 SHIA1 D1    I 010000ZJAN70 n/a      N1   KURD1 CUL   6.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N1   SUNN1 CUL  -3.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N2   KURD2 CUL   6.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N2   SUNN2 CUL  -3.0 100.0   -100.0    0.0     0.0  
    }

    #-------------------------------------------------------------------
    # sat drivers
    #
    # 1.* -- Error checking
    # 2.* -- Valid inputs, no history data
    # 3.* -- Normal aggregation
    # 4.* -- Mood

    # mkhistory
    #
    # We know that the contributions are being recorded correctly.
    # Consequently, for these tests we don't need validate that, but only
    # that they are being aggregated properly. This routine creates a
    # set of simply history values using "sat adjust".

    proc mkhistory {} {
        jr sat adjust 1 KURD1 AUT 1
        jr sat adjust 1 KURD1 QOL 2
        jr sat adjust 1 SHIA1 AUT 3
        jr sat adjust 1 SHIA1 QOL 4
        jr sat adjust 1 KURD2 AUT 5
        jr sat adjust 1 KURD2 QOL 6
        jr sat adjust 1 SHIA2 AUT 7
        jr sat adjust 1 SHIA2 QOL 8

        jr sat adjust 2 KURD1 AUT -1
        jr sat adjust 2 KURD1 QOL -2
        jr sat adjust 2 SHIA1 AUT -3
        jr sat adjust 2 SHIA1 QOL -4
        jr sat adjust 2 KURD2 AUT -5
        jr sat adjust 2 KURD2 QOL -6
        jr sat adjust 2 SHIA2 AUT -7
        jr sat adjust 2 SHIA2 QOL -8

        myclock advance 10
        jr advance

        jr sat adjust 1 KURD1 AUT 1
        jr sat adjust 1 KURD1 QOL 2
        jr sat adjust 1 SHIA1 AUT 3
        jr sat adjust 1 SHIA1 QOL 4
        jr sat adjust 1 KURD2 AUT 5
        jr sat adjust 1 KURD2 QOL 6
        jr sat adjust 1 SHIA2 AUT 7
        jr sat adjust 1 SHIA2 QOL 8

        jr sat adjust 2 KURD1 AUT -1
        jr sat adjust 2 KURD1 QOL -2
        jr sat adjust 2 SHIA1 AUT -3
        jr sat adjust 2 SHIA1 QOL -4
        jr sat adjust 2 KURD2 AUT -5
        jr sat adjust 2 KURD2 QOL -6
        jr sat adjust 2 SHIA2 AUT -7
        jr sat adjust 2 SHIA2 QOL -8
    }

    test sat_drivers-1.1 {invalid -nbhood} -setup {
        create
    } -body {
        jr sat drivers -nbhood DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: N1, N2}

    test sat_drivers-1.2 {invalid -group} -setup {
        create
    } -body {
        jr sat drivers -group DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: KURD1, KURD2, SHIA1, SHIA2, SUNN1, SUNN2}

    test sat_drivers-1.3 {invalid -concern} -setup {
        create
    } -body {
        jr sat drivers -concern DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: AUT, CUL, QOL, SFT}

    test sat_drivers-1.5 {invalid -start} -setup {
        create
    } -body {
        jr sat drivers -start DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", expected integer}

    test sat_drivers-1.6 {invalid -end} -setup {
        create
    } -body {
        jr sat drivers -end DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", expected integer}

    test sat_drivers-1.7 {-start > -end} -setup {
        create
    } -body {
        jr sat drivers -start 10 -end 9
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {-start > -end}

    test sat_drivers-2.1 {Default case, no data} -setup {
        create
    } -body {
        jr sat drivers
        rdb query {SELECT * FROM gram_sat_drivers}
    } -cleanup {
        cleanup
    } -result {}

    test sat_drivers-2.2 {-nbhood, no data} -setup {
        create
    } -body {
        jr sat drivers -nbhood N1
        rdb query {SELECT * FROM gram_sat_drivers}
    } -cleanup {
        cleanup
    } -result {}

    test sat_drivers-2.3 {-group, no data} -setup {
        create
    } -body {
        jr sat drivers -group SHIA1
        rdb query {SELECT * FROM gram_sat_drivers}
    } -cleanup {
        cleanup
    } -result {}

    test sat_drivers-2.4 {-concern, no data} -setup {
        create
    } -body {
        jr sat drivers -concern AUT
        rdb query {SELECT * FROM gram_sat_drivers}
    } -cleanup {
        cleanup
    } -result {}

    test sat_drivers-2.5 {-concern mood, no data} -setup {
        create
    } -body {
        jr sat drivers -concern mood
        rdb query {SELECT * FROM gram_sat_drivers}
    } -cleanup {
        cleanup
    } -result {}

    test sat_drivers-2.6 {-start, no data} -setup {
        create
    } -body {
        jr sat drivers -start 5
        rdb query {SELECT * FROM gram_sat_drivers}
    } -cleanup {
        cleanup
    } -result {}

    test sat_drivers-2.7 {-end, no data} -setup {
        create
    } -body {
        jr sat drivers -start 5
        rdb query {SELECT * FROM gram_sat_drivers}
    } -cleanup {
        cleanup
    } -result {}

    test sat_drivers-2.8 {all options, no data} -setup {
        create
    } -body {
        jr sat drivers -nbhood N1 -group SHIA1 -concern AUT -start 5 -end 10
        rdb query {SELECT * FROM gram_sat_drivers}
    } -cleanup {
        cleanup
    } -result {}

    test sat_drivers-2.9 {all options + mood, no data} -setup {
        create
    } -body {
        jr sat drivers -nbhood N1 -group SHIA1 -concern mood -start 5 -end 10
        rdb query {SELECT * FROM gram_sat_drivers}
    } -cleanup {
        cleanup
    } -result {}

    test sat_drivers-3.1 {defaults} -setup {
        create
        mkhistory
    } -body {
        jr sat drivers
        pprint [rdb query {SELECT * FROM gram_sat_drivers}]
    } -cleanup {
        cleanup
    } -result {
driver n  g     c   acontrib 
------ -- ----- --- -------- 
1      N1 KURD1 AUT 2.0      
1      N1 KURD1 QOL 4.0      
1      N1 SHIA1 AUT 6.0      
1      N1 SHIA1 QOL 8.0      
1      N2 KURD2 AUT 10.0     
1      N2 KURD2 QOL 12.0     
1      N2 SHIA2 AUT 14.0     
1      N2 SHIA2 QOL 16.0     
2      N1 KURD1 AUT -2.0     
2      N1 KURD1 QOL -4.0     
2      N1 SHIA1 AUT -6.0     
2      N1 SHIA1 QOL -8.0     
2      N2 KURD2 AUT -10.0    
2      N2 KURD2 QOL -12.0    
2      N2 SHIA2 AUT -14.0    
2      N2 SHIA2 QOL -16.0    
    }

    test sat_drivers-3.2 {-nbhood} -setup {
        create
        mkhistory
    } -body {
        jr sat drivers -nbhood N1
        pprint [rdb query {SELECT * FROM gram_sat_drivers}]
    } -cleanup {
        cleanup
    } -result {
driver n  g     c   acontrib 
------ -- ----- --- -------- 
1      N1 KURD1 AUT 2.0      
1      N1 KURD1 QOL 4.0      
1      N1 SHIA1 AUT 6.0      
1      N1 SHIA1 QOL 8.0      
2      N1 KURD1 AUT -2.0     
2      N1 KURD1 QOL -4.0     
2      N1 SHIA1 AUT -6.0     
2      N1 SHIA1 QOL -8.0     
    }

    test sat_drivers-3.3 {-group} -setup {
        create
        mkhistory
    } -body {
        jr sat drivers -group SHIA1
        pprint [rdb query {SELECT * FROM gram_sat_drivers}]
    } -cleanup {
        cleanup
    } -result {
driver n  g     c   acontrib 
------ -- ----- --- -------- 
1      N1 SHIA1 AUT 6.0      
1      N1 SHIA1 QOL 8.0      
2      N1 SHIA1 AUT -6.0     
2      N1 SHIA1 QOL -8.0     
    }

    test sat_drivers-3.4 {-concern} -setup {
        create
        mkhistory
    } -body {
        jr sat drivers -concern AUT
        pprint [rdb query {SELECT * FROM gram_sat_drivers}]
    } -cleanup {
        cleanup
    } -result {
driver n  g     c   acontrib 
------ -- ----- --- -------- 
1      N1 KURD1 AUT 2.0      
1      N1 SHIA1 AUT 6.0      
1      N2 KURD2 AUT 10.0     
1      N2 SHIA2 AUT 14.0     
2      N1 KURD1 AUT -2.0     
2      N1 SHIA1 AUT -6.0     
2      N2 KURD2 AUT -10.0    
2      N2 SHIA2 AUT -14.0    
    }

    test sat_drivers-3.5 {-start} -setup {
        create
        mkhistory
    } -body {
        jr sat drivers -start 5
        pprint [rdb query {SELECT * FROM gram_sat_drivers}]
    } -cleanup {
        cleanup
    } -result {
driver n  g     c   acontrib 
------ -- ----- --- -------- 
1      N1 KURD1 AUT 1.0      
1      N1 KURD1 QOL 2.0      
1      N1 SHIA1 AUT 3.0      
1      N1 SHIA1 QOL 4.0      
1      N2 KURD2 AUT 5.0      
1      N2 KURD2 QOL 6.0      
1      N2 SHIA2 AUT 7.0      
1      N2 SHIA2 QOL 8.0      
2      N1 KURD1 AUT -1.0     
2      N1 KURD1 QOL -2.0     
2      N1 SHIA1 AUT -3.0     
2      N1 SHIA1 QOL -4.0     
2      N2 KURD2 AUT -5.0     
2      N2 KURD2 QOL -6.0     
2      N2 SHIA2 AUT -7.0     
2      N2 SHIA2 QOL -8.0     
    }

    test sat_drivers-3.5 {-end} -setup {
        create
        mkhistory
    } -body {
        jr sat drivers -end 5
        pprint [rdb query {SELECT * FROM gram_sat_drivers}]
    } -cleanup {
        cleanup
    } -result {
driver n  g     c   acontrib 
------ -- ----- --- -------- 
1      N1 KURD1 AUT 1.0      
1      N1 KURD1 QOL 2.0      
1      N1 SHIA1 AUT 3.0      
1      N1 SHIA1 QOL 4.0      
1      N2 KURD2 AUT 5.0      
1      N2 KURD2 QOL 6.0      
1      N2 SHIA2 AUT 7.0      
1      N2 SHIA2 QOL 8.0      
2      N1 KURD1 AUT -1.0     
2      N1 KURD1 QOL -2.0     
2      N1 SHIA1 AUT -3.0     
2      N1 SHIA1 QOL -4.0     
2      N2 KURD2 AUT -5.0     
2      N2 KURD2 QOL -6.0     
2      N2 SHIA2 AUT -7.0     
2      N2 SHIA2 QOL -8.0     
    }

    test sat_drivers-3.6 {all options} -setup {
        create
        mkhistory
    } -body {
        jr sat drivers -nbhood N2 -group SHIA2 -concern AUT -start 0 -end 5
        pprint [rdb query {SELECT * FROM gram_sat_drivers}]
    } -cleanup {
        cleanup
    } -result {
driver n  g     c   acontrib 
------ -- ----- --- -------- 
1      N2 SHIA2 AUT 7.0      
2      N2 SHIA2 AUT -7.0     
    }

    test sat_drivers-4.1 {-concern mood} -setup {
        create
        mkhistory
    } -body {
        jr sat drivers -nbhood N1 -group SHIA1 -concern mood
        pprint [rdb query {SELECT * FROM gram_sat_drivers}]

        # The mood should be (6 + 8 + 0 + 0)/4 == 14/4 == 3.5
    } -cleanup {
        cleanup
    } -result {
driver n  g     c    acontrib 
------ -- ----- ---- -------- 
1      N1 SHIA1 AUT  6.0      
1      N1 SHIA1 QOL  8.0      
2      N1 SHIA1 AUT  -6.0     
2      N1 SHIA1 QOL  -8.0     
1      N1 SHIA1 mood 3.5      
2      N1 SHIA1 mood -3.5     
    }

    #-------------------------------------------------------------------
    # coop adjust
    #
    # 1.* -- Error checking
    # 2.* -- Effect on coop.nfg
    # 3.* -- Adjusted values are clamped
    # 4.* -- Contribs is saved

    test coop_adjust-1.1 {driver is unknown} -setup {
        create
    } -body {
        jr coop adjust DUMMY KURD1 BLUE 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Cannot coop adjust, unknown Driver ID: "DUMMY"}

    test coop_adjust-1.2 {f is unknown} -setup {
        create
    } -body {
        jr coop adjust 1 DUMMY BLUE 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: KURD1, KURD2, SHIA1, SHIA2, SUNN1, SUNN2}

    test coop_adjust-1.3 {f is dead} -setup {
        create
        kill SHIA1
    } -body {
        jr coop adjust 1 SHIA1 BLUE 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Group is dead: "SHIA1"}


    test coop_adjust-1.4 {g is unknown} -setup {
        create
    } -body {
        jr coop adjust 1 KURD2 DUMMY 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: BLUE, BRIT, OPFOR}

    test coop_adjust-2.1 {adjustment: specific f, g} -setup {
        create
    } -body {
        tableSave gram_coop
        jr coop adjust 1 SUNN2 BLUE 5
        tableDiff gram_coop fg_id {f g} coop
    } -cleanup {
        cleanup
    } -result {{SUNN2 BLUE 5}}

    test coop_adjust-2.2 {adjustment: f=*, specific g} -setup {
        create
    } -body {
        tableSave gram_coop
        jr coop adjust 1 * BLUE 5
        tableDiff gram_coop fg_id {f g} coop
    } -cleanup {
        cleanup
    } -result {{KURD1 BLUE 5} {KURD2 BLUE 5} {SHIA1 BLUE 5} {SHIA2 BLUE 5} {SUNN1 BLUE 5} {SUNN2 BLUE 5}}

    test coop_adjust-2.3 {adjustment: f=*, skip dead groups} -setup {
        create
        kill SHIA1 SHIA2
    } -body {
        tableSave gram_coop
        jr coop adjust 1 * BLUE 5
        tableDiff gram_coop fg_id {f g} coop
    } -cleanup {
        cleanup
    } -result {{KURD1 BLUE 5} {KURD2 BLUE 5} {SUNN1 BLUE 5} {SUNN2 BLUE 5}}

    test coop_adjust-2.4 {adjustment: g=*, specific f} -setup {
        create
    } -body {
        tableSave gram_coop
        jr coop adjust 1 SHIA2 * 5
        tableDiff gram_coop fg_id {f g} coop
    } -cleanup {
        cleanup
    } -result {{SHIA2 BLUE 5} {SHIA2 BRIT 5} {SHIA2 OPFOR 5}}

    test coop_adjust-2.5 {adjustment: f,g=*} -setup {
        create
    } -body {
        tableSave gram_coop
        jr coop adjust 1 * * 5
        tableDiff gram_coop fg_id {f g} coop
    } -cleanup {
        cleanup
    } -result {{KURD1 BLUE 5} {KURD1 BRIT 5} {KURD1 OPFOR 5} {KURD2 BLUE 5} {KURD2 BRIT 5} {KURD2 OPFOR 5} {SHIA1 BLUE 5} {SHIA1 BRIT 5} {SHIA1 OPFOR 5} {SHIA2 BLUE 5} {SHIA2 BRIT 5} {SHIA2 OPFOR 5} {SUNN1 BLUE 5} {SUNN1 BRIT 5} {SUNN1 OPFOR 5} {SUNN2 BLUE 5} {SUNN2 BRIT 5} {SUNN2 OPFOR 5}}

    

    # 3.*: Adjusted values are clamped

    test coop_adjust-3.1 {Cooperations over 100.0 are clamped} -setup {
        create
    } -body {
        tableSave gram_coop
        jr coop adjust 1 SHIA2 BLUE 300.0
        tableDiff gram_coop fg_id {f g} coop
    } -cleanup {
        cleanup
    } -result {{SHIA2 BLUE 50}}

    test coop_adjust-3.2 {Cooperations under -100.0 are clamped} -setup {
        create
    } -body {
        tableSave gram_coop
        jr coop adjust 1 SHIA2 BLUE -300.0
        tableDiff gram_coop fg_id {f g} coop
    } -cleanup {
        cleanup
    } -result {{SHIA2 BLUE -50}}

    # 4.*: Contribs are saved

    test coop_adjust-4.1 {gram_contribs is saved} -setup {
        create
    } -body {
        jr coop adjust 1 SHIA1 BLUE 5
        jr coop adjust 2 KURD1 BLUE 3
        pprint [rdb query {SELECT * FROM gram_coop_contribs}]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  f     g    
---- ------ -------- -------- -- ----- ---- 
0    1      5.0      31       N1 SHIA1 BLUE 
0    2      3.0      25       N1 KURD1 BLUE 
    }

    test coop_adjust-4.2 {multiple adjusts for one driver accumulate} -setup {
        create
    } -body {
        jr coop adjust 1 KURD1 BLUE 5
        jr coop adjust 1 KURD1 BLUE 3
        pprint [rdb query {SELECT * FROM gram_coop_contribs}]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  f     g    
---- ------ -------- -------- -- ----- ---- 
0    1      8.0      25       N1 KURD1 BLUE 
    }

    test coop_adjust-4.3 {Large positive adjustments are clamped} -setup {
        create
    } -body {
        # Curve is initially 50; make it 90.0
        jr coop adjust 1 KURD1 BLUE 40.0

        # Adjust by 20; should get a contribs of 10.0
        jr coop adjust 2 KURD1 BLUE 20

        pprint [rdb query {SELECT * FROM gram_coop_contribs}]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  f     g    
---- ------ -------- -------- -- ----- ---- 
0    1      40.0     25       N1 KURD1 BLUE 
0    2      10.0     25       N1 KURD1 BLUE 
    }

    test coop_adjust-4.4 {Large negative adjustments are clamped} -setup {
        create
    } -body {
        # Curve is initially 50; make it 10.0
        jr coop adjust 1 KURD1 BLUE -40.0

        # Adjust by -20; should get a contribs of -10.0
        jr coop adjust 2 KURD1 BLUE -20

        pprint [rdb query {SELECT * FROM gram_coop_contribs}]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  f     g    
---- ------ -------- -------- -- ----- ---- 
0    1      -40.0    25       N1 KURD1 BLUE 
0    2      -10.0    25       N1 KURD1 BLUE 
    }

    test coop_adjust-4.5 {Contribs are timestamped} -setup {
        create
    } -body {
        jr coop adjust 1 KURD1 BLUE -20

        myclock advance 5
        jr advance

        jr coop adjust 1 KURD1 BLUE  40

        pprint [rdb query {SELECT * FROM gram_coop_contribs}]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  f     g    
---- ------ -------- -------- -- ----- ---- 
0    1      -20.0    25       N1 KURD1 BLUE 
5    1      40.0     25       N1 KURD1 BLUE 
    }

    test coop_adjust-5.1 {gram_deltas is updated} -setup {
        create
    } -body {
        set a [rdb onecolumn {
            SELECT delta FROM gram_coop_deltas
            WHERE f='SHIA1' AND g='BLUE'
            AND time=0
        }]

        jr coop adjust 1 SHIA1 BLUE 5

        set b [rdb onecolumn {
            SELECT delta FROM gram_coop_deltas
            WHERE f='SHIA1' AND g='BLUE'
            AND time=0
        }]

        list $a $b
    } -cleanup {
        cleanup
    } -result {0.0 5.0}


    test coop_adjust-6.1 {last_input is updated and returned} -setup {
        create
    } -body {
        set a [jr coop adjust 1 SHIA1 BLUE 5]
        set b [jr coop adjust 1 SHIA1 BLUE 5]
        set c [jr coop adjust 1 SHIA1 BLUE 5]
        set d [rdb onecolumn {
            SELECT last_input FROM gram_driver
            WHERE driver=1
        }]

        list $a $b $c $d
    } -cleanup {
        cleanup
    } -result {1 2 3 3}




    #-------------------------------------------------------------------
    # coop set
    #
    # 1.* -- Error checking
    # 2.* -- Effect on coop.nfg
    # 3.* -- Contribs are saved

    test coop_set-1.1 {driver is unknown} -setup {
        create
    } -body {
        jr coop set DUMMY KURD1 BLUE 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Cannot coop set, unknown Driver ID: "DUMMY"}

    test coop_set-1.2 {f is unknown} -setup {
        create
    } -body {
        jr coop set 1 DUMMY BLUE 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: KURD1, KURD2, SHIA1, SHIA2, SUNN1, SUNN2}

    test coop_set-1.3 {f is dead} -setup {
        create
        kill SHIA1
    } -body {
        jr coop set 1 SHIA1 BLUE 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Group is dead: "SHIA1"}


    test coop_set-1.4 {g is unknown} -setup {
        create
    } -body {
        jr coop set 1 KURD2 DUMMY 5
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: BLUE, BRIT, OPFOR}

    test coop_set-1.5 {coop is out of range} -setup {
        create
    } -body {
        jr coop set 1 KURD2 BLUE 101
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "101", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}

    test coop_set-2.1 {set: specific f, g} -setup {
        create
    } -body {
        tableSave gram_coop
        jr coop set 1 SUNN2 BLUE 5
        tableDiff gram_coop fg_id {f g} coop
    } -cleanup {
        cleanup
    } -result {{SUNN2 BLUE -45}}

    test coop_set-2.2 {set: f=*, specific g} -setup {
        create
    } -body {
        tableSave gram_coop
        jr coop set 1 * BLUE 5
        tableDiff gram_coop fg_id {f g} coop
    } -cleanup {
        cleanup
    } -result {{KURD1 BLUE -45} {KURD2 BLUE -45} {SHIA1 BLUE -45} {SHIA2 BLUE -45} {SUNN1 BLUE -45} {SUNN2 BLUE -45}}

    test coop_set-2.3 {set: f=*, skip dead groups} -setup {
        create
        kill SHIA1 SHIA2
    } -body {
        tableSave gram_coop
        jr coop set 1 * BLUE 5
        tableDiff gram_coop fg_id {f g} coop
    } -cleanup {
        cleanup
    } -result {{KURD1 BLUE -45} {KURD2 BLUE -45} {SUNN1 BLUE -45} {SUNN2 BLUE -45}}

    test coop_set-2.4 {set: g=*, specific f} -setup {
        create
    } -body {
        tableSave gram_coop
        jr coop set 1 SHIA2 * 5
        tableDiff gram_coop fg_id {f g} coop
    } -cleanup {
        cleanup
    } -result {{SHIA2 BLUE -45} {SHIA2 BRIT -45} {SHIA2 OPFOR -45}}

    # 3.*: Contribs are saved
    #
    # Note: this routine uses the same code as "coop adjust" to make
    # the actual change.  Thus, there's no need to repeat all of
    # the tests.

    test coop_set-4.1 {gram_contribs is saved} -setup {
        create
    } -body {
        jr coop set 1 SHIA1 BLUE 5
        jr coop set 2 KURD1 BLUE 3
        pprint [rdb query {SELECT * FROM gram_coop_contribs}]
    } -cleanup {
        cleanup
    } -result {
time driver acontrib curve_id n  f     g    
---- ------ -------- -------- -- ----- ---- 
0    1      -45.0    31       N1 SHIA1 BLUE 
0    2      -47.0    25       N1 KURD1 BLUE 
    }


    test coop_set-5.1 {last_input is updated and returned} -setup {
        create
    } -body {
        set a [jr coop set 1 SHIA1 BLUE 5]
        set b [jr coop set 1 SHIA1 BLUE 10]
        set c [jr coop set 1 SHIA1 BLUE 15]
        set d [rdb onecolumn {
            SELECT last_input FROM gram_driver
            WHERE driver=1
        }]

        list $a $b $c $d
    } -cleanup {
        cleanup
    } -result {1 2 3 3}


    test coop_set-5.2 {last_input is undone} -setup {
        create
    } -body {
        set a [jr coop set 1 SHIA1 BLUE 5]
        set b [jr coop set 1 SHIA1 BLUE 10]
        set c [jr coop set 1 SHIA1 BLUE 15]
        set d [jr coop set 1 SHIA1 BLUE 10 -undo]
        set e [jr coop set 1 SHIA1 BLUE 5 -undo]
        set f [rdb onecolumn {
            SELECT last_input FROM gram_driver
            WHERE driver=1
        }]

        list $a $b $c $d $e $f
    } -cleanup {
        cleanup
    } -result {1 2 3 {} {} 1}


    #-------------------------------------------------------------------
    # coop level
    #
    # 1.*: error checking
    # 2.*: scheduling
        
    test coop_level-1.1 {driver is unknown} -setup {
        create
    } -body {
        jr coop level DUMMY 0 SHIA1 BLUE 10.0 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {Cannot coop level, unknown Driver ID: "DUMMY"}

    test coop_level-1.2 {ts not numeric} -setup {
        create
    } -body {
        jr coop level 1 DUMMY SHIA1 BLUE 10.0 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {non-numeric ts: "DUMMY"}

    test coop_level-1.3 {ts in past} -setup {
        create
    } -body {
        jr coop level 1 -1 SHIA1 BLUE 10.0 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {Start time is in the past: '312359ZDEC69'}

    test coop_level-1.4 {f is unknown} -setup {
        create
    } -body {
        jr coop level 1 0 DUMMY BLUE 10.0 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "DUMMY", should be one of: KURD1, KURD2, SHIA1, SHIA2, SUNN1, SUNN2}

    test coop_level-1.5 {f is dead, no -allowdead} -setup {
        create
        kill SHIA1
    } -body {
        jr coop level 1 0 SHIA1 BLUE 10.0 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {Group is dead: "SHIA1"}

    test coop_level-1.6 {g is unknown} -setup {
        create
    } -body {
        jr coop level 1 0 SHIA1 DUMMY 10.0 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "DUMMY", should be one of: BLUE, BRIT, OPFOR}

    test coop_level-1.7 {invalid limit: unknown symbol} -setup {
        create
    } -body {
        jr coop level 1 0 SHIA1 BLUE DUMMY 0.1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "DUMMY", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}

    test coop_level-1.7 {invalid days: unknown symbol} -setup {
        create
    } -body {
        jr coop level 1 0 SHIA1 BLUE 10.0 DUMMY
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "DUMMY", should be a real number no less than 0.0, or one of: XL, L, M, S, XS}

    test coop_level-1.8 {negative days} -setup {
        create
    } -body {
        jr coop level 1 0 SHIA1 BLUE 10.0 -1
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid value "-1", should be a real number no less than 0.0, or one of: XL, L, M, S, XS}

    # TBD: The option processing is the same as that used for the [sat level] and 
    # [sat slope] commands; the only difference is the valid range for the -athresh
    # -dthresh options.  So we'll just test those.
    test coop_level-1.9 {Invalid option} -setup {
        create
    } -body {
        jr coop level 1 0 SHIA1 BLUE 10.0 1 -nonesuch foo
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid option: "-nonesuch"}

    # TBD: Add -athresh and -dthresh checks

    # 2.*: Scheduling

    test coop_level-2.1 {schedule for one f,g.} -setup {
        create
    } -body {
        jr coop level 1 0 KURD2 BRIT 10.0 0.1

        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te  n  f     g     llimit 
- -- --- -- ----- ----- ------ 
I 0  144 N2 KURD2 BLUE  8.00   
D 0  144 N2 KURD2 BRIT  10.00  
I 0  144 N2 KURD2 OPFOR -8.00  
    }

    test coop_level-2.2 {schedule with -s 0.5} -setup {
        create
    } -body {
        jr coop level 1 0 KURD2 BRIT 10.0 0.1 -s 0.5
        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te  n  f     g     llimit 
- -- --- -- ----- ----- ------ 
I 0  144 N2 KURD2 BLUE  4.00   
D 0  144 N2 KURD2 BRIT  10.00  
I 0  144 N2 KURD2 OPFOR -4.00  
    }

    test coop_level-2.3 {zero magnitude events are ignored} -setup {
        create
    } -body {
        jr coop level 1 0 KURD2 BRIT 0.0 0.1
        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
    }

    test coop_level-2.4 {epsilon events take one tick} -setup {
        create
    } -body {
        jr coop level 1 0 KURD2 BRIT 0.05 0.1
        
        # Note that ts=te for all effects.
        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te n  f     g     llimit 
- -- -- -- ----- ----- ------ 
I 0  1  N2 KURD2 BLUE  0.04   
D 0  1  N2 KURD2 BRIT  0.05   
I 0  1  N2 KURD2 OPFOR -0.04  
    }

    test coop_level-2.5 {zero magnitude indirect effects are ignored.} -setup {
        create
    } -body {
        # Make sure the relationship matrix is all zeroes
        # (unless f=g!)
        
        rdb eval {
            UPDATE gram_frc_fg SET rel=0.0 
            WHERE f != g
        }

        init


        jr coop level 1 0 KURD2 BRIT 10.0 1
        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te   n  f     g    llimit 
- -- ---- -- ----- ---- ------ 
D 0  1440 N2 KURD2 BRIT 10.00  
    }

    test coop_level-2.6 {schedule event in future} -setup {
        create
    } -body {
        jr coop level 1 720 KURD2 BRIT 10.0 0.1
        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
d ts  te  n  f     g     llimit 
- --- --- -- ----- ----- ------ 
I 720 864 N2 KURD2 BLUE  8.00   
D 720 864 N2 KURD2 BRIT  10.00  
I 720 864 N2 KURD2 OPFOR -8.00  
    }

    test coop_level-2.8 {Indirect effects in all nbhoods, N2 near} -setup {
        create
    } -body {
        # Update GRAM's proximity, and re-initialize
        set near [eproximity index near]

        rdb eval {
            UPDATE gram_mn
            SET proximity=$near
            WHERE m='N2' AND n='N1'
        }

        init


        # Enter a level input.
        jr coop level 1 0 SHIA1 BRIT 10.0 0.1 -p 0.5 -q 0.1

        # Expect direct effect on SHIA1 with BRIT in N1, full strength indirect
        # on SHIA1 with others in N1, 0.5 effect in N2 (since N2 is near).
        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te  n  f     g     llimit 
- -- --- -- ----- ----- ------ 
I 0  144 N1 SHIA1 BLUE  8.00   
D 0  144 N1 SHIA1 BRIT  10.00  
I 0  144 N1 SHIA1 OPFOR -8.00  
I 0  144 N2 SHIA2 BLUE  4.00   
I 0  144 N2 SHIA2 BRIT  5.00   
I 0  144 N2 SHIA2 OPFOR -4.00  
    }

    test coop_level-2.9 {Indirect effects in all nbhoods, N2 far} -setup {
        create
    } -body {
        jr coop level 1 0 SHIA1 BRIT 10.0 0.1 -p 0.5 -q 0.1

        # Expect direct effect on SHIA1 with BRIT in N1, full strength 
        # indirect effect on SHIA1 with others in N1, 0.1 effect in N2 
        # (since N2 is far).
        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te  n  f     g     llimit 
- -- --- -- ----- ----- ------ 
I 0  144 N1 SHIA1 BLUE  8.00   
D 0  144 N1 SHIA1 BRIT  10.00  
I 0  144 N1 SHIA1 OPFOR -8.00  
I 0  144 N2 SHIA2 BLUE  0.80   
I 0  144 N2 SHIA2 BRIT  1.00   
I 0  144 N2 SHIA2 OPFOR -0.80  
    }

    test coop_level-2.10 {Indirect effects in all nbhoods, N2 remote} -setup {
        create
    } -body {
        # Update GRAM's proximity, and re-initialize
        set remote [eproximity index remote]

        rdb eval {
            UPDATE gram_mn
            SET proximity=$remote
            WHERE m='N2' AND n='N1'
        }

        init


        # Enter a level input.
        jr coop level 1 0 SHIA1 BRIT 10.0 0.1 -p 0.5 -q 0.1

        # Expect the direct effect on SHIA1 with BRIT in N1, and
        # full strength indirect on SHIA1 with others in N1, but
        # no effects in N2 (since N2 is remote).
        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te  n  f     g     llimit 
- -- --- -- ----- ----- ------ 
I 0  144 N1 SHIA1 BLUE  8.00   
D 0  144 N1 SHIA1 BRIT  10.00  
I 0  144 N1 SHIA1 OPFOR -8.00  
    }

    
    test coop_level-2.11 {Delayed indirect effects} -setup {
        create
    } -body {
        # Update GRAM's delay, and re-initialize
        rdb eval {
            UPDATE gram_mn
            SET effects_delay = 1.0
            WHERE m='N2' AND n='N1'
        }

        init


        # Enter a level input.
        jr coop level 1 0 SHIA1 BRIT 10.0 0.1 -q 0.1

        # Expect direct effect on SHIA1 with BRIT in N1, full strength indirect
        # on SHIA1 with others in N1, 0.1 effect in N2 delayed 1 day.
        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
d ts   te   n  f     g     llimit 
- ---- ---- -- ----- ----- ------ 
I 0    144  N1 SHIA1 BLUE  8.00   
D 0    144  N1 SHIA1 BRIT  10.00  
I 0    144  N1 SHIA1 OPFOR -8.00  
I 1440 1584 N2 SHIA2 BLUE  0.80   
I 1440 1584 N2 SHIA2 BRIT  1.00   
I 1440 1584 N2 SHIA2 OPFOR -0.80  
    }

    test coop_level-2.12 {inputs with tiny days take one tick} -setup {
        create
    } -body {
        jr coop level 1 0 KURD2 BRIT 50.0 0.0001
        
        # Note that ts=te for all effects.
        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
d ts te n  f     g     llimit 
- -- -- -- ----- ----- ------ 
I 0  1  N2 KURD2 BLUE  40.00  
D 0  1  N2 KURD2 BRIT  50.00  
I 0  1  N2 KURD2 OPFOR -40.00 
    }

    test coop_level-3.1 {level increases during interval} -setup {
        create
    } -body {
        # FIRST, do a level effect.
        jr coop level 1 0 KURD2 BRIT 10.0 1

        # Advance to noon.
        myclock advance 720
        jr advance
        
        tableDiffCols gram_coop {f g} coop coop0
    } -cleanup {
        cleanup 
    } -result {{KURD2 BLUE 3.5527864} {KURD2 BRIT 4.5} {KURD2 OPFOR -3.5527864}}

    test coop_level-3.2 {level increases to limit} -setup {
        create
    } -body {
        # FIRST, do a level effect.
        jr coop level 1 0 KURD2 BRIT 10.0 1

        # Advance a full day
        myclock advance 1440
        jr advance
        
        # Because we're doing it in a single step, the scaling
        # should be perfect.  We're starting at 50, so the results
        # should be exactly 1/2 the nominal.
        tableDiffCols gram_coop {f g} coop coop0
    } -cleanup {
        cleanup 
    } -result {{KURD2 BLUE 4} {KURD2 BRIT 5} {KURD2 OPFOR -4}}

    test coop_level-3.3 {slope increases due to level} -setup {
        create
    } -body {
        # FIRST, advance to noon and get the slope
        myclock advance 720
        jr advance
        tableSave gram_coop

        # NEXT, prepare for the next step
        myclock reset
        init


        # NEXT, schedule a level input, and advance to noon.

        jr coop level 1 0 KURD2 BRIT 10.0 1

        myclock advance 720
        jr advance
        
        tableDiff gram_coop fg_id {f g} slope
    } -cleanup {
        cleanup 
    } -result {{KURD2 BLUE 7.1055728} {KURD2 BRIT 9} {KURD2 OPFOR -7.1055728}}

    test coop_level-3.4 {slope returns to normal after interval} -setup {
        create
    } -body {
        # FIRST, advance two days, in steps and get the slope
        myclock advance 1440
        jr advance
        myclock advance 2880
        jr advance
        
        tableSave gram_coop

        # NEXT, prepare for the next step
        myclock reset
        init


        # NEXT, schedule a level input, and repeat.
        jr coop level 1 0 KURD2 BRIT 10.0 1

        myclock advance 1440
        jr advance
        myclock advance 2880
        jr advance

        tableDiff gram_coop fg_id {f g} slope
    } -cleanup {
        cleanup 
    } -result {}

    test coop_level-4.1 {level effects expire from list} -setup {
        create
    } -body {
        jr coop level 1 0 SHIA1 OPFOR 10.0 1

        myclock advance 1440
        jr advance

        dumpCoopLevels
    } -cleanup {
        cleanup 
    } -result {
    }

    test coop_level-5.1 {driver is tracked for levels} -setup {
        create
    } -body {
        jr coop level 1 0 SHIA1 OPFOR 10.0 1
        jr coop level 2 0 SHIA1 OPFOR  5.0 1

        rdb eval {
            SELECT driver FROM gram_effects
            WHERE etype='L' AND prox=-1
        }
    } -cleanup {
        cleanup 
    } -result {1 2}

    test coop_level-5.2 {input runs from 1 for each driver} -setup {
        create 
    } -body {
        jr coop level 1 0 SHIA1 BLUE  10.0 1
        jr coop level 1 0 SHIA1 BRIT  10.0 1
        jr coop level 1 0 SHIA1 OPFOR 10.0 1
        jr coop level 2 0 SHIA1 BLUE  10.0 1
        jr coop level 2 0 SHIA1 BRIT  10.0 1
        jr coop level 2 0 SHIA1 OPFOR  5.0 1

        rdb eval {
            SELECT DISTINCT driver || '.' || input FROM gram_effects
        }
    } -cleanup {
        cleanup 
    } -result {1.1 1.2 1.3 2.1 2.2 2.3}


    test coop_level-6.1 {Inputs with the same cause overlap} -setup {
        create
    } -body {
        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_coop SET coop0 = 0.0}
        init


        # Schedule two effects of differing strength but the same cause
        # on the same pgroup.  The total effect over the timestep should
        # be the maximum of the two.
        jr coop level 1 0 SHIA1 OPFOR 10 1.0 -cause CIVCAS
        jr coop level 1 0 SHIA1 OPFOR  5 1.0 -cause CIVCAS

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  The actual contribution should be 
        # based on the 10.  A1 should get credit for ~2/3 of the actual
        # contribution and A2 should get credit for ~1/3.
        pprint [jr dump coop level SHIA1 OPFOR]

        # Hand check
        # Ratio of AContribs is 6.093 to 2.907 or 2.096.  Check.
        # Sum of AContribs is 6.093 + 2.907 or 9.0.       Check.
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time     Limit AThr  DThr  NTotal NContrib ATotal AContrib Input DN DF    DG    E 
------ ------------ ------------ ----- ----- ----- ------ -------- ------ -------- ----- -- ----- ----- - 
CIVCAS 010000ZJAN70 020000ZJAN70  10.0 100.0   0.0   9.00   9.000    6.09   6.093  1.1   N1 SHIA1 OPFOR D 
'      '            '              5.0 100.0   0.0   4.29   4.293    2.91   2.907  1.2   N1 SHIA1 OPFOR D 
    }

    test coop_level-6.2 {Inputs with the same cause overlap: multiple time steps} -setup {
        create
    } -body {
        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_sat SET sat0 = 0.0}
        init


        # Schedule two effects of differing strength but the same cause
        # on the same pgroup.  The total effect over the timestep should
        # be the maximum of the two.
        jr coop level 1 0 SHIA1 OPFOR 10 1.0 -cause CIVCAS
        jr coop level 1 0 SHIA1 OPFOR  5 1.0 -cause CIVCAS

        # Advance time.
        myclock advance 360
        jr advance
        myclock advance 720
        jr advance

        # Dump the results.  The actual contribution should be 
        # based on the 10.  A1 should get credit for ~2/3 of the actual
        # contribution and A2 should get credit for ~1/3.
        pprint [jr dump coop level SHIA1 OPFOR]

        # Hand check
        # Ratio of AContribs in second time step is 0.653 to 0.354, or 1.84.  Check
        # Sum of AContribs in second time step is 0.653 + 0.354, or 1.007.    Check
        # Ratio of NTotals over the two time steps is 9.00 to 4.29, or 2.1.
        # Ratio of ATotals over the two time steps is 3.00 to 1.43, or 2.1.   Check
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time     Limit AThr  DThr  NTotal NContrib ATotal AContrib Input DN DF    DG    E 
------ ------------ ------------ ----- ----- ----- ------ -------- ------ -------- ----- -- ----- ----- - 
CIVCAS 010000ZJAN70 020000ZJAN70  10.0 100.0   0.0   9.00   2.162    3.00   0.653  1.1   N1 SHIA1 OPFOR D 
'      '            '              5.0 100.0   0.0   4.29   1.173    1.43   0.354  1.2   N1 SHIA1 OPFOR D 
    }

    test coop_level-6.3 {Inputs with different causes are independent} -setup {
        create
    } -body {
        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_coop SET coop0 = 0.0}
        init


        # Schedule two effects of differing strength and different causes
        # on the same pgroup.  The effects should be independent
        jr coop level 1 0 SHIA1 OPFOR 10 1.0 -cause CIVCAS
        jr coop level 1 0 SHIA1 OPFOR  5 1.0 -cause HOSCAP

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  Each should have its own contribution; the
        # actual contribution should be scaled contribution.
        pprint [jr dump coop level SHIA1 OPFOR]

    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time     Limit AThr  DThr  NTotal NContrib ATotal AContrib Input DN DF    DG    E 
------ ------------ ------------ ----- ----- ----- ------ -------- ------ -------- ----- -- ----- ----- - 
CIVCAS 010000ZJAN70 020000ZJAN70  10.0 100.0   0.0   9.00   9.000    9.00   9.000  1.1   N1 SHIA1 OPFOR D 
HOSCAP '            '              5.0 100.0   0.0   4.29   4.293    4.29   4.293  1.2   N1 SHIA1 OPFOR D 
    }

    test coop_level-6.4 {Effects from different inputs with same cause} -setup {
        create
    } -body {
        # Set sat0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_coop SET coop0 = 0.0}
        init


        jr coop level 1 0 SHIA1 OPFOR 10 1.0 -cause CIVCAS -p 1.0 -q 1.0
        jr coop level 1 0 SHIA2 OPFOR 10 1.0 -cause CIVCAS -p 1.0 -q 1.0

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  Each should have its own contribution; the
        # actual contribution should be scaled contribution.
        pprint [jr dump coop level SHIA1 OPFOR]

        # Hand check
        # Ratio of Acontribs is 1.0.  Check.
        # Sum of AContribs is 9.0. Check.
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time     Limit AThr  DThr  NTotal NContrib ATotal AContrib Input DN DF    DG    E 
------ ------------ ------------ ----- ----- ----- ------ -------- ------ -------- ----- -- ----- ----- - 
CIVCAS 010000ZJAN70 020000ZJAN70  10.0 100.0   0.0   9.00   9.000    4.50   4.500  1.1   N1 SHIA1 OPFOR D 
'      '            '             10.0 100.0   0.0   9.00   9.000    4.50   4.500  1.2   N2 SHIA2 OPFOR I 
    }

    # coop_level-7.*: Automatic causes

    test coop_level-7.1 {Causes are tagged automatically if -cause is not given} -setup {
        create 
    } -body {
        jr coop level 1 0 SHIA1 OPFOR 10 10

        rdb eval {
            SELECT DISTINCT cause 
            FROM gram_effects
        }
    } -cleanup {
        cleanup
    } -result {D1}

    # coop_level-8.*: "level" returns input

    test coop_level-8.1 {Returns input, case 1: input is ignored.} -setup {
        create 
    } -body {
        set a [jr coop level 1 0 SHIA1 OPFOR 0 1]
        set b [jr coop level 1 0 SHIA1 BRIT 0 1]

        set c [rdb eval {SELECT input FROM gram_effects}]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 2 {}}

    test coop_level-8.2 {Returns input, case 2: normal input.} -setup {
        create
    } -body {
        set a [jr coop level 1 0 SHIA1 OPFOR 10 1]
        set b [jr coop level 1 0 SHIA1 BRIT 10 1]
        set c [rdb eval {SELECT DISTINCT input FROM gram_effects}]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 2 {1 2}}

    # coop_level-9.*: Thresholds
    
    test coop_level-9.1 {Positive, coop0 >= athresh} -setup {
        create 
    } -body {
        set a [jr coop.fg SHIA1 BLUE]
        
        # Note: $a == 50.0, so it's greater than -athresh
        jr coop level 1 0 SHIA1 BLUE 10 0.1 -athresh 30.0
        
        myclock advance 720
        jr advance
        
        set b [jr coop.fg SHIA1 BLUE]
        
        expr {$a == $b}
    } -cleanup {
        cleanup
    } -result {1}

    test coop_level-9.2 {Positive, coop0+delta < athresh} -setup {
        create 
    } -body {
        set a [jr coop.fg SHIA1 BLUE]
        
        # Note: $a == 50.0, so it's well less than -athresh
        jr coop level 1 0 SHIA1 BLUE 10 0.1 -athresh 90.0
        
        myclock advance 720
        jr advance
        
        set b [jr coop.fg SHIA1 BLUE]
        
        list $a $b
    } -cleanup {
        cleanup
    } -result {50.0 55.0}
    
    test coop_level-9.3 {Positive, coop0+delta > athresh} -setup {
        create 
    } -body {
        set a [format %.1f [jr coop.fg SHIA1 BLUE]]
        
        # Note: $a == 50.0, so it's justless than -athresh.
        jr coop level 1 0 SHIA1 BLUE 10 0.9 -athresh 51.0

        # Step twice; we should get an increase on the first, but
        # not on the second.
        myclock advance 720
        jr advance
        set b [format %.1f [jr coop.fg SHIA1 BLUE]]

        myclock advance 1440
        jr advance
        
        set c [format %.1f [jr coop.fg SHIA1 BLUE]]
        
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {50.0 54.6 54.6}

    test coop_level-9.4 {Negative, coop0 <= dthresh} -setup {
        create 
    } -body {
        set a [jr coop.fg SHIA1 BLUE]
        
        # Note: $a == 50.0, so it's less than -dthresh
        jr coop level 1 0 SHIA1 BLUE -10 0.1 -dthresh 60.0
        
        myclock advance 720
        jr advance
        
        set b [jr coop.fg SHIA1 BLUE]
        
        expr {$a == $b}
    } -cleanup {
        cleanup
    } -result {1}
    
    test coop_level-9.5 {Negative, coop0+delta > dthresh} -setup {
        create 
    } -body {
        set a [jr coop.fg SHIA1 BLUE]
        
        # Note: $a == 50.0, so it's well greater than -dthresh
        jr coop level 1 0 SHIA1 BLUE -10 0.1 -dthresh 10.0
        
        myclock advance 720
        jr advance
        
        set b [jr coop.fg SHIA1 BLUE]
        
        list $a $b
    } -cleanup {
        cleanup
    } -result {50.0 45.0}
    
    test coop_level-9.6 {Negative, coop0+delta < dthresh} -setup {
        create 
    } -body {
        set a [format %.1f [jr coop.fg SHIA1 BLUE]]
        
        # Note: $a == 50.0, so it's just greater than -dthresh.
        jr coop level 1 0 SHIA1 BLUE -10 0.9 -dthresh 49.0

        # Step twice; we should get a decrease on the first, but
        # not on the second.
        myclock advance 720
        jr advance
        set b [format %.1f [jr coop.fg SHIA1 BLUE]]

        myclock advance 1440
        jr advance
        
        set c [format %.1f [jr coop.fg SHIA1 BLUE]]
        
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {50.0 45.4 45.4}

    # Dead groups

    test coop_level-10.1 {Dead groups get no effects.} -setup {
        create
        kill SHIA2
    } -body {
        jr coop level 1 0 SHIA1 BLUE 10 0.1 -p 1.0 -q 1.0
        dumpCoopLevels
    } -cleanup {
        cleanup
    } -result {
d ts te  n  f     g     llimit 
- -- --- -- ----- ----- ------ 
D 0  144 N1 SHIA1 BLUE  10.00  
I 0  144 N1 SHIA1 BRIT  8.00   
I 0  144 N1 SHIA1 OPFOR -8.00  
    }

    test coop_level-10.2 {Indirect effects with -allowdead.} -setup {
        create
        kill SHIA1
    } -body {
        jr coop level 1 0 SHIA1 BLUE 10 0.1 -p 1.0 -q 1.0 -allowdead
        dumpCoopLevels
    } -cleanup {
        cleanup
    } -result {
d ts te  n  f     g     llimit 
- -- --- -- ----- ----- ------ 
I 0  144 N2 SHIA2 BLUE  10.00  
I 0  144 N2 SHIA2 BRIT  8.00   
I 0  144 N2 SHIA2 OPFOR -8.00  
    }

    #-------------------------------------------------------------------
    # coop slope
    #
    # coop_slope-1.*: Argument checking
    # coop_slope-2.*: Scheduling
    # coop_slope-3.*: Affect on coop.nfg
    # coop_slope-4.*: Expiration
    # coop_slope-5.*: Tracking of contributions
    # coop_slope-6.*: Cause interactions
    # coop_slope-7.*: Scheduling returns input

    test coop_slope-1.1 {driver is unknown} -setup {
        create
    } -body {
        jr coop slope DUMMY 0 SHIA1 BRIT 100.0
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {Cannot coop slope, unknown Driver ID: "DUMMY"}


    test coop_slope-1.2 {ts not numeric} -setup {
        create
    } -body {
        jr coop slope 1 DUMMY SHIA1 BRIT 100.0
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {non-numeric ts: "DUMMY"}


    test coop_slope-1.3 {ts in the past.} -setup {
        create
    } -body {
        jr coop slope 1 -1 N1 SHIA1 BRIT 100.0
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Start time is in the past: '312359ZDEC69'}

    test coop_slope-1.4 {invalid f} -setup {
        create
    } -body {
        jr coop slope 1 0 DUMMY BLUE 100.0
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: KURD1, KURD2, SHIA1, SHIA2, SUNN1, SUNN2}

    test coop_slope-1.5 {f is dead, no -allowdead} -setup {
        create
        kill SHIA1
    } -body {
        jr coop slope 1 0 SHIA1 BLUE 100.0
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Group is dead: "SHIA1"}

    test coop_slope-1.6 {invalid g} -setup {
        create
    } -body {
        jr coop slope 1 0 SHIA1 DUMMY 100.0
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: BLUE, BRIT, OPFOR}

    test coop_slope-1.7 {invalid slope: unknown symbol} -setup {
        create
    } -body {
        jr coop slope 1 0 SHIA1 BRIT DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}

    # NOTE: The option code is shared with the other level and slope commands, and so 
    # option processing is tested there.
    test coop_slope-1.8 {Invalid option} -setup {
        create
    } -body {
        jr coop slope 1 0 SHIA1 BRIT 100.0 -nonesuch foo
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {invalid option: "-nonesuch"}


    test coop_slope-1.9 {slope scheduled for an driver in decreasing time sequence} -setup {
        create
    } -body {
        jr coop slope 1 10 SHIA1 BRIT 10.0
        jr coop slope 1  5 SHIA1 BRIT 10.0
    } -cleanup {
        cleanup 
    } -returnCodes {
        error
    } -result {slope scheduled in decreasing time sequence: 5 < 10}

    
    # coop_slope-2.*: Scheduling

    test coop_slope-2.1 {schedule slope for one g,c.} -setup {
        create
    } -body {
        jr coop slope 1 0 KURD2 BRIT 100.0
        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DF    DG   Cause E Start Time   End Time N  F     G     Slope AThresh DThresh Nominal Actual 
----- -- ----- ---- ----- - ------------ -------- -- ----- ----- ----- ------- ------- ------- ------ 
1.1   N2 KURD2 BRIT D1    I 010000ZJAN70 n/a      N2 KURD2 BLUE   80.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     D 010000ZJAN70 n/a      N2 KURD2 BRIT  100.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 n/a      N2 KURD2 OPFOR -80.0 100.0     0.0     0.0     0.0  
    }

    test coop_slope-2.2 {schedule slope with -s 0.5} -setup {
        create
    } -body {
        jr coop slope 1 0 KURD2 BRIT 100.0 -s 0.5
        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DF    DG   Cause E Start Time   End Time N  F     G     Slope AThresh DThresh Nominal Actual 
----- -- ----- ---- ----- - ------------ -------- -- ----- ----- ----- ------- ------- ------- ------ 
1.1   N2 KURD2 BRIT D1    I 010000ZJAN70 n/a      N2 KURD2 BLUE   40.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     D 010000ZJAN70 n/a      N2 KURD2 BRIT  100.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 n/a      N2 KURD2 OPFOR -40.0 100.0     0.0     0.0     0.0  
    }

    test coop_slope-2.3 {successive inputs for a driver stack} -setup {
        create
    } -body {
        jr coop slope 1  0 KURD2 BRIT 100.0
        jr coop slope 1  5 KURD2 BRIT  75.0
        jr coop slope 1 10 KURD2 BRIT   0.0
        jr coop slope 1 15 KURD2 BRIT 100.0
        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DF    DG   Cause E Start Time   End Time     N  F     G     Slope AThresh DThresh Nominal Actual 
----- -- ----- ---- ----- - ------------ ------------ -- ----- ----- ----- ------- ------- ------- ------ 
1.4   N2 KURD2 BRIT D1    I 010000ZJAN70 010005ZJAN70 N2 KURD2 BLUE   80.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010005ZJAN70 010010ZJAN70 N2 KURD2 BLUE   60.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010010ZJAN70 010015ZJAN70 N2 KURD2 BLUE    0.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010015ZJAN70 n/a          N2 KURD2 BLUE   80.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     D 010000ZJAN70 010005ZJAN70 N2 KURD2 BRIT  100.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     D 010005ZJAN70 010010ZJAN70 N2 KURD2 BRIT   75.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     D 010010ZJAN70 010015ZJAN70 N2 KURD2 BRIT    0.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     D 010015ZJAN70 n/a          N2 KURD2 BRIT  100.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 010005ZJAN70 N2 KURD2 OPFOR -80.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010005ZJAN70 010010ZJAN70 N2 KURD2 OPFOR -60.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010010ZJAN70 010015ZJAN70 N2 KURD2 OPFOR   0.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010015ZJAN70 n/a          N2 KURD2 OPFOR -80.0 100.0     0.0     0.0     0.0  
    }

    test coop_slope-2.5 {Indirect effects in all nbhoods, N2 near} -setup {
        create
    }  -body {
        # Update GRAM's proximity, and re-initialize
        set near [eproximity index near]

        rdb eval {
            UPDATE gram_mn
            SET proximity=$near
            WHERE m='N2' AND n='N1'
        }

        init


        # Enter slope input
        jr coop slope 1 0 KURD1 BRIT 100.0 -p 0.5 -q 0.1

        # Expect direct effect on BRIT, indirect on others, in both 
        # neighborhoods; 0.5 effect in N2 since N2 is near.
        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DF    DG   Cause E Start Time   End Time N  F     G     Slope AThresh DThresh Nominal Actual 
----- -- ----- ---- ----- - ------------ -------- -- ----- ----- ----- ------- ------- ------- ------ 
1.1   N1 KURD1 BRIT D1    I 010000ZJAN70 n/a      N1 KURD1 BLUE   80.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     D 010000ZJAN70 n/a      N1 KURD1 BRIT  100.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 n/a      N1 KURD1 OPFOR -80.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 n/a      N2 KURD2 BLUE   40.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 n/a      N2 KURD2 BRIT   50.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 n/a      N2 KURD2 OPFOR -40.0 100.0     0.0     0.0     0.0  
    }

    test coop_slope-2.6 {Indirect effects in all nbhoods, N2 far} -setup {
        create
    } -body {
        jr coop slope 1 0 KURD1 BRIT 100.0 -p 0.5 -q 0.1

        # Expect direct effect on BRIT, indirect on others, in both 
        # neighborhoods; 0.1 effect in N2 since N2 is far.
        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DF    DG   Cause E Start Time   End Time N  F     G     Slope AThresh DThresh Nominal Actual 
----- -- ----- ---- ----- - ------------ -------- -- ----- ----- ----- ------- ------- ------- ------ 
1.1   N1 KURD1 BRIT D1    I 010000ZJAN70 n/a      N1 KURD1 BLUE   80.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     D 010000ZJAN70 n/a      N1 KURD1 BRIT  100.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 n/a      N1 KURD1 OPFOR -80.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 n/a      N2 KURD2 BLUE    8.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 n/a      N2 KURD2 BRIT   10.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 n/a      N2 KURD2 OPFOR  -8.0 100.0     0.0     0.0     0.0  
    }

    test coop_slope-2.7 {Indirect effects in all nbhoods, N2 remote} -setup {
        create
    } -body {
        # Update GRAM's proximity, and re-initialize
        set remote [eproximity index remote]

        rdb eval {
            UPDATE gram_mn
            SET proximity=$remote
            WHERE m='N2' AND n='N1'
        }

        init


        # Enter a slope input.
        jr coop slope 1 0 KURD1 BRIT 100.0 -p 0.5 -q 0.1

        # Expect direct effect on SHIA1, indirect on others in N1;
        # no effects in N2 since N2 is remote.
        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DF    DG   Cause E Start Time   End Time N  F     G     Slope AThresh DThresh Nominal Actual 
----- -- ----- ---- ----- - ------------ -------- -- ----- ----- ----- ------- ------- ------- ------ 
1.1   N1 KURD1 BRIT D1    I 010000ZJAN70 n/a      N1 KURD1 BLUE   80.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     D 010000ZJAN70 n/a      N1 KURD1 BRIT  100.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 n/a      N1 KURD1 OPFOR -80.0 100.0     0.0     0.0     0.0  
    }


    test coop_slope-2.9 {delayed indirect effects} -setup {
        create
    }  -body {
        # Update GRAM's delay, and re-initialize
        rdb eval {
            UPDATE gram_mn
            SET effects_delay = 1.0
            WHERE m='N2' AND n='N1'
        }

        init


        # Enter a slope input.
        jr coop slope 1 0 KURD1 BRIT 100.0 -p 0.5 -q 0.1

        # Expect direct effect on BRIT, indirect on others, in both 
        # neighborhoods; 0.1 effect in N2 delayed 1 day.
        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DF    DG   Cause E Start Time   End Time N  F     G     Slope AThresh DThresh Nominal Actual 
----- -- ----- ---- ----- - ------------ -------- -- ----- ----- ----- ------- ------- ------- ------ 
1.1   N1 KURD1 BRIT D1    I 010000ZJAN70 n/a      N1 KURD1 BLUE   80.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     D 010000ZJAN70 n/a      N1 KURD1 BRIT  100.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 n/a      N1 KURD1 OPFOR -80.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 020000ZJAN70 n/a      N2 KURD2 BLUE    8.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 020000ZJAN70 n/a      N2 KURD2 BRIT   10.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 020000ZJAN70 n/a      N2 KURD2 OPFOR  -8.0 100.0     0.0     0.0     0.0  
    }

    test coop_slope-2.10 {far effects are terminated if -q becomes 0} -setup {
        create
    }  -body {
        # Update GRAM's delay, and re-initialize
        rdb eval {
            UPDATE gram_mn
            SET effects_delay = 1.0
            WHERE m='N2' AND n='N1'
        }

        init


        # At time 0, schedule a slope input with far effects.
        jr coop slope 1 0 KURD1 BRIT 100.0 -p 1.0 -q 1.0

        # At time 10, schedule a new slope input without far effects.
        jr coop slope 1 10 KURD1 BRIT 50.0 -p 1.0        

        # Expect direct effect on BRIT, indirect on others, in both 
        # neighborhoods; 1.0 effect in N2 delayed 1 day; and then,
        # 10 minutes later, indirect effects remain near but 
        # are terminated far.
        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DF    DG   Cause E Start Time   End Time     N  F     G     Slope AThresh DThresh Nominal Actual 
----- -- ----- ---- ----- - ------------ ------------ -- ----- ----- ----- ------- ------- ------- ------ 
1.2   N1 KURD1 BRIT D1    I 010000ZJAN70 010010ZJAN70 N1 KURD1 BLUE   80.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010010ZJAN70 n/a          N1 KURD1 BLUE   40.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     D 010000ZJAN70 010010ZJAN70 N1 KURD1 BRIT  100.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     D 010010ZJAN70 n/a          N1 KURD1 BRIT   50.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 010010ZJAN70 N1 KURD1 OPFOR -80.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010010ZJAN70 n/a          N1 KURD1 OPFOR -40.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 020000ZJAN70 020010ZJAN70 N2 KURD2 BLUE   80.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 020010ZJAN70 n/a          N2 KURD2 BLUE    0.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 020000ZJAN70 020010ZJAN70 N2 KURD2 BRIT  100.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 020010ZJAN70 n/a          N2 KURD2 BRIT    0.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 020000ZJAN70 020010ZJAN70 N2 KURD2 OPFOR -80.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 020010ZJAN70 n/a          N2 KURD2 OPFOR   0.0 100.0     0.0     0.0     0.0  
    }
    
    test coop_slope-2.11 {Causes are tagged automatically if -cause is not given} -setup {
        create 
    } -body {
        jr coop slope 1 0 SHIA1 BRIT 10

        rdb eval {SELECT DISTINCT cause FROM gram_effects}
    } -cleanup {
        cleanup
    } -result {D1}

    # coop_slope-3.*: Effect on coop.fg

    test coop_slope-3.1 {coop increases} -setup {
        create
    } -body {
        jr coop slope 1 0 KURD2 BLUE 100.0

        # Advance to noon
        myclock advance 720
        jr advance

        tableDiffCols gram_coop {f g} coop coop0
    } -cleanup {
        cleanup
    } -result {{KURD2 BLUE 25} {KURD2 BRIT 20} {KURD2 OPFOR -20}}

    # test coop_slope-3.2 {sat increases to limit} OBSOLETE

    test coop_slope-3.3 {successive slope records take effect} -setup {
        create
    } -body {
        jr coop slope 1 0   KURD2 BLUE 100.0
        jr coop slope 1 360 KURD2 BLUE   0.0

        # Advance to noon; should get only 25.0, scaled down by 1/2.
        myclock advance 720
        jr advance

        tableDiffCols gram_coop {f g} coop coop0
    } -cleanup {
        cleanup
    } -result {{KURD2 BLUE 12.5} {KURD2 BRIT 10} {KURD2 OPFOR -10}}

    # coop_slope-4.*: Expiration

    test coop_slope-4.2 {slope records expire due to time} -setup {
        create
    } -body {
        jr coop slope 1 0   KURD2 BLUE 100.0
        jr coop slope 1 360 KURD2 BLUE   0.0

        # Advance to noon; records should expire.
        myclock advance 720
        jr advance

        dumpCoopSlopes
    } -cleanup {
        cleanup
    } -result {
    }

    test coop_slope-4.3 {negative slopes don't expire immediately} -setup {
        create
    } -body {
        jr coop slope 1 [myclock now] SHIA1 BRIT -10
        myclock advance 5
        jr advance
        dumpCoopSlopes
    } -cleanup {
        cleanup
    } -result {
Input DN DF    DG   Cause E Start Time   End Time N  F     G     Slope AThresh DThresh Nominal Actual 
----- -- ----- ---- ----- - ------------ -------- -- ----- ----- ----- ------- ------- ------- ------ 
1.1   N1 SHIA1 BRIT D1    I 010000ZJAN70 n/a      N1 SHIA1 BLUE   -8.0 100.0     0.0    -0.0    -0.0  
'     '  '     '    '     D 010000ZJAN70 n/a      N1 SHIA1 BRIT  -10.0 100.0     0.0    -0.0    -0.0  
'     '  '     '    '     I 010000ZJAN70 n/a      N1 SHIA1 OPFOR   8.0 100.0     0.0     0.0     0.0  
    }

    # coop_slope-5.*: Tracking of contributions

    test coop_slope-5.1 {gram_effects tracks total change} -setup {
        create
    } -body {
        jr coop slope 1 0 KURD2 BLUE 100.0

        # Advance to noon
        myclock advance 720
        jr advance

        dumpCoopSlopes
    } -cleanup {
        cleanup
    } -result {
Input DN DF    DG   Cause E Start Time   End Time N  F     G     Slope AThresh DThresh Nominal Actual 
----- -- ----- ---- ----- - ------------ -------- -- ----- ----- ----- ------- ------- ------- ------ 
1.1   N2 KURD2 BLUE D1    D 010000ZJAN70 n/a      N2 KURD2 BLUE  100.0 100.0     0.0    50.0    25.0  
'     '  '     '    '     I 010000ZJAN70 n/a      N2 KURD2 BRIT   80.0 100.0     0.0    40.0    20.0  
'     '  '     '    '     I 010000ZJAN70 n/a      N2 KURD2 OPFOR -80.0 100.0     0.0   -40.0   -20.0  
    }

    test coop_slope-5.2 {change is tracked across sequential effects} -setup {
        create 
    } -body {
        jr coop slope 1    0 KURD2 BLUE 100.0
        jr coop slope 1  360 KURD2 BLUE   0.0
        jr coop slope 1  720 KURD2 BLUE 100.0

        # Advance 18 hours.
        myclock advance 1080
        jr advance

        pprint [rdb query {
            SELECT id,ts,te,slope,nominal,actual FROM gram_effects
            ORDER BY ts
        }]
    } -cleanup {
        cleanup
    } -result {
id ts  te       slope nominal actual 
-- --- -------- ----- ------- ------ 
1  720 99999999 100.0 50.0    25.0   
2  720 99999999 80.0  40.0    20.0   
3  720 99999999 -80.0 -40.0   -20.0  
    }

    # coop_slope-6.*: Cause interactions

    test coop_slope-6.1 {Inputs with the same cause overlap} -setup {
        create
    } -body {
        # Set coop0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_coop SET coop0 = 0.0}
        init


        # Schedule two effects of differing strength but the same cause
        # on the same pgroup.  The total effect over the timestep should
        # be the maximum of the two.
        jr coop slope 1 0 SHIA1 BRIT 10 -cause CIVCAS
        jr coop slope 2 0 SHIA1 BRIT  5 -cause CIVCAS

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  The actual contribution should be 
        # based on the 10.  A1 should get credit for 2/3 of the actual
        # contribution and A2 should get credit for 1/3.
        pprint [jr dump coop slope SHIA1 BRIT]

        # Hand check
        # Ratio of AContribs is 3.33 to 1.67 or 2.0.  Check.
        # Sum of AContribs is 3.33 + 1.67 or 5.0      Check.
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time Slope AThr  DThr  NTotal NContrib ATotal AContrib Input DN DF    DG   E 
------ ------------ -------- ----- ----- ----- ------ -------- ------ -------- ----- -- ----- ---- - 
CIVCAS 010000ZJAN70 n/a       10.0 100.0   0.0   5.00   5.000    3.33   3.333  1.1   N1 SHIA1 BRIT D 
'      '            '          5.0 100.0   0.0   2.50   2.500    1.67   1.667  2.1   N1 SHIA1 BRIT D 
    }

    test coop_slope-6.2 {Inputs with the same cause overlap: multiple time steps} -setup {
        create
    } -body {
        # Set coop0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_coop SET coop0 = 0.0}
        init


        # Schedule two effects of differing strength but the same cause
        # on the same pgroup.  The total effect over the timestep should
        # be the maximum of the two.
        jr coop slope 1 0 SHIA1 BRIT 10 -cause CIVCAS
        jr coop slope 2 0 SHIA1 BRIT  5 -cause CIVCAS

        # Advance time.
        myclock advance 360
        jr advance
        myclock advance 720
        jr advance

        # Dump the results.  The actual contribution should be 
        # based on the 10.  A1 should get credit for ~2/3 of the actual
        # contribution and A2 should get credit for ~1/3.
        pprint [jr dump coop slope SHIA1 BRIT]

        # Hand check
        # Ratio of AContribs in second time step is 1.625 to 0.812, or 2.0    Check
        # Sum of AContribs in second time step is 1.625 + 0.812, or 2.438.    Check
        # Ratio of NTotals over the two time steps is 5.00 to 2.5 or 2.0
        # Ratio of ATotals over the two time steps is 3.29 to 1.65 or 2.0     Check
    } -cleanup {
        cleanup
    } -match glob -result {
Cause  Start Time   End Time Slope AThr  DThr  NTotal NContrib ATotal AContrib Input DN DF    DG   E 
------ ------------ -------- ----- ----- ----- ------ -------- ------ -------- ----- -- ----- ---- - 
CIVCAS 010000ZJAN70 n/a       10.0 100.0   0.0   5.00   2.500    3.29   1.625  1.1   N1 SHIA1 BRIT D 
'      '            '          5.0 100.0   0.0   2.50   1.250    1.65   0.81[23]  2.1   N1 SHIA1 BRIT D 
    }
   
    test coop_slope-6.3 {Inputs with different causes are independent} -setup {
        create
    } -body {
        # Set coop0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_coop SET coop0 = 0.0}
        init


        # Schedule two effects of differing strength but the same cause
        # on the same pgroup.  The total effect over the timestep should
        # be the maximum of the two.
        jr coop slope 1 0 SHIA1 BRIT 10 -cause CIVCAS
        jr coop slope 2 0 SHIA1 BRIT  5 -cause HOSCAP

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  Each should have its own contribution; the
        # actual contribution should be scaled contribution.
        pprint [jr dump coop slope SHIA1 BRIT]

    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time Slope AThr  DThr  NTotal NContrib ATotal AContrib Input DN DF    DG   E 
------ ------------ -------- ----- ----- ----- ------ -------- ------ -------- ----- -- ----- ---- - 
CIVCAS 010000ZJAN70 n/a       10.0 100.0   0.0   5.00   5.000    5.00   5.000  1.1   N1 SHIA1 BRIT D 
HOSCAP '            '          5.0 100.0   0.0   2.50   2.500    2.50   2.500  2.1   N1 SHIA1 BRIT D 
    }
   
    test coop_slope-6.4 {Effects from different inputs with same cause} -setup {
        create
    } -body {
        # Schedule effects on BLUE and BRIT, and look at the indirect effects
        # on OPFOR.
        jr coop slope 1 0 SHIA1 BLUE 10 -cause CIVCAS
        jr coop slope 2 0 SHIA1 BRIT 10 -cause CIVCAS

        # Advance time.
        myclock advance 720
        jr advance

        # Dump the results.  Each should have its own contribution; the
        # actual contribution should be scaled contribution.
        pprint [jr dump coop slope SHIA1 OPFOR]

        # Hand check
        # Ratio of SContribs is -2 to -2 or 1.0
        # Ratio of AContribs is -1 to -1, or 1.0.  Check.
        # Sum of AContribs is   -1 + -1, or -2.0.  Check.
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time Slope AThr  DThr  NTotal NContrib ATotal AContrib Input DN DF    DG   E 
------ ------------ -------- ----- ----- ----- ------ -------- ------ -------- ----- -- ----- ---- - 
CIVCAS 010000ZJAN70 n/a       -8.0 100.0   0.0  -4.00  -4.000   -1.00  -1.000  1.1   N1 SHIA1 BLUE I 
'      '            '         -8.0 100.0   0.0  -4.00  -4.000   -1.00  -1.000  2.1   N1 SHIA1 BRIT I 
    }

    test coop_slope-6.5 {Chained effects in timestep are combined} -setup {
        create
    } -body {
        # Set coop0 to all zeros so that scaling is simple
        rdb eval {UPDATE gram_coop SET coop0 = 0.0}
        init


        # Schedule chained effects
        jr coop slope 1   0 SHIA1 BRIT 10 -cause CIVCAS
        jr coop slope 1 360 SHIA1 BRIT  0 -cause CIVCAS
        jr coop slope 1 720 SHIA1 BRIT 10 -cause CIVCAS

        # Advance time by 18 hours so that we get 6 hours of each of the positive
        # effects.
        myclock advance 1080
        jr advance

        # Dump the results.  Should get 12 hours of 10.0 slope as a single
        # contribution, for a nominal effect of 5.0.
        pprint [jr dump coop slope SHIA1 BRIT]

        # Hand check: the chain shows a nominal total of 5.0, which is 
        # correct since that's the running total for the chain.  Due
        # to carefully done scaling, the scaled and actual effect is the
        # same.
    } -cleanup {
        cleanup
    } -result {
Cause  Start Time   End Time Slope AThr  DThr  NTotal NContrib ATotal AContrib Input DN DF    DG   E 
------ ------------ -------- ----- ----- ----- ------ -------- ------ -------- ----- -- ----- ---- - 
CIVCAS 011200ZJAN70 n/a       10.0 100.0   0.0   5.00   5.000    5.00   5.000  1.3   N1 SHIA1 BRIT D 
    }

    test coop_slope-6.6 {different causes have distinct chains} -setup {
        create
    } -body {
        # If we create two inputs for the same n,f,g with different
        # causes, we get different chains
        jr coop slope 1  5 SHIA1 BRIT 10.0 -cause PATROL
        jr coop slope 1 10 SHIA1 BRIT 10.0 -cause GUARD

        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DF    DG   Cause  E Start Time   End Time N  F     G     Slope AThresh DThresh Nominal Actual 
----- -- ----- ---- ------ - ------------ -------- -- ----- ----- ----- ------- ------- ------- ------ 
1.1   N1 SHIA1 BRIT PATROL I 010005ZJAN70 n/a      N1 SHIA1 BLUE    8.0 100.0     0.0     0.0     0.0  
'     '  '     '    '      D 010005ZJAN70 n/a      N1 SHIA1 BRIT   10.0 100.0     0.0     0.0     0.0  
'     '  '     '    '      I 010005ZJAN70 n/a      N1 SHIA1 OPFOR  -8.0 100.0     0.0     0.0     0.0  
1.2   '  '     '    GUARD  I 010010ZJAN70 n/a      N1 SHIA1 BLUE    8.0 100.0     0.0     0.0     0.0  
'     '  '     '    '      D 010010ZJAN70 n/a      N1 SHIA1 BRIT   10.0 100.0     0.0     0.0     0.0  
'     '  '     '    '      I 010010ZJAN70 n/a      N1 SHIA1 OPFOR  -8.0 100.0     0.0     0.0     0.0  
    }
    
    test coop_slope-6.7 {different causes have distinct chains: update} -setup {
        create
    } -body {
        # If we update for one cause, it doesn't affect the other
        jr coop slope 1  5 SHIA1 BRIT 10.0 -cause PATROL
        jr coop slope 1 10 SHIA1 BRIT 10.0 -cause GUARD
        jr coop slope 1 15 SHIA1 BRIT  5.0 -cause PATROL

        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DF    DG   Cause  E Start Time   End Time     N  F     G     Slope AThresh DThresh Nominal Actual 
----- -- ----- ---- ------ - ------------ ------------ -- ----- ----- ----- ------- ------- ------- ------ 
1.2   N1 SHIA1 BRIT GUARD  I 010010ZJAN70 n/a          N1 SHIA1 BLUE    8.0 100.0     0.0     0.0     0.0  
'     '  '     '    '      D 010010ZJAN70 n/a          N1 SHIA1 BRIT   10.0 100.0     0.0     0.0     0.0  
'     '  '     '    '      I 010010ZJAN70 n/a          N1 SHIA1 OPFOR  -8.0 100.0     0.0     0.0     0.0  
1.3   '  '     '    PATROL I 010005ZJAN70 010015ZJAN70 N1 SHIA1 BLUE    8.0 100.0     0.0     0.0     0.0  
'     '  '     '    '      I 010015ZJAN70 n/a          N1 SHIA1 BLUE    4.0 100.0     0.0     0.0     0.0  
'     '  '     '    '      D 010005ZJAN70 010015ZJAN70 N1 SHIA1 BRIT   10.0 100.0     0.0     0.0     0.0  
'     '  '     '    '      D 010015ZJAN70 n/a          N1 SHIA1 BRIT    5.0 100.0     0.0     0.0     0.0  
'     '  '     '    '      I 010005ZJAN70 010015ZJAN70 N1 SHIA1 OPFOR  -8.0 100.0     0.0     0.0     0.0  
'     '  '     '    '      I 010015ZJAN70 n/a          N1 SHIA1 OPFOR  -4.0 100.0     0.0     0.0     0.0  
    }
    
    test coop_slope-6.8 {different causes have distinct chains: end} -setup {
        create
    } -body {
        # If we update for one cause, it doesn't affect the other
        jr coop slope 1  5 SHIA1 BRIT 10.0 -cause PATROL
        jr coop slope 1 10 SHIA1 BRIT 10.0 -cause GUARD
        jr coop slope 1 15 SHIA1 BRIT  0.0 -cause PATROL

        dumpCoopSlopes
    } -cleanup {
        cleanup 
    } -result {
Input DN DF    DG   Cause  E Start Time   End Time     N  F     G     Slope AThresh DThresh Nominal Actual 
----- -- ----- ---- ------ - ------------ ------------ -- ----- ----- ----- ------- ------- ------- ------ 
1.2   N1 SHIA1 BRIT GUARD  I 010010ZJAN70 n/a          N1 SHIA1 BLUE    8.0 100.0     0.0     0.0     0.0  
'     '  '     '    '      D 010010ZJAN70 n/a          N1 SHIA1 BRIT   10.0 100.0     0.0     0.0     0.0  
'     '  '     '    '      I 010010ZJAN70 n/a          N1 SHIA1 OPFOR  -8.0 100.0     0.0     0.0     0.0  
1.3   '  '     '    PATROL I 010005ZJAN70 010015ZJAN70 N1 SHIA1 BLUE    8.0 100.0     0.0     0.0     0.0  
'     '  '     '    '      I 010015ZJAN70 n/a          N1 SHIA1 BLUE    0.0 100.0     0.0     0.0     0.0  
'     '  '     '    '      D 010005ZJAN70 010015ZJAN70 N1 SHIA1 BRIT   10.0 100.0     0.0     0.0     0.0  
'     '  '     '    '      D 010015ZJAN70 n/a          N1 SHIA1 BRIT    0.0 100.0     0.0     0.0     0.0  
'     '  '     '    '      I 010005ZJAN70 010015ZJAN70 N1 SHIA1 OPFOR  -8.0 100.0     0.0     0.0     0.0  
'     '  '     '    '      I 010015ZJAN70 n/a          N1 SHIA1 OPFOR   0.0 100.0     0.0     0.0     0.0  
    }

    # coop_slope-7.*: Scheduling returns input

    test coop_slope-7.1 {Return input, case 1: one nbhood, 0 limit} -setup {
        create 
    } -body {
        set a [jr coop slope 1 0 SHIA1 BRIT 0]
        set b [jr coop slope 1 0 SHIA1 BLUE 0]
        set c [rdb eval {SELECT DISTINCT input FROM gram_effects}]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 2 {}}

    test coop_slope-7.2 {Return input, case 2: one nbhood, terminate} -setup {
        create 
    } -body {
        set a [jr coop slope 1 0 SHIA1 BRIT 10]
        set b [jr coop slope 1 0 SHIA1 BLUE 10]
        set c [jr coop slope 1 0 SHIA1 BRIT 0]
        set d [jr coop slope 1 0 SHIA1 BLUE 0]
        set e [rdb eval {SELECT DISTINCT input FROM gram_effects}]

        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {1 2 3 4 {3 4}}


    test coop_slope-7.5 {Return input, case 5: nominal case} -setup {
        create
    } -body {
        set a [jr coop slope 1 0 SHIA1 BRIT 10]
        set b [jr coop slope 1 0 SHIA1 BLUE 10]
        set c [rdb eval {SELECT DISTINCT input FROM gram_effects}]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 2 {1 2}}


    # coop_slope-8.*: Thresholds
    
    test coop_slope-8.1 {Positive, coop0 >= athresh} -setup {
        create 
    } -body {
        set a [jr coop.fg SHIA1 BLUE]
        
        # Note: $a == 50.0, so it's greater than -athresh
        jr coop slope 1 0 SHIA1 BLUE 10 -athresh 30.0
        
        myclock advance 720
        jr advance
        
        set b [jr coop.fg SHIA1 BLUE]
        
        expr {$a == $b}
    } -cleanup {
        cleanup
    } -result {1}

    test coop_slope-8.2 {Positive, coop0+delta < athresh} -setup {
        create 
    } -body {
        set a [jr coop.fg SHIA1 BLUE]
        
        # Note: $a == 50.0, so it's well less than -athresh
        jr coop slope 1 0 SHIA1 BLUE 10 -athresh 90.0
        
        myclock advance 720
        jr advance
        
        set b [jr coop.fg SHIA1 BLUE]
        
        list $a $b
    } -cleanup {
        cleanup
    } -result {50.0 52.5}
    
    test coop_slope-8.3 {Positive, coop0+delta > athresh} -setup {
        create 
    } -body {
        set a [format %.1f [jr coop.fg SHIA1 BLUE]]
        
        # Note: $a == 50.0, so it's justless than -athresh.
        jr coop slope 1 0 SHIA1 BLUE 10 -athresh 51.0

        # Step twice; we should get an increase on the first, but
        # not on the second.
        myclock advance 720
        jr advance
        set b [format %.1f [jr coop.fg SHIA1 BLUE]]

        myclock advance 1440
        jr advance
        
        set c [format %.1f [jr coop.fg SHIA1 BLUE]]
        
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {50.0 52.5 52.5}

    test coop_slope-8.4 {Negative, coop0 <= dthresh} -setup {
        create 
    } -body {
        set a [jr coop.fg SHIA1 BLUE]
        
        # Note: $a == 50.0, so it's less than -dthresh
        jr coop slope 1 0 SHIA1 BLUE -10 -dthresh 60.0
        
        myclock advance 720
        jr advance
        
        set b [jr coop.fg SHIA1 BLUE]
        
        expr {$a == $b}
    } -cleanup {
        cleanup
    } -result {1}
    
    test coop_slope-8.5 {Negative, coop0+delta > dthresh} -setup {
        create 
    } -body {
        set a [jr coop.fg SHIA1 BLUE]
        
        # Note: $a == 50.0, so it's well greater than -dthresh
        jr coop slope 1 0 SHIA1 BLUE -10 -dthresh 10.0
        
        myclock advance 720
        jr advance
        
        set b [jr coop.fg SHIA1 BLUE]
        
        list $a $b
    } -cleanup {
        cleanup
    } -result {50.0 47.5}
    
    test coop_slope-8.6 {Negative, coop0+delta < dthresh} -setup {
        create 
    } -body {
        set a [format %.1f [jr coop.fg SHIA1 BLUE]]
        
        # Note: $a == 50.0, so it's just greater than -dthresh.
        jr coop slope 1 0 SHIA1 BLUE -10 -dthresh 49.0

        # Step twice; we should get a decrease on the first, but
        # not on the second.
        myclock advance 720
        jr advance
        set b [format %.1f [jr coop.fg SHIA1 BLUE]]

        myclock advance 1440
        jr advance
        
        set c [format %.1f [jr coop.fg SHIA1 BLUE]]
        
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {50.0 47.5 47.5}


    # Dead groups

    test coop_slope-9.1 {Dead groups get no effects.} -setup {
        create
        kill SHIA2
    } -body {
        jr coop slope 1 0 SHIA1 BLUE 10 -p 1.0 -q 1.0
        dumpCoopSlopes
    } -cleanup {
        cleanup
    } -result {
Input DN DF    DG   Cause E Start Time   End Time N  F     G     Slope AThresh DThresh Nominal Actual 
----- -- ----- ---- ----- - ------------ -------- -- ----- ----- ----- ------- ------- ------- ------ 
1.1   N1 SHIA1 BLUE D1    D 010000ZJAN70 n/a      N1 SHIA1 BLUE   10.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 n/a      N1 SHIA1 BRIT    8.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 n/a      N1 SHIA1 OPFOR  -8.0 100.0     0.0     0.0     0.0  
    }


    test coop_slope-9.2 {Indirect effects with -allowdead.} -setup {
        create
        kill SHIA1
    } -body {
        jr coop slope 1 0 SHIA1 BLUE 10 -p 1.0 -q 1.0 -allowdead
        dumpCoopSlopes
    } -cleanup {
        cleanup
    } -result {
Input DN DF    DG   Cause E Start Time   End Time N  F     G     Slope AThresh DThresh Nominal Actual 
----- -- ----- ---- ----- - ------------ -------- -- ----- ----- ----- ------- ------- ------- ------ 
1.1   N1 SHIA1 BLUE D1    I 010000ZJAN70 n/a      N2 SHIA2 BLUE   10.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 n/a      N2 SHIA2 BRIT    8.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 n/a      N2 SHIA2 OPFOR  -8.0 100.0     0.0     0.0     0.0  
    }



    #-------------------------------------------------------------------
    # cancel

    test cancel-1.1 {cancel situations by driver} -setup {
        create 
    } -body {
        # Create two pairs of inputs; verify that only one pair
        # gets deleted.
        jr sat  level 1 0 SHIA1 SFT  10 1 
        jr sat  slope 1 0 SHIA1 SFT  10
        jr coop level 1 0 SHIA1 BLUE 10 1
        jr coop slope 1 0 SHIA1 BLUE 10

        jr sat  level 2 0 SUNN1 SFT  20 2 
        jr sat  slope 2 0 SUNN1 SFT  20
        jr coop level 2 0 SUNN1 BLUE 20 2
        jr coop slope 2 0 SUNN1 BLUE 10

        jr cancel 1

        pprint "[jr dump sat levels]\n[jr dump coop levels]\n[jr dump sat slopes]\n[jr dump coop slopes]"
    } -cleanup {
        cleanup
    } -result {
Input DN DG    Cause E Start Time   End Time     Nbhd Grp   Con Days  Limit AThresh DThresh Nominal Actual 
----- -- ----- ----- - ------------ ------------ ---- ----- --- ----- ----- ------- ------- ------- ------ 
2.1   N1 SUNN1 D2    D 010000ZJAN70 030000ZJAN70 N1   SUNN1 SFT 2.000  20.0 100.0   -100.0    0.00    0.00 
'     '  '     '     I 010000ZJAN70 030000ZJAN70 N1   KURD1 SFT 2.000 -12.0 100.0   -100.0    0.00    0.00 

Input DN DF    DG   Cause E Start Time   End Time     N  F     G     Days  Limit AThresh DThresh Nominal Actual 
----- -- ----- ---- ----- - ------------ ------------ -- ----- ----- ----- ----- ------- ------- ------- ------ 
2.3   N1 SUNN1 BLUE D2    D 010000ZJAN70 030000ZJAN70 N1 SUNN1 BLUE  2.000  20.0 100.0     0.0     0.00    0.00 
'     '  '     '    '     I 010000ZJAN70 030000ZJAN70 N1 SUNN1 BRIT  2.000  16.0 100.0     0.0     0.00    0.00 
'     '  '     '    '     I 010000ZJAN70 030000ZJAN70 N1 SUNN1 OPFOR 2.000 -16.0 100.0     0.0     0.00    0.00 

Input DN DG    Cause E Start Time   End Time Nbhd Grp   Con Slope AThresh DThresh Nominal Actual 
----- -- ----- ----- - ------------ -------- ---- ----- --- ----- ------- ------- ------- ------ 
2.2   N1 SUNN1 D2    D 010000ZJAN70 n/a      N1   SUNN1 SFT  20.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a      N1   KURD1 SFT -12.0 100.0   -100.0    0.0     0.0  

Input DN DF    DG   Cause E Start Time   End Time N  F     G     Slope AThresh DThresh Nominal Actual 
----- -- ----- ---- ----- - ------------ -------- -- ----- ----- ----- ------- ------- ------- ------ 
2.4   N1 SUNN1 BLUE D2    D 010000ZJAN70 n/a      N1 SUNN1 BLUE   10.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 n/a      N1 SUNN1 BRIT    8.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 n/a      N1 SUNN1 OPFOR  -8.0 100.0     0.0     0.0     0.0  
    }

    test cancel-2.1 {cancel deletes gram_contribs} -setup {
        create 
    } -body {
        jr sat  level 1 0 SHIA1 SFT  10 1 
        jr sat  slope 1 0 SHIA1 SFT  10
        jr coop level 1 0 SHIA1 BLUE 10 1

        myclock advance 1440
        jr advance
        jr cancel 1
        
        rdb eval {SELECT * FROM gram_contribs}
    } -cleanup {
        cleanup
    } -result {}

    test cancel-3.1 {cancel removes satisfaction contributions} -setup {
        create 
    } -body {
        # FIRST, set satisfaction to 0.0, for easy scaling and detection.
        rdb eval {
            UPDATE gram_sat
            SET sat = 0.0
        }

        jr sat level 1 0 SHIA1 SFT  10 1 

        myclock advance 1440
        jr advance

        set a [rdb onecolumn {
            SELECT sat FROM gram_sat
            WHERE g='SHIA1' AND c='SFT'
        }]

        jr cancel 1
        
        set b [rdb onecolumn {
            SELECT sat FROM gram_sat
            WHERE g='SHIA1' AND c='SFT'
        }]

        list $a $b
    } -cleanup {
        cleanup
    } -result {10.0 0.0}

    test cancel-3.2 {cancel removes cooperation contributions} -setup {
        create
    } -body {
        # FIRST, set cooperation to 0.0, for easy scaling and detection.
        rdb eval {
            UPDATE gram_coop
            SET coop = 0.0
        }

        jr coop level 1 0 SHIA1 BLUE  10 1 

        myclock advance 1440
        jr advance

        set a [rdb onecolumn {
            SELECT coop FROM gram_coop
            WHERE f='SHIA1' AND g='BLUE'
        }]

        jr cancel 1
        
        set b [rdb onecolumn {
            SELECT coop FROM gram_coop
            WHERE f='SHIA1' AND g='BLUE'
        }]

        list $a $b
    } -cleanup {
        cleanup
    } -result {10.0 0.0}


    test cancel-4.1 {cancel updates gram_deltas} -setup {
        create
    } -body {
        # FIRST, advance time by several steps.  The satisfaction trend
        # will update the values.
        jr sat slope 0 0 SHIA1 AUT 20
        myclock advance 1440
        jr advance

        myclock advance 2880
        jr advance

        # NEXT, get the number of curves where the current value
        # isn't the same as the initial value.
        set a [rdb eval {
            SELECT COUNT(curve_id) 
            FROM gram_deltas JOIN gram_curves USING (curve_id)
            WHERE gram_deltas.delta != 0.0
            AND time=2880
        }] 

        # NEXT, cancel driver 0 (the long-term trend)
        jr cancel 0

        # NEXT, get the updated number; should be 0. 
        set b [rdb eval {
            SELECT COUNT(curve_id) 
            FROM gram_deltas JOIN gram_curves USING (curve_id)
            WHERE gram_deltas.delta != 0.0
            AND time=2880
        }] 

        list $a $b
    } -cleanup {
        cleanup
    } -result {3 0}

    test cancel-5.1 {cancel leaves driver in place} -setup {
        create
    } -body {
        # FIRST, cancel driver 0 (the long-term trend)
        jr cancel 0

        # NEXT, get the set of drivers.
        rdb eval {
            SELECT * FROM gram_driver WHERE driver=0
        }
    } -cleanup {
        cleanup
    } -result {0 unknown CANCELLED {} 0}

    test cancel-5.2 {cancel -delete deletes driver} -setup {
        create
    } -body {
        # FIRST, cancel driver 0 (the long-term trend), deleting it
        # altogether
        jr cancel 0 -delete

        # NEXT, get the set of drivers.
        rdb eval {
            SELECT * FROM gram_driver WHERE driver=0
        }
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # terminate
    #
    # 1.*:  Error checking
    # 2.*:  Basic operations

    test terminate-1.1 {Invalid driver} -setup {
        create
    } -body {
        jr terminate dummy 0
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Cannot terminate, unknown Driver ID: "dummy"}
    
    test terminate-1.2 {Invalid ts} -setup {
        create
    } -body {
        jr terminate 1 dummy
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "dummy", expected integer}

    test terminate-1.3 {ts prior to now} -setup {
        create
    } -body {
        jr terminate 1 -1
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Start time is in the past: "-1"}

    # 2.*: Basic Operations

    test terminate-2.1 {terminates sat slopes} -setup {
        create 
    } -body {
        jr sat slope 1 0 SHIA1 QOL 10 -p 1.0 -q 1.0
        jr terminate 1 60

        dumpSlopes
    } -cleanup {
        cleanup
    } -result {
Input DN DG    Cause E Start Time   End Time     Nbhd Grp   Con Slope AThresh DThresh Nominal Actual 
----- -- ----- ----- - ------------ ------------ ---- ----- --- ----- ------- ------- ------- ------ 
1.2   N1 SHIA1 D1    D 010000ZJAN70 010100ZJAN70 N1   SHIA1 QOL  10.0 100.0   -100.0    0.0     0.0  
'     '  '     '     D 010100ZJAN70 n/a          N1   SHIA1 QOL   0.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 010100ZJAN70 N1   KURD1 QOL   6.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010100ZJAN70 n/a          N1   KURD1 QOL   0.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 010100ZJAN70 N1   SUNN1 QOL  -3.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010100ZJAN70 n/a          N1   SUNN1 QOL   0.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 010100ZJAN70 N2   KURD2 QOL   6.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010100ZJAN70 n/a          N2   KURD2 QOL   0.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 010100ZJAN70 N2   SHIA2 QOL  10.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010100ZJAN70 n/a          N2   SHIA2 QOL   0.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 010100ZJAN70 N2   SUNN2 QOL  -3.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010100ZJAN70 n/a          N2   SUNN2 QOL   0.0 100.0   -100.0    0.0     0.0  
    }

    
    test terminate-2.2 {terminates coop slopes} -setup {
        create
    } -body {
        jr coop slope 1 0 SHIA1 BLUE 10 -p 1.0 -q 1.0
        jr terminate 1 60

        dumpCoopSlopes
    } -cleanup {
        cleanup
    } -result {
Input DN DF    DG   Cause E Start Time   End Time     N  F     G     Slope AThresh DThresh Nominal Actual 
----- -- ----- ---- ----- - ------------ ------------ -- ----- ----- ----- ------- ------- ------- ------ 
1.2   N1 SHIA1 BLUE D1    D 010000ZJAN70 010100ZJAN70 N1 SHIA1 BLUE   10.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     D 010100ZJAN70 n/a          N1 SHIA1 BLUE    0.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 010100ZJAN70 N1 SHIA1 BRIT    8.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010100ZJAN70 n/a          N1 SHIA1 BRIT    0.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 010100ZJAN70 N1 SHIA1 OPFOR  -8.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010100ZJAN70 n/a          N1 SHIA1 OPFOR   0.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 010100ZJAN70 N2 SHIA2 BLUE   10.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010100ZJAN70 n/a          N2 SHIA2 BLUE    0.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 010100ZJAN70 N2 SHIA2 BRIT    8.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010100ZJAN70 n/a          N2 SHIA2 BRIT    0.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010000ZJAN70 010100ZJAN70 N2 SHIA2 OPFOR  -8.0 100.0     0.0     0.0     0.0  
'     '  '     '    '     I 010100ZJAN70 n/a          N2 SHIA2 OPFOR   0.0 100.0     0.0     0.0     0.0  
    }

    test terminate-2.3 {terminates only for the given driver} -setup {
        create 
    } -body {
        jr sat slope 1 0  SHIA1 QOL 10
        jr sat slope 2 0  SUNN1 SFT 10
        
        jr terminate 1 60

        dumpSlopes
    } -cleanup {
        cleanup
    } -result {
Input DN DG    Cause E Start Time   End Time     Nbhd Grp   Con Slope AThresh DThresh Nominal Actual 
----- -- ----- ----- - ------------ ------------ ---- ----- --- ----- ------- ------- ------- ------ 
1.2   N1 SHIA1 D1    D 010000ZJAN70 010100ZJAN70 N1   SHIA1 QOL  10.0 100.0   -100.0    0.0     0.0  
'     '  '     '     D 010100ZJAN70 n/a          N1   SHIA1 QOL   0.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 010100ZJAN70 N1   KURD1 QOL   6.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010100ZJAN70 n/a          N1   KURD1 QOL   0.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 010100ZJAN70 N1   SUNN1 QOL  -3.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010100ZJAN70 n/a          N1   SUNN1 QOL   0.0 100.0   -100.0    0.0     0.0  
2.1   '  SUNN1 D2    D 010000ZJAN70 n/a          N1   SUNN1 SFT  10.0 100.0   -100.0    0.0     0.0  
'     '  '     '     I 010000ZJAN70 n/a          N1   KURD1 SFT  -6.0 100.0   -100.0    0.0     0.0  
    }

    test terminate-2.4 {levels are unaffected} -setup {
        create
    } -body {
        jr sat level 1 0  SHIA1 QOL 10 5
        jr terminate 1 60

        dumpLevels
    } -cleanup {
        cleanup
    } -result {
d ts te   n  g     c   llimit 
- -- ---- -- ----- --- ------ 
I 0  7200 N1 KURD1 QOL 6.00   
D 0  7200 N1 SHIA1 QOL 10.00  
I 0  7200 N1 SUNN1 QOL -3.00  
    }


    #-------------------------------------------------------------------
    # civgroup get

    test civgroup_get-1.1 {unknown group} -setup {
        create
    } -body {
        jr civgroup get NONESUCH
    } -cleanup {
        cleanup
    } -result {}


    test civgroup_get-1.2 {unknown field} -setup {
        create
    } -body {
        jr civgroup get SHIA1 NONESUCH
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {unknown group field, "NONESUCH"}

    test civgroup_get-2.1 {get group dict} -setup {
        create
    } -body {
        jr civgroup get SHIA1
    } -cleanup {
        cleanup
    } -result {sat0 0.0 sat 0.0 alive 1 parent {} n N1 total_saliency 4.0 ancestor SHIA1 population 10000 g SHIA1 g_id 3}

    test civgroup_get-2.2 {get group field} -setup {
        create
    } -body {
        jr civgroup get SHIA1 population
    } -cleanup {
        cleanup
    } -result {10000}

    #-------------------------------------------------------------------
    # civgroup names

    test civgroup_names-1.1 {get all names} -setup {
        create
    } -body {
        jr civgroup names
    } -cleanup {
        cleanup
    } -result {KURD1 KURD2 SHIA1 SHIA2 SUNN1 SUNN2}

    test civgroup_names-1.2 {get names in N2} -setup {
        create
    } -body {
        jr civgroup names N2
    } -cleanup {
        cleanup
    } -result {KURD2 SHIA2 SUNN2}


    #-------------------------------------------------------------------
    # civgroup alive

    test civgroup_alive-1.1 {get all names} -setup {
        create
        kill SHIA1 SHIA2
    } -body {
        jr civgroup alive
    } -cleanup {
        cleanup
    } -result {KURD1 KURD2 SUNN1 SUNN2}

    test civgroup_alive-1.2 {get names in N2} -setup {
        create
        kill SHIA1 SHIA2
    } -body {
        jr civgroup alive N2
    } -cleanup {
        cleanup
    } -result {KURD2 SUNN2}

    #-------------------------------------------------------------------
    # civgroup dead

    test civgroup_dead-1.1 {get all names} -setup {
        create
        kill SHIA1 SHIA2
    } -body {
        jr civgroup dead
    } -cleanup {
        cleanup
    } -result {SHIA1 SHIA2}

    test civgroup_dead-1.2 {get names in N2} -setup {
        create
        kill SHIA1 SHIA2
    } -body {
        jr civgroup dead N2
    } -cleanup {
        cleanup
    } -result {SHIA2}

    #-------------------------------------------------------------------
    # civgroup move

    test civgroup_move-1.1 {invalid group} -setup {
        create
    } -body {
        jr civgroup move NONESUCH N2
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "NONESUCH", should be one of: KURD1, KURD2, SHIA1, SHIA2, SUNN1, SUNN2}

    
    test civgroup_move-1.2 {invalid neighborhood} -setup {
        create
    } -body {
        jr civgroup move SHIA1 NONESUCH
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "NONESUCH", should be one of: N1, N2}


    test civgroup_move-2.1 {group's neighborhood is changed} -setup {
        create
    } -body {
        jr civgroup move SHIA1 N2
        jr civgroup get SHIA1 n
    } -cleanup {
        cleanup
    } -result {N2}


    test civgroup_move-2.2 {All pending effects are terminated} -setup {
        create
    } -body {
        jr sat level  1 0 SHIA1 AUT 5 0.1 -s 0
        jr sat slope  1 0 SHIA1 AUT 5 -s 0
        jr coop level 1 0 SHIA1 BLUE 5 0.1 -s 0
        jr coop slope 1 0 SHIA1 BLUE 5 -s 0

        set a [rdb onecolumn {SELECT count(id) FROM gram_effects}]
        jr civgroup move SHIA1 N2
        set b [rdb onecolumn {SELECT count(id) FROM gram_effects}]
        
        list $a $b
    } -cleanup {
        cleanup
    } -result {4 0}


    test civgroup_move-2.3 {Proximity is recomputed for g} -setup {
        create
    } -body {
        jr civgroup move SHIA1 N2

        
        pprint [rdb query {
            SELECT * FROM gram_fg
            WHERE f='SHIA1' OR g='SHIA1'
            ORDER BY prox,f,g
        }]

        # SHIA1 should have prox -1 with itself, 0 with all
        # *2 groups, and 2 with all *1 groups.
    } -cleanup {
        cleanup
    } -result {
fg_id f     g     rel  prox delay 
----- ----- ----- ---- ---- ----- 
15    SHIA1 SHIA1 1.0  -1   0     
9     KURD2 SHIA1 0.6  0    0     
14    SHIA1 KURD2 0.6  0    0     
16    SHIA1 SHIA2 1.0  0    0     
18    SHIA1 SUNN2 0.0  0    0     
21    SHIA2 SHIA1 1.0  0    0     
33    SUNN2 SHIA1 -0.3 0    0     
3     KURD1 SHIA1 0.6  2    0     
13    SHIA1 KURD1 0.6  2    0     
17    SHIA1 SUNN1 0.0  2    0     
27    SUNN1 SHIA1 -0.3 2    0     
    }


    test civgroup_move-2.4 {Other proximity is retained} -setup {
        create
    } -body {
        jr civgroup move SHIA1 N2

        pprint [rdb query {
            SELECT * FROM gram_fg
            WHERE f != 'SHIA1' AND g != 'SHIA1'
            ORDER BY prox,f,g
        }]

        # All groups should have prox -1 with themselves, 0 with
        # groups ending in the same digit, and 2 with groups
        # ending in the opposite digit.
    } -cleanup {
        cleanup
    } -result {
fg_id f     g     rel  prox delay 
----- ----- ----- ---- ---- ----- 
1     KURD1 KURD1 1.0  -1   0     
8     KURD2 KURD2 1.0  -1   0     
22    SHIA2 SHIA2 1.0  -1   0     
29    SUNN1 SUNN1 1.0  -1   0     
36    SUNN2 SUNN2 1.0  -1   0     
5     KURD1 SUNN1 -0.6 0    0     
10    KURD2 SHIA2 0.6  0    0     
12    KURD2 SUNN2 -0.6 0    0     
20    SHIA2 KURD2 0.6  0    0     
24    SHIA2 SUNN2 0.0  0    0     
25    SUNN1 KURD1 -0.6 0    0     
32    SUNN2 KURD2 -0.6 0    0     
34    SUNN2 SHIA2 -0.3 0    0     
2     KURD1 KURD2 1.0  2    0     
4     KURD1 SHIA2 0.6  2    0     
6     KURD1 SUNN2 -0.6 2    0     
7     KURD2 KURD1 1.0  2    0     
11    KURD2 SUNN1 -0.6 2    0     
19    SHIA2 KURD1 0.6  2    0     
23    SHIA2 SUNN1 0.0  2    0     
26    SUNN1 KURD2 -0.6 2    0     
28    SUNN1 SHIA2 -0.3 2    0     
30    SUNN1 SUNN2 1.0  2    0     
31    SUNN2 KURD1 -0.6 2    0     
35    SUNN2 SUNN1 1.0  2    0     
    }

    #-------------------------------------------------------------------
    # civgroup split

    test civgroup_split-1.1 {invalid parent} -setup {
        create
    } -body {
        jr civgroup split NONESUCH SHIA3 N1 1000
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "NONESUCH", should be one of: KURD1, KURD2, SHIA1, SHIA2, SUNN1, SUNN2}


    test civgroup_split-1.2 {invalid g} -setup {
        create
    } -body {
        jr civgroup split SHIA1 SHIA1 N1 1000
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {group already exists: "SHIA1"}
    

    test civgroup_split-1.3 {invalid n} -setup {
        create
    } -body {
        jr civgroup split SHIA1 SHIA3 NONESUCH 1000
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "NONESUCH", should be one of: N1, N2}


    test civgroup_split-1.4 {non-numeric population} -setup {
        create
    } -body {
        jr civgroup split SHIA1 SHIA3 N2 NONESUCH
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "NONESUCH", expected integer}


    test civgroup_split-1.5 {population too big} -setup {
        create
    } -body {
        jr civgroup split SHIA1 SHIA3 N2 10001
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {parent group has insufficient population (10000 < 10001)}


    test civgroup_split-2.1 {gram_g data} -setup {
        create
    } -body {
        jr civgroup split SHIA1 SHIA3 N2 1000
        pprint [rdb query {
            SELECT * FROM gram_g 
            WHERE g='SHIA1' OR g='SHIA3'
            ORDER BY g
        }]
    } -cleanup {
        cleanup
    } -result {
g_id g     n  population alive parent ancestor total_saliency sat sat0 
---- ----- -- ---------- ----- ------ -------- -------------- --- ---- 
3    SHIA1 N1 9000       1            SHIA1    4.0            0.0 0.0  
7    SHIA3 N2 1000       1     SHIA1  SHIA1    4.0            0.0 0.0  
    }


    test civgroup_split-2.2 {gram_sat data} -setup {
        create
        jr sat set 1 SHIA1 AUT 1.0
        jr sat set 1 SHIA1 SFT 2.0
        jr sat set 1 SHIA1 CUL 3.0
        jr sat set 1 SHIA1 QOL 4.0
    } -body {
        jr civgroup split SHIA1 SHIA3 N2 1000
        pprint [rdb query {
            SELECT * FROM gram_sat 
            WHERE g='SHIA1' OR g='SHIA3'
            ORDER BY sat,g
        }]
    } -cleanup {
        cleanup
    } -result {
gc_id g_id n  g     alive c   saliency curve_id sat0  sat delta slope 
----- ---- -- ----- ----- --- -------- -------- ----- --- ----- ----- 
9     3    N1 SHIA1 1     AUT 1.0      9        40.0  1.0 0.0   0.0   
25    7    N2 SHIA3 1     AUT 1.0      43       40.0  1.0 0.0   0.0   
12    3    N1 SHIA1 1     SFT 1.0      12       40.0  2.0 0.0   0.0   
28    7    N2 SHIA3 1     SFT 1.0      46       40.0  2.0 0.0   0.0   
10    3    N1 SHIA1 1     CUL 1.0      10       -40.0 3.0 0.0   0.0   
26    7    N2 SHIA3 1     CUL 1.0      44       -40.0 3.0 0.0   0.0   
11    3    N1 SHIA1 1     QOL 1.0      11       -40.0 4.0 0.0   0.0   
27    7    N2 SHIA3 1     QOL 1.0      45       -40.0 4.0 0.0   0.0   
    }

    test civgroup_split-2.3 {gram_coop data} -setup {
        create
        jr coop set 1 SHIA1 BLUE  1.0
        jr coop set 1 SHIA1 BRIT  2.0
        jr coop set 1 SHIA1 OPFOR 3.0
    } -body {
        jr civgroup split SHIA1 SHIA3 N2 1000
        pprint [rdb query {
            SELECT * FROM gram_coop 
            WHERE f='SHIA1' OR f='SHIA3'
            ORDER BY coop,f,g
        }]
    } -cleanup {
        cleanup
    } -result {
fg_id curve_id f     n  alive g     coop0 coop delta slope 
----- -------- ----- -- ----- ----- ----- ---- ----- ----- 
7     31       SHIA1 N1 1     BLUE  50.0  1.0  0.0   0.0   
19    47       SHIA3 N2 1     BLUE  50.0  1.0  0.0   0.0   
8     32       SHIA1 N1 1     BRIT  50.0  2.0  0.0   0.0   
20    48       SHIA3 N2 1     BRIT  50.0  2.0  0.0   0.0   
9     33       SHIA1 N1 1     OPFOR 50.0  3.0  0.0   0.0   
21    49       SHIA3 N2 1     OPFOR 50.0  3.0  0.0   0.0   
    }

    test civgroup_split-2.4 {rel is copied} -setup {
        create
    } -body {

        # FIRST, save SHIA1's relationships.
        tableSave gram_fg

        # NEXT, split out SHIA3.
        jr civgroup split SHIA1 SHIA3 N2 1000

        # NEXT, delete SHIA1's relationships and rename SHIA3 to
        # SHIA1.

        rdb eval {
            DELETE FROM gram_fg WHERE f='SHIA1' OR g='SHIA1';
            UPDATE gram_fg SET f='SHIA1' WHERE f='SHIA3';
            UPDATE gram_fg SET g='SHIA1' WHERE g='SHIA3';
        }

        # NEXT, compare the relationships.
        tableDiff gram_fg fg_id {f g} rel
    } -cleanup {
        cleanup
    } -result {}


    test civgroup_split-2.5 {Proximity is computed for g} -setup {
        create
    } -body {
        jr civgroup split SHIA1 SHIA3 N2 1000

        
        pprint [rdb query {
            SELECT * FROM gram_fg
            WHERE f='SHIA3' OR g='SHIA3'
            ORDER BY prox,f,g
        }]

        # SHIA3 should have prox -1 with itself, 0 with all
        # *2 groups, and 2 with all *1 groups.
    } -cleanup {
        cleanup
    } -result {
fg_id f     g     rel  prox delay 
----- ----- ----- ---- ---- ----- 
45    SHIA3 SHIA3 1.0  -1   0     
38    KURD2 SHIA3 0.6  0    0     
40    SHIA2 SHIA3 1.0  0    0     
42    SHIA3 KURD2 0.6  0    0     
44    SHIA3 SHIA2 1.0  0    0     
47    SHIA3 SUNN2 0.0  0    0     
49    SUNN2 SHIA3 -0.3 0    0     
37    KURD1 SHIA3 0.6  2    0     
39    SHIA1 SHIA3 1.0  2    0     
41    SHIA3 KURD1 0.6  2    0     
43    SHIA3 SHIA1 1.0  2    0     
46    SHIA3 SUNN1 0.0  2    0     
48    SUNN1 SHIA3 -0.3 2    0     
    }


    test civgroup_split-2.6 {cgroups validator is updated} -setup {
        create
    } -body {
        # FIRST, create a new group
        jr civgroup split SHIA1 SHIA3 N2 1000

        # NEXT, do something that will validate a group.
        jr civgroup split NONESUCH SHIA4 N1 1000
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "NONESUCH", should be one of: KURD1, KURD2, SHIA1, SHIA2, SUNN1, SUNN2, SHIA3}


    #-------------------------------------------------------------------
    # civgroup transfer

    test civgroup_transfer-1.1 {invalid driver} -setup {
        create
    } -body {
        jr civgroup transfer NONESUCH SHIA1 SHIA2 1000
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Cannot transfer population, unknown Driver ID: "NONESUCH"}

    test civgroup_transfer-1.2 {invalid group e} -setup {
        create
    } -body {
        jr civgroup transfer 1 NONESUCH SHIA2 1000
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "NONESUCH", should be one of: KURD1, KURD2, SHIA1, SHIA2, SUNN1, SUNN2}


    test civgroup_transfer-1.3 {invalid group f} -setup {
        create
    } -body {
        jr civgroup transfer 1 NONESUCH SHIA2 1000
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "NONESUCH", should be one of: KURD1, KURD2, SHIA1, SHIA2, SUNN1, SUNN2}


    test civgroup_transfer-1.4 {no common ancestor} -setup {
        create
    } -body {
        jr civgroup transfer 1 SHIA1 SHIA2 1000
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Groups SHIA1 and SHIA2 have different ancestors.}


    test civgroup_transfer-1.5 {Invalid population} -setup {
        create
        jr civgroup split SHIA1 SHIA1B N2 1000
    } -body {
        jr civgroup transfer 1 SHIA1 SHIA1B -1000
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "-1000", expected integer no less than 0}

    
    test civgroup_transfer-1.6 {e has insufficient population} -setup {
        create
        jr civgroup split SHIA1 SHIA1B N2 1000
    } -body {
        jr civgroup transfer 1 SHIA1 SHIA1B 9001
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {group "SHIA1"has insufficient population (9000 < 9001)}


    test civgroup_transfer-2.1 {population updated} -setup {
        create
        jr civgroup split SHIA1 SHIA1B N2 1000
    } -body {
        jr civgroup transfer 1 SHIA1 SHIA1B 1000

        pprint [rdb query {
            SELECT g, population FROM gram_g
            WHERE g in ('SHIA1', 'SHIA1B')
        }]
    } -cleanup {
        cleanup
    } -result {
g      population 
------ ---------- 
SHIA1  8000       
SHIA1B 2000       
    }


    test civgroup_transfer-2.2 {dead f comes to life} -setup {
        create
        jr civgroup split SHIA1 SHIA1B N2 10000
        
        # Normally, SHIA1 will only become dead on time advance.
        # For simplicity, mark SHIA1 dead immediately.
        kill SHIA1
    } -body {
        jr civgroup transfer 1 SHIA1B SHIA1 1000

        pprint [rdb query {
            SELECT g, population, alive FROM gram_g
            WHERE g in ('SHIA1', 'SHIA1B')
        }]
    } -cleanup {
        cleanup
    } -result {
g      population alive 
------ ---------- ----- 
SHIA1  1000       1     
SHIA1B 9000       1     
    }


    test civgroup_transfer-3.1 {satisfaction is updated} -setup {
        create

        jr civgroup split SHIA1 SHIA1B N2 2000

        jr sat set 1 SHIA1 AUT 0.0
        jr sat set 1 SHIA1 CUL 0.0
        jr sat set 1 SHIA1 QOL 0.0
        jr sat set 1 SHIA1 SFT 0.0

        jr sat set 1 SHIA1B AUT 10.0
        jr sat set 1 SHIA1B CUL 20.0
        jr sat set 1 SHIA1B QOL 30.0
        jr sat set 1 SHIA1B SFT 40.0
    } -body {
        jr civgroup transfer 2 SHIA1B SHIA1 2000

        pprint [rdb query {
            SELECT c, sat, acontrib 
            FROM gram_sat
            JOIN gram_sat_contribs USING (g,c)
            WHERE driver=2 AND gram_sat.g = 'SHIA1'
        }]

        # The weight on SHIA1B's levels is 1/5th, so the
        # results below should be 1/5th of SHIA1B's levels are
        # set to above.
    } -cleanup {
        cleanup
    } -result {
c   sat acontrib 
--- --- -------- 
AUT 2.0 2.0      
CUL 4.0 4.0      
QOL 6.0 6.0      
SFT 8.0 8.0      
    }


    test civgroup_transfer-3.2 {cooperation is updated} -setup {
        create

        jr civgroup split SHIA1 SHIA1B N2 2000

        jr coop set 1 SHIA1 BLUE  0.0
        jr coop set 1 SHIA1 BRIT  0.0
        jr coop set 1 SHIA1 OPFOR 0.0

        jr coop set 1 SHIA1B BLUE  10.0
        jr coop set 1 SHIA1B BRIT  20.0
        jr coop set 1 SHIA1B OPFOR 30.0
    } -body {
        jr civgroup transfer 2 SHIA1B SHIA1 2000

        pprint [rdb query {
            SELECT g, coop, acontrib 
            FROM gram_coop
            JOIN gram_coop_contribs USING (f,g)
            WHERE driver=2 AND gram_coop.f = 'SHIA1'
        }]

        # The weight on SHIA1B's levels is 1/5th, so the
        # results below should be 1/5th of SHIA1B's levels are
        # set to above.
    } -cleanup {
        cleanup
    } -result {
g     coop acontrib 
----- ---- -------- 
BLUE  2.0  2.0      
BRIT  4.0  4.0      
OPFOR 6.0  6.0      
    }


    #-------------------------------------------------------------------
    # sat.gc

    test sat_gc-1.1 {Invalid group} -setup {
        create
    } -body {
        jr sat.gc DUMMY AUT
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: KURD1, KURD2, SHIA1, SHIA2, SUNN1, SUNN2}

    test sat_gc-1.2 {Invalid concern} -setup {
        create
    } -body {
        jr sat.gc SHIA2 DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: AUT, CUL, QOL, SFT}

    test sat_gc-2.1 {gc} -setup {
        create
    } -body {
        jr sat.gc SUNN1 AUT
    } -cleanup {
        cleanup
    } -result {-80.0}


    #-------------------------------------------------------------------
    # sat.n

    test sat_n-1.1 {Invalid nbhood} -setup {
        create
    } -body {
        jr sat.n DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: N1, N2}

    test sat_n-2.1 {query} -setup {
        create
    } -body {
        jr sat.n N1
    } -cleanup {
        cleanup
    } -result {-30.0}


    #-------------------------------------------------------------------
    # sat.g

    test sat_g-1.1 {Invalid group} -setup {
        create
    } -body {
        jr sat.g DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: KURD1, KURD2, SHIA1, SHIA2, SUNN1, SUNN2}

    test sat_g-2.1 {query} -setup {
        create
    } -body {
        jr sat.g SUNN1
    } -cleanup {
        cleanup
    } -result {-70.0}

    #-------------------------------------------------------------------
    # coop.fg

    test coop_fg-1.1 {Invalid civ group} -setup {
        create
    } -body {
        jr coop.fg DUMMY BLUE
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: KURD1, KURD2, SHIA1, SHIA2, SUNN1, SUNN2}

    test coop_fg-1.2 {Invalid frc group} -setup {
        create
    } -body {
        jr coop.fg SHIA2 DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: BLUE, BRIT, OPFOR}

    test coop_fg-2.1 {Retrieve value} -setup {
        create
    } -body {
        jr coop.fg SUNN1 BLUE
    } -cleanup {
        cleanup
    } -result {50.0}


    #-------------------------------------------------------------------
    # coop.ng

    test coop_ng-1.1 {Invalid nbhood} -setup {
        create
    } -body {
        jr coop.ng DUMMY BLUE
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: N1, N2}

    test coop_ng-1.2 {Invalid group} -setup {
        create
    } -body {
        jr coop.ng N2 DUMMY
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "DUMMY", should be one of: BLUE, BRIT, OPFOR}

    test coop_ng-2.1 {get value} -setup {
        create
    } -body {
        jr coop.ng N1 BLUE
    } -cleanup {
        cleanup
    } -result {50.0}

    #-------------------------------------------------------------------
    # -logger/-logcomponent

    test gram_logger-1.1 {Logging: disabled by default.} -body {
        create

        # Ensure empty -result
        set foo ""
    } -cleanup {
        cleanup
    } -output {}

    test gram_logger-1.2 {Logging: enabled as gram by default.} -setup {
        logger mylogger
    } -body {
        create -logger [namespace current]::mylogger

        # Ensure empty -result
        set foo ""
    } -cleanup {
        cleanup
        mylogger destroy
    } -match glob -output {* normal gram Created
}

    test gram_logger-1.3 {Logging: -logcomponent} -setup {
        logger mylogger
    } -body {
        create \
            -logger [namespace current]::mylogger \
            -logcomponent foo

        # Ensure empty -result
        set foo ""
    } -cleanup {
        cleanup
        mylogger destroy
    } -match glob -output {* normal foo Created
}

    #-------------------------------------------------------------------
    # checkpoint/restore
    #
    # Note: This only handles checkpoint and restore of non-RDB data.

    test gram_checkpoint-1.1 {can take checkpoint} -setup {
        create
    } -body {
        array set ckpt [jr checkpoint]

        # Do some spot checks
        assert {[jr time]           eq $ckpt(time)}
    } -cleanup {
        cleanup
    } -result {}
    
    test gram_checkpoint-1.2 {can checkpoint advanced gram} -setup {
        create
    } -body {
        # FIRST, advance the clock and save a checkpoint
        myclock advance 1440
        jr advance

        array set ckpt [jr checkpoint]

        # Do some spot checks
        assert {[jr time]           == 1440}
        assert {[jr time]           eq $ckpt(time)}

        # NEXT, initialize and then restore, and check against
        # the checkpoint again.

        jr init
        jr restore [array get ckpt]

        assert {[jr time]           == 1440}
        assert {[jr time]           eq $ckpt(time)}
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # Bug Fix Tests

    test bug_1830-1.1 {Slopes don't create 0.0 contributions} -setup {
        create
    } -body {
        # FIRST, create a slope effect at time 5, and advance to time 5.
        jr sat slope 1 5 SHIA1 AUT 10

        myclock advance 5
        jr advance

        # NEXT, there should be nothing in the gram_sat_contribs table.
        rdb query {SELECT * FROM gram_sat_contribs}
    } -cleanup {
        cleanup
    } -result {}




    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::simlib::test












