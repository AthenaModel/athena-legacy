# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    040-misc_rules.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    misc_rules(sim) tests
#
#    This test suite tests that the rules fire when appropriate.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # setup delta
    #
    # delta   - Satisfaction delta for SHIA
    #
    # Sets up for tests.
    
    proc setup {delta} {
        # FIRST, other rule sets shouldn't muddy the waters.
        parm set dam.PRESENCE.active no
        parm set dam.UNEMP.active no
        parm set dam.ENI.active no
        rdb eval {DELETE FROM drivers}
        rdb eval {DELETE FROM mads_t}
        
        # NEXT, create the entities
        ted create JOE BOB DAVE NB1 NB2 BLUE BRIT TAL SHIA SUNN KURD
        
        # NEXT, give JOE control of NB1.
        ted order NBHOOD:UPDATE n NB1 controller JOE
        
        # NEXT, lock, so can do magic inputs to affect mood.
        ted lock
        
        # NEXT, add an input of the relevant kind.
        ted order MAD:CREATE narrative "Mood Test" \
            cause UNIQUE s 0.0 p 0.0 q 0.0
        set madId [ted sendex last_mad]
        foreach c {AUT CUL QOL SFT} {
            ted order MAD:SAT driver_id $madId mode persistent \
                g SHIA c $c mag $delta
        }
        
        # NEXT, take a step, so that the inputs will do their thing.
        ted step
    }
    
    # Clean up after a test
    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # MOOD
    
    test MOOD-1.1 {Rule 1-1 fires} -setup {
        setup -100.0
    } -body {
        # Take one more step; this should cause the MOOD rule set to
        # fire.
        ted step
        ted querylist {
            SELECT * FROM rule_firings where ruleset='MOOD'
        }
    } -cleanup {
        cleanup
    } -result {
firing_id  5
t          2
driver_id  1001
ruleset    MOOD
rule       MOOD-1-1
fdict      controller JOE delta -100.0 moodThen 0.0 n NB1 tc 0 moodNow -100.0 g SHIA
    }
    
    test MOOD-1.2 {Rule 1-1 inputs} -setup {
        setup -100.0
    } -body {
        # Take one more step; this should cause the MOOD rule set to
        # fire.
        ted step
        ted query {
            SELECT rule, g, a, note
            FROM rule_firings JOIN rule_inputs USING (firing_id)
            WHERE ruleset='MOOD'
        }
    } -cleanup {
        cleanup
    } -result {
rule     g    a    note        
-------- ---- ---- ----------- 
MOOD-1-1 SHIA JOE  has control 
MOOD-1-1 SHIA BOB  no control  
MOOD-1-1 SHIA DAVE no control  
    }
    
    
    test MOOD-2.1 {Rule 1-2 fires} -setup {
        setup 100.0
    } -body {
        # Take one more step; this should cause the MOOD rule set to
        # fire.
        ted step
        ted querylist {
            SELECT * FROM rule_firings where ruleset='MOOD'
        }
    } -cleanup {
        cleanup
    } -result {
firing_id  5
t          2
driver_id  1001
ruleset    MOOD
rule       MOOD-1-2
fdict      controller JOE delta 100.0 moodThen 0.0 n NB1 tc 0 moodNow 100.0 g SHIA
    }
    
    test MOOD-2.2 {Rule 1-2 inputs} -setup {
        setup 100.0
    } -body {
        # Take one more step; this should cause the MOOD rule set to
        # fire.
        ted step
        ted query {
            SELECT rule, g, a, note
            FROM rule_firings JOIN rule_inputs USING (firing_id)
            WHERE ruleset='MOOD'
        }
    } -cleanup {
        cleanup
    } -result {
rule     g    a    note        
-------- ---- ---- ----------- 
MOOD-1-2 SHIA JOE  has control 
MOOD-1-2 SHIA BOB  no control  
MOOD-1-2 SHIA DAVE no control  
    }
    
    
    
    
    cleanupTests
}

namespace delete ::athena_test::tests::







