# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-COOPERATION.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) COOPERATION:* order tests.
#
#    This test suite tests the cooperation-related orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    proc setup {} {
        ted create BLUE NB1 SHIA SUNN NB1SHIA
        coop mutate reconcile
    }


    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }


    #-------------------------------------------------------------------
    # COOPERATION:UPDATE

    test UPDATE-1.1 {required parms} -body {
        ted order -reject COOPERATION:UPDATE {}
    } -result {
        n {required value}
        f {required value}
        g {required value}
    }
    

    test UPDATE-1.2 {invalid n, f, g} -setup {
        setup
    } -body {
        ted order -reject COOPERATION:UPDATE n NONESUCH f NONESUCH g NONESUCH
    } -cleanup {
        cleanup
    } -result {
        n {Invalid neighborhood, should be one of: NB1}
        f {Invalid civilian group, should be one of: SHIA, SUNN}
        g {Invalid force group, should be one of: BLUE}
    }


    test UPDATE-1.3 {undefined cooperation} -setup {
        setup
    } -body {
        ted order -reject COOPERATION:UPDATE n NB1 f SUNN g BLUE
    } -cleanup {
        cleanup
    } -result {
        g {Cooperation is not tracked for SUNN with BLUE in NB1.}
    }


    test UPDATE-1.5 {invalid coop0: out of range} -setup {
        setup
    } -body {
        ted order -reject COOPERATION:UPDATE n NB1 f SHIA g BLUE coop0 100.1
    } -cleanup {
        cleanup
    } -result {
        coop0 {invalid value "100.1", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}
    }


    test UPDATE-2.1 {coop0 is updated} -setup {
        setup
    } -body {
        ted order COOPERATION:UPDATE {
            n       NB1
            f       SHIA
            g       BLUE
            coop0   50.0
        }

        ted query {SELECT * FROM coop_nfg}
    } -cleanup {
        cleanup
    } -result {
n   f    g    coop0 
--- ---- ---- ----- 
NB1 SHIA BLUE 50.0  
    }


    test UPDATE-2.2 {<Entity> update} -setup {
        setup
    } -body {
        ted notifier bind ::coop <Entity>
        ted order COOPERATION:UPDATE n NB1 f SHIA g BLUE coop0 50.0
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::coop <Entity> update {NB1 SHIA BLUE}}
    }


    test UPDATE-3.1 {undo undoes the change} -setup {
        setup

        ted order COOPERATION:UPDATE {
            n       NB1
            f       SHIA
            g       BLUE
            coop0   50.0
        }
    } -body {
        ted notifier bind ::coop <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::coop <Entity> update {NB1 SHIA BLUE}}
    }

    #-------------------------------------------------------------------
    # COOPERATION:UPDATE:MULTI

    test UPDATE:MULTI-1.1 {required parms} -setup {
        setup
    } -body {
        ted order -reject COOPERATION:UPDATE:MULTI {}
    } -cleanup {
        cleanup
    } -result {
        ids {required value}
    }
    

    test UPDATE:MULTI-1.2 {invalid n in ids} -setup {
        setup
    } -body {
        ted order -reject COOPERATION:UPDATE:MULTI \
            ids {{NONESUCH1 SHIA BLUE}}
    } -cleanup {
        cleanup
    } -result {
        ids {Invalid neighborhood, should be one of: NB1}
    }


    test UPDATE:MULTI-1.3 {invalid f in ids} -setup {
        setup
    } -body {
        ted order -reject COOPERATION:UPDATE:MULTI \
            ids {{NB1 NONESUCH BLUE}}
    } -cleanup {
        cleanup
    } -result {
        ids {Invalid civilian group, should be one of: SHIA, SUNN}
    }


    test UPDATE:MULTI-1.4 {invalid g in ids} -setup {
        setup
    } -body {
        ted order -reject COOPERATION:UPDATE:MULTI \
            ids {{NB1 SHIA NONESUCH}}
    } -cleanup {
        cleanup
    } -result {
        ids {Invalid force group, should be one of: BLUE}
    }


    test UPDATE:MULTI-1.5 {undefined cooperation} -setup {
        setup
    } -body {
        ted order -reject COOPERATION:UPDATE:MULTI ids {{NB1 SUNN BLUE}}
    } -cleanup {
        cleanup
    } -result {
        ids {Cooperation is not tracked for SUNN with BLUE in NB1.}
    }


    test UPDATE:MULTI-1.6 {invalid coop: out of range} -setup {
        setup
    } -body {
        ted order -reject COOPERATION:UPDATE:MULTI \
            ids {{NB1 SHIA BLUE}} coop0 100.1
    } -cleanup {
        cleanup
    } -result {
        coop0 {invalid value "100.1", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}
    }


    test UPDATE:MULTI-2.1 {one cooperation of several is updated} -setup {
        setup
    } -body {
        ted notifier bind ::coop <Entity>

        ted order COOPERATION:UPDATE:MULTI {
            ids       {{NB1 SHIA BLUE}}
            coop0     50.0
        }

        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::coop <Entity> update {NB1 SHIA BLUE}}
    }


    test UPDATE:MULTI-2.2 {several cooperations are updated} -setup {
        setup
        ted create NB1SUNN
        coop mutate reconcile
    } -body {
        ted notifier bind ::coop <Entity>
        ted order COOPERATION:UPDATE:MULTI {
            ids   {{NB1 SHIA BLUE} {NB1 SUNN BLUE}} 
            coop0   50.0
        }
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::coop <Entity> update {NB1 SHIA BLUE}}
        {::coop <Entity> update {NB1 SUNN BLUE}}
    }


    test UPDATE:MULTI-3.1 {undo undoes the change} -setup {
        setup
        ted create NB1SUNN
        coop mutate reconcile

        ted order COOPERATION:UPDATE:MULTI {
            ids        {{NB1 SHIA BLUE} {NB1 SUNN BLUE}}
            coop0        50.0
        }
    } -body {
        ted notifier bind ::coop <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::coop <Entity> update {NB1 SHIA BLUE}}
        {::coop <Entity> update {NB1 SUNN BLUE}}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::






