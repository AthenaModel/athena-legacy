# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-CONDITION-MOOD.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    CONDITION:MOOD:* Orders tests
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    set S1 ::strategy::SYSTEM

    proc setup {} {
        ted create SHIA
        variable S1
        variable B1
        variable C1
        ted order STRATEGY:BLOCK:ADD agent SYSTEM
        lassign [$S1 blocks] B1
        ted order BLOCK:CONDITION:ADD block_id [$B1 id] typename MOOD
        lassign [$B1 conditions] C1
    }

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # CONDITION:MOOD:UPDATE

    test CONDITION:MOOD:UPDATE-1.1 {required parameters} -setup {
        setup
    } -body {
        ted order -reject CONDITION:MOOD:UPDATE
    } -cleanup {
        cleanup
    } -result {
        condition_id {required value}
    }

    test CONDITION:MOOD:UPDATE-1.2 {unknown condition_id} -setup {
        setup
    } -body {
        ted order -reject CONDITION:MOOD:UPDATE condition_id NONESUCH
    } -cleanup {
        cleanup
    } -match glob -result {
        condition_id {invalid value "NONESUCH", should be one of: *}
    }

    test CONDITION:MOOD:UPDATE-1.3 {invalid g} -setup {
        setup
    } -body {
        ted order -reject CONDITION:MOOD:UPDATE condition_id [$C1 id] g NONESUCH
    } -cleanup {
        cleanup
    } -result {
        g {Invalid civilian group, should be one of: SHIA}
    }

    test CONDITION:MOOD:UPDATE-1.4 {invalid comp} -setup {
        setup
    } -body {
        ted order -reject CONDITION:MOOD:UPDATE condition_id [$C1 id] comp NONESUCH
    } -cleanup {
        cleanup
    } -result {
        comp {invalid value "NONESUCH", should be one of: EQ, GE, GT, LE, LT}
    }

    test CONDITION:MOOD:UPDATE-1.5 {invalid limit} -setup {
        setup
    } -body {
        ted order -reject CONDITION:MOOD:UPDATE condition_id [$C1 id] limit NONESUCH
    } -cleanup {
        cleanup
    } -result {
        limit {invalid value "NONESUCH", should be a real number in range -100.0, 100.0, or one of: VS, S, A, D, VD}
    }

    test CONDITION:MOOD:UPDATE-2.1 {condition updated} -setup {
        setup
    } -body {
        ted order CONDITION:MOOD:UPDATE \
            condition_id [$C1 id] \
            g            SHIA     \
            comp         gt       \
            limit        10

        ted pdict [$C1 getdict]
    } -cleanup {
        cleanup
    } -match glob -result {
        metflag {}
        id      3
        state   normal
        block   ::bean::block*
        limit   10
        comp    GT
        g       SHIA
    }

    test CONDITION:MOOD:UPDATE-2.2 {notifier event} -setup {
        setup
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        ted order CONDITION:MOOD:UPDATE condition_id [$C1 id] g SHIA
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}

    test CONDITION:MOOD:UPDATE-2.3 {undo notifier event} -setup {
        setup
        ted order CONDITION:MOOD:UPDATE condition_id [$C1 id] g SHIA
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}
 

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





