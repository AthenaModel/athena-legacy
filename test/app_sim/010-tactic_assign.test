# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-tactic_assign.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    tactic_assign(sim) tests.
#
#    This test suite tests the tactic_assign(sim) class.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        variable T1
        variable coffer
        ted create JOE BOB NB1 NB2 BLUE BRIT SHIA SUNN KURD
        cash load
        personnel start
        personnel load
        set coffer [coffer new JOE]

        set B1 [ted addblock JOE]
        set T1 [ted addtactic $B1 ASSIGN]
    }

    # Clean up after a test

    proc cleanup {} {
        variable coffer
        $coffer destroy
        ted cleanup
    }

    #-------------------------------------------------------------------
    # Constructor

    test constructor-1.1 {default state} -setup {
        setup
    } -body {
        ted pdict [$T1 getdict]
    } -cleanup {
        cleanup
    } -match glob -result {
        id         *
        execstatus NONE
        state      invalid
        activity   {}
        personnel  0
        n          {}
        block      ::bean::block*
        g          {}
    }

    

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative, default state} -setup {
        setup
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {In ???, assign 0 ??? personnel to do ???.}

    test narrative-1.2 {narrative, valid data} -setup {
        setup
        $T1 set g BLUE
        $T1 set n NB1
        $T1 set activity PATROL
        $T1 set personnel 100
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {In NB1, assign 100 BLUE personnel to do PATROL.}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {Initial state fails} -setup {
        setup
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {g {No group selected.} n {No neighborhood selected.} activity {No activity selected.}}

    test check-1.2 {g doesn't exist or is owned by another actor} -setup {
        setup
    } -body {
        $T1 set g NONESUCH
        $T1 set n NB1
        $T1 set activity PATROL
        $T1 set personnel 1
        $T1 check
    } -cleanup {
        cleanup
    } -result {g {Force/organization group "NONESUCH" is not owned by JOE.} activity {Invalid activity for selected group: "PATROL"}}

    test check-1.3 {unknown n} -setup {
        setup
    } -body {
        $T1 set g BLUE
        $T1 set n NONESUCH
        $T1 set activity PATROL
        $T1 set personnel 1
        $T1 check
    } -cleanup {
        cleanup
    } -result {n {Non-existent neighborhood: NONESUCH}}

    test check-1.4 {unknown activity} -setup {
        setup
    } -body {
        $T1 set g BLUE
        $T1 set n NB1
        $T1 set activity NONESUCH
        $T1 set personnel 1
        $T1 check
    } -cleanup {
        cleanup
    } -result {activity {Invalid activity for selected group: "NONESUCH"}}

    test check-1.5 {Success} -setup {
        setup
    } -body {
        $T1 set g BLUE
        $T1 set n NB1
        $T1 set activity PATROL
        $T1 set personnel 1
        $T1 check
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # obligate

    # obligate-1.*: Failures

    test obligate-1.1 {Insufficient troops} -setup {
        setup
        $T1 set g BLUE
        $T1 set n NB1
        $T1 set activity PATROL
        $T1 set personnel 100
    } -body {
        set before [$coffer getdict]
        set flag [$T1 obligate $coffer]
        set after [$coffer getdict]

        list $flag [expr {$before eq $after}]
    } -cleanup {
        cleanup
    } -result {0 1}

    test obligate-1.2 {Insufficient cash} -setup {
        setup
        parm set activity.FRC.PATROL.cost 1000
        $T1 set g BLUE
        $T1 set n NB1
        $T1 set activity PATROL
        $T1 set personnel 1000
        $coffer deploy BLUE NB1 2000
    } -body {
        # 1000 troops at $1000 per is $1M; we have $10K.
        set before [$coffer getdict]
        set flag [$T1 obligate $coffer]
        set after [$coffer getdict]

        list $flag [expr {$before eq $after}]
    } -cleanup {
        cleanup
    } -result {0 1}


    # obligate-2.*: success

    test obligate-2.1 {success} -setup {
        setup
        parm set activity.FRC.PATROL.cost 1
        $T1 set g BLUE
        $T1 set n NB1
        $T1 set activity PATROL
        $T1 set personnel 100
        $coffer deploy BLUE NB1 500
    } -body {
        set a [$coffer troops BLUE NB1]
        set b [$coffer cash]
        set c [$T1 obligate $coffer]
        set d [$coffer troops BLUE NB1]
        set e [$coffer cash]

        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {500 10000.0 1 400 9900.0}

    test obligate-2.2 {insufficient troops and funds on lock} -setup {
        setup
        parm set activity.FRC.PATROL.cost 1000
        $T1 set g BLUE
        $T1 set n NB1
        $T1 set activity PATROL
        $T1 set personnel 1000
        $coffer deploy BLUE NB1 500
        strategy locking 1
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer troops BLUE NB1]
        set c [$coffer cash]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 0 0.0}


    #-------------------------------------------------------------------
    # execute

    test execute-1.1 {assigns troops} -setup {
        setup
        $T1 set g BLUE
        $T1 set n NB1
        $T1 set activity PATROL
        $T1 set personnel 100

        $coffer deploy BLUE NB1 500
        personnel deploy 1 NB1 BLUE 500

        $T1 obligate $coffer
    } -body {
        $T1 execute
        ted query {SELECT g, personnel FROM units}
    } -cleanup {
        cleanup
    } -match glob -result {
g    personnel 
---- --------- 
BLUE 100       
    }

    test execute-1.2 {expends cash} -setup {
        setup
        parm set activity.FRC.PATROL.cost 1
        $T1 set g BLUE
        $T1 set n NB1
        $T1 set activity PATROL
        $T1 set personnel 100

        $coffer deploy BLUE NB1 500
        personnel deploy 1 NB1 BLUE 500

        $T1 obligate $coffer
    } -body {
        $T1 execute
        rdb onecolumn {SELECT cash_on_hand FROM working_cash WHERE a='JOE'}
    } -cleanup {
        cleanup
    } -result {9900.0}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::









