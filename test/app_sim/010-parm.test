# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-parm.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    parm(sim) tests.
#
#    This test suite tests the parm(sim) mutators, queries, etc.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test
    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # init

    # Nothing to test.

    #-------------------------------------------------------------------
    # mutate import

    test mutate_import-1.1 {Imports a file} -setup {
        makeFile {
            parm gram.epsilon 0.5
        } temp.parmdb
    } -body {
        parm mutate import [file join [temporaryDirectory] temp.parmdb]
        parm get gram.epsilon
    } -cleanup {
        cleanup
    } -result {0.5}


    test mutate_import-1.2 {Changes are undone} -setup {
        makeFile {
            parm gram.epsilon 0.5
        } temp.parmdb
    } -body {
        set a [parm get gram.epsilon]
        set undo [parm mutate import \
                      [file join [temporaryDirectory] temp.parmdb]]
        set b [parm get gram.epsilon]
        eval $undo
        set c [parm get gram.epsilon]

        list [expr {$a == $c}] [expr {$a != $b}]
    } -cleanup {
        cleanup
    } -result {1 1}


    #-------------------------------------------------------------------
    # mutate reset
    #
    # We can't test this thoroughly, because the results depend on the
    # defaults.parmdb file.  However, we can make sure that it can be
    # executed without error, and that the undo script is correct.

    test mutate_reset-1.1 {Can be called without error} -body {
        parm mutate reset
    } -cleanup {
        cleanup
    } -result {::parm restore {}}

    #-------------------------------------------------------------------
    # mutate set


    test mutate_set-1.1 {Sets an unknown parameter} -body {
        parm mutate set foo bar
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {unknown parameter: "foo"}


    test mutate_set-1.2 {Sets a known parameter to an invalid value} -body {
        parm mutate set gram.epsilon foo
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid gram.epsilon value "foo": Out of range: "foo"}


    test mutate_set-2.1 {Set is successful} -body {
        parm mutate set gram.epsilon 2.1
        parm get gram.epsilon
    } -cleanup {
        cleanup
    } -result {2.1}


    test mutate_set-2.2 {Set can be undone} -body {
        set a [parm get gram.epsilon]

        set undo [parm mutate set gram.epsilon 2.2]
        eval $undo

        set b [parm get gram.epsilon]

        expr {$a == $b}
    } -cleanup {
        cleanup
    } -result {1}

    #-------------------------------------------------------------------
    # exec import

    test exec_import-1.1 {Calls order correctly} -setup {
        order nullmode yes
    } -body {
        parm exec import nonesuch.parmdb
        order lastparms
    } -cleanup {
        order nullmode no
    } -result {filename nonesuch.parmdb _order PARM:IMPORT}


    #-------------------------------------------------------------------
    # exec list

    test exec_list-1.1 {Throws error if none match} -body {
        parm exec list NONESUCH
    } -returnCodes {
        error
    } -result {No matching parameters}


    #-------------------------------------------------------------------
    # exec reset

    test exec_reset-1.1 {Calls order correctly} -setup {
        order nullmode yes
    } -body {
        parm exec reset
        order lastparms
    } -cleanup {
        order nullmode no
    } -result {_order PARM:RESET}


    #-------------------------------------------------------------------
    # exec set

    test exec_set-1.1 {Calls order correctly} -setup {
        order nullmode yes
    } -body {
        parm exec set foo bar
        order lastparms
    } -cleanup {
        order nullmode no
    } -result {parm foo value bar _order PARM:SET}


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests


}

namespace delete ::athena_test::tests::







