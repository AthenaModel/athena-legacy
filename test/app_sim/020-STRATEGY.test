# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-STRATEGY.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    STRATEGY:* Order Tests
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    set S1 ::strategy::SYSTEM

    proc setup {} {
        # TBD
    }

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # STRATEGY:BLOCK:ADD

    test BLOCK:ADD-1.1 {required parameters} -setup {
        setup
    } -body {
        ted order -reject STRATEGY:BLOCK:ADD
    } -cleanup {
        cleanup
    } -result {
        agent {required value}
    }

    test BLOCK:ADD-1.2 {unknown agent} -setup {
        setup
    } -body {
        ted order -reject STRATEGY:BLOCK:ADD agent NONESUCH
    } -cleanup {
        cleanup
    } -result {
        agent {Invalid agent, should be one of: SYSTEM}
    }

    test BLOCK:ADD-2.1 {block added} -setup {
        setup
    } -body {
        ted order STRATEGY:BLOCK:ADD agent SYSTEM
        $S1 blocks
    } -cleanup {
        cleanup
    } -match glob -result {::bean::block*}

    test BLOCK:ADD-2.2 {notifier event} -setup {
        setup
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        ted order STRATEGY:BLOCK:ADD agent SYSTEM
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}

    test BLOCK:ADD-2.3 {undo notifier event} -setup {
        setup
        ted order STRATEGY:BLOCK:ADD agent SYSTEM
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}

    #-------------------------------------------------------------------
    # STRATEGY:BLOCK:DELETE

    test BLOCK:DELETE-1.1 {required parameters} -setup {
        setup
    } -body {
        ted order -reject STRATEGY:BLOCK:DELETE
    } -cleanup {
        cleanup
    } -result {
        block_id {required value}
    }

    test BLOCK:DELETE-1.2 {unknown block_id} -setup {
        setup
    } -body {
        ted order -reject STRATEGY:BLOCK:DELETE block_id NONESUCH
    } -cleanup {
        cleanup
    } -result {
        block_id {invalid value "NONESUCH", should be one of:}
    }

    test BLOCK:DELETE-2.1 {block deleted} -setup {
        setup
        ted order STRATEGY:BLOCK:ADD agent SYSTEM
        set B1 [lindex [$S1 blocks] end]
    } -body {
        ted order STRATEGY:BLOCK:DELETE block_id [$B1 id]
        $S1 blocks
    } -cleanup {
        cleanup
    } -result {}

    test BLOCK:DELETE-2.2 {notifier event} -setup {
        setup
        ted order STRATEGY:BLOCK:ADD agent SYSTEM
        set B1 [lindex [$S1 blocks] end]
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        ted order STRATEGY:BLOCK:DELETE block_id [$B1 id]
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}

    test BLOCK:DELETE-2.3 {undo notifier event} -setup {
        setup
        ted order STRATEGY:BLOCK:ADD agent SYSTEM
        set B1 [lindex [$S1 blocks] end]
        ted order STRATEGY:BLOCK:DELETE block_id [$B1 id]
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}

    #-------------------------------------------------------------------
    # STRATEGY:BLOCK:MOVE

    test BLOCK:MOVE-1.1 {required parameters} -setup {
        setup
    } -body {
        ted order -reject STRATEGY:BLOCK:MOVE
    } -cleanup {
        cleanup
    } -result {
        block_id {required value}
        where {required value}
    }

    test BLOCK:MOVE-1.2 {unknown block} -setup {
        setup
    } -body {
        ted order -reject STRATEGY:BLOCK:MOVE block_id NONESUCH where top
    } -cleanup {
        cleanup
    } -result {
        block_id {invalid value "NONESUCH", should be one of:}
    }

    test BLOCK:MOVE-1.3 {invalid where} -setup {
        setup
        ted order STRATEGY:BLOCK:ADD agent SYSTEM
        ted order STRATEGY:BLOCK:ADD agent SYSTEM
        lassign [$S1 blocks] B1 B2
    } -body {
        ted order -reject STRATEGY:BLOCK:MOVE block_id [$B2 id] where NONESUCH
    } -cleanup {
        cleanup
    } -result {
        where {invalid value "NONESUCH", should be one of: top, up, down, bottom}
    }

    test BLOCK:MOVE-2.1 {block moved} -setup {
        setup
        ted order STRATEGY:BLOCK:ADD agent SYSTEM
        ted order STRATEGY:BLOCK:ADD agent SYSTEM
        lassign [$S1 blocks] B1 B2
    } -body {
        set before [list $B1 $B2]
        ted order STRATEGY:BLOCK:MOVE block_id [$B2 id] where top
        set after [$S1 blocks]
        expr {$after eq [lreverse $before]}
    } -cleanup {
        cleanup
    } -result {1}

    test BLOCK:MOVE-2.2 {notifier event} -setup {
        setup
        ted order STRATEGY:BLOCK:ADD agent SYSTEM
        ted order STRATEGY:BLOCK:ADD agent SYSTEM
        lassign [$S1 blocks] B1 B2
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        ted order STRATEGY:BLOCK:MOVE block_id [$B2 id] where top
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}

    test BLOCK:MOVE-2.3 {undo notifier event} -setup {
        setup
        ted order STRATEGY:BLOCK:ADD agent SYSTEM
        ted order STRATEGY:BLOCK:ADD agent SYSTEM
        lassign [$S1 blocks] B1 B2
        ted order STRATEGY:BLOCK:MOVE block_id [$B2 id] where top
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}

 
    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





