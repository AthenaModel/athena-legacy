# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-NBHOOD.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) NBHOOD:* order tests.
#
#    This test suite tests the nbhood-related orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Default neighborhoods.  nb1 and nb2 do not overlap.
    # overnb1 overlaps nb1's refpoint

    set nb1 {
        n            NB1
        longname     "Here"
        urbanization URBAN
        refpoint     B00B00
        polygon      {A80A80 B20A80 B00B20}
    }

    set overnb1 {
        n            OV1
        longname     "Over"
        urbanization SUBURBAN
        refpoint     B01B01
        polygon      {A81A81 B21A81 B01B21}
    }

    set nb2 {
        n            NB2
        longname     "There"
        urbanization RURAL
        refpoint     D00D00
        polygon      {C80C80 D20C80 D00D20}
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    #-------------------------------------------------------------------
    # NBHOOD:CREATE

    test CREATE-1.1 {required parms} -body {
        ted order -reject NBHOOD:CREATE {}
    } -result {
        n {required value}
        longname {required value}
        urbanization {required value}
        refpoint {required value}
        polygon {required value}
    }

    
    test CREATE-1.2 {Duplicate n, longname} -setup {
        ted order NBHOOD:CREATE $nb1
    } -body {
        ted order -reject NBHOOD:CREATE $nb1 
    } -cleanup {
        cleanup
    } -result {
        n {An entity with this ID already exists}
        longname {An entity with this name already exists}
    }


    test CREATE-1.3 {longname duplicates n} -body {
        ted order -reject NBHOOD:CREATE [dict merge $nb1 {longname NB1}]
    } -cleanup {
        cleanup
    } -result {
        longname {longname must not be identical to ID}
    }

    test CREATE-1.4 {invalid identifier} -body {
        ted order -reject NBHOOD:CREATE [dict merge $nb1 {n "NONE-SUCH"}]
    } -cleanup {
        cleanup
    } -result {
        n {Identifiers begin with a letter and contain only letters and digits.}
    }

    test CREATE-1.4 {invalid urbanization} -body {
        ted order -reject NBHOOD:CREATE [dict merge $nb1 {
            urbanization NONESUCH
        }]
    } -result {
        urbanization {invalid value, "NONESUCH"}
    }


    test CREATE-1.5 {polygon: invalid map ref} -body {
        ted order -reject NBHOOD:CREATE [dict merge $nb1 {
            polygon {A80A80 B20A80 Z99Z99 B00B20}
        }]
    } -result {
        polygon {point "Z99Z99" is not a map reference string}
    }


    test CREATE-1.6 {polygon: duplicate polygon} -setup {
        ted order NBHOOD:CREATE  $nb1
    } -body {
        ted order -reject NBHOOD:CREATE \
            [dict merge $nb2 [list polygon [dict get $nb1 polygon]]]
    } -cleanup {
        cleanup
    } -result {
        polygon {A neighborhood with this polygon already exists}
    }
    

    test CREATE-1.7 {refpoint: invalid map ref} -body {
        ted order -reject NBHOOD:CREATE [dict merge $nb1 {
            refpoint X99X99
        }]
    } -result {
        refpoint {not a map reference string}
    }


    test CREATE-1.8 {refpoint: duplicate refpoint} -setup {
        ted order NBHOOD:CREATE  $nb1
    } -body {
        ted order -reject NBHOOD:CREATE \
            [dict merge $nb2 [list refpoint [dict get $nb1 refpoint]]]
    } -cleanup {
        cleanup
    } -result {
        refpoint {A neighborhood with this reference point already exists}
    }


    test CREATE-1.9 {refpoint not in polygon} -body {
        ted order -reject NBHOOD:CREATE [dict merge $nb1 {
            refpoint A00A00
        }]
    } -result {
        refpoint {not in polygon}
    }


    test CREATE-2.1 {nbhood is created} -body {
        ted order NBHOOD:CREATE $nb1
        set parms [join [dict keys $nb1] ","]
        ted query "SELECT $parms FROM nbhoods"
    } -cleanup {
        cleanup
    } -result {
n   longname urbanization refpoint polygon              
--- -------- ------------ -------- -------------------- 
NB1 Here     URBAN        100 100  80 80 120 80 100 120 
    }


    test CREATE-2.2 {Effects} -setup {
        ted create USAID
    } -body {
        ted notifier bind ::nbhood <Entity>
        ted notifier bind ::sat    <Entity>
        ted order NBHOOD:CREATE $nb1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::nbhood <Entity> create NB1}
        {::sat <Entity> create {NB1 USAID CAS}}
    }


    test CREATE-3.1 {undo effects} -setup {
        ted create USAID
        ted order NBHOOD:CREATE $nb1
    } -body {
        ted notifier bind ::nbhood <Entity>
        ted notifier bind ::sat    <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::nbhood <Entity> delete NB1}
        {::sat <Entity> delete {NB1 USAID CAS}}
    }


    #-------------------------------------------------------------------
    # NBHOOD:DELETE

    test DELETE-1.1 {required parms} -body {
        ted order -reject NBHOOD:DELETE {}
    } -result {
        n {required value}
    }
    
    test DELETE-1.2 {unknown n} -body {
        ted order -reject NBHOOD:DELETE n NONESUCH
    } -result {
        n {Invalid neighborhood, none are defined}
    }

    test DELETE-2.1 {Effects} -setup {
        ted create NB1
    } -body {
        ted notifier bind ::nbhood <Entity>
        ted notifier bind ::scenario <Reconcile>
        ted order NBHOOD:DELETE n NB1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::nbhood <Entity> delete NB1}
        {::scenario <Reconcile>}
    }


    test DELETE-3.1 {Undo effects} -setup {
        ted create NB1
        ted order NBHOOD:DELETE n NB1
    } -body {
        ted notifier bind ::nbhood  <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::nbhood <Entity> create NB1}
    }


    #-------------------------------------------------------------------
    # NBHOOD:LOWER

    test LOWER-1.1 {required parms} -body {
        ted order -reject NBHOOD:LOWER {}
    } -result {
        n {required value}
    }
    
    test LOWER-1.2 {unknown n} -body {
        ted order -reject NBHOOD:LOWER n NONESUCH
    } -result {
        n {Invalid neighborhood, none are defined}
    }

    test LOWER-2.1 {Nbhood is lower} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $overnb1
    } -body {
        ted order NBHOOD:LOWER n OV1
        ted query {SELECT n,longname,stacking_order,obscured_by FROM nbhoods}
    } -cleanup {
        cleanup
    } -result {
n   longname stacking_order obscured_by 
--- -------- -------------- ----------- 
NB1 Here     2                          
OV1 Over     1              NB1         
    }

    test LOWER-2.2 {<Entity> stack} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $overnb1
    } -body {
        ted notifier bind ::nbhood <Entity>
        ted order NBHOOD:LOWER n OV1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::nbhood <Entity> stack}
    }

    test LOWER-3.1 {Undo} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $overnb1
    } -body {
        ted order NBHOOD:LOWER n OV1
        cif undo
        ted query {SELECT n,longname,stacking_order,obscured_by FROM nbhoods}
    } -cleanup {
        cleanup
    } -result {
n   longname stacking_order obscured_by 
--- -------- -------------- ----------- 
NB1 Here     1              OV1         
OV1 Over     2                          
    }

    #-------------------------------------------------------------------
    # NBHOOD:RAISE

    test RAISE-1.1 {required parms} -body {
        ted order -reject NBHOOD:RAISE {}
    } -result {
        n {required value}
    }
    
    test RAISE-1.2 {unknown n} -body {
        ted order -reject NBHOOD:RAISE n NONESUCH
    } -result {
        n {Invalid neighborhood, none are defined}
    }

    test RAISE-2.1 {Nbhood is lower} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $overnb1
    } -body {
        ted order NBHOOD:RAISE n NB1
        ted query {SELECT n,longname,stacking_order,obscured_by FROM nbhoods}
    } -cleanup {
        cleanup
    } -result {
n   longname stacking_order obscured_by 
--- -------- -------------- ----------- 
NB1 Here     2                          
OV1 Over     1              NB1         
    }

    test RAISE-2.2 {<Entity> stack} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $overnb1
    } -body {
        ted notifier bind ::nbhood <Entity>
        ted order NBHOOD:RAISE n NB1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::nbhood <Entity> stack}
    }

    test RAISE-3.1 {Undo} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $overnb1
    } -body {
        ted order NBHOOD:RAISE n NB1
        cif undo
        ted query {SELECT n,longname,stacking_order,obscured_by FROM nbhoods}
    } -cleanup {
        cleanup
    } -result {
n   longname stacking_order obscured_by 
--- -------- -------------- ----------- 
NB1 Here     1              OV1         
OV1 Over     2                          
    }

    #-------------------------------------------------------------------
    # NBHOOD:UPDATE

    test UPDATE-1.1 {required parms} -body {
        ted order -reject NBHOOD:UPDATE {}
    } -result {
        n {required value}
    }
    
    test UPDATE-1.2 {Duplicate longname} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $nb2
    } -body {
        ted order -reject NBHOOD:UPDATE n NB1 longname There
    } -cleanup {
        cleanup
    } -result {
        longname {An entity with this name already exists}
    }

    test UPDATE-1.3 {longname duplicates another n} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $nb2
    } -body {
        ted order -reject NBHOOD:UPDATE n NB1 longname NB2
    } -cleanup {
        cleanup
    } -result {
        longname {An entity with this ID already exists}
    }

    test UPDATE-1.4 {invalid urbanization} -setup {
        ted order NBHOOD:CREATE $nb1
    } -body {
        ted order -reject NBHOOD:UPDATE n NB1 urbanization NONESUCH
    } -cleanup {
        cleanup
    } -result {
        urbanization {invalid value, "NONESUCH"}
    }

    test UPDATE-1.5 {polygon: invalid map ref} -setup {
        ted order NBHOOD:CREATE $nb1
    } -body {
        ted order -reject NBHOOD:UPDATE           \
            n       NB1                          \
            polygon {A80A80 B20A80 Z99Z99 B00B20}
    } -cleanup {
        cleanup
    } -result {
        polygon {point "Z99Z99" is not a map reference string}
    }

    test UPDATE-1.6 {polygon: duplicate polygon} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $nb2
    } -body {
        ted order -reject NBHOOD:UPDATE     \
            n       NB1                    \
            polygon [dict get $nb2 polygon]
    } -cleanup {
        cleanup
    } -result {
        polygon {A neighborhood with this polygon already exists}
    }

    test UPDATE-1.7 {refpoint: invalid map ref} -setup {
        ted order NBHOOD:CREATE $nb1
    } -body {
        ted order -reject NBHOOD:UPDATE \
            n        NB1               \
            refpoint X99X99
    } -cleanup {
        cleanup
    } -result {
        refpoint {not a map reference string}
    }

    test UPDATE-1.9 {refpoint: duplicate refpoint} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $nb2
    } -body {
        ted order -reject NBHOOD:UPDATE       \
            n        NB1                     \
            refpoint [dict get $nb2 refpoint]
    } -cleanup {
        cleanup
    } -result {
        polygon {A neighborhood with this reference point already exists}
    }

    test UPDATE-1.8 {refpoint not in polygon} -setup {
        ted order NBHOOD:CREATE $nb1
    } -body {
        ted order -reject NBHOOD:UPDATE \
            n        NB1               \
            refpoint A00A00
    } -cleanup {
        cleanup
    } -result {
        refpoint {not in polygon}
    }

    test UPDATE-2.1 {nbhood is updated} -setup {
        ted order NBHOOD:CREATE $nb1
    } -body {
        ted order NBHOOD:UPDATE {
            n            NB1
            longname     "Not Here"
            urbanization RURAL
            refpoint     A05A05
            polygon      {A00A00 A10A00 A10A10 A00A10}
        }

        set parms [join [dict keys $nb1] ","]
        ted query "SELECT $parms FROM nbhoods"
    } -cleanup {
        cleanup
    } -result {
n   longname urbanization refpoint polygon             
--- -------- ------------ -------- ------------------- 
NB1 Not Here RURAL        5 5      0 0 10 0 10 10 0 10 
    }


    test UPDATE-2.2 {<Entity> update} -setup {
        ted order NBHOOD:CREATE $nb1
    } -body {
        ted notifier bind ::nbhood <Entity>
        ted order NBHOOD:UPDATE n NB1 longname "Not Here"
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::nbhood <Entity> update NB1}
    }


    test UPDATE-3.1 {undo undoes the change} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:UPDATE [dict merge $overnb1 {n NB1}]
    } -body {
        ted notifier bind ::nbhood <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::nbhood <Entity> update NB1}
    }

    #-------------------------------------------------------------------
    # NBHOOD:UPDATE:MULTI

    test UPDATE:MULTI-1.1 {required parms} -body {
        ted order -reject NBHOOD:UPDATE:MULTI {}
    } -result {
        ids {required value}
    }

    test UPDATE:MULTI-1.2 {invalid ids, no nbhoods} -body {
        ted order -reject NBHOOD:UPDATE:MULTI ids NONESUCH
    } -cleanup {
        cleanup
    } -result {
        ids {Invalid neighborhood, none are defined}
    }
    
    test UPDATE:MULTI-1.3 {invalid ids, nbhoods} -setup {
        ted order NBHOOD:CREATE $nb1
    } -body {
        ted order -reject NBHOOD:UPDATE:MULTI ids NONESUCH
    } -cleanup {
        cleanup
    } -result {
        ids {Invalid neighborhood, should be one of: NB1}
    }

    test UPDATE:MULTI-1.4 {invalid urbanization} -setup {
        ted order NBHOOD:CREATE $nb1
    } -body {
        ted order -reject NBHOOD:UPDATE:MULTI ids NB1 urbanization NONESUCH
    } -cleanup {
        cleanup
    } -result {
        urbanization {invalid value, "NONESUCH"}
    }

    test UPDATE:MULTI-2.1 {one nbhood of several is updated} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $nb2
    } -body {
        ted notifier bind ::nbhood <Entity>
        ted order NBHOOD:UPDATE:MULTI ids NB1 urbanization SUBURBAN
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::nbhood <Entity> update NB1}
    }

    test UPDATE:MULTI-2.2 {several nbhoods are updated} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $nb2
    } -body {
        ted notifier bind ::nbhood <Entity>
        ted order NBHOOD:UPDATE:MULTI ids {NB1 NB2} urbanization SUBURBAN
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::nbhood <Entity> update NB1}
        {::nbhood <Entity> update NB2}
    }


    test UPDATE:MULTI-3.1 {Undo effects} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $nb2
        ted order NBHOOD:UPDATE:MULTI ids {NB1 NB2} urbanization SUBURBAN
    } -body {
        ted notifier bind ::nbhood <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::nbhood <Entity> update NB1}
        {::nbhood <Entity> update NB2}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::






