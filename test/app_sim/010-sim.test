# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-sim.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    sim(sim) tests.
#
#    This test suite tests the sim(sim) mutators and queries
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Get initial time 0
    set t0 [simclock cget -t0]
    
    # Clean up after a test

    proc cleanup {} {
        variable t0

        # Clean up the test environment
        eventq restart
        simclock configure -t0 $t0
        sim speed 5


        if {[sim state] eq "RUNNING"} {
            sim mutate pause
        }

        if {[sim state] eq "PAUSED"} {
            sim restart
        }

        ted cleanup

        assert {![aram initialized]}
    }

    #-------------------------------------------------------------------
    # init
    #
    # Verify initial module state
   

    test init-1.1 {Initial state} -body {
        list \
            [sim now]         \
            [sim state]       \
            [sim speed]       \
            [sim stoptime]    \
            [simclock asZulu]
        
    } -result {0 PREP 5 0 100000ZJAN10}

    #-------------------------------------------------------------------
    # speed

    test speed-1.1 {Invalid speed} -body {
        sim speed foo
    } -returnCodes {
        error
    } -result {Invalid speed: "foo"}

    test speed-2.1 {Speed is returned} -body {
        sim speed 4
    } -cleanup {
        sim speed 5
    } -result {4}

    test speed-2.2 {Valid speeds} -body {
        sim speed 1
        sim speed 2
        sim speed 3
        sim speed 4
        sim speed 5
        sim speed 6
        sim speed 7
        sim speed 8
        sim speed 9
        sim speed 10
    } -cleanup {
        cleanup
    } -result {10}

    #-------------------------------------------------------------------
    # mutate startdate

    test mutate_startdate-1.1 {Sets the simclock's start date} -body {
        sim mutate startdate 230000ZMAR09
        simclock cget -t0
    } -cleanup {
        cleanup
    } -result {230000ZMAR09}

    
    test mutate_startdate-1.2 {Sends <Time>} -body {
        ted notifier bind ::sim <Time>
        sim mutate startdate 230000ZMAR09
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::sim <Time>}
    }


    test mutate_startdate-1.3 {Returns undo script} -body {
        sim mutate startdate 230000ZMAR09
    } -cleanup {
        cleanup
    } -result {::sim mutate startdate 100000ZJAN10}


    test mutate_startdate-1.4 {Sets "changed"} -body {
        sim mutate startdate 230000ZMAR09
        sim changed
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # mutate run/mutate pause


    test mutate_runpause-1.1 {No stop time} -setup {
        ted create NB1 BLUE SHIA NB1SHIA
    } -body {
        sim mutate run
        sim stoptime
    } -cleanup {
        cleanup
    } -result {0}

    
    test mutate_runpause-1.2 {Run for -ticks} -setup {
        ted create NB1 BLUE SHIA NB1SHIA
    } -body {
        sim mutate run -ticks 5
        sim stoptime
    } -cleanup {
        cleanup
    } -result {5}

    test mutate_runpause-1.3 {Run -until} -setup {
        ted create NB1 BLUE SHIA NB1SHIA
    } -body {
        sim mutate run -until 10
        sim stoptime
    } -cleanup {
        cleanup
    } -result {10}

    test mutate_runpause-1.4 {Sets state to "RUNNING"} -setup {
        ted create NB1 BLUE SHIA NB1SHIA
    } -body {
        sim mutate run
        sim state
    } -cleanup {
        cleanup
    } -result {RUNNING}


    test mutate_runpause-1.5 {Can't run if "RUNNING"} -setup {
        ted create NB1 BLUE SHIA NB1SHIA
    } -body {
        sim mutate run
        sim mutate run
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Assertion failed: $info(state) ne "RUNNING"}


    test mutate_runpause-1.6 {Sends <State>} -setup {
        ted create NB1 BLUE SHIA NB1SHIA
    } -body {
        ted notifier bind ::sim <State>
        sim mutate run
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::sim <State>}
    }


    test mutate_runpause-1.7 {Returns undo script} -setup {
        ted create NB1 BLUE SHIA NB1SHIA
    } -body {
        sim mutate run
    } -cleanup {
        cleanup
    } -result {}


    test mutate_runpause-2.1 {Pauses if running} -setup {
        ted create NB1 BLUE SHIA NB1SHIA
    } -body {
        sim mutate run
        simclock tick
        sim mutate pause
        sim state
    } -cleanup {
        cleanup
    } -result {PAUSED}


    test mutate_runpause-2.2 {Sends <State>} -setup {
        ted create NB1 BLUE SHIA NB1SHIA
    } -body {
        sim mutate run
        ted notifier bind ::sim <State>
        sim mutate pause
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::sim <State>}
    }

    
    test mutate_runpause-2.3 {Returns undo script} -setup {
        ted create NB1 BLUE SHIA NB1SHIA
    } -body {
        sim mutate pause
    } -cleanup {
        cleanup
    } -result {}


    test mutate_runpause-2.4 {Runs for some number of ticks} -setup {
        ted create NB1 BLUE SHIA NB1SHIA
    } -body {
        sim mutate run -ticks 5 -block yes
        list [simclock now] [sim state]
    } -cleanup {
        cleanup
    } -result {5 PAUSED}

    #-------------------------------------------------------------------
    # now

    test now-1.1 {Returns 0 at time 0} -body {
        expr {[sim now] == [simclock now]}
    } -result {1}


    #-------------------------------------------------------------------
    # state

    test state-1.1 {Returns current state} -setup {
        ted create NB1 BLUE SHIA NB1SHIA
    } -body {
        set states [list]

        lappend states [sim state]
        sim mutate run
        simclock tick
        lappend states [sim state]
        sim mutate pause
        lappend states [sim state]
        sim restart
        lappend states [sim state]

        set states
    } -cleanup {
        cleanup
    } -result {PREP RUNNING PAUSED PREP}


    #-------------------------------------------------------------------
    # stoptime

    test stoptime-1.1 {Returns current stoptime} -setup {
        ted create NB1 BLUE SHIA NB1SHIA
    } -body {
        set times [list]

        lappend times [sim stoptime]

        sim mutate run
        lappend times [sim stoptime]
        sim mutate pause
        
        sim mutate run -ticks 5
        lappend times [sim stoptime]
        sim mutate pause

        sim mutate run -until 10
        lappend times [sim stoptime]

        set times
    } -cleanup {
        cleanup
    } -result {0 0 6 10}



    #-------------------------------------------------------------------
    # restart
    #
    # NOTE: sim restart is tested pretty thoroughly during the "cleanup"
    # process and by the other tests.

    test restart-1.1 {Check results} -setup {
        ted create NB1 BLUE SHIA NB1SHIA
        sim mutate run
        simclock advance 5
        sim mutate pause
        sim mutate startdate 240000ZMAR09
        # TBD: Should schedule something in the event queue
    } -body {
        sim restart

        list \
            [sim state]         \
            [sim now]           \
            [sim changed]       \
            [simclock cget -t0]
    } -cleanup {
        cleanup
    } -result {PREP 0 1 100000ZJAN10}
    
    
    #-------------------------------------------------------------------
    # check

    test check-1.1 {Fails sanity check initially} -body {
        sim check
    } -result {0}

    
    test check-1.2 {Check succeeds} -setup {
        ted create NB1 BLUE SHIA NB1SHIA
    } -body {
        sim check
    } -cleanup {
        cleanup
    } -result {1}


    test check-1.3 {Badly stacked neighborhoods} -setup {
        ted create NB1 BLUE SHIA NB1SHIA
    }  -body {
        set a [sim check]
        ted create OV1
        set b [sim check]

        list $a $b
    } -cleanup {
        cleanup
    } -result {1 0}


    test check-1.4 {Two ensits of the same type in a neighborhood} -setup {
        ted create NB1 BLUE SHIA NB1SHIA
    }  -body {
        ensit mutate create {
            stype     BADFOOD
            location  {100 100}
            coverage  1.0
            g         NONE
            resolver  NONE
            rduration ""
            inception 1
        }

        set a [sim check]

        ensit mutate create {
            stype     BADFOOD
            location  {100 100}
            coverage  1.0
            g         NONE
            resolver  NONE
            rduration ""
            inception 1
        }
        
        set b [sim check]

        list $a $b
    } -cleanup {
        cleanup
    } -result {1 0}


    test check-1.5 {Ensit with no neighborhood} -setup {
        ted create NB1 BLUE SHIA NB1SHIA NB2 NB2SHIA
        set loc [dict get [ted entity NB2] refpoint]
    }  -body {
        ted order SITUATION:ENVIRONMENTAL:CREATE \
            stype     BADFOOD                    \
            location  [map m2ref {*}$loc]        \
            coverage  1.0                        \
            g         NONE                       \
            inception 1                          \
            resolver  NONE                       \
            rduration ""

        set a [sim check]

        ted order NBHOOD:DELETE n NB2

        set b [sim check]

        list $a $b
    } -cleanup {
        cleanup
    } -result {1 0}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::


