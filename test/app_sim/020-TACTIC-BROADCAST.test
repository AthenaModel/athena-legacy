# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-BROADCAST.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) TACTIC:BROADCAST:* order tests.
#
#    This test suite tests the BROADCAST tactic's orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE BOB CBS CNN IOM1 IOM2
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Standard items

    set T1 {
        owner       JOE
        priority    top
        cap         CBS
        a           SELF
        iom         IOM1
        x1          500.0
        on_lock     NO
        once        YES
    }

    set T2 {
        owner       BOB
        priority    top
        cap         CNN
        a           NONE
        iom         IOM2
        x1          500.0
        on_lock     YES
        once        NO
    }

    #-------------------------------------------------------------------
    # TACTIC:BROADCAST:CREATE

    test CREATE-1.1 {required parms} -body {
        ted order -reject TACTIC:BROADCAST:CREATE {}
    } -result {
        owner {required value}
        cap {required value}
        iom {required value}
        x1 {required value}
    }

    test CREATE-1.2 {owner is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:BROADCAST:CREATE {*}$T1 owner NONESUCH
    } -cleanup {
        cleanup
    } -result {
        owner {Invalid actor, should be one of: BOB, JOE}
    }

    test CREATE-1.3 {cap is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:BROADCAST:CREATE {*}$T1 cap NONESUCH
    } -cleanup {
        cleanup
    } -result {
        cap {Invalid CAP, should be one of: CBS, CNN}
    }

    test CREATE-1.4 {a is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:BROADCAST:CREATE {*}$T1 a NONESUCH
    } -cleanup {
        cleanup
    } -result {
        a {Invalid actor "NONESUCH", should be one of: SELF, NONE, BOB, JOE}
    }

    test CREATE-1.5 {iom doesn't exist} -setup {
        setup
    } -body {
        ted order -reject TACTIC:BROADCAST:CREATE {*}$T1 iom NONESUCH
    } -cleanup {
        cleanup
    } -result {
        iom {Invalid IOM, should be one of: IOM1, IOM2}
    }

    test CREATE-1.6 {iom isn't normal} -setup {
        setup
        ted order IOM:STATE iom_id IOM1 state disabled
    } -body {
        ted order -reject TACTIC:BROADCAST:CREATE {*}$T1 iom IOM1
    } -cleanup {
        cleanup
    } -result {
        iom {Invalid IOM, should be one of: IOM2}
    }
    test CREATE-1.7 {x1 is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:BROADCAST:CREATE {*}$T1 x1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        x1 {invalid money value "NONESUCH", expected positive numeric value with optional K, M, or B suffix}
    }

    test CREATE-1.8 {priority is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:BROADCAST:CREATE {*}$T1 priority NONESUCH
    } -cleanup {
        cleanup
    } -result {
        priority {invalid value "nonesuch", should be one of: top, bottom}
    }

    test CREATE-1.9 {on_lock is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:BROADCAST:CREATE {*}$T1 on_lock NONESUCH
    } -cleanup {
        cleanup
    } -result {
        on_lock {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }

    test CREATE-1.10 {once is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:BROADCAST:CREATE {*}$T1 once NONESUCH
    } -cleanup {
        cleanup
    } -result {
        once {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }

    test CREATE-2.1 {tactic is created} -setup {
        setup
    } -body {
        ted order TACTIC:BROADCAST:CREATE $T2

        ted querylist {SELECT * FROM tactics_BROADCAST}
    } -cleanup {
        cleanup
    } -result {
tactic_id    1
tactic_type  BROADCAST
owner        BOB
narrative    Broadcast IOM2 via CNN with prep cost of $500.0 and no attribution.
priority     1
cap          CNN
a            NONE
iom          IOM2
x1           500.0
once         0
on_lock      1
state        normal
exec_ts      
exec_flag    0
    }

    test CREATE-2.2 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:BROADCAST:CREATE $T1
        ted notifier received

        # NOTE: Two updates, because of priority setting.
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
        {::rdb <tactics> update 1}
    }


    test CREATE-3.1 {undo effects} -setup {
        setup
        ted order TACTIC:BROADCAST:CREATE $T1
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> delete 1}
    }

    #-------------------------------------------------------------------
    # TACTIC:BROADCAST:UPDATE

    proc setup_update_broadcast {} {
        variable T2
        setup
        ted order TACTIC:BROADCAST:CREATE $T2
    }

    test UPDATE-1.1 {required parms} -body {
        ted order -reject TACTIC:BROADCAST:UPDATE {}
    } -result {
        tactic_id {required value}
    }

    
    test UPDATE-1.2 {tactic_id is unknown} -setup {
        setup_update_broadcast
    } -body {
        ted order -reject TACTIC:BROADCAST:UPDATE \
            tactic_id NONESUCH
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Invalid tactic ID: "NONESUCH"}
    }

    test UPDATE-1.3 {cap is unknown} -setup {
        setup_update_broadcast
    } -body {
        ted order -reject TACTIC:BROADCAST:UPDATE tactic_id 1 cap NONESUCH
    } -cleanup {
        cleanup
    } -result {
        cap {Invalid CAP, should be one of: CBS, CNN}
    }

    test UPDATE-1.4 {a is invalid} -setup {
        setup_update_broadcast
    } -body {
        ted order -reject TACTIC:BROADCAST:UPDATE tactic_id 1 a NONESUCH
    } -cleanup {
        cleanup
    } -result {
        a {Invalid actor "NONESUCH", should be one of: SELF, NONE, BOB, JOE}
    }

    test UPDATE-1.5 {iom doesn't exist} -setup {
        setup_update_broadcast
    } -body {
        ted order -reject TACTIC:BROADCAST:UPDATE tactic_id 1 iom NONESUCH
    } -cleanup {
        cleanup
    } -result {
        iom {Invalid IOM, should be one of: IOM1, IOM2}
    }

    test UPDATE-1.6 {iom isn't normal} -setup {
        setup_update_broadcast
        ted order IOM:STATE iom_id IOM1 state disabled
    } -body {
        ted order -reject TACTIC:BROADCAST:UPDATE tactic_id 1 iom IOM1
    } -cleanup {
        cleanup
    } -result {
        iom {Invalid IOM, should be one of: IOM2}
    }

    test UPDATE-1.7 {x1 is invalid} -setup {
        setup_update_broadcast
    } -body {
        ted order -reject TACTIC:BROADCAST:UPDATE tactic_id 1 x1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        x1 {invalid money value "NONESUCH", expected positive numeric value with optional K, M, or B suffix}
    }

    test UPDATE-1.8 {on_lock is invalid} -setup {
        setup_update_broadcast
    } -body {
        ted order -reject TACTIC:BROADCAST:UPDATE tactic_id 1 on_lock NONESUCH
    } -cleanup {
        cleanup
    } -result {
        on_lock {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }

    test UPDATE-1.9 {once is invalid} -setup {
        setup_update_broadcast
    } -body {
        ted order -reject TACTIC:BROADCAST:UPDATE tactic_id 1 once NONESUCH
    } -cleanup {
        cleanup
    } -result {
        once {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }

    test UPDATE-1.10 {wrong flavor of tactic} -setup {
        setup_update_broadcast
        rdb eval {UPDATE tactics SET tactic_type='BOGUS'}
    } -body {
        ted order -reject TACTIC:BROADCAST:UPDATE tactic_id 1
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Tactic 1 is not a BROADCAST tactic}
    }

    test UPDATE-2.1 {tactic is updated} -setup {
        setup_update_broadcast
    } -body {
        ted order TACTIC:BROADCAST:UPDATE \
            tactic_id 1 x1 150

        ted querylist {SELECT * FROM tactics_BROADCAST}
    } -cleanup {
        cleanup
    } -result {
tactic_id    1
tactic_type  BROADCAST
owner        BOB
narrative    Broadcast IOM2 via CNN with prep cost of $150.0 and no attribution.
priority     1
cap          CNN
a            NONE
iom          IOM2
x1           150.0
once         0
on_lock      1
state        normal
exec_ts      
exec_flag    0
    }

    test UPDATE-2.2 {Effects} -setup {
        setup
        ted order TACTIC:BROADCAST:CREATE $T2
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:BROADCAST:UPDATE tactic_id 1 x1 150
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
    }


    test UPDATE-3.1 {undo effects} -setup {
        setup_update_broadcast
        ted order TACTIC:BROADCAST:UPDATE tactic_id 1 x1 150
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





