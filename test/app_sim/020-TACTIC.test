# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) TACTIC:* order tests.
#
#    This test suite tests the TACTIC:* orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE BOB NB1 NB2 BLUE BRIT ALQ
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Standard items

    set SM1 {
        owner       JOE
        priority    bottom
        int1        10
    }

    set D1 {
        owner       JOE
        priority    bottom
        n           NB1
        g           BLUE
        text1       HOLD_FIRE
    }

    #-------------------------------------------------------------------
    # TACTIC:DELETE
    #
    # Note: normally we'd test the CREATE orders before DELETE; but
    # there's a CREATE order for each flavor of tactic.  We'll be
    # testing each flavor's orders together instead, and doing the
    # generic orders up front.

    test DELETE-1.1 {required parms} -body {
        ted order -reject TACTIC:DELETE {}
    } -result {
        tactic_id {required value}
    }

    
    test DELETE-1.2 {unknown tactic_id} -body {
        ted order -reject TACTIC:DELETE tactic_id NONESUCH
    } -result {
        tactic_id {Invalid tactic ID: "NONESUCH"}
    }


    test DELETE-2.1 {Effects} -setup {
        setup
        ted order TACTIC:SAVEMONEY:CREATE $SM1
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:DELETE tactic_id 1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> delete 1}
    }


    test DELETE-3.1 {Undo effects} -setup {
        setup
        ted order TACTIC:SAVEMONEY:CREATE $SM1
        ted order TACTIC:DELETE tactic_id 1
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
    }


    #-------------------------------------------------------------------
    # TACTIC:STATE

    test STATE-1.1 {required parms} -body {
        ted order -reject TACTIC:STATE {}
    } -result {
        tactic_id {required value}
        state {required value}
    }

    
    test STATE-1.2 {unknown tactic_id} -body {
        ted order -reject TACTIC:STATE tactic_id NONESUCH state disabled
    } -result {
        tactic_id {Invalid tactic ID: "NONESUCH"}
    }


    test STATE-2.1 {Effects} -setup {
        setup
        ted order TACTIC:SAVEMONEY:CREATE $SM1
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:STATE tactic_id 1 state disabled
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
    }


    test STATE-3.1 {Undo effects} -setup {
        setup
        ted order TACTIC:SAVEMONEY:CREATE $SM1
        ted order TACTIC:STATE tactic_id 1 state disabled
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
    }

    #-------------------------------------------------------------------
    # TACTIC:PRIORITY

    proc priority_setup {} {
        variable SM1
        setup
        ted order TACTIC:SAVEMONEY:CREATE $SM1
        ted order TACTIC:SAVEMONEY:CREATE $SM1
        ted order TACTIC:SAVEMONEY:CREATE $SM1
    }

    test PRIORITY-1.1 {required parms} -body {
        ted order -reject TACTIC:PRIORITY {}
    } -result {
        tactic_id {required value}
        priority {required value}
    }

    
    test PRIORITY-1.2 {unknown tactic_id} -body {
        ted order -reject TACTIC:PRIORITY tactic_id NONESUCH priority top
    } -result {
        tactic_id {Invalid tactic ID: "NONESUCH"}
    }

    test PRIORITY-1.3 {invalid before} -setup {
        priority_setup
    } -body {
        ted order -reject TACTIC:PRIORITY tactic_id 1 priority NONESUCH
    } -cleanup {
        cleanup
    } -result {
        priority {invalid value "nonesuch", should be one of: top, raise, lower, bottom}
    }

    test PRIORITY-2.1 {set priority} -setup {
        priority_setup
    } -body {
        ted order TACTIC:PRIORITY tactic_id 3 priority top
        rdb eval {SELECT tactic_id FROM tactics ORDER BY priority}
    } -cleanup {
        cleanup
    } -result {3 1 2}

    test PRIORITY-2.2 {Effects} -setup {
        priority_setup
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:PRIORITY tactic_id 3 priority top
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 3}
        {::rdb <tactics> update 1}
        {::rdb <tactics> update 2}
    }


    test PRIORITY-3.1 {Undo effects} -setup {
        priority_setup
        ted order TACTIC:PRIORITY tactic_id 3 priority top
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
        {::rdb <tactics> update 2}
        {::rdb <tactics> update 3}
    }



    #-------------------------------------------------------------------
    # TACTIC:SAVEMONEY:CREATE

    test SAVEMONEY:CREATE-1.1 {required parms} -body {
        ted order -reject TACTIC:SAVEMONEY:CREATE {}
    } -result {
        owner {required value}
        int1 {required value}
    }

    
    test SAVEMONEY:CREATE-1.2 {a is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SAVEMONEY:CREATE \
            [dict merge $SM1 [list owner NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        owner {Invalid actor, should be one of: JOE, BOB}
    }

    test SAVEMONEY:CREATE-1.3 {int1 is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SAVEMONEY:CREATE \
            [dict merge $SM1 [list int1 NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        int1 {invalid value "NONESUCH", expected integer}
    }

    test SAVEMONEY:CREATE-1.4 {priority is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SAVEMONEY:CREATE [dict merge $SM1 {
            priority NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        priority {invalid value "nonesuch", should be one of: top, bottom}
    }

    test SAVEMONEY:CREATE-2.1 {tactic is created} -setup {
        setup
    } -body {
        ted order TACTIC:SAVEMONEY:CREATE $SM1

        ted query {SELECT * FROM tactics}
    } -cleanup {
        cleanup
    } -result {
tactic_id tactic_type owner narrative                        priority state  exec_ts exec_flag m n f g text1 int1 
--------- ----------- ----- -------------------------------- -------- ------ ------- --------- - - - - ----- ---- 
1         SAVEMONEY   JOE   Save 10% of income for later use 1        normal         0                       10   
    }


    test SAVEMONEY:CREATE-2.2 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:SAVEMONEY:CREATE $SM1
        ted notifier received

        # NOTE: Two updates, because of priority setting.
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
        {::rdb <tactics> update 1}
    }


    test SAVEMONEY:CREATE-3.1 {undo effects} -setup {
        setup
        ted order TACTIC:SAVEMONEY:CREATE $SM1
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> delete 1}
    }


    #-------------------------------------------------------------------
    # TACTIC:SAVEMONEY:UPDATE

    proc setup_update_savemoney {} {
        variable SM1
        setup
        ted order TACTIC:SAVEMONEY:CREATE $SM1
    }

    test SAVEMONEY:UPDATE-1.1 {required parms} -body {
        ted order -reject TACTIC:SAVEMONEY:UPDATE {}
    } -result {
        tactic_id {required value}
        int1 {required value}
    }

    
    test SAVEMONEY:UPDATE-1.2 {tactic_id is unknown} -setup {
        setup_update_savemoney
    } -body {
        ted order -reject TACTIC:SAVEMONEY:UPDATE tactic_id NONESUCH int1 10
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Invalid tactic ID: "NONESUCH"}
    }

    test SAVEMONEY:UPDATE-1.3 {int1 is invalid} -setup {
        setup_update_savemoney
    } -body {
        ted order -reject TACTIC:SAVEMONEY:UPDATE tactic_id 1 int1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        int1 {invalid value "NONESUCH", expected integer}
    }

    test SAVEMONEY:UPDATE-1.4 {wrong flavor of tactic} -setup {
        setup_update_savemoney
        rdb eval {UPDATE tactics SET tactic_type='BOGUS'}
    } -body {
        ted order -reject TACTIC:SAVEMONEY:UPDATE tactic_id 1 int1 5
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Tactic 1 is not a SAVEMONEY tactic}
    }

    test SAVEMONEY:UPDATE-2.1 {activities are updated} -setup {
        setup_update_savemoney
    } -body {
        ted order TACTIC:SAVEMONEY:UPDATE tactic_id 1 int1 20

        ted query {SELECT * FROM tactics}
    } -cleanup {
        cleanup
    } -result {
tactic_id tactic_type owner narrative                        priority state  exec_ts exec_flag m n f g text1 int1 
--------- ----------- ----- -------------------------------- -------- ------ ------- --------- - - - - ----- ---- 
1         SAVEMONEY   JOE   Save 20% of income for later use 1        normal         0                       20   
    }


    test SAVEMONEY:UPDATE-2.2 {Effects} -setup {
        setup_update_savemoney
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:SAVEMONEY:UPDATE tactic_id 1 int1 20
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
        {::rdb <tactics> update 1}
    }


    test SAVEMONEY:UPDATE-3.1 {undo effects} -setup {
        setup_update_savemoney
        ted order TACTIC:SAVEMONEY:UPDATE tactic_id 1 int1 20
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





