# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-condition_cash.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    condition_cash(sim) tests.
#
#    This test suite tests the condition_cash(sim) ensemble.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        variable gid
        variable tid

        ted create JOE BOB NB1 NB2 BLUE BRIT
        ted order TACTIC:SAVE:CREATE owner JOE int1 10
        ted order GOAL:CREATE owner BOB narrative "Sample Goal"

        set gid [lindex [goal names]   0]
        set tid [lindex [tactic names] 0]

        cash load

        # Verify that unused columns contain NULL
        rdb nullvalue "@"
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        rdb nullvalue ""
        array unset parms
        ted cleanup
    }

    # Standard Conditions.
    
    set C1 {
        co_id          1
        condition_type CASH
        a              BOB
        op1            LT
        x1             20000
    }

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative} -setup {
        setup
        condition mutate create $C1
    } -body {
        condition::CASH narrative [condition get 1]
    } -cleanup {
        cleanup
    } -result {Actor BOB's cash reserve is less than $20,000}

    #-------------------------------------------------------------------
    # check


    test check-1.1 {check: successful} -setup {
        setup
        condition mutate create $C1
    } -body {
        condition::CASH check [condition get 1]
    } -cleanup {
        cleanup
    } -result {}

    test check-1.2 {check: actor deleted} -setup {
        setup
        condition mutate create $C1
        rdb eval {DELETE FROM actors WHERE a='BOB'}
    } -body {
        condition::CASH check [condition get 1]
    } -cleanup {
        cleanup
    } -result {Actor BOB no longer exists.}

    #-------------------------------------------------------------------
    # eval


    # Sets up for a cash comparison.  Presumes that BOB is the
    # actor and that there is a CASH condition with condition_id 1.
    proc CashEval {table cash comp amount} {
        rdb eval "UPDATE $table SET cash_reserve=\$cash WHERE a='BOB'"
        condition mutate update [list condition_id 1 op1 $comp x1 $amount]
        return [condition::CASH eval [condition get 1]]
    }

    test eval-1.1 {eval static, change static} -setup {
        setup
        condition mutate create $C1
        # JOE is the owner of this condition; and the condition
        # queries BOB's cash_reserve.  So we look at the static value
        # of BOB's cash reserve as it changes.
    } -body {
        set a [CashEval actors 100 LT 200]
        set b [CashEval actors 200 LT 100]
        set c [CashEval actors 200 EQ 200]
        set d [CashEval actors 100 EQ 200]
        set e [CashEval actors 200 GT 100]
        set f [CashEval actors 100 GT 200]

        list $a $b $c $d $e $f
    } -cleanup {
        cleanup
    } -result {1 0 1 0 1 0}

    test eval-1.2 {eval static, change transient} -setup {
        setup
        condition mutate create $C1
        # JOE is the owner of this condition; and the condition
        # queries BOB's cash_reserve.  So we look at the static value
        # of BOB's cash reserve, which will remain fixed at $150,000
        # as we vary BOB's transient cash_reserve.
    } -body {
        set a [CashEval working_cash 100 LT 200]
        set b [CashEval working_cash 200 LT 100]
        set c [CashEval working_cash 200 EQ 200]
        set d [CashEval working_cash 100 EQ 200]
        set e [CashEval working_cash 200 GT 100]
        set f [CashEval working_cash 100 GT 200]

        list $a $b $c $d $e $f
    } -cleanup {
        cleanup
    } -result {0 0 0 0 1 1}

    test eval-1.3 {eval transient, change transient} -setup {
        setup
        condition mutate create [dict merge $C1 [list co_id $gid]]

        # BOB is the owner of this condition; and the condition
        # queries BOB's cash_reserve.  So we look at the transient value
        # of BOB's cash reserve as it changes.
    } -body {
        set a [CashEval working_cash 100 LT 200]
        set b [CashEval working_cash 200 LT 100]
        set c [CashEval working_cash 200 EQ 200]
        set d [CashEval working_cash 100 EQ 200]
        set e [CashEval working_cash 200 GT 100]
        set f [CashEval working_cash 100 GT 200]

        list $a $b $c $d $e $f
    } -cleanup {
        cleanup
    } -result {1 0 1 0 1 0}

    test CASH-3.2 {eval transient, change static} -setup {
        setup
        condition mutate create [dict merge $C1 [list co_id $gid]]

        # BOB is the owner of this condition; and the condition
        # queries BOB's cash_reserve.  So we look at the transient value
        # of BOB's cash reserve, which will remain fixed at $150,000
        # as we vary BOB's static cash_reserve.
    } -body {
        set a [CashEval actors 100 LT 200]
        set b [CashEval actors 200 LT 100]
        set c [CashEval actors 200 EQ 200]
        set d [CashEval actors 100 EQ 200]
        set e [CashEval actors 200 GT 100]
        set f [CashEval actors 100 GT 200]

        list $a $b $c $d $e $f
    } -cleanup {
        cleanup
    } -result {0 0 0 0 1 1}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::






