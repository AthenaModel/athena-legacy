# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-condition_cash.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    condition_cash(sim) tests.
#
#    This test suite tests the condition_cash(sim) ensemble.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        ted create JOE BOB NB1 NB2 BLUE BRIT
        ted order TACTIC:SAVE:CREATE owner JOE int1 10

        # Verify that unused columns contain NULL
        rdb nullvalue "@"
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        rdb nullvalue ""
        array unset parms
        ted cleanup
    }

    proc mkupdate {condition_id parms} {
        set dict {
            a     ""
            text1 ""
            x1    ""
        }

        dict set dict condition_id $condition_id
        return [dict merge $dict $parms]
    }

    # Standard Conditions.
    
    set C1 {
        co_id          1
        condition_type CASH
        a              BOB
        text1          LT
        x1             20000
        list1          {D E F}
    }

    #-------------------------------------------------------------------
    # CASH Ensemble

    test CASH-1.1 {narrative} -setup {
        setup
        condition mutate create $C1
    } -body {
        condition::CASH narrative [condition get 1]
    } -cleanup {
        cleanup
    } -result {Actor BOB's cash reserve is less than $20,000}

    test CASH-2.1 {check: successful} -setup {
        setup
        condition mutate create $C1
    } -body {
        condition::CASH check [condition get 1]
    } -cleanup {
        cleanup
    } -result {}

    test CASH-2.2 {check: actor deleted} -setup {
        setup
        condition mutate create $C1
        rdb eval {DELETE FROM actors WHERE a='BOB'}
    } -body {
        condition::CASH check [condition get 1]
    } -cleanup {
        cleanup
    } -result {Actor BOB no longer exists.}

    # Sets up for a cash comparison.  Presumes that BOB is the
    # actor and that there is a CASH condition with condition_id 1.
    proc CashEval {cash comp amount} {
        rdb eval {UPDATE actors SET cash_reserve=$cash WHERE a='BOB'}
        condition mutate update [mkupdate 1 [list text1 $comp x1 $amount]]
        return [condition::CASH eval [condition get 1]]
    }

    test CASH-3.1 {eval} -setup {
        setup
        condition mutate create $C1
    } -body {
        set a [CashEval 100 LT 200]
        set b [CashEval 200 LT 100]
        set c [CashEval 200 EQ 200]
        set d [CashEval 100 EQ 200]
        set e [CashEval 200 GT 100]
        set f [CashEval 100 GT 200]

        list $a $b $c $d $e $f
    } -cleanup {
        cleanup
    } -result {1 0 1 0 1 0}


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::






