# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-CURSE.test
#
# AUTHOR:
#    Dave Hanks
#
# DESCRIPTION:
#    app_sim(1) TACTIC:CURSE:* order tests.
#
#    This test suite tests the CURSE tactic's orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE BOB SHIA SUNN BLUE

        ted order CURSE:CREATE curse_id C1
        ted order CURSE:CREATE curse_id C2

        ted order INJECT:SAT:CREATE curse_id C1 g @CIV1 c SFT mag XL+
        ted order INJECT:SAT:CREATE curse_id C2 g @CIV1 c SFT mag XL+
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Standard items

    set T1 {
        owner       SYSTEM
        priority    top
        curse       C1
        roles       {@CIV1 {SUNN SHIA}}
        on_lock     NO
        once        YES
    }

    set T2 {
        owner       SYSTEM
        priority    top
        curse       C1
        roles       {@CIV1 {SUNN SHIA}}
        on_lock     YES
        once        NO
    }

    #-------------------------------------------------------------------
    # TACTIC:CURSE:CREATE

    test CREATE-1.1 {required parms} -body {
        ted order -reject TACTIC:CURSE:CREATE {}
    } -result {
        owner {required value}
        curse {required value}
        roles {required value}
    }

    test CREATE-1.2 {owner is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:CURSE:CREATE {*}$T1 owner NONESUCH
    } -cleanup {
        cleanup
    } -result {
        owner {Invalid system agent, should be one of: SYSTEM}
    }

    test CREATE-1.3 {curse is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:CURSE:CREATE {*}$T1 curse NONESUCH
    } -cleanup {
        cleanup
    } -result {
        curse {Invalid CURSE, should be one of: C1, C2}
    }

    test CREATE-1.4 {roles is invalid} -constraints validator -setup {
        setup
    } -body {
        ted order -reject TACTIC:CURSE:CREATE {*}$T1 roles NONESUCH
    } -cleanup {
        cleanup
    } -result {
    }

    test CREATE-1.5 {curse isn't normal} -setup {
        setup
        ted order CURSE:STATE curse_id C1 state disabled
    } -body {
        ted order -reject TACTIC:CURSE:CREATE {*}$T1 curse C1
    } -cleanup {
        cleanup
    } -result {
        curse {Invalid CURSE, should be one of: C2}
    }

    test CREATE-1.6 {priority is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:CURSE:CREATE {*}$T1 priority NONESUCH
    } -cleanup {
        cleanup
    } -result {
        priority {invalid value "nonesuch", should be one of: top, bottom}
    }

    test CREATE-1.7 {on_lock is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:CURSE:CREATE {*}$T1 on_lock NONESUCH
    } -cleanup {
        cleanup
    } -result {
        on_lock {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }

    test CREATE-1.8 {once is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:CURSE:CREATE {*}$T1 once NONESUCH
    } -cleanup {
        cleanup
    } -result {
        once {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }

    test CREATE-2.1 {tactic is created} -setup {
        setup
    } -body {
        ted order TACTIC:CURSE:CREATE $T2

        ted querylist {SELECT * FROM tactics_CURSE}
    } -cleanup {
        cleanup
    } -result {
tactic_id    1
tactic_type  CURSE
owner        SYSTEM
narrative    C1 (C1) causes XL+ Sat. change of @CIV1 = (SUNN, SHIA) with SFT
priority     1
curse        C1
roles        @CIV1 {SUNN SHIA}
once         0
on_lock      1
state        normal
exec_ts      
exec_flag    0
    }

    test CREATE-2.2 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:CURSE:CREATE $T1
        ted notifier received

        # NOTE: Two updates, because of priority setting.
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
        {::rdb <tactics> update 1}
    }


    test CREATE-3.1 {undo effects} -setup {
        setup
        ted order TACTIC:CURSE:CREATE $T1
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> delete 1}
    }

    #-------------------------------------------------------------------
    # TACTIC:CURSE:UPDATE

    proc setup_update_curse {} {
        variable T2
        setup
        ted order TACTIC:CURSE:CREATE $T2
    }

    test UPDATE-1.1 {required parms} -body {
        ted order -reject TACTIC:CURSE:UPDATE {}
    } -result {
        tactic_id {required value}
    }

    
    test UPDATE-1.2 {tactic_id is unknown} -setup {
        setup_update_curse
    } -body {
        ted order -reject TACTIC:CURSE:UPDATE \
            tactic_id NONESUCH
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Invalid tactic ID: "NONESUCH"}
    }

    test UPDATE-1.3 {curse is unknown} -setup {
        setup_update_curse
    } -body {
        ted order -reject TACTIC:CURSE:UPDATE tactic_id 1 curse NONESUCH
    } -cleanup {
        cleanup
    } -result {
        curse {Invalid CURSE, should be one of: C1, C2}
    }

    test UPDATE-1.4 {roles is unknown} -constraints validator -setup {
        setup_update_curse
    } -body {
        ted order -reject TACTIC:CURSE:UPDATE tactic_id 1 roles NONESUCH
    } -cleanup {
        cleanup
    } -result {
    }

    test UPDATE-1.5 {curse isn't normal} -setup {
        setup_update_curse
        ted order CURSE:STATE curse_id C1 state disabled
    } -body {
        ted order -reject TACTIC:CURSE:UPDATE tactic_id 1 curse C1
    } -cleanup {
        cleanup
    } -result {
        curse {Invalid CURSE, should be one of: C2}
    }

    test UPDATE-1.6 {on_lock is invalid} -setup {
        setup_update_curse
    } -body {
        ted order -reject TACTIC:CURSE:UPDATE tactic_id 1 on_lock NONESUCH
    } -cleanup {
        cleanup
    } -result {
        on_lock {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }

    test UPDATE-1.7 {once is invalid} -setup {
        setup_update_curse
    } -body {
        ted order -reject TACTIC:CURSE:UPDATE tactic_id 1 once NONESUCH
    } -cleanup {
        cleanup
    } -result {
        once {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }

    test UPDATE-1.8 {wrong flavor of tactic} -setup {
        setup_update_curse
        rdb eval {UPDATE tactics SET tactic_type='BOGUS'}
    } -body {
        ted order -reject TACTIC:CURSE:UPDATE tactic_id 1
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Tactic 1 is not a CURSE tactic}
    }

    test UPDATE-2.1 {tactic is updated} -setup {
        setup_update_curse
    } -body {
        ted order TACTIC:CURSE:UPDATE \
            tactic_id 1 roles {@CIV1 {SUNN}}

        ted querylist {SELECT * FROM tactics_CURSE}
    } -cleanup {
        cleanup
    } -result {
tactic_id    1
tactic_type  CURSE
owner        SYSTEM
narrative    C1 (C1) causes XL+ Sat. change of @CIV1 = (SUNN) with SFT
priority     1
curse        C1
roles        @CIV1 {SUNN}
once         0
on_lock      1
state        normal
exec_ts      
exec_flag    0
    }

    test UPDATE-2.2 {Effects} -setup {
        setup
        ted order TACTIC:CURSE:CREATE $T2
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:CURSE:UPDATE tactic_id 1 roles {@CIV1 SUNN}
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
    }


    test UPDATE-3.1 {undo effects} -setup {
        setup_update_curse
        ted order TACTIC:CURSE:UPDATE tactic_id 1 roles {@CIV1 SUNN}
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





