# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-tacticx_demob.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    tacticx_demob(sim) tests.
#
#    This test suite tests the tacticx_demob(sim) class.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        variable T1
        variable coffer
        ted create JOE BOB NB1 NB2 BLUE BRIT SHIA SUNN KURD
        personnel start
        personnel load
        set coffer [coffer new JOE]


        strategy::JOE addblock_
        set block [strategy::JOE blocks end]
        set T1 [tacticx::DEMOB new $block]
    }

    # Clean up after a test

    proc cleanup {} {
        variable coffer
        $coffer destroy
        ted cleanup
    }

    #-------------------------------------------------------------------
    # Constructor

    test constructor-1.1 {default state} -setup {
        setup
    } -body {
        ted pdict [$T1 getdict]
    } -cleanup {
        cleanup
    } -match glob -result {
        id         *
        execstatus NONE
        state      invalid
        mode       ALL
        personnel  0
        block      ::bean::block*
        g          {}
    }

    

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative, default state} -setup {
        setup
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Demobilize all of group ???'s undeployed personnel.}

    test narrative-1.2 {narrative, with amount} -setup {
        setup
        $T1 set g BLUE
        $T1 set mode SOME
        $T1 set personnel 100
        $T1 check
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Demobilize 100 of group BLUE's undeployed personnel.}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {Initial state fails} -setup {
        setup
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {g {No group selected.}}

    test check-1.2 {g owned by another actor} -setup {
        setup
    } -body {
        $T1 set g NONESUCH
        $T1 check
    } -cleanup {
        cleanup
    } -result {g {Force/organization group "NONESUCH" is not owned by JOE.}}

    test check-1.3 {Success} -setup {
        setup
    } -body {
        $T1 set g BLUE
        $T1 set personnel 100
        $T1 check
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # obligate

    test obligate-1.1 {Sufficient personnel} -setup {
        setup
    } -body {
        $T1 set g BLUE
        $T1 set mode SOME
        $T1 set personnel 100

        set a [$coffer troops BLUE undeployed]
        set b [$T1 obligate $coffer]
        set c [$coffer troops BLUE undeployed]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {5000 1 4900}

    test obligate-1.2 {Insufficient personnel} -setup {
        setup
    } -body {
        $T1 set g BLUE
        $T1 set mode SOME
        $T1 set personnel 10000

        set a [$coffer troops BLUE undeployed]
        set b [$T1 obligate $coffer]
        set c [$coffer troops BLUE undeployed]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {5000 0 5000}

    test obligate-1.3 {All personnel} -setup {
        setup
    } -body {
        $T1 set g BLUE
        $T1 set mode ALL

        set a [$coffer troops BLUE undeployed]
        set b [$T1 obligate $coffer]
        set c [$coffer troops BLUE undeployed]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {5000 1 0}

    #-------------------------------------------------------------------
    # execute

    test execute-1.1 {always succeeds} -setup {
        setup
        $T1 set g BLUE
        $T1 set mode SOME
        $T1 set personnel 1000
        $T1 obligate $coffer
    } -body {
        $T1 execute
        ted query {SELECT * FROM working_personnel WHERE g='BLUE'}
    } -cleanup {
        cleanup
    } -result {
g    personnel available 
---- --------- --------- 
BLUE 4000      4000      
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







