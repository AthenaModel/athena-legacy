# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-mad.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    mad(sim) tests.
#
#    This test suite tests the mad(sim) mutators and queries
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Standard MADs

    set m1 {
        oneliner "The First MAD" 
        cause    UNIQUE
        s        1.0
        p        1.0
        q        0.9
    }

    set m2 {
        oneliner "The Second MAD"
        cause    CIVCAS
        s        0.9
        p        0.8
        q        0.7
    }

    set m3 {
        oneliner "The Third MAD"
        cause    PATROL
        s        0.7
        p        0.6
        q        0.5
    }



    # Advance time during setup
    
    proc advance {} {
        ted create NB1 BLUE USAID SHIA NB1SHIA

        scenario mutate reconcile
        ted order SIM:LOCK
        ted order SIM:RUN days 1 block yes
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Do an initial clean-up; this will remove the Adjustments
    # MAD.
    cleanup

    #-------------------------------------------------------------------
    # mutate create

    test create-1.1 {MADs are created} -setup {
        ted create NB1 BLUE USAID SHIA 
    } -body {
        mad mutate create $m1
        mad mutate create $m2
        mad mutate create $m3

        ted query {SELECT * FROM mads}
    } -cleanup {
        cleanup
    } -result {
id oneliner       cause  s   p   q   driver 
-- -------------- ------ --- --- --- ------ 
1  The First MAD  UNIQUE 1.0 1.0 0.9 -1     
2  The Second MAD CIVCAS 0.9 0.8 0.7 -1     
3  The Third MAD  PATROL 0.7 0.6 0.5 -1     
    }


    test create-1.2 {After PREP, GRAM drivers are assigned} -setup {
        parmdb set demsit.disable yes
        advance
    } -body {
        mad mutate create $m1
        mad mutate create $m2
        mad mutate create $m3

        ted query {SELECT * FROM mads}
    } -cleanup {
        cleanup
    } -result {
id oneliner       cause  s   p   q   driver 
-- -------------- ------ --- --- --- ------ 
1  The First MAD  UNIQUE 1.0 1.0 0.9 1      
2  The Second MAD CIVCAS 0.9 0.8 0.7 2      
3  The Third MAD  PATROL 0.7 0.6 0.5 3      
    }


    test create-1.3 {<Entity> create} -body {
        ted notifier bind ::mad <Entity>
        mad mutate create $m1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Entity> create 1}
    }


    test create-2.1 {undo deletes the mad} -setup {
        set undo [mad mutate create $m1]
    } -body {
        eval $undo
        rdb eval {SELECT id FROM mads}
    } -cleanup {
        cleanup
    } -result {}


    test create-2.2 {On undo, <Entity> delete} -setup {
        set undo [mad mutate create $m1]
    } -body {
        ted notifier bind ::mad <Entity>
        eval $undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Entity> delete 1}
    }


    test create-2.3 {undo deletes the GRAM driver} -setup {
        advance
        set undo [mad mutate create $m1]
        set driver [rdb onecolumn {
            SELECT driver FROM mads WHERE oneliner='First MAD'
        }]
    } -body {
        eval $undo
        rdb exists {SELECT driver FROM gram_driver WHERE driver=$driver}
    } -cleanup {
        cleanup
    } -result {0}


    #-------------------------------------------------------------------
    # mutate delete

    test delete-1.1 {MAD is deleted} -setup {
        mad mutate create $m1
        mad mutate create $m2
    } -body {
        mad mutate delete 1

        # Is 1 gone?
        rdb eval {SELECT id FROM mads}
    } -cleanup {
        cleanup
    } -result {2}


    test delete-1.2 {GRAM driver is deleted} -setup {
        parmdb set demsit.disable yes
        advance

        mad mutate create $m1
        mad mutate create $m2
    } -body {
        mad mutate delete 1

        # Is 1 gone?
        ted query {
            SELECT driver,oneliner FROM gram_driver
            WHERE oneliner GLOB '*MAD*'
        }
    } -cleanup {
        cleanup
    } -result {
driver oneliner       
------ -------------- 
2      The Second MAD 
    }


    test delete-1.3 {<Entity> delete} -setup {
        mad mutate create $m1
    } -body {
        ted notifier bind ::mad <Entity>
        mad mutate delete 1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Entity> delete 1}
    }


    test delete-2.1 {Undo restores MAD} -setup {
        mad mutate create $m1
        set undo [mad mutate delete 1]
    } -body {
        {*}$undo
        ted query {SELECT * FROM mads}
    } -cleanup {
        cleanup
    } -result {
id oneliner      cause  s   p   q   driver 
-- ------------- ------ --- --- --- ------ 
1  The First MAD UNIQUE 1.0 1.0 0.9 -1     
    }


    test delete-2.2 {Undo restores GRAM driver} -setup {
        parmdb set demsit.disable yes
        advance

        mad mutate create $m1
        set undo [mad mutate delete 1]
    } -body {
        eval $undo
        ted query {
            SELECT driver,oneliner FROM gram_driver
            WHERE oneliner GLOB '*MAD*'
        }
    } -cleanup {
        cleanup
    } -result {
driver oneliner      
------ ------------- 
1      The First MAD 
    }


    test delete-2.3 {On undo, <Entity> create} -setup {
        mad mutate create $m1
        set undo [mad mutate delete 1]
    } -body {
        ted notifier bind ::mad <Entity>
        {*}$undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Entity> create 1}
    }

    #-------------------------------------------------------------------
    # mutate update

    test update-1.1 {MAD is updated} -setup {
        mad mutate create $m1
    } -body {
        mad mutate update {
            id       1 
            oneliner Modified
            cause    HUNGER
            s        0.5
            p        0.1
            q        0.0
        }

        ted query {SELECT * FROM mads}
    } -cleanup {
        cleanup
    } -result {
id oneliner cause  s   p   q   driver 
-- -------- ------ --- --- --- ------ 
1  Modified HUNGER 0.5 0.1 0.0 -1     
    }


    test update-1.2 {GRAM driver's oneliner is set} -setup {
        parmdb set demsit.disable yes
        advance

        mad mutate create $m1
    } -body {
        mad mutate update {id 1 oneliner "MAD Modified"}

        ted query {
            SELECT driver,oneliner FROM gram_driver
            WHERE oneliner GLOB '*MAD*'
        }
    } -cleanup {
        cleanup
    } -result {
driver oneliner     
------ ------------ 
1      MAD Modified 
    }


    test update-1.3 {<Entity> update} -setup {
        mad mutate create $m1
    } -body {
        ted notifier bind ::mad <Entity>
        mad mutate update {id 1 oneliner Modified}
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Entity> update 1}
    }


    test update-2.1 {undo undoes the change} -setup {
        mad mutate create $m1
    } -body {
        set a [ted query {SELECT * FROM mads}]

        set undo [mad mutate update {
            id       1 
            oneliner Modified
            cause    HUNGER
            p        0.1
            q        0.0
        }]

        {*}$undo

        set b [ted query {SELECT * FROM mads}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-2.2 {undo undoes the GRAM driver change} -setup {
        advance

        mad mutate create $m1
    } -body {
        set a [ted query {SELECT * FROM gram_driver}]

        set undo [mad mutate update {id 1 oneliner Modified}]

        eval $undo

        set b [ted query {SELECT * FROM gram_driver}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-2.3 {undo sends <Entity> update} -setup {
        mad mutate create $m1
    } -body {
        set undo [mad mutate update {id 1 oneliner Modified}]

        ted notifier bind ::mad <Entity>
        {*}$undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Entity> update 1}
    }


    #-------------------------------------------------------------------
    # satadjust

    test satadjust-1.1 {Adjustment takes effect.} -setup {
        advance

        mad mutate create $m1
    } -body {
        mad mutate satadjust {
            n NB1 g SHIA c AUT mad 1 delta 5
        }

        ted query {
            SELECT n,g,c,acontrib 
            FROM gram_sat_contribs
            JOIN mads USING (driver)
            WHERE mads.id = 1
        }
    } -cleanup {
        cleanup
    } -result {
n   g    c   acontrib 
--- ---- --- -------- 
NB1 SHIA AUT 5.0      
    }


    test satadjust-1.2 {Adjustment sends report} -setup {
        advance

        mad mutate create $m1
    } -body {
        mad mutate satadjust {
            n NB1 g SHIA c AUT mad 1 delta 5
        }

        rdb eval {
            SELECT rtype,subtype,title FROM reports
            WHERE subtype = 'ADJUST'
        }
    } -cleanup {
        cleanup
    } -result {DAM ADJUST {ADJUST-1-1: Magic Satisfaction Adjustment}}

    test satadjust-1.3 {Adjustment sends events} -setup {
        advance

        mad mutate create $m1
    } -body {
        ted notifier bind ::sat <Entity>
        ted notifier bind ::mad <Entity>

        mad mutate satadjust {
            n NB1 g SHIA c AUT mad 1 delta 5
        }
        
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::sat <Entity> update {NB1 SHIA AUT}}
        {::mad <Entity> update 1}
    }


    test satadjust-2.1 {Undo removes effect.} -setup {
        advance

        mad mutate create $m1
    } -body {
        set undo [mad mutate satadjust {
            n NB1 g SHIA c AUT mad 1 delta 5
        }]

        eval $undo

        ted query {
            SELECT n,g,c,acontrib 
            FROM gram_sat_contribs
            JOIN mads USING (driver)
            WHERE mads.id = 1
        }
    } -cleanup {
        cleanup
    } -result {
n   g    c   acontrib 
--- ---- --- -------- 
NB1 SHIA AUT 0.0      
    }


    test satadjust-2.2 {Undo removes report} -setup {
        advance

        mad mutate create $m1

        set undo [mad mutate satadjust {
            n NB1 g SHIA c AUT mad 1 delta 5
        }]
    } -body {
        eval $undo

        ted query {
            SELECT rtype,subtype,title FROM reports
            WHERE subtype = 'ADJUST'
        }
    } -cleanup {
        cleanup
    } -result {
    }


    test satadjust-2.3 {Undo sends events} -setup {
        advance

        mad mutate create $m1

        set undo [mad mutate satadjust {
            n NB1 g SHIA c AUT mad 1 delta 5
        }]
    } -body {
        ted notifier bind ::sat <Entity>
        ted notifier bind ::mad <Entity>

        eval $undo

        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::sat <Entity> update {NB1 SHIA AUT}}
        {::mad <Entity> update 1}
    }

    #-------------------------------------------------------------------
    # satset

    test satset-1.1 {Adjustment takes effect.} -setup {
        advance
        mad mutate create $m1
    } -body {
        mad mutate satset {
            n NB1 g SHIA c AUT mad 1 sat 5
        }

        ted query {
            SELECT n,g,c,acontrib 
            FROM gram_sat_contribs
            JOIN mads USING (driver)
            WHERE mads.id = 1
        }
    } -cleanup {
        cleanup
    } -result {
n   g    c   acontrib 
--- ---- --- -------- 
NB1 SHIA AUT 5.0      
    }


    test satset-1.2 {Adjustment sends report} -setup {
        advance
        mad mutate create $m1
    } -body {
        mad mutate satset {
            n NB1 g SHIA c AUT mad 1 sat 5
        }

        rdb eval {
            SELECT rtype,subtype,title FROM reports
            WHERE subtype = 'ADJUST'
        }
    } -cleanup {
        cleanup
    } -result {DAM ADJUST {ADJUST-1-2: Magic Satisfaction Set}}


    test satset-1.3 {Adjustment sends events} -setup {
        advance
        mad mutate create $m1
    } -body {
        ted notifier bind ::sat <Entity>
        ted notifier bind ::mad <Entity>

        mad mutate satset {
            n NB1 g SHIA c AUT mad 1 sat 5
        }
        
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::sat <Entity> update {NB1 SHIA AUT}}
        {::mad <Entity> update 1}
    }


    test satset-2.1 {Undo removes effect.} -setup {
        advance
        mad mutate create $m1
    } -body {
        set undo [mad mutate satset {
            n NB1 g SHIA c AUT mad 1 sat 5
        }]

        eval $undo

        ted query {
            SELECT n,g,c,acontrib 
            FROM gram_sat_contribs
            JOIN mads USING (driver)
            WHERE mads.id = 1
        }
    } -cleanup {
        cleanup
    } -result {
n   g    c   acontrib 
--- ---- --- -------- 
NB1 SHIA AUT 0.0      
    }


    test satset-2.2 {Undo removes report} -setup {
        advance
        mad mutate create $m1

        set undo [mad mutate satset {
            n NB1 g SHIA c AUT mad 1 sat 5
        }]
    } -body {
        eval $undo

        ted query {
            SELECT rtype,subtype,title FROM reports
            WHERE subtype = 'ADJUST'
        }
    } -cleanup {
        cleanup
    } -result {
    }


    test satset-2.3 {Undo sends events} -setup {
        advance
        mad mutate create $m1

        set undo [mad mutate satset {
            n NB1 g SHIA c AUT mad 1 sat 5
        }]
    } -body {
        ted notifier bind ::sat <Entity>
        ted notifier bind ::mad <Entity>

        eval $undo

        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::sat <Entity> update {NB1 SHIA AUT}}
        {::mad <Entity> update 1}
    }

    #-------------------------------------------------------------------
    # satlevel

    test satlevel-1.1 {Level input is created} -setup {
        advance

        mad mutate create $m1
    } -body {
        mad mutate satlevel {
            n NB1 g SHIA c AUT mad 1 limit 5 days 1 athresh 50 dthresh -50
        }

        ted query {
            SELECT etype,cause,ts,n,g,c,llimit,days,athresh,dthresh
            FROM gram_sat_effects
            WHERE etype='L'
        }
    } -cleanup {
        cleanup
    } -result {
etype cause   ts n   g    c   llimit days athresh dthresh 
----- ------- -- --- ---- --- ------ ---- ------- ------- 
L     MAD0001 1  NB1 SHIA AUT 5.0    1.0  50.0    -50.0   
    }


    test satlevel-1.2 {Level input sends report} -setup {
        advance

        mad mutate create $m1
    } -body {
        mad mutate satlevel {
            n NB1 g SHIA c AUT mad 1 limit 5 days 1 athresh 50 dthresh -50
        }

        rdb eval {
            SELECT rtype,subtype,title FROM reports
            WHERE subtype = 'MAGIC'
        }
    } -cleanup {
        cleanup
    } -result {DAM MAGIC {MAGIC-1-1: Magic Satisfaction Level Input}}


    #-------------------------------------------------------------------
    # satslope

    test satslope-1.1 {Slope input is created} -setup {
        advance

        mad mutate create $m1
    } -body {
        mad mutate satslope {
            n NB1 g SHIA c AUT mad 1 slope 5 athresh 50 dthresh -50
        }

        ted query {
            SELECT etype,cause,ts,n,g,c,slope,athresh,dthresh 
            FROM gram_sat_effects
            WHERE cause GLOB 'MAD*'
        }
    } -cleanup {
        cleanup
    } -result {
etype cause   ts n   g    c   slope athresh dthresh 
----- ------- -- --- ---- --- ----- ------- ------- 
S     MAD0001 1  NB1 SHIA AUT 5.0   50.0    -50.0   
    }


    test satslope-1.2 {Slope input sends report} -setup {
        advance

        mad mutate create $m1
    } -body {
        mad mutate satslope {
            n NB1 g SHIA c AUT mad 1 slope 5 athresh 50 dthresh -50
        }

        rdb eval {
            SELECT rtype,subtype,title FROM reports
            WHERE subtype = 'MAGIC'
        }
    } -cleanup {
        cleanup
    } -result {DAM MAGIC {MAGIC-1-2: Magic Satisfaction Slope Input}}


    #-------------------------------------------------------------------
    # coopadjust

    test coopadjust-1.1 {Adjustment takes effect.} -setup {
        advance
        mad mutate create $m1
    } -body {
        mad mutate coopadjust {
            n NB1 f SHIA g BLUE mad 1 delta 5
        }

        ted query {
            SELECT n,f,g,acontrib 
            FROM gram_coop_contribs
            JOIN mads USING (driver)
            WHERE mads.id = 1
        }
    } -cleanup {
        cleanup
    } -result {
n   f    g    acontrib 
--- ---- ---- -------- 
NB1 SHIA BLUE 5.0      
    }


    test coopadjust-1.2 {Adjustment sends report} -setup {
        advance
        mad mutate create $m1
    } -body {
        mad mutate coopadjust {
            n NB1 f SHIA g BLUE mad 1 delta 5
        }

        rdb eval {
            SELECT rtype,subtype,title FROM reports
            WHERE subtype = 'ADJUST'
        }
    } -cleanup {
        cleanup
    } -result {DAM ADJUST {ADJUST-2-1: Magic Cooperation Adjustment}}


    test coopadjust-1.3 {Adjustment sends events} -setup {
        advance
        mad mutate create $m1
    } -body {
        ted notifier bind ::coop <Entity>
        ted notifier bind ::mad <Entity>

        mad mutate coopadjust {
            n NB1 f SHIA g BLUE mad 1 delta 5
        }
        
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::coop <Entity> update {NB1 SHIA BLUE}}
        {::mad <Entity> update 1}
    }


    test coopadjust-2.1 {Undo removes effect.} -setup {
        advance
        mad mutate create $m1
    } -body {
        set undo [mad mutate coopadjust {
            n NB1 f SHIA g BLUE mad 1 delta 5
        }]

        eval $undo

        ted query {
            SELECT n,f,g,acontrib 
            FROM gram_coop_contribs
            JOIN mads USING (driver)
            WHERE mads.id = 1
        }
    } -cleanup {
        cleanup
    } -result {
n   f    g    acontrib 
--- ---- ---- -------- 
NB1 SHIA BLUE 0.0      
    }


    test coopadjust-2.2 {Undo removes report} -setup {
        advance
        mad mutate create $m1

        set undo [mad mutate coopadjust {
            n NB1 f SHIA g BLUE mad 1 delta 5
        }]
    } -body {
        eval $undo

        rdb eval {
            SELECT rtype,subtype,title FROM reports
            WHERE subtype = 'ADJUST'
        }
    } -cleanup {
        cleanup
    } -result {}


    test coopadjust-2.3 {Undo sends events} -setup {
        advance
        mad mutate create $m1

        set undo [mad mutate coopadjust {
            n NB1 f SHIA g BLUE mad 1 delta 5
        }]
    } -body {
        ted notifier bind ::coop <Entity>
        ted notifier bind ::mad <Entity>

        eval $undo

        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::coop <Entity> update {NB1 SHIA BLUE}}
        {::mad <Entity> update 1}
    }

    #-------------------------------------------------------------------
    # coopset

    test coopset-1.1 {Adjustment takes effect.} -setup {
        advance
        mad mutate create $m1
    } -body {
        mad mutate coopset {
            n NB1 f SHIA g BLUE mad 1 coop 5
        }

        ted query {
            SELECT n,f,g,acontrib 
            FROM gram_coop_contribs
            JOIN mads USING (driver)
            WHERE mads.id = 1
        }
    } -cleanup {
        cleanup
    } -result {
n   f    g    acontrib 
--- ---- ---- -------- 
NB1 SHIA BLUE -45.0    
    }


    test coopset-1.2 {Adjustment sends report} -setup {
        advance
        mad mutate create $m1
    } -body {
        mad mutate coopset {
            n NB1 f SHIA g BLUE mad 1 coop 5
        }

        rdb eval {
            SELECT rtype,subtype,title FROM reports
            WHERE subtype = 'ADJUST'
        }
    } -cleanup {
        cleanup
    } -result {DAM ADJUST {ADJUST-2-2: Magic Cooperation Set}}


    test coopset-1.3 {Adjustment sends events} -setup {
        advance
        mad mutate create $m1
    } -body {
        ted notifier bind ::coop <Entity>
        ted notifier bind ::mad <Entity>

        mad mutate coopset {
            n NB1 f SHIA g BLUE mad 1 coop 5
        }
        
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::coop <Entity> update {NB1 SHIA BLUE}}
        {::mad <Entity> update 1}
    }


    test coopset-2.1 {Undo removes effect.} -setup {
        advance
        mad mutate create $m1
    } -body {
        set undo [mad mutate coopset {
            n NB1 f SHIA g BLUE mad 1 coop 5
        }]

        eval $undo

        ted query {
            SELECT n,f,g,acontrib 
            FROM gram_coop_contribs
            JOIN mads USING (driver)
            WHERE mads.id = 1
        }
    } -cleanup {
        cleanup
    } -result {
n   f    g    acontrib 
--- ---- ---- -------- 
NB1 SHIA BLUE 0.0      
    }


    test coopset-2.2 {Undo removes report} -setup {
        advance
        mad mutate create $m1

        set undo [mad mutate coopset {
            n NB1 f SHIA g BLUE mad 1 coop 5
        }]
    } -body {
        eval $undo

        rdb eval {
            SELECT rtype,subtype,title FROM reports
            WHERE subtype = 'ADJUST'
        }
    } -cleanup {
        cleanup
    } -result {}


    test coopset-2.3 {Undo sends events} -setup {
        advance
        mad mutate create $m1

        set undo [mad mutate coopset {
            n NB1 f SHIA g BLUE mad 1 coop 5
        }]
    } -body {
        ted notifier bind ::coop <Entity>
        ted notifier bind ::mad <Entity>

        eval $undo

        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::coop <Entity> update {NB1 SHIA BLUE}}
        {::mad <Entity> update 1}
    }

    #-------------------------------------------------------------------
    # cooplevel

    test cooplevel-1.1 {Level input is created} -setup {
        advance

        mad mutate create $m1
    } -body {
        mad mutate cooplevel {
            n NB1 f SHIA g BLUE mad 1 limit 5 days 1 athresh 50 dthresh 10
        }

        ted query {
            SELECT etype,cause,ts,n,f,g,llimit,days,athresh,dthresh
            FROM gram_coop_effects
        }
    } -cleanup {
        cleanup
    } -result {
etype cause   ts n   f    g    llimit days athresh dthresh 
----- ------- -- --- ---- ---- ------ ---- ------- ------- 
L     MAD0001 1  NB1 SHIA BLUE 5.0    1.0  50.0    10.0    
    }


    test cooplevel-1.2 {Level input sends report} -setup {
        advance

        mad mutate create $m1
    } -body {
        mad mutate cooplevel {
            n NB1 f SHIA g BLUE mad 1 limit 5 days 1 athresh 50 dthresh 10
        }

        rdb eval {
            SELECT rtype,subtype,title FROM reports
            WHERE subtype = 'MAGIC'
        }
    } -cleanup {
        cleanup
    } -result {DAM MAGIC {MAGIC-2-1: Magic Cooperation Level Input}}


    #-------------------------------------------------------------------
    # coopslope

    test coopslope-1.1 {Slope input is created} -setup {
        advance

        mad mutate create $m1
    } -body {
        mad mutate coopslope {
            n NB1 f SHIA g BLUE mad 1 slope 5 athresh 50 dthresh 10
        }

        ted query {
            SELECT etype,cause,ts,n,f,g,slope,athresh,dthresh
            FROM gram_coop_effects
        }
    } -cleanup {
        cleanup
    } -result {
etype cause   ts n   f    g    slope athresh dthresh 
----- ------- -- --- ---- ---- ----- ------- ------- 
S     MAD0001 1  NB1 SHIA BLUE 5.0   50.0    10.0    
    }


    test coopslope-1.2 {Slope input sends report} -setup {
        advance

        mad mutate create $m1
    } -body {
        mad mutate coopslope {
            n NB1 f SHIA g BLUE mad 1 slope 5 athresh 50 dthresh 10
        }

        rdb eval {
            SELECT rtype,subtype,title FROM reports
            WHERE subtype = 'MAGIC'
        }
    } -cleanup {
        cleanup
    } -result {DAM MAGIC {MAGIC-2-2: Magic Cooperation Slope Input}}

    #-------------------------------------------------------------------
    # terminate

    test terminate-1.1 {Terminate terminates slope effects} -setup {
        parmdb set demsit.disable yes
        advance

        mad mutate create $m1
        mad mutate create $m2

        mad mutate satslope {
            n NB1 g SHIA c AUT mad 1 slope 5 athresh 50 dthresh -50
        }

        mad mutate satslope {
            n NB1 g SHIA c QOL mad 2 slope 5 athresh 50 dthresh -50
        }
    } -body {
        mad mutate terminate 1

        set result "\n[aram dump sat slopes]    "
    } -cleanup {
        cleanup
    } -result {
Input DN  DG   Cause   E Start Time   End Time     Nbhd Grp  Con Slope AThresh DThresh Nominal Actual 
----- --- ---- ------- - ------------ ------------ ---- ---- --- ----- ------- ------- ------- ------ 
1.2   NB1 SHIA MAD0001 D 110000ZJAN10 110000ZJAN10 NB1  SHIA AUT   5.0  50.0   -50.0     0.0     0.0  
"     "   "    "       D 110000ZJAN10 n/a          NB1  SHIA AUT   0.0  50.0   -50.0     0.0     0.0  
2.1   "   "    CIVCAS  D 110000ZJAN10 n/a          NB1  SHIA QOL   5.0  50.0   -50.0     0.0     0.0  
    }



    #-------------------------------------------------------------------
    # names

    test names-1.1 {Returns names: none defined} -body {
        mad names
    } -cleanup {
        cleanup
    } -result {}


    test names-1.2 {Returns names} -setup {
        mad mutate create $m1
        mad mutate create $m2
    } -body {
        mad names
    } -cleanup {
        cleanup
    } -result {1 2}


    #-------------------------------------------------------------------
    # validate

    test validate-1.1 {Invalid ID} -body {
        mad validate NONESUCH
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {MAD does not exist: "NONESUCH"}


    test validate-1.2 {Does not extended ID + description} -setup {
        mad mutate create $m1
    } -body {
        mad validate "1 foo bar baz"
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {MAD does not exist: "1 foo bar baz"}

    test validate-2.1 {Valid ID} -setup {
        mad mutate create $m1
    } -body {
        mad validate 1
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # initial names

    test initial_names-1.1 {Returns names: none defined} -body {
        mad initial names
    } -cleanup {
        cleanup
    } -result {}


    test initial_names-1.2 {Returns names} -setup {
        mad mutate create $m1
        mad mutate create $m2
        mad mutate create $m3

        rdb eval {UPDATE mads SET driver=1 WHERE id=2}
    } -body {
        mad initial names
    } -cleanup {
        cleanup
    } -result {1 2 3}

    # TBD: need a test that shows that a MAD with GRAM inputs is
    # excluded.

    #-------------------------------------------------------------------
    # initial validate

    test initial_validate-1.1 {Invalid ID} -body {
        mad initial validate NONESUCH
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {MAD does not exist or is not in initial state: "NONESUCH"}


    test initial_validate-2.1 {Valid ID} -setup {
        mad mutate create $m1
        mad mutate create $m2
        mad mutate create $m3
    } -body {
        mad initial validate 3
    } -cleanup {
        cleanup
    } -result {3}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





