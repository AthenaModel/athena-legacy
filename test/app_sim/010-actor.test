# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-actor.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    actor(sim) tests.
#
#    This test suite tests the actor(sim) mutators and queries
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        array unset parms
        ted cleanup
    }

    #-------------------------------------------------------------------
    # mutate create

    test create-1.1 {actor is created} -body {
        actor mutate create [ted entity JOE]
        ted query {SELECT * FROM actors}
    } -cleanup {
        cleanup
    } -result {
a   longname      budget    
--- ------------- --------- 
JOE Joe the Actor 1000000.0 
    }

    test create-1.2 {bsystem entity is created} -body {
        actor mutate create [ted entity JOE]
        bsystem entity names
    } -cleanup {
        cleanup
    } -result {JOE}

    test create-2.1 {undo deletes the actor} -setup {
        actor mutate create [ted entity JOE]
        set undo [actor mutate create [ted entity BOB]]
    } -body {
        namespace eval :: $undo
        rdb eval {SELECT a FROM actors}
    } -cleanup {
        cleanup
    } -result {JOE}

    test create-2.2 {undo deletes the bsystem entity} -setup {
        actor mutate create [ted entity JOE]
        set undo [actor mutate create [ted entity BOB]]
    } -body {
        namespace eval :: $undo
        bsystem entity names
    } -cleanup {
        cleanup
    } -result {JOE}

    #-------------------------------------------------------------------
    # mutate delete

    test delete-1.1 {Actor is deleted} -setup {
        ted create JOE BOB
    } -body {
        actor mutate delete JOE

        # Is JOE gone?
        rdb eval {SELECT a FROM actors}
    } -cleanup {
        cleanup
    } -result {BOB}

    test delete-2.1 {Undo restores actor} -setup {
        ted create JOE
        set undo [actor mutate delete JOE]
    } -body {
        namespace eval :: $undo
        ted query {SELECT * FROM actors}
    } -cleanup {
        cleanup
    } -result {
a   longname      budget    
--- ------------- --------- 
JOE Joe the Actor 1000000.0 
    }

    test delete-3.1 {Bsystem entity deleted} -setup {
        ted create JOE BOB
    } -body {
        actor mutate delete JOE

        # Is JOE gone?
        bsystem entity names
    } -cleanup {
        cleanup
    } -result {BOB}

    test delete-3.2 {Undo restores bsystem entity} -setup {
        ted create JOE BOB
        set undo [actor mutate delete JOE]
    } -body {
        namespace eval :: $undo
        bsystem entity names
    } -cleanup {
        cleanup
    } -result {BOB JOE}

    test delete-4.1 {frcgroups.a set to NULL} -setup {
        ted create JOE BLUE
    } -body {
        actor mutate delete JOE

        rdb eval {SELECT g,a FROM frcgroups}
    } -cleanup {
        cleanup
    } -result {BLUE {}}

    test delete-4.2 {Undo restores frcgroups.a} -setup {
        ted create JOE BLUE
    } -body {
        set a [rdb eval {SELECT g,a FROM frcgroups}]

        set undo [actor mutate delete JOE]
        namespace eval :: $undo

        set b [rdb eval {SELECT g,a FROM frcgroups}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}

    test delete-5.1 {orggroups.a set to NULL} -setup {
        ted create JOE USAID
    } -body {
        actor mutate delete JOE

        rdb eval {SELECT g,a FROM orggroups}
    } -cleanup {
        cleanup
    } -result {USAID {}}

    test delete-5.2 {Undo restores orggroups.a} -setup {
        ted create JOE USAID
    } -body {
        set a [rdb eval {SELECT g,a FROM orggroups}]

        set undo [actor mutate delete JOE]
        namespace eval :: $undo

        set b [rdb eval {SELECT g,a FROM orggroups}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}

    #-------------------------------------------------------------------
    # mutate update


    test update-1.1 {actor is updated} -setup {
        ted create JOE
    } -body {
        actor mutate update {
            a            JOE
            longname     "Joe the Actress"
            budget       0.0
        }

        ted query {SELECT * FROM actors}
    } -cleanup {
        cleanup
    } -result {
a   longname        budget 
--- --------------- ------ 
JOE Joe the Actress 0.0    
    }


    test update-1.3 {empty values are OK} -setup {
        ted create JOE
    } -body {
        set a [ted query {SELECT * FROM actors}]

        actor mutate update  {
            a            JOE
            longname     ""
            color        ""
        }

        set b [ted query {SELECT * FROM actors}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-2.1 {undo undoes the change} -setup {
        ted create JOE
    } -body {

        set a [ted query {SELECT * FROM actors}]

        set undo [actor mutate update {
            a            JOE
            longname     "Joe the Actress"
            budget       0
        }]

        namespace eval :: $undo

        set b [ted query {SELECT * FROM actors}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}



    #-------------------------------------------------------------------
    # names

    test names-1.1 {Returns names: none defined} -body {
        actor names
    } -cleanup {
        cleanup
    } -result {}

    test names-1.2 {Returns names} -setup {
        ted create JOE BOB
    } -body {
        actor names
    } -cleanup {
        cleanup
    } -result {JOE BOB}


    #-------------------------------------------------------------------
    # validate

    test validate-1.1 {Invalid name: none defined} -body {
        actor validate NONESUCH
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid actor, none are defined}

    test validate-1.2 {Invalid name: some defined} -setup {
        ted create JOE BOB
    } -body {
        actor validate NONESUCH
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid actor, should be one of: JOE, BOB}

    test validate-2.1 {Valid name} -setup {
        ted create JOE BOB
    } -body {
        actor validate BOB
    } -cleanup {
        cleanup
    } -result {BOB}

    #-------------------------------------------------------------------
    # get

    test get-1.1 {get actor dict} -setup {
        ted create JOE
    } -body {
        actor get JOE
    } -cleanup {
        cleanup
    } -result {longname {Joe the Actor} a JOE budget 1000000.0}

    test get-1.2 {get actor attribute} -setup {
        ted create JOE
    } -body {
        actor get JOE budget
    } -cleanup {
        cleanup
    } -result {1000000.0}


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





