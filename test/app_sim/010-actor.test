# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-actor.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    actor(sim) tests.
#
#    This test suite tests the actor(sim) mutators and queries
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        array unset parms
        ted cleanup
    }

    #-------------------------------------------------------------------
    # mutate create

    test create-1.1 {actor is created} -body {
        actor mutate create [ted entity JOE]
        ted querylist {SELECT * FROM actors}
    } -cleanup {
        cleanup
    } -result {
a             JOE
longname      Joe the Actor
supports      JOE
cash_reserve  200000.0
income_goods  10000.0
income_pop    0.0
income_black  0.0
income_graft  0.0
cash_on_hand  0.0
overhead      0
    }

    test create-1.2 {bsystem entity is created} -body {
        actor mutate create [ted entity JOE]
        bsystem entity names
    } -cleanup {
        cleanup
    } -result {JOE}

    test create-1.3 {supports=NONE => NULL} -body {
        actor mutate create [dict merge [ted entity JOE] {supports NONE}]
        ted querylist {SELECT * FROM actors}
    } -cleanup {
        cleanup
    } -result {
a             JOE
longname      Joe the Actor
supports      
cash_reserve  200000.0
income_goods  10000.0
income_pop    0.0
income_black  0.0
income_graft  0.0
cash_on_hand  0.0
overhead      0
    }


    test create-2.1 {undo deletes the actor} -setup {
        actor mutate create [ted entity JOE]
        set undo [actor mutate create [ted entity BOB]]
    } -body {
        namespace eval :: $undo
        rdb eval {SELECT a FROM actors}
    } -cleanup {
        cleanup
    } -result {JOE}

    test create-2.2 {undo deletes the bsystem entity} -setup {
        actor mutate create [ted entity JOE]
        set undo [actor mutate create [ted entity BOB]]
    } -body {
        namespace eval :: $undo
        bsystem entity names
    } -cleanup {
        cleanup
    } -result {JOE}

    #-------------------------------------------------------------------
    # mutate delete

    test delete-1.1 {Actor is deleted} -setup {
        ted create JOE BOB
    } -body {
        actor mutate delete JOE

        # Is JOE gone?
        rdb eval {SELECT a FROM actors}
    } -cleanup {
        cleanup
    } -result {BOB}

    test delete-2.1 {Undo restores actor} -setup {
        ted create JOE
        set undo [actor mutate delete JOE]
    } -body {
        namespace eval :: $undo
        ted querylist {SELECT * FROM actors}
    } -cleanup {
        cleanup
    } -result {
a             JOE
longname      Joe the Actor
supports      JOE
cash_reserve  200000.0
income_goods  10000.0
income_pop    0.0
income_black  0.0
income_graft  0.0
cash_on_hand  0.0
overhead      0
    }

    test delete-3.1 {Bsystem entity deleted} -setup {
        ted create JOE BOB
    } -body {
        actor mutate delete JOE

        # Is JOE gone?
        bsystem entity names
    } -cleanup {
        cleanup
    } -result {BOB}

    test delete-3.2 {Undo restores bsystem entity} -setup {
        ted create JOE BOB
        set undo [actor mutate delete JOE]
    } -body {
        namespace eval :: $undo
        bsystem entity names
    } -cleanup {
        cleanup
    } -result {BOB JOE}

    test delete-4.1 {frcgroups.a set to NULL} -setup {
        ted create JOE BLUE
    } -body {
        actor mutate delete JOE

        rdb eval {SELECT g,a FROM frcgroups}
    } -cleanup {
        cleanup
    } -result {BLUE {}}

    test delete-4.2 {Undo restores frcgroups.a} -setup {
        ted create JOE BLUE
    } -body {
        set a [rdb eval {SELECT g,a FROM frcgroups}]

        set undo [actor mutate delete JOE]
        namespace eval :: $undo

        set b [rdb eval {SELECT g,a FROM frcgroups}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}

    test delete-5.1 {orggroups.a set to NULL} -setup {
        ted create JOE USAID
    } -body {
        actor mutate delete JOE

        rdb eval {SELECT g,a FROM orggroups}
    } -cleanup {
        cleanup
    } -result {USAID {}}

    test delete-5.2 {Undo restores orggroups.a} -setup {
        ted create JOE USAID
    } -body {
        set a [rdb eval {SELECT g,a FROM orggroups}]

        set undo [actor mutate delete JOE]
        namespace eval :: $undo

        set b [rdb eval {SELECT g,a FROM orggroups}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}

    test delete-6.1 {Owned goal deleted} -setup {
        ted create JOE BOB
        ted order GOAL:CREATE owner JOE narrative "My goal"
    } -body {
        actor mutate delete JOE

        # Is the goal gone?
        goal names
    } -cleanup {
        cleanup
    } -result {}

    test delete-6.2 {Undo restores goal} -setup {
        ted create JOE BOB
        ted order GOAL:CREATE owner JOE narrative "My goal"
        set undo [actor mutate delete JOE]
    } -body {
        namespace eval :: $undo
        goal names
    } -cleanup {
        cleanup
    } -result {1}


    test delete-7.1 {Owned tactic deleted} -setup {
        ted create JOE BOB
        ted order TACTIC:SAVE:CREATE owner JOE int1 20
    } -body {
        actor mutate delete JOE

        # Is the goal gone?
        tactic names
    } -cleanup {
        cleanup
    } -result {}

    test delete-7.2 {Undo restores tactic} -setup {
        ted create JOE BOB
        ted order TACTIC:SAVE:CREATE owner JOE int1 20 
        set undo [actor mutate delete JOE]
    } -body {
        namespace eval :: $undo
        tactic names
    } -cleanup {
        cleanup
    } -result {1}

    test delete-8.1 {actors.supports set to NULL} -setup {
        ted create JOE BOB
        actor mutate update [list a JOE supports BOB]
    } -body {
        actor mutate delete BOB

        rdb onecolumn {SELECT supports FROM actors WHERE a='JOE'}
    } -cleanup {
        cleanup
    } -result {}

    test delete-8.2 {Undo restores actors.supports} -setup {
        ted create JOE BOB
        actor mutate update [list a JOE supports BOB]
    } -body {
        set a [rdb eval {SELECT a,supports FROM actors}]

        set undo [actor mutate delete BOB]
        namespace eval :: $undo

        set b [rdb eval {SELECT a,supports FROM actors}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}

    test delete-9.1 {deletes vrel_ga overrides} -setup {
        ted create JOE SHIA
        vrel mutate create {id {SHIA JOE} base 0.5}
    } -body {
        actor mutate delete JOE

        rdb eval {SELECT g,a FROM vrel_ga ORDER BY g,a}
    } -cleanup {
        cleanup
    } -result {}

    test delete-9.2 {undo restores vrel_ga overrides} -setup {
        ted create JOE SHIA
        vrel mutate create {id {SHIA JOE} base 0.5}

        set undo [actor mutate delete JOE]
    } -body {
        namespace eval :: $undo

        rdb eval {SELECT g,a FROM vrel_ga ORDER BY g,a}
    } -cleanup {
        cleanup
    } -result {SHIA JOE}

    test delete-10.1 {caps.owner is set to NULL} -setup {
        ted create JOE CBS
    } -body {
        actor mutate delete JOE
        rdb eval {SELECT k,owner FROM caps}
    } -cleanup {
        cleanup
    } -result {CBS {}}

    test delete-10.2 {undo restores caps.owner} -setup {
        ted create JOE CBS
    } -body {
        set a [rdb eval {SELECT owner FROM caps}]

        set undo [actor mutate delete JOE]
        namespace eval :: $undo

        set b [rdb eval {SELECT owner FROM caps}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}

    #-------------------------------------------------------------------
    # mutate update


    test update-1.1 {actor is updated} -setup {
        ted create JOE
    } -body {
        actor mutate update {
            a            JOE
            longname     "Joe the Actress"
            supports     NONE
            cash_reserve 0
            income_goods 5
            income_pop   6
            income_black 7
            income_graft 8
            cash_on_hand 10
            overhead     20
        }

        ted querylist {SELECT * FROM actors}
    } -cleanup {
        cleanup
    } -result {
a             JOE
longname      Joe the Actress
supports      
cash_reserve  0.0
income_goods  5.0
income_pop    6.0
income_black  7.0
income_graft  8.0
cash_on_hand  10.0
overhead      20
    }


    test update-1.2 {empty values are OK} -setup {
        ted create JOE
    } -body {
        set a [ted querylist {SELECT * FROM actors}]

        actor mutate update  {
            a            JOE
            longname     ""
            supports     ""
            cash_reserve ""
            income_goods ""
            income_pop   ""
            income_black ""
            income_graft ""
            cash_on_hand ""
            overhead     ""
        }

        set b [ted querylist {SELECT * FROM actors}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-2.1 {undo undoes the change} -setup {
        ted create JOE BOB
    } -body {

        set a [ted querylist {SELECT * FROM actors}]

        set undo [actor mutate update {
            a            JOE
            longname     "Joe the Actress"
            supports     BOB
            cash_reserve ""
            income_goods ""
            income_pop   ""
            income_black ""
            income_graft ""
            cash_on_hand ""
            overhead     ""
        }]

        namespace eval :: $undo

        set b [ted querylist {SELECT * FROM actors}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}



    #-------------------------------------------------------------------
    # names

    test names-1.1 {Returns names: none defined} -body {
        actor names
    } -cleanup {
        cleanup
    } -result {}

    test names-1.2 {Returns names} -setup {
        ted create JOE BOB
    } -body {
        actor names
    } -cleanup {
        cleanup
    } -result {JOE BOB}


    #-------------------------------------------------------------------
    # validate

    test validate-1.1 {Invalid name: none defined} -body {
        actor validate NONESUCH
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid actor, none are defined}

    test validate-1.2 {Invalid name: some defined} -setup {
        ted create JOE BOB
    } -body {
        actor validate NONESUCH
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid actor, should be one of: JOE, BOB}

    test validate-2.1 {Valid name} -setup {
        ted create JOE BOB
    } -body {
        actor validate BOB
    } -cleanup {
        cleanup
    } -result {BOB}

    #-------------------------------------------------------------------
    # get

    test get-1.1 {get actor dict} -setup {
        ted create JOE
    } -body {
        ted pdict [actor get JOE]
    } -cleanup {
        cleanup
    } -result {
        supports     JOE
        cash_on_hand 0.0
        income_pop   0.0
        longname     {Joe the Actor}
        a            JOE
        overhead     0
        income_graft 0.0
        income_goods 10000.0
        cash_reserve 200000.0
        income_black 0.0
    }

    test get-1.2 {get actor attribute} -setup {
        ted create JOE
    } -body {
        actor get JOE income_goods
    } -cleanup {
        cleanup
    } -result {10000.0}

    #-------------------------------------------------------------------
    # income

    test income-1.1 {get actor income, no income_a} -setup {
        ted create JOE

        actor mutate update {
            a            JOE
            supports     ""
            cash_reserve ""
            income_goods 1000
            income_pop   100
            income_black 10
            income_graft 1
            cash_on_hand ""
            overhead     ""
        }
    } -body {
        actor income JOE
    } -cleanup {
        cleanup
    } -result {1111.0}

    test income-1.2 {get actor income, income_a} -setup {
        ted create JOE BOB

        rdb eval {
            INSERT INTO income_a(a, income) VALUES('JOE',12345.0)
        }
    } -body {
        actor income JOE
    } -cleanup {
        cleanup
    } -result {12345.0}
    
    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::






