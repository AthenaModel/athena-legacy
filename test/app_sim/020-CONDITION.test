# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-CONDITION.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) CONDITION:* order tests.
#
#    This test suite tests the CONDITION:* orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE BOB NB1 NB2 BLUE BRIT ALQ
        ted order TACTIC:SAVEMONEY:CREATE owner JOE int1 10
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Standard items

    set S1 {
        co_id          1
        a              JOE
        text1          GT
        x1             10000
    }

    #-------------------------------------------------------------------
    # CONDITION:DELETE
    #
    # Note: normally we'd test the CREATE orders before DELETE; but
    # there's a CREATE order for each flavor of condition.  We'll be
    # testing each flavor's orders together instead, and doing the
    # generic orders up front.

    test DELETE-1.1 {required parms} -body {
        ted order -reject CONDITION:DELETE {}
    } -result {
        condition_id {required value}
    }

    
    test DELETE-1.2 {unknown condition_id} -body {
        ted order -reject CONDITION:DELETE condition_id NONESUCH
    } -result {
        condition_id {Invalid condition ID: "NONESUCH"}
    }


    test DELETE-2.1 {Effects} -setup {
        setup
        ted order CONDITION:CASH:CREATE $S1
    } -body {
        ted notifier bind ::rdb <conditions>
        ted order CONDITION:DELETE condition_id 1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> delete 1}
    }


    test DELETE-3.1 {Undo effects} -setup {
        setup
        ted order CONDITION:CASH:CREATE $S1
        ted order CONDITION:DELETE condition_id 1
    } -body {
        ted notifier bind ::rdb <conditions>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
    }


    #-------------------------------------------------------------------
    # CONDITION:STATE

    test STATE-1.1 {required parms} -body {
        ted order -reject CONDITION:STATE {}
    } -result {
        condition_id {required value}
        state {required value}
    }

    
    test STATE-1.2 {unknown condition_id} -body {
        ted order -reject CONDITION:STATE condition_id NONESUCH state disabled
    } -result {
        condition_id {Invalid condition ID: "NONESUCH"}
    }


    test STATE-2.1 {Effects} -setup {
        setup
        ted order CONDITION:CASH:CREATE $S1
    } -body {
        ted notifier bind ::rdb <conditions>
        ted order CONDITION:STATE condition_id 1 state disabled
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
    }


    test STATE-3.1 {Undo effects} -setup {
        setup
        ted order CONDITION:CASH:CREATE $S1
        ted order CONDITION:STATE condition_id 1 state disabled
    } -body {
        ted notifier bind ::rdb <conditions>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
    }

    #-------------------------------------------------------------------
    # CONDITION:CASH:CREATE

    test CASH:CREATE-1.1 {required parms} -body {
        ted order -reject CONDITION:CASH:CREATE {}
    } -result {
        co_id {required value}
        a {required value}
        text1 {required value}
        x1 {required value}
    }

    
    test CASH:CREATE-1.2 {tactic is unknown} -setup {
        setup
    } -body {
        ted order -reject CONDITION:CASH:CREATE \
            [dict merge $S1 [list co_id NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        co_id {Invalid goal or tactic ID: "NONESUCH"}
    }

    test CASH:CREATE-1.3 {actor is unknown} -setup {
        setup
    } -body {
        ted order -reject CONDITION:CASH:CREATE \
            [dict merge $S1 [list a NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        a {Invalid actor, should be one of: JOE, BOB}
    }

    test CASH:CREATE-1.4 {text1 is invalid} -setup {
        setup
    } -body {
        ted order -reject CONDITION:CASH:CREATE \
            [dict merge $S1 [list text1 NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        text1 {invalid value "NONESUCH", should be one of: EQ, GT, LT}
    }

    test CASH:CREATE-1.5 {x1 is invalid} -setup {
        setup
    } -body {
        ted order -reject CONDITION:CASH:CREATE [dict merge $S1 {
            x1 NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        x1 {invalid money value "NONESUCH", expected positive numeric value with optional K, M, or B suffix}
    }

    test CASH:CREATE-2.1 {condition is created} -setup {
        setup
    } -body {
        ted order CONDITION:CASH:CREATE $S1

        ted query {SELECT * FROM conditions}
    } -cleanup {
        cleanup
    } -result {
condition_id condition_type co_id narrative                                        state  flag a   text1 x1      
------------ -------------- ----- ------------------------------------------------ ------ ---- --- ----- ------- 
1            CASH           1     Actor JOE's cash-on-hand is greater than $10,000 normal      JOE GT    10000.0 
    }


    test CASH:CREATE-2.2 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <conditions>
        ted order CONDITION:CASH:CREATE $S1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
    }


    test CASH:CREATE-3.1 {undo effects} -setup {
        setup
        ted order CONDITION:CASH:CREATE $S1
    } -body {
        ted notifier bind ::rdb <conditions>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> delete 1}
    }


    #-------------------------------------------------------------------
    # CONDITION:CASH:UPDATE

    proc setup_update_savings {} {
        variable S1
        setup
        ted order CONDITION:CASH:CREATE $S1
    }

    test CASH:UPDATE-1.1 {required parms} -body {
        ted order -reject CONDITION:CASH:UPDATE {}
    } -result {
        condition_id {required value}
    }

    
    test CASH:UPDATE-1.2 {condition_id is unknown} -setup {
        setup_update_savings
    } -body {
        ted order -reject CONDITION:CASH:UPDATE condition_id NONESUCH x1 10
    } -cleanup {
        cleanup
    } -result {
        condition_id {Invalid condition ID: "NONESUCH"}
    }

    test CASH:UPDATE-1.3 {actor is unknown} -setup {
        setup_update_savings
    } -body {
        ted order -reject CONDITION:CASH:UPDATE condition_id 1 a NONESUCH
    } -cleanup {
        cleanup
    } -result {
        a {Invalid actor, should be one of: JOE, BOB}
    }

    test CASH:UPDATE-1.4 {text1 is invalid} -setup {
        setup_update_savings
    } -body {
        ted order -reject CONDITION:CASH:UPDATE condition_id 1 text1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        text1 {invalid value "NONESUCH", should be one of: EQ, GT, LT}
    }

    test CASH:UPDATE-1.5 {x1 is invalid} -setup {
        setup_update_savings
    } -body {
        ted order -reject CONDITION:CASH:UPDATE condition_id 1 x1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        x1 {invalid money value "NONESUCH", expected positive numeric value with optional K, M, or B suffix}
    }

    test CASH:UPDATE-1.6 {wrong flavor of condition} -setup {
        setup_update_savings
        rdb eval {UPDATE conditions SET condition_type='BOGUS'}
    } -body {
        ted order -reject CONDITION:CASH:UPDATE condition_id 1 x1 5
    } -cleanup {
        cleanup
    } -result {
        condition_id {Condition 1 is not a CASH condition}
    }

    test CASH:UPDATE-2.1 {activities are updated} -setup {
        setup_update_savings
    } -body {
        ted order CONDITION:CASH:UPDATE condition_id 1 a BOB text1 EQ x1 20

        ted query {SELECT * FROM conditions}
    } -cleanup {
        cleanup
    } -result {
condition_id condition_type co_id narrative                                   state  flag a   text1 x1   
------------ -------------- ----- ------------------------------------------- ------ ---- --- ----- ---- 
1            CASH           1     Actor BOB's cash-on-hand is equal to $20.00 normal      BOB EQ    20.0 
    }


    test CASH:UPDATE-2.2 {Effects} -setup {
        setup_update_savings
    } -body {
        ted notifier bind ::rdb <conditions>
        ted order CONDITION:CASH:UPDATE condition_id 1 x1 20
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
        {::rdb <conditions> update 1}
    }


    test CASH:UPDATE-3.1 {undo effects} -setup {
        setup_update_savings
        ted order CONDITION:CASH:UPDATE condition_id 1 x1 20
    } -body {
        ted notifier bind ::rdb <conditions>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





