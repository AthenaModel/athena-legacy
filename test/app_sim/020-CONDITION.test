# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-CONDITION.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) CONDITION:* order tests.
#
#    This test suite tests the CONDITION:* orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE BOB NB1 NB2 BLUE BRIT ALQ
        ted order TACTIC:SAVE:CREATE owner JOE int1 10
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Standard items

    set S1 {
        co_id          1
        a              JOE
        text1          GT
        x1             10000
    }

    #-------------------------------------------------------------------
    # CONDITION:DELETE
    #
    # Note: normally we'd test the CREATE orders before DELETE; but
    # there's a CREATE order for each flavor of condition.  We'll be
    # testing each flavor's orders together instead, and doing the
    # generic orders up front.

    test DELETE-1.1 {required parms} -body {
        ted order -reject CONDITION:DELETE {}
    } -result {
        condition_id {required value}
    }

    
    test DELETE-1.2 {unknown condition_id} -body {
        ted order -reject CONDITION:DELETE condition_id NONESUCH
    } -result {
        condition_id {Invalid condition ID: "NONESUCH"}
    }


    test DELETE-2.1 {Effects} -setup {
        setup
        ted order CONDITION:CASH:CREATE $S1
    } -body {
        ted notifier bind ::rdb <conditions>
        ted order CONDITION:DELETE condition_id 1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> delete 1}
    }


    test DELETE-3.1 {Undo effects} -setup {
        setup
        ted order CONDITION:CASH:CREATE $S1
        ted order CONDITION:DELETE condition_id 1
    } -body {
        ted notifier bind ::rdb <conditions>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
    }


    #-------------------------------------------------------------------
    # CONDITION:STATE

    test STATE-1.1 {required parms} -body {
        ted order -reject CONDITION:STATE {}
    } -result {
        condition_id {required value}
        state {required value}
    }

    
    test STATE-1.2 {unknown condition_id} -body {
        ted order -reject CONDITION:STATE condition_id NONESUCH state disabled
    } -result {
        condition_id {Invalid condition ID: "NONESUCH"}
    }


    test STATE-2.1 {Effects} -setup {
        setup
        ted order CONDITION:CASH:CREATE $S1
    } -body {
        ted notifier bind ::rdb <conditions>
        ted order CONDITION:STATE condition_id 1 state disabled
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
    }


    test STATE-3.1 {Undo effects} -setup {
        setup
        ted order CONDITION:CASH:CREATE $S1
        ted order CONDITION:STATE condition_id 1 state disabled
    } -body {
        ted notifier bind ::rdb <conditions>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::






