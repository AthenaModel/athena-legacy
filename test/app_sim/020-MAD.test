# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-MAD.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) MAD:* order tests.
#
#    This test suite tests the unit-related orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Standard MADs

    set m1 {
        oneliner "The First MAD" 
    }

    set m2 {
        oneliner "The Second MAD"
    }

    set m3 {
        oneliner "The Third MAD"
    }

    # Set up for magic inputs

    proc advance {} {
        variable m1

        ted create NB1 NB2 BLUE USAID SHIA SUNN NB1SHIA NB2SUNN
        scenario mutate reconcile
        ted order SIM:RUN days 1 block yes
        ted order MAD:CREATE $m1
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    #-------------------------------------------------------------------
    # MAD:CREATE

    test CREATE-1.1 {required parms} -body {
        ted order -reject MAD:CREATE {}
    } -result {
        oneliner {required value}
    }


    test CREATE-2.1 {MAD is created} -setup {
        ted create NB1 BLUE USAID SHIA NB1SHIA
    } -body {
        ted order MAD:CREATE $m1
        ted order MAD:CREATE $m2
        ted order MAD:CREATE $m3

        ted query {SELECT * FROM units}
    } -cleanup {
        cleanup
    } -result {
    }


    test CREATE-2.2 {Effects} -body {
        ted notifier bind ::mad <Entity>
        ted order MAD:CREATE $m1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Entity> create 1}
    }


    test CREATE-3.1 {undo effects} -setup {
        ted order MAD:CREATE $m1
    } -body {
        ted notifier bind ::mad <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Entity> delete 1}
    }


    #-------------------------------------------------------------------
    # MAD:DELETE

    test DELETE-1.1 {required parms} -body {
        ted order -reject MAD:DELETE {}
    } -result {
        id {required value}
    }

    
    test DELETE-1.2 {unknown id} -body {
        ted order -reject MAD:DELETE id NONESUCH
    } -result {
        id {MAD does not exist or is not in initial state: "NONESUCH"}
    }


    test DELETE-1.3 {invalid MAD (not initial)} -body {
        ted order MAD:CREATE $m2
        rdb eval {UPDATE mads SET driver=1}
        ted order -reject MAD:DELETE id 2
    } -cleanup {
        cleanup
    } -result {
        id {MAD does not exist or is not in initial state: "2"}
    }


    test DELETE-2.1 {Effects} -setup {
        ted create BLUE
        ted order MAD:CREATE $m1
    } -body {
        ted notifier bind ::mad <Entity>
        ted order MAD:DELETE id 1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Entity> delete 1}
    }


    test DELETE-3.1 {Undo effects} -setup {
        ted create BLUE
        ted order MAD:CREATE $m1
        ted order MAD:DELETE id 1
    } -body {
        ted notifier bind ::mad <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Entity> create 1}
    }


    #-------------------------------------------------------------------
    # MAD:UPDATE

    test UPDATE-1.1 {required parms} -body {
        ted order -reject MAD:UPDATE {}
    } -result {
        id {required value}
        oneliner {required value}
    }
    

    test UPDATE-1.2 {invalid MAD} -body {
        ted order -reject MAD:UPDATE id 1 oneliner PATROL
    } -cleanup {
        cleanup
    } -result {
        id {MAD does not exist: "1"}
    }


    test UPDATE-2.1 {MAD is updated} -setup {
        ted order MAD:CREATE $m1
    } -body {
        ted order MAD:UPDATE id 1 oneliner "MAD the First"

        ted query {SELECT * FROM mads}
    } -cleanup {
        cleanup
    } -result {
id oneliner      driver 
-- ------------- ------ 
1  MAD the First -1     
    }


    test UPDATE-2.2 {<Entity> update} -setup {
        ted create BLUE
        ted order MAD:CREATE $m1
    } -body {
        ted notifier bind ::mad <Entity>
        ted order MAD:UPDATE id 1 oneliner "MAD the FIRST"
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Entity> update 1}
    }


    test UPDATE-3.1 {undo undoes the change} -setup {
        ted create BLUE USAID
        ted order MAD:CREATE $m1
        ted order MAD:UPDATE id 1 oneliner "MAD the FIRST"
    } -body {
        ted notifier bind ::mad <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Entity> update 1}
    }


    #-------------------------------------------------------------------
    # MAD:SAT:ADJUST

    test SAT:ADJUST-1.1 {required parms} -setup {
        advance
    } -body {
        ted order -reject MAD:SAT:ADJUST {}
    } -result {
        n {required value}
        g {required value}
        c {required value}
        mad {required value}
        delta {required value}
    }
    

    test SAT:ADJUST-1.2 {invalid n} -body {
        ted order -reject MAD:SAT:ADJUST {
            n NONESUCH g SHIA c AUT mad 1 delta 5
        }
    } -cleanup {
        cleanup
    } -result {
        n {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test SAT:ADJUST-1.3 {invalid g} -setup {
        advance
    } -body {
        ted order -reject MAD:SAT:ADJUST {
            n NB1 g NONESUCH c AUT mad 1 delta 5
        }
    } -cleanup {
        cleanup
    } -result {
        g {Invalid satisfaction group, should be one of: USAID, SHIA, SUNN}
    }


    test SAT:ADJUST-1.4 {invalid c} -setup {
        advance
    } -body {
        ted order -reject MAD:SAT:ADJUST {
            n NB1 g SHIA c NONESUCH mad 1 delta 5
        }
    } -cleanup {
        cleanup
    } -result {
        c {invalid value "NONESUCH", should be one of: AUT, SFT, CUL, QOL, CAS}
    }


    test SAT:ADJUST-1.5 {invalid MAD} -setup {
        advance
    } -body {
        ted order -reject MAD:SAT:ADJUST {
            n NB1 g SHIA c AUT mad 2 delta 5
        }
    } -cleanup {
        cleanup
    } -result {
        mad {MAD does not exist: "2"}
    }


    test SAT:ADJUST-1.6 {invalid delta} -setup {
        advance
    } -body {
        ted order -reject MAD:SAT:ADJUST {
            n NB1 g SHIA c AUT mad 1 delta NONESUCH
        }
    } -cleanup {
        cleanup
    } -result {
        delta {invalid value "NONESUCH", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }


    test SAT:ADJUST-1.7 {g does not reside in n} -setup {
        advance
    } -body {
        ted order -reject MAD:SAT:ADJUST {
            n NB1 g SUNN c AUT mad 1 delta 5
        }
    } -cleanup {
        cleanup
    } -result {
        c {Satisfaction is not tracked for group SUNN's AUT in NB1.}
    }


    test SAT:ADJUST-2.1 {<Entity> updates} -setup {
        advance
    } -body {
        ted notifier bind ::sat <Entity>
        ted notifier bind ::mad <Entity>
        ted order MAD:SAT:ADJUST {
            n NB1 g SHIA c AUT mad 1 delta 5
        }
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::sat <Entity> update {NB1 SHIA AUT}}
        {::mad <Entity> update 1}
    }


    test SAT:ADJUST-3.1 {undo undoes the change} -setup {
        advance

        ted order MAD:SAT:ADJUST {
            n NB1 g SHIA c AUT mad 1 delta 5
        }
    } -body {
        ted notifier bind ::sat <Entity>
        ted notifier bind ::mad <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::sat <Entity> update {NB1 SHIA AUT}}
        {::mad <Entity> update 1}
    }


    #-------------------------------------------------------------------
    # MAD:SAT:SET

    test SAT:SET-1.1 {required parms} -setup {
        advance
    } -body {
        ted order -reject MAD:SAT:SET {}
    } -result {
        n {required value}
        g {required value}
        c {required value}
        mad {required value}
        sat {required value}
    }
    

    test SAT:SET-1.2 {invalid n} -body {
        ted order -reject MAD:SAT:SET {
            n NONESUCH g SHIA c AUT mad 1 sat 5
        }
    } -cleanup {
        cleanup
    } -result {
        n {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test SAT:SET-1.3 {invalid g} -setup {
        advance
    } -body {
        ted order -reject MAD:SAT:SET {
            n NB1 g NONESUCH c AUT mad 1 sat 5
        }
    } -cleanup {
        cleanup
    } -result {
        g {Invalid satisfaction group, should be one of: USAID, SHIA, SUNN}
    }


    test SAT:SET-1.4 {invalid c} -setup {
        advance
    } -body {
        ted order -reject MAD:SAT:SET {
            n NB1 g SHIA c NONESUCH mad 1 sat 5
        }
    } -cleanup {
        cleanup
    } -result {
        c {invalid value "NONESUCH", should be one of: AUT, SFT, CUL, QOL, CAS}
    }


    test SAT:SET-1.5 {invalid MAD} -setup {
        advance
    } -body {
        ted order -reject MAD:SAT:SET {
            n NB1 g SHIA c AUT mad 2 sat 5
        }
    } -cleanup {
        cleanup
    } -result {
        mad {MAD does not exist: "2"}
    }


    test SAT:SET-1.6 {invalid sat} -setup {
        advance
    } -body {
        ted order -reject MAD:SAT:SET {
            n NB1 g SHIA c AUT mad 1 sat NONESUCH
        }
    } -cleanup {
        cleanup
    } -result {
        sat {invalid value "NONESUCH", should be a real number in range -100.0, 100.0, or one of: VS, S, A, D, VD}
    }


    test SAT:SET-1.7 {g does not reside in n} -setup {
        advance
    } -body {
        ted order -reject MAD:SAT:SET {
            n NB1 g SUNN c AUT mad 1 sat 5
        }
    } -cleanup {
        cleanup
    } -result {
        c {Satisfaction is not tracked for group SUNN's AUT in NB1.}
    }


    test SAT:SET-2.1 {<Entity> updates} -setup {
        advance
    } -body {
        ted notifier bind ::sat <Entity>
        ted notifier bind ::mad <Entity>
        ted order MAD:SAT:SET {
            n NB1 g SHIA c AUT mad 1 sat 5
        }
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::sat <Entity> update {NB1 SHIA AUT}}
        {::mad <Entity> update 1}
    }


    test SAT:SET-3.1 {undo undoes the change} -setup {
        advance

        ted order MAD:SAT:SET {
            n NB1 g SHIA c AUT mad 1 sat 5
        }
    } -body {
        ted notifier bind ::sat <Entity>
        ted notifier bind ::mad <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::sat <Entity> update {NB1 SHIA AUT}}
        {::mad <Entity> update 1}
    }

    #-------------------------------------------------------------------
    # MAD:SAT:LEVEL

    test SAT:LEVEL-1.1 {required parms} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:LEVEL {}
    } -result {
        n {required value}
        g {required value}
        c {required value}
        mad {required value}
        limit {required value}
        days {required value}
        cause {required value}
        p {required value}
        q {required value}
    }
    

    test SAT:LEVEL-1.2 {invalid n} -body {
        ted schedule -reject +1 MAD:SAT:LEVEL {
            n NONESUCH g SHIA c AUT mad 1 limit 5 days 1 cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        n {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test SAT:LEVEL-1.3 {invalid g} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:LEVEL {
            n NB1 g NONESUCH c AUT mad 1 limit 5 days 1 cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        g {Invalid group "NONESUCH", should be one of: USAID, SHIA, SUNN}
    }


    test SAT:LEVEL-1.4 {invalid c} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:LEVEL {
            n NB1 g SHIA c NONESUCH mad 1 limit 5 days 1 cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        c {Invalid concern "NONESUCH", should be one of: AUT, SFT, CUL, QOL, CAS}
    }


    test SAT:LEVEL-1.5 {invalid MAD} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:LEVEL {
            n NB1 g SHIA c AUT mad NONESUCH limit 5 days 1 cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        mad {MAD does not exist: "NONESUCH"}
    }


    test SAT:LEVEL-1.6 {invalid limit} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:LEVEL {
            n NB1 g SHIA c AUT mad 1 limit NONESUCH days 1 cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        limit {invalid value "NONESUCH", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }


    test SAT:LEVEL-1.7 {invalid days} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:LEVEL {
            n NB1 g SHIA c AUT mad 1 limit 5 days NONESUCH cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        days {invalid value "NONESUCH", should be a real number no less than 0.0}
    }


    test SAT:LEVEL-1.8 {invalid cause} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:LEVEL {
            n NB1 g SHIA c AUT mad 1 limit 5 days 1 cause NONESUCH
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        cause {Invalid cause "NONESUCH", should be one of: DRIVER, CHKPOINT, CIVCAS, CMOCONST, CMODEV, CMOEDU, CMOEMP, CMOIND, CMOINF, CMOLAW, CMOMED, CMOOTHER, COERCION, COMMOUT, CRIMINAL, CURFEW, DISASTER, DISPLACED, DMGCULT, DMGSACRED, FUELSHRT, GARBAGE, GUARD, HUNGER, INDSPILL, MOSQUE, ORDNANCE, ORGCAS, ORGCONST, ORGEDU, ORGEMP, ORGIND, ORGINF, ORGMED, ORGOTHER, PATROL, PIPELINE, POWEROUT, PRESENCE, PSYOP, REFINERY, SEWAGE, SICKNESS, THIRST}
    }


    test SAT:LEVEL-1.9 {invalid p} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:LEVEL {
            n NB1 g SHIA c AUT mad 1 limit 5 days 1 cause DRIVER
            p NONESUCH q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        p {invalid value "NONESUCH", should be a real number in range 0.0, 1.0}
    }


    test SAT:LEVEL-1.10 {invalid q} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:LEVEL {
            n NB1 g SHIA c AUT mad 1 limit 5 days 1 cause DRIVER
            p 0.8 q NONESUCH
        }
    } -cleanup {
        cleanup
    } -result {
        q {invalid value "NONESUCH", should be a real number in range 0.0, 1.0}
    }


    test SAT:LEVEL-1.11 {group type mismatch} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:LEVEL {
            n NB1 g SHIA c CAS mad 1 limit 5 days 1 cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        c {Invalid civilian concern "CAS", should be one of: AUT, SFT, CUL, QOL}
    }


    test SAT:LEVEL-2.1 {Order is accepted} -setup {
        advance
    } -body {
        ted schedule +1 MAD:SAT:LEVEL {
            n NB1 g SHIA c AUT mad 1 limit 5 days 1 cause DRIVER
            p 0.8 q 0.4
        }
        ted order SIM:RUN days 1 block yes
    } -cleanup {
        cleanup
    } -result {}


    #-------------------------------------------------------------------
    # MAD:SAT:SLOPE

    test SAT:SLOPE-1.1 {required parms} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:SLOPE {}
    } -result {
        n {required value}
        g {required value}
        c {required value}
        mad {required value}
        slope {required value}
        cause {required value}
        p {required value}
        q {required value}
    }
    

    test SAT:SLOPE-1.2 {invalid n} -body {
        ted schedule -reject +1 MAD:SAT:SLOPE {
            n NONESUCH g SHIA c AUT mad 1 slope 5 cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        n {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test SAT:SLOPE-1.3 {invalid g} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:SLOPE {
            n NB1 g NONESUCH c AUT mad 1 slope 5 cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        g {Invalid group "NONESUCH", should be one of: USAID, SHIA, SUNN}
    }


    test SAT:SLOPE-1.4 {invalid c} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:SLOPE {
            n NB1 g SHIA c NONESUCH mad 1 slope 5 cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        c {Invalid concern "NONESUCH", should be one of: AUT, SFT, CUL, QOL, CAS}
    }


    test SAT:SLOPE-1.5 {invalid MAD} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:SLOPE {
            n NB1 g SHIA c AUT mad NONESUCH slope 5 cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        mad {MAD does not exist: "NONESUCH"}
    }


    test SAT:SLOPE-1.6 {invalid slope} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:SLOPE {
            n NB1 g SHIA c AUT mad 1 slope NONESUCH cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        slope {invalid value "NONESUCH", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }


    test SAT:SLOPE-1.7 {invalid cause} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:SLOPE {
            n NB1 g SHIA c AUT mad 1 slope 5 cause NONESUCH
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        cause {Invalid cause "NONESUCH", should be one of: DRIVER, CHKPOINT, CIVCAS, CMOCONST, CMODEV, CMOEDU, CMOEMP, CMOIND, CMOINF, CMOLAW, CMOMED, CMOOTHER, COERCION, COMMOUT, CRIMINAL, CURFEW, DISASTER, DISPLACED, DMGCULT, DMGSACRED, FUELSHRT, GARBAGE, GUARD, HUNGER, INDSPILL, MOSQUE, ORDNANCE, ORGCAS, ORGCONST, ORGEDU, ORGEMP, ORGIND, ORGINF, ORGMED, ORGOTHER, PATROL, PIPELINE, POWEROUT, PRESENCE, PSYOP, REFINERY, SEWAGE, SICKNESS, THIRST}
    }


    test SAT:SLOPE-1.8 {invalid p} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:SLOPE {
            n NB1 g SHIA c AUT mad 1 slope 5 cause DRIVER
            p NONESUCH q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        p {invalid value "NONESUCH", should be a real number in range 0.0, 1.0}
    }


    test SAT:SLOPE-1.9 {invalid q} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:SLOPE {
            n NB1 g SHIA c AUT mad 1 slope 5 cause DRIVER
            p 0.8 q NONESUCH
        }
    } -cleanup {
        cleanup
    } -result {
        q {invalid value "NONESUCH", should be a real number in range 0.0, 1.0}
    }


    test SAT:SLOPE-1.10 {group type mismatch} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:SLOPE {
            n NB1 g SHIA c CAS mad 1 slope 5 cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        c {Invalid civilian concern "CAS", should be one of: AUT, SFT, CUL, QOL}
    }


    test SAT:SLOPE-2.1 {Order is accepted} -setup {
        advance
    } -body {
        ted schedule +1 MAD:SAT:SLOPE {
            n NB1 g SHIA c AUT mad 1 slope 5 cause DRIVER
            p 0.8 q 0.4
        }

        ted order SIM:RUN days 1 block yes
    } -cleanup {
        cleanup
    } -result {}


    #-------------------------------------------------------------------
    # MAD:COOP:ADJUST

    test COOP:ADJUST-1.1 {required parms} -setup {
        advance
    } -body {
        ted order -reject MAD:COOP:ADJUST {}
    } -result {
        n {required value}
        f {required value}
        g {required value}
        mad {required value}
        delta {required value}
    }
    

    test COOP:ADJUST-1.2 {invalid n} -body {
        ted order -reject MAD:COOP:ADJUST {
            n NONESUCH f SHIA g BLUE mad 1 delta 5
        }
    } -cleanup {
        cleanup
    } -result {
        n {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test COOP:ADJUST-1.3 {invalid f} -setup {
        advance
    } -body {
        ted order -reject MAD:COOP:ADJUST {
            n NB1 f NONESUCH g BLUE mad 1 delta 5
        }
    } -cleanup {
        cleanup
    } -result {
        f {Invalid civilian group, should be one of: SHIA, SUNN}
    }


    test COOP:ADJUST-1.4 {invalid g} -setup {
        advance
    } -body {
        ted order -reject MAD:COOP:ADJUST {
            n NB1 f SHIA g NONESUCH mad 1 delta 5
        }
    } -cleanup {
        cleanup
    } -result {
        g {Invalid force group, should be one of: BLUE}
    }


    test COOP:ADJUST-1.5 {invalid MAD} -setup {
        advance
    } -body {
        ted order -reject MAD:COOP:ADJUST {
            n NB1 f SHIA g BLUE mad 2 delta 5
        }
    } -cleanup {
        cleanup
    } -result {
        mad {MAD does not exist: "2"}
    }


    test COOP:ADJUST-1.6 {invalid delta} -setup {
        advance
    } -body {
        ted order -reject MAD:COOP:ADJUST {
            n NB1 f SHIA g BLUE mad 1 delta NONESUCH
        }
    } -cleanup {
        cleanup
    } -result {
        delta {invalid value "NONESUCH", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }


    test COOP:ADJUST-1.7 {f does not reside in n} -setup {
        advance
    } -body {
        ted order -reject MAD:COOP:ADJUST {
            n NB1 f SUNN g BLUE mad 1 delta 5
        }
    } -cleanup {
        cleanup
    } -result {
        f {Cooperation is not tracked for SUNN with BLUE in NB1.}
    }


    test COOP:ADJUST-2.1 {<Entity> updates} -setup {
        advance
    } -body {
        ted notifier bind ::coop <Entity>
        ted notifier bind ::mad <Entity>
        ted order MAD:COOP:ADJUST {
            n NB1 f SHIA g BLUE mad 1 delta 5
        }
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::coop <Entity> update {NB1 SHIA BLUE}}
        {::mad <Entity> update 1}
    }


    test COOP:ADJUST-3.1 {undo undoes the change} -setup {
        advance

        ted order MAD:COOP:ADJUST {
            n NB1 f SHIA g BLUE mad 1 delta 5
        }
    } -body {
        ted notifier bind ::coop <Entity>
        ted notifier bind ::mad <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::coop <Entity> update {NB1 SHIA BLUE}}
        {::mad <Entity> update 1}
    }


    #-------------------------------------------------------------------
    # MAD:COOP:SET

    test COOP:SET-1.1 {required parms} -setup {
        advance
    } -body {
        ted order -reject MAD:COOP:SET {}
    } -result {
        n {required value}
        f {required value}
        g {required value}
        mad {required value}
        coop {required value}
    }
    

    test COOP:SET-1.2 {invalid n} -body {
        ted order -reject MAD:COOP:SET {
            n NONESUCH f SHIA g BLUE mad 1 coop 5
        }
    } -cleanup {
        cleanup
    } -result {
        n {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test COOP:SET-1.3 {invalid f} -setup {
        advance
    } -body {
        ted order -reject MAD:COOP:SET {
            n NB1 f NONESUCH g BLUE mad 1 coop 5
        }
    } -cleanup {
        cleanup
    } -result {
        f {Invalid civilian group, should be one of: SHIA, SUNN}
    }


    test COOP:SET-1.4 {invalid g} -setup {
        advance
    } -body {
        ted order -reject MAD:COOP:SET {
            n NB1 f SHIA g NONESUCH mad 1 coop 5
        }
    } -cleanup {
        cleanup
    } -result {
        g {Invalid force group, should be one of: BLUE}
    }


    test COOP:SET-1.5 {invalid MAD} -setup {
        advance
    } -body {
        ted order -reject MAD:COOP:SET {
            n NB1 f SHIA g BLUE mad 2 coop 5
        }
    } -cleanup {
        cleanup
    } -result {
        mad {MAD does not exist: "2"}
    }


    test COOP:SET-1.6 {invalid coop} -setup {
        advance
    } -body {
        ted order -reject MAD:COOP:SET {
            n NB1 f SHIA g BLUE mad 1 coop NONESUCH
        }
    } -cleanup {
        cleanup
    } -result {
        coop {invalid value "NONESUCH", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}
    }


    test COOP:SET-1.7 {f does not reside in n} -setup {
        advance
    } -body {
        ted order -reject MAD:COOP:SET {
            n NB1 f SUNN g BLUE mad 1 coop 5
        }
    } -cleanup {
        cleanup
    } -result {
        f {Cooperation is not tracked for SUNN with BLUE in NB1.}
    }


    test COOP:SET-2.1 {<Entity> updates} -setup {
        advance
    } -body {
        ted notifier bind ::coop <Entity>
        ted notifier bind ::mad <Entity>
        ted order MAD:COOP:SET {
            n NB1 f SHIA g BLUE mad 1 coop 5
        }
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::coop <Entity> update {NB1 SHIA BLUE}}
        {::mad <Entity> update 1}
    }


    test COOP:SET-3.1 {undo undoes the change} -setup {
        advance

        ted order MAD:COOP:SET {
            n NB1 f SHIA g BLUE mad 1 coop 5
        }
    } -body {
        ted notifier bind ::coop <Entity>
        ted notifier bind ::mad <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::coop <Entity> update {NB1 SHIA BLUE}}
        {::mad <Entity> update 1}
    }

    #-------------------------------------------------------------------
    # MAD:COOP:LEVEL

    test COOP:LEVEL-1.1 {required parms} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:LEVEL {}
    } -result {
        n {required value}
        f {required value}
        g {required value}
        mad {required value}
        limit {required value}
        days {required value}
        cause {required value}
        p {required value}
        q {required value}
    }
    

    test COOP:LEVEL-1.2 {invalid n} -body {
        ted schedule -reject +1 MAD:COOP:LEVEL {
            n NONESUCH f SHIA g BLUE mad 1 limit 5 days 1 cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        n {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test COOP:LEVEL-1.3 {invalid f} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:LEVEL {
            n NB1 f NONESUCH g BLUE mad 1 limit 5 days 1 cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        f {Invalid civilian group, should be one of: SHIA, SUNN}
    }


    test COOP:LEVEL-1.4 {invalid g} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:LEVEL {
            n NB1 f SHIA g NONESUCH mad 1 limit 5 days 1 cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        g {Invalid force group, should be one of: BLUE}
    }


    test COOP:LEVEL-1.5 {invalid MAD} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:LEVEL {
            n NB1 f SHIA g BLUE mad NONESUCH limit 5 days 1 cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        mad {MAD does not exist: "NONESUCH"}
    }


    test COOP:LEVEL-1.6 {invalid limit} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:LEVEL {
            n NB1 f SHIA g BLUE mad 1 limit NONESUCH days 1 cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        limit {invalid value "NONESUCH", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }


    test COOP:LEVEL-1.7 {invalid days} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:LEVEL {
            n NB1 f SHIA g BLUE mad 1 limit 5 days NONESUCH cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        days {invalid value "NONESUCH", should be a real number no less than 0.0}
    }


    test COOP:LEVEL-1.8 {invalid cause} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:LEVEL {
            n NB1 f SHIA g BLUE mad 1 limit 5 days 1 cause NONESUCH
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        cause {Invalid cause "NONESUCH", should be one of: DRIVER, CHKPOINT, CIVCAS, CMOCONST, CMODEV, CMOEDU, CMOEMP, CMOIND, CMOINF, CMOLAW, CMOMED, CMOOTHER, COERCION, COMMOUT, CRIMINAL, CURFEW, DISASTER, DISPLACED, DMGCULT, DMGSACRED, FUELSHRT, GARBAGE, GUARD, HUNGER, INDSPILL, MOSQUE, ORDNANCE, ORGCAS, ORGCONST, ORGEDU, ORGEMP, ORGIND, ORGINF, ORGMED, ORGOTHER, PATROL, PIPELINE, POWEROUT, PRESENCE, PSYOP, REFINERY, SEWAGE, SICKNESS, THIRST}
    }


    test COOP:LEVEL-1.9 {invalid p} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:LEVEL {
            n NB1 f SHIA g BLUE mad 1 limit 5 days 1 cause DRIVER
            p NONESUCH q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        p {invalid value "NONESUCH", should be a real number in range 0.0, 1.0}
    }


    test COOP:LEVEL-1.10 {invalid q} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:LEVEL {
            n NB1 f SHIA g BLUE mad 1 limit 5 days 1 cause DRIVER
            p 0.8 q NONESUCH
        }
    } -cleanup {
        cleanup
    } -result {
        q {invalid value "NONESUCH", should be a real number in range 0.0, 1.0}
    }


    test COOP:LEVEL-2.1 {Order is accepted} -setup {
        advance
    } -body {
        ted schedule +1 MAD:COOP:LEVEL {
            n NB1 f SHIA g BLUE mad 1 limit 5 days 1 cause DRIVER
            p 0.8 q 0.4
        }
        ted order SIM:RUN days 1 block yes
    } -cleanup {
        cleanup
    } -result {}


    #-------------------------------------------------------------------
    # MAD:COOP:SLOPE

    test COOP:SLOPE-1.1 {required parms} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:SLOPE {}
    } -result {
        n {required value}
        f {required value}
        g {required value}
        mad {required value}
        slope {required value}
        cause {required value}
        p {required value}
        q {required value}
    }
    

    test COOP:SLOPE-1.2 {invalid n} -body {
        ted schedule -reject +1 MAD:COOP:SLOPE {
            n NONESUCH f SHIA g BLUE mad 1 slope 5 cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        n {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test COOP:SLOPE-1.3 {invalid f} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:SLOPE {
            n NB1 f NONESUCH g BLUE mad 1 slope 5 cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        f {Invalid civilian group, should be one of: SHIA, SUNN}
    }


    test COOP:SLOPE-1.4 {invalid g} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:SLOPE {
            n NB1 f SHIA g NONESUCH mad 1 slope 5 cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        g {Invalid force group, should be one of: BLUE}
    }


    test COOP:SLOPE-1.5 {invalid MAD} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:SLOPE {
            n NB1 f SHIA g BLUE mad NONESUCH slope 5 cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        mad {MAD does not exist: "NONESUCH"}
    }


    test COOP:SLOPE-1.6 {invalid slope} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:SLOPE {
            n NB1 f SHIA g BLUE mad 1 slope NONESUCH cause DRIVER
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        slope {invalid value "NONESUCH", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }


    test COOP:SLOPE-1.7 {invalid cause} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:SLOPE {
            n NB1 f SHIA g BLUE mad 1 slope 5 cause NONESUCH
            p 0.8 q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        cause {Invalid cause "NONESUCH", should be one of: DRIVER, CHKPOINT, CIVCAS, CMOCONST, CMODEV, CMOEDU, CMOEMP, CMOIND, CMOINF, CMOLAW, CMOMED, CMOOTHER, COERCION, COMMOUT, CRIMINAL, CURFEW, DISASTER, DISPLACED, DMGCULT, DMGSACRED, FUELSHRT, GARBAGE, GUARD, HUNGER, INDSPILL, MOSQUE, ORDNANCE, ORGCAS, ORGCONST, ORGEDU, ORGEMP, ORGIND, ORGINF, ORGMED, ORGOTHER, PATROL, PIPELINE, POWEROUT, PRESENCE, PSYOP, REFINERY, SEWAGE, SICKNESS, THIRST}
    }


    test COOP:SLOPE-1.8 {invalid p} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:SLOPE {
            n NB1 f SHIA g BLUE mad 1 slope 5 cause DRIVER
            p NONESUCH q 0.4
        }
    } -cleanup {
        cleanup
    } -result {
        p {invalid value "NONESUCH", should be a real number in range 0.0, 1.0}
    }


    test COOP:SLOPE-1.9 {invalid q} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:SLOPE {
            n NB1 f SHIA g BLUE mad 1 slope 5 cause DRIVER
            p 0.8 q NONESUCH
        }
    } -cleanup {
        cleanup
    } -result {
        q {invalid value "NONESUCH", should be a real number in range 0.0, 1.0}
    }


    test COOP:SLOPE-2.1 {Order is accepted} -setup {
        advance
    } -body {
        ted schedule +1 MAD:COOP:SLOPE {
            n NB1 f SHIA g BLUE mad 1 slope 5 cause DRIVER
            p 0.8 q 0.4
        }
        ted order SIM:RUN days 1 block yes
    } -cleanup {
        cleanup
    } -result {}


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





