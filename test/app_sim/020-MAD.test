# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-MAD.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) MAD:* order tests.
#
#    This test suite tests the unit-related orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Standard MADs

    set m1 {
        narrative "The First MAD" 
        cause     UNIQUE
        s         1.0
        p         1.0
        q         0.9
    }

    set m2 {
        narrative "The Second MAD"
        cause     CIVCAS
        s         0.9
        p         0.8
        q         0.7
    }

    set m3 {
        narrative "The Third MAD"
        cause     PATROL
        s         0.7
        p         0.6
        q         0.5
    }

    # Standard Magic Inputs

    set hrelinput {
        driver_id 1000
        mode      transient
        f         SHIA 
        g         BLUE
        mag       5 
    }

    set vrelinput {
        driver_id 1000
        mode      transient
        g         SHIA 
        a         JOE
        mag       5 
    }

    set satinput {
        driver_id 1000
        mode      transient
        g         SHIA 
        c         AUT
        mag       5 
    }

    set coopinput {
        driver_id 1000
        mode      persistent
        f         SHIA 
        g         BLUE 
        mag       5 
    }

    # Set up for magic inputs
    proc lock {} {
        variable m1
        parm set econ.disable yes
        ted create JOE NB1 NB2 BLUE SHIA KURD
        ted order SIM:LOCK

        # Delete other drivers not needed for this test.
        rdb eval {DELETE FROM drivers}
        ted order MAD:CREATE $m1 ;# 1000
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    #-------------------------------------------------------------------
    # MAD:CREATE

    test CREATE-1.1 {required parms} -body {
        ted order -reject MAD:CREATE {}
    } -result {
        narrative {required value}
        cause {required value}
        s {required value}
        p {required value}
        q {required value}
    }


    test CREATE-1.2 {invalid cause} -body {
        ted order -reject MAD:CREATE [dict merge $m1 {cause NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        cause {Invalid cause "NONESUCH", should be one of: UNIQUE, CHKPOINT, CIVCAS, CMOCONST, CMODEV, CMOEDU, CMOEMP, CMOIND, CMOINF, CMOLAW, CMOMED, CMOOTHER, COERCION, COMMOUT, CONTROL, CRIMINAL, CULSITE, CURFEW, DISASTER, DISPLACED, ENI, FUELSHRT, GARBAGE, GUARD, HUNGER, INDSPILL, MOOD, ORDNANCE, ORGCAS, ORGCONST, ORGEDU, ORGEMP, ORGIND, ORGINF, ORGMED, ORGOTHER, PATROL, PIPELINE, POWEROUT, PRESENCE, PSYOP, REFINERY, RELSITE, SEWAGE, SICKNESS, THIRST, UNEMP}
    }


    test CREATE-1.3 {invalid s} -body {
        ted order -reject MAD:CREATE [dict merge $m1 {s NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        s {invalid value "NONESUCH", should be a real number in range 0.0, 1.0}
    }


    test CREATE-1.4 {invalid p} -body {
        ted order -reject MAD:CREATE [dict merge $m1 {p NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        p {invalid value "NONESUCH", should be a real number in range 0.0, 1.0}
    }


    test CREATE-1.5 {invalid q} -body {
        ted order -reject MAD:CREATE [dict merge $m1 {q NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        q {invalid value "NONESUCH", should be a real number in range 0.0, 1.0}
    }



    test CREATE-2.1 {MAD is created} -body {
        ted order MAD:CREATE $m1  ;# 1000
        ted order MAD:CREATE $m2  ;# 1001
        ted order MAD:CREATE $m3  ;# 1002

        ted query {SELECT * FROM mads}
    } -cleanup {
        cleanup
    } -result {
driver_id dtype narrative      cause  s   p   q   
--------- ----- -------------- ------ --- --- --- 
1000      MAGIC The First MAD  UNIQUE 1.0 1.0 0.9 
1001      MAGIC The Second MAD CIVCAS 0.9 0.8 0.7 
1002      MAGIC The Third MAD  PATROL 0.7 0.6 0.5 
    }


    test CREATE-2.2 {Effects} -body {
        ted notifier bind ::rdb <mads_t>
        ted notifier bind ::rdb <drivers>
        ted order MAD:CREATE $m1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <drivers> update 1000}
        {::rdb <mads_t> update 1000}
    }


    test CREATE-3.1 {undo effects} -setup {
        ted order MAD:CREATE $m1
    } -body {
        ted notifier bind ::rdb <mads_t>
        ted notifier bind ::rdb <drivers>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <mads_t> delete 1000}
        {::rdb <drivers> delete 1000}
    }


    #-------------------------------------------------------------------
    # MAD:DELETE

    test DELETE-1.1 {required parms} -body {
        ted order -reject MAD:DELETE {}
    } -result {
        driver_id {required value}
    }

    
    test DELETE-1.2 {unknown id} -body {
        ted order -reject MAD:DELETE driver_id NONESUCH
    } -result {
        driver_id {MAD does not exist or is not in initial state: "NONESUCH"}
    }


    test DELETE-1.3 {invalid MAD (not initial)} -body {
        ted order MAD:CREATE $m2   ;# 1000
        driver inputs incr 1000
        ted order -reject MAD:DELETE driver_id 1000
    } -cleanup {
        cleanup
    } -result {
        driver_id {MAD does not exist or is not in initial state: "1000"}
    }


    test DELETE-2.1 {Effects} -setup {
        ted create BLUE
        ted order MAD:CREATE $m1     ;# 1000
    } -body {
        ted notifier bind ::rdb <mads_t>
        ted notifier bind ::rdb <drivers>
        ted order MAD:DELETE driver_id 1000
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <mads_t> delete 1000}
        {::rdb <drivers> delete 1000}
    }


    test DELETE-3.1 {Undo effects} -setup {
        ted create BLUE
        ted order MAD:CREATE $m1    ;# 1000
        ted order MAD:DELETE driver_id 1000
    } -body {
        ted notifier bind ::rdb <mads_t>
        ted notifier bind ::rdb <drivers>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <mads_t> update 1000}
        {::rdb <drivers> update 1000}
    }


    #-------------------------------------------------------------------
    # MAD:UPDATE

    test UPDATE-1.1 {required parms} -body {
        ted order -reject MAD:UPDATE {}
    } -result {
        driver_id {required value}
    }
    

    test UPDATE-1.2 {invalid MAD} -body {
        ted order -reject MAD:UPDATE driver_id 1 narrative PATROL
    } -cleanup {
        cleanup
    } -result {
        driver_id {MAD does not exist: "1"}
    }


    test UPDATE-1.3 {invalid cause} -setup {
        ted order MAD:CREATE $m1    ;# 1000
    } -body {
        ted order -reject MAD:UPDATE driver_id 1000 cause NONESUCH
    } -cleanup {
        cleanup
    } -result {
        cause {Invalid cause "NONESUCH", should be one of: UNIQUE, CHKPOINT, CIVCAS, CMOCONST, CMODEV, CMOEDU, CMOEMP, CMOIND, CMOINF, CMOLAW, CMOMED, CMOOTHER, COERCION, COMMOUT, CONTROL, CRIMINAL, CULSITE, CURFEW, DISASTER, DISPLACED, ENI, FUELSHRT, GARBAGE, GUARD, HUNGER, INDSPILL, MOOD, ORDNANCE, ORGCAS, ORGCONST, ORGEDU, ORGEMP, ORGIND, ORGINF, ORGMED, ORGOTHER, PATROL, PIPELINE, POWEROUT, PRESENCE, PSYOP, REFINERY, RELSITE, SEWAGE, SICKNESS, THIRST, UNEMP}
    }


    test UPDATE-1.4 {invalid s} -setup {
        ted order MAD:CREATE $m1    ;# 1000
    } -body {
        ted order -reject MAD:UPDATE driver_id 1000 s NONESUCH
    } -cleanup {
        cleanup
    } -result {
        s {invalid value "NONESUCH", should be a real number in range 0.0, 1.0}
    }


    test UPDATE-1.5 {invalid p} -setup {
        ted order MAD:CREATE $m1    ;# 1000
    } -body {
        ted order -reject MAD:UPDATE driver_id 1000 p NONESUCH
    } -cleanup {
        cleanup
    } -result {
        p {invalid value "NONESUCH", should be a real number in range 0.0, 1.0}
    }


    test UPDATE-1.6 {invalid q} -setup {
        ted order MAD:CREATE $m1    ;# 1000
    } -body {
        ted order -reject MAD:UPDATE driver_id 1000 q NONESUCH
    } -cleanup {
        cleanup
    } -result {
        q {invalid value "NONESUCH", should be a real number in range 0.0, 1.0}
    }


    test UPDATE-2.1 {MAD is updated} -setup {
        ted order MAD:CREATE $m1  ;# 1000
    } -body {
        ted order MAD:UPDATE {
            driver_id 1000 
            narrative "MAD the First"
            cause     GUARD
            s         0.5
            p         0.1
            q         0.0
        }

        ted query {SELECT * FROM mads}
    } -cleanup {
        cleanup
    } -result {
driver_id dtype narrative     cause s   p   q   
--------- ----- ------------- ----- --- --- --- 
1000      MAGIC MAD the First GUARD 0.5 0.1 0.0 
    }


    test UPDATE-2.2 {table monitor event} -setup {
        ted order MAD:CREATE $m1   ;# 1000
    } -body {
        ted notifier bind ::rdb <mads_t>
        ted notifier bind ::rdb <drivers>
        ted order MAD:UPDATE driver_id 1000 narrative "MAD the FIRST"
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <mads_t> update 1000}
        {::rdb <drivers> update 1000}
    }


    test UPDATE-3.1 {undo undoes the change} -setup {
        ted order MAD:CREATE $m1    ;# 1000
        ted order MAD:UPDATE driver_id 1000 narrative "MAD the FIRST"
    } -body {
        ted notifier bind ::rdb <mads_t>
        ted notifier bind ::rdb <drivers>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <mads_t> update 1000}
        {::rdb <drivers> update 1000}
    }

    #-------------------------------------------------------------------
    # MAD:HREL:ADJUST

    test HREL:ADJUST-1.1 {required parms} -setup {
        lock
    } -body {
        ted order -reject MAD:HREL:ADJUST {}
    } -cleanup {
        cleanup
    } -result {
        id {required value}
        driver_id {required value}
        delta {required value}
    }
    

    test HREL:ADJUST-1.2 {invalid ID} -setup {
        lock
    } -body {
        ted order -reject MAD:HREL:ADJUST {
            id {SHIA NONESUCH} driver_id 1000 delta 5
        }
    } -cleanup {
        cleanup
    } -result {
        id {Invalid group, should be one of: BLUE, KURD, SHIA}
    }

    test HREL:ADJUST-1.3 {f=g} -setup {
        lock
    } -body {
        ted order -reject MAD:HREL:ADJUST {
            id {SHIA SHIA} driver_id 1000 delta 5
        }
    } -cleanup {
        cleanup
    } -result {
        id {A group's relationship with itself cannot be overridden.}
    }


    test HREL:ADJUST-1.4 {invalid MAD} -setup {
        lock
    } -body {
        ted order -reject MAD:HREL:ADJUST {
            id {SHIA BLUE} driver_id NONESUCH delta 5
        }
    } -cleanup {
        cleanup
    } -result {
        driver_id {MAD does not exist: "NONESUCH"}
    }


    test HREL:ADJUST-1.5 {invalid delta} -setup {
        lock
    } -body {
        ted order -reject MAD:HREL:ADJUST {
            id {SHIA BLUE} driver_id 1000 delta NONESUCH
        }
    } -cleanup {
        cleanup
    } -result {
        delta {invalid value "NONESUCH", expected double}
    }


    test HREL:ADJUST-2.1 {table monitor events} -setup {
        lock
    } -body {
        ted notifier bind ::mad <Hrel>
        ted order MAD:HREL:ADJUST {
            id {SHIA BLUE} driver_id 1000 delta 5
        }
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Hrel> update {SHIA BLUE}}
    }


    test HREL:ADJUST-3.1 {undo undoes the change} -setup {
        lock

        ted order MAD:HREL:ADJUST {
            id {SHIA BLUE} driver_id 1000 delta 5
        }
    } -body {
        ted notifier bind ::mad <Hrel>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Hrel> update {SHIA BLUE}}
    }


    #-------------------------------------------------------------------
    # MAD:HREL:INPUT

    test HREL:INPUT-1.1 {required parms}   -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:HREL:INPUT {}
    } -cleanup {
        cleanup
    } -result {
        driver_id {required value}
        mode {required value}
        f {required value}
        g {required value}
        mag {required value}
    }
    
    test HREL:INPUT-1.2 {invalid driver_id} -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:HREL:INPUT \
            [dict merge $hrelinput {driver_id NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        driver_id {MAD does not exist: "NONESUCH"}
    }


    test HREL:INPUT-1.3 {invalid mode} -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:HREL:INPUT \
            [dict merge $hrelinput {mode NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        mode {invalid value "nonesuch", should be one of: transient, persistent}
    }

    test HREL:INPUT-1.4 {invalid f} -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:HREL:INPUT \
            [dict merge $hrelinput {f NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        f {Invalid group, should be one of: BLUE, KURD, SHIA}
    }


    test HREL:INPUT-1.5 {invalid g} -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:HREL:INPUT \
            [dict merge $hrelinput {g NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        g {Invalid group, should be one of: BLUE, KURD, SHIA}
    }

    test HREL:INPUT-1.6 {f=g} -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:HREL:INPUT \
            [dict merge $hrelinput {g SHIA}]
    } -cleanup {
        cleanup
    } -result {
        g {Cannot change a group's relationship with itself.}
    }

    test HREL:INPUT-1.7 {invalid mag} -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:HREL:INPUT \
            [dict merge $hrelinput {mag NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        mag {invalid value "NONESUCH", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }

    test HREL:INPUT-2.1 {Order is accepted} -setup {
        lock
    } -body {
        ted schedule +1 MAD:HREL:INPUT $hrelinput
        ted order SIM:RUN weeks 1 block yes
    } -cleanup {
        cleanup
    } -result {}


    #-------------------------------------------------------------------
    # MAD:VREL:ADJUST

    test VREL:ADJUST-1.1 {required parms} -setup {
        lock
    } -body {
        ted order -reject MAD:VREL:ADJUST {}
    } -cleanup {
        cleanup
    } -result {
        id {required value}
        driver_id {required value}
        delta {required value}
    }
    

    test VREL:ADJUST-1.2 {invalid g in ID} -setup {
        lock
    } -body {
        ted order -reject MAD:VREL:ADJUST {
            id {NONESUCH JOE} driver_id 1000 delta 5
        }
    } -cleanup {
        cleanup
    } -result {
        id {Invalid group, should be one of: BLUE, KURD, SHIA}
    }

    test VREL:ADJUST-1.3 {invalid a in ID} -setup {
        lock
    } -body {
        ted order -reject MAD:VREL:ADJUST {
            id {SHIA NONESUCH} driver_id 1000 delta 5
        }
    } -cleanup {
        cleanup
    } -result {
        id {Invalid actor, should be one of: JOE}
    }

    test VREL:ADJUST-1.4 {invalid MAD} -setup {
        lock
    } -body {
        ted order -reject MAD:VREL:ADJUST {
            id {SHIA JOE} driver_id NONESUCH delta 5
        }
    } -cleanup {
        cleanup
    } -result {
        driver_id {MAD does not exist: "NONESUCH"}
    }


    test VREL:ADJUST-1.4 {invalid delta} -setup {
        lock
    } -body {
        ted order -reject MAD:VREL:ADJUST {
            id {SHIA JOE} driver_id 1000 delta NONESUCH
        }
    } -cleanup {
        cleanup
    } -result {
        delta {invalid value "NONESUCH", expected double}
    }


    test VREL:ADJUST-2.1 {table monitor events} -setup {
        lock
    } -body {
        ted notifier bind ::mad <Vrel>
        ted order MAD:VREL:ADJUST {
            id {SHIA JOE} driver_id 1000 delta 5
        }
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Vrel> update {SHIA JOE}}
    }


    test VREL:ADJUST-3.1 {undo undoes the change} -setup {
        lock

        ted order MAD:VREL:ADJUST {
            id {SHIA JOE} driver_id 1000 delta 5
        }
    } -body {
        ted notifier bind ::mad <Vrel>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Vrel> update {SHIA JOE}}
    }


    #-------------------------------------------------------------------
    # MAD:VREL:INPUT

    test VREL:INPUT-1.1 {required parms}   -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:VREL:INPUT {}
    } -cleanup {
        cleanup
    } -result {
        driver_id {required value}
        mode {required value}
        g {required value}
        a {required value}
        mag {required value}
    }
    
    test VREL:INPUT-1.2 {invalid driver_id} -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:VREL:INPUT \
            [dict merge $vrelinput {driver_id NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        driver_id {MAD does not exist: "NONESUCH"}
    }


    test VREL:INPUT-1.3 {invalid mode} -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:VREL:INPUT \
            [dict merge $vrelinput {mode NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        mode {invalid value "nonesuch", should be one of: transient, persistent}
    }

    test VREL:INPUT-1.4 {invalid f} -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:VREL:INPUT \
            [dict merge $vrelinput {g NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        g {Invalid group, should be one of: BLUE, KURD, SHIA}
    }


    test VREL:INPUT-1.5 {invalid a} -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:VREL:INPUT \
            [dict merge $vrelinput {a NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        a {Invalid actor, should be one of: JOE}
    }

    test VREL:INPUT-1.6 {invalid mag} -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:VREL:INPUT \
            [dict merge $vrelinput {mag NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        mag {invalid value "NONESUCH", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }

    test VREL:INPUT-2.1 {Order is accepted} -setup {
        lock
    } -body {
        ted schedule +1 MAD:VREL:INPUT $vrelinput
        ted order SIM:RUN weeks 1 block yes
    } -cleanup {
        cleanup
    } -result {}


    #-------------------------------------------------------------------
    # MAD:SAT:ADJUST

    test SAT:ADJUST-1.1 {required parms} -setup {
        lock
    } -body {
        ted order -reject MAD:SAT:ADJUST {}
    } -cleanup {
        cleanup
    } -result {
        id {required value}
        driver_id {required value}
        delta {required value}
    }
    

    test SAT:ADJUST-1.2 {invalid MAD} -setup {
        lock
    } -body {
        ted order -reject MAD:SAT:ADJUST {
            id {SHIA AUT} driver_id NONESUCH delta 5
        }
    } -cleanup {
        cleanup
    } -result {
        driver_id {MAD does not exist: "NONESUCH"}
    }


    test SAT:ADJUST-1.3 {invalid delta} -setup {
        lock
    } -body {
        ted order -reject MAD:SAT:ADJUST {
            id {SHIA AUT} driver_id 1000 delta NONESUCH
        }
    } -cleanup {
        cleanup
    } -result {
        delta {invalid value "NONESUCH", expected double}
    }


    test SAT:ADJUST-2.1 {table monitor events} -setup {
        lock
    } -body {
        ted notifier bind ::mad <Sat>
        ted order MAD:SAT:ADJUST {
            id {SHIA AUT} driver_id 1000 delta 5
        }
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Sat> update {SHIA AUT}}
    }


    test SAT:ADJUST-3.1 {undo undoes the change} -setup {
        lock

        ted order MAD:SAT:ADJUST {
            id {SHIA AUT} driver_id 1000 delta 5
        }
    } -body {
        ted notifier bind ::mad <Sat>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Sat> update {SHIA AUT}}
    }

    #-------------------------------------------------------------------
    # MAD:SAT:INPUT

    test SAT:INPUT-1.1 {required parms}  -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:SAT:INPUT {}
    } -cleanup {
        cleanup
    } -result {
        driver_id {required value}
        mode {required value}
        g {required value}
        c {required value}
        mag {required value}
    }
    

    test SAT:INPUT-1.2 {invalid driver_id}  -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:SAT:INPUT \
            [dict merge $satinput {driver_id NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        driver_id {MAD does not exist: "NONESUCH"}
    }

    test SAT:INPUT-1.3 {invalid mode}  -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:SAT:INPUT \
            [dict merge $satinput {mode NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        mode {invalid value "nonesuch", should be one of: transient, persistent}
    }


    test SAT:INPUT-1.4 {invalid g}  -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:SAT:INPUT \
            [dict merge $satinput {g NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        g {Invalid civilian group, should be one of: SHIA, KURD}
    }


    test SAT:INPUT-1.5 {invalid c}  -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:SAT:INPUT \
            [dict merge $satinput {c NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        c {Invalid concern "NONESUCH", should be one of: AUT, SFT, CUL, QOL}
    }

    test SAT:INPUT-1.6 {invalid mag}  -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:SAT:INPUT \
            [dict merge $satinput {mag NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        mag {invalid value "NONESUCH", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }

    test SAT:INPUT-2.1 {Order is accepted}  -setup {
        lock
    } -body {
        ted schedule +1 MAD:SAT:INPUT $satinput
        ted order SIM:RUN weeks 1 block yes
    } -cleanup {
        cleanup
    } -result {}


    #-------------------------------------------------------------------
    # MAD:COOP:ADJUST

    test COOP:ADJUST-1.1 {required parms} -setup {
        lock
    } -body {
        ted order -reject MAD:COOP:ADJUST {}
    } -cleanup {
        cleanup
    } -result {
        id {required value}
        driver_id {required value}
        delta {required value}
    }
    

    test COOP:ADJUST-1.2 {invalid MAD} -setup {
        lock
    } -body {
        ted order -reject MAD:COOP:ADJUST {
            id {SHIA BLUE} driver_id NONESUCH delta 5
        }
    } -cleanup {
        cleanup
    } -result {
        driver_id {MAD does not exist: "NONESUCH"}
    }


    test COOP:ADJUST-1.3 {invalid delta} -setup {
        lock
    } -body {
        ted order -reject MAD:COOP:ADJUST {
            id {SHIA BLUE} driver_id 1000 delta NONESUCH
        }
    } -cleanup {
        cleanup
    } -result {
        delta {invalid value "NONESUCH", expected double}
    }


    test COOP:ADJUST-2.1 {table monitor events} -setup {
        lock
    } -body {
        ted notifier bind ::mad <Coop>
        ted order MAD:COOP:ADJUST {
            id {SHIA BLUE} driver_id 1000 delta 5
        }
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Coop> update {SHIA BLUE}}
    }


    test COOP:ADJUST-3.1 {undo undoes the change} -setup {
        lock

        ted order MAD:COOP:ADJUST {
            id {SHIA BLUE} driver_id 1000 delta 5
        }
    } -body {
        ted notifier bind ::mad <Coop>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Coop> update {SHIA BLUE}}
    }


    #-------------------------------------------------------------------
    # MAD:COOP:INPUT

    test COOP:INPUT-1.1 {required parms}   -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:COOP:INPUT {}
    } -cleanup {
        cleanup
    } -result {
        driver_id {required value}
        mode {required value}
        f {required value}
        g {required value}
        mag {required value}
    }
    
    test COOP:INPUT-1.2 {invalid driver_id} -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:COOP:INPUT \
            [dict merge $coopinput {driver_id NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        driver_id {MAD does not exist: "NONESUCH"}
    }


    test COOP:INPUT-1.3 {invalid mode} -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:COOP:INPUT \
            [dict merge $coopinput {mode NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        mode {invalid value "nonesuch", should be one of: transient, persistent}
    }

    test COOP:INPUT-1.4 {invalid f} -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:COOP:INPUT \
            [dict merge $coopinput {f NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        f {Invalid civilian group, should be one of: SHIA, KURD}
    }


    test COOP:INPUT-1.5 {invalid g} -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:COOP:INPUT \
            [dict merge $coopinput {g NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        g {Invalid force group, should be one of: BLUE}
    }


    test COOP:INPUT-1.6 {invalid mag} -setup {
        lock
    } -body {
        ted schedule -reject +1 MAD:COOP:INPUT \
            [dict merge $coopinput {mag NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        mag {invalid value "NONESUCH", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }

    test COOP:INPUT-2.1 {Order is accepted} -setup {
        lock
    } -body {
        ted schedule +1 MAD:COOP:INPUT $coopinput
        ted order SIM:RUN weeks 1 block yes
    } -cleanup {
        cleanup
    } -result {}



    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::






