# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-MAD.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) MAD:* order tests.
#
#    This test suite tests the unit-related orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Standard MADs

    set m1 {
        oneliner "The First MAD" 
        cause    UNIQUE
        s        1.0
        p        1.0
        q        0.9
    }

    set m2 {
        oneliner "The Second MAD"
        cause    CIVCAS
        s        0.9
        p        0.8
        q        0.7
    }

    set m3 {
        oneliner "The Third MAD"
        cause    PATROL
        s        0.7
        p        0.6
        q        0.5
    }

    # Standard Magic Inputs

    set satlevel {
        g       SHIA 
        c       AUT
        mad     1 
        limit   5 
        days    1 
        athresh 50
        dthresh -50
    }

    set satslope {
        g       SHIA 
        c       AUT 
        mad     1 
        slope   5
        athresh 50
        dthresh -50
    }

    set cooplevel {
        f       SHIA 
        g       BLUE 
        mad     1 
        limit   5 
        days    1
        athresh 75
        dthresh 25
    }

    set coopslope {
        f       SHIA 
        g       BLUE 
        mad     1 
        slope   5 
        athresh 75
        dthresh 25
    }

    # Set up for magic inputs
    proc advance {} {
        variable m1

        ted create NB1 NB2 BLUE SHIA KURD
        scenario mutate reconcile
        ted order SIM:LOCK
        ted order SIM:RUN days 1 block yes
        ted order MAD:CREATE $m1
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    #-------------------------------------------------------------------
    # MAD:CREATE

    test CREATE-1.1 {required parms} -body {
        ted order -reject MAD:CREATE {}
    } -result {
        oneliner {required value}
        cause {required value}
        s {required value}
        p {required value}
        q {required value}
    }


    test CREATE-1.2 {invalid cause} -setup {
        advance
    } -body {
        ted order -reject MAD:CREATE [dict merge $m1 {cause NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        cause {Invalid cause "NONESUCH", should be one of: UNIQUE, CHKPOINT, CIVCAS, CMOCONST, CMODEV, CMOEDU, CMOEMP, CMOIND, CMOINF, CMOLAW, CMOMED, CMOOTHER, COERCION, COMMOUT, CRIMINAL, CULSITE, CURFEW, DISASTER, DISPLACED, FUELSHRT, GARBAGE, GUARD, HUNGER, INDSPILL, MOSQUE, ORDNANCE, ORGCAS, ORGCONST, ORGEDU, ORGEMP, ORGIND, ORGINF, ORGMED, ORGOTHER, PATROL, PIPELINE, POWEROUT, PRESENCE, PSYOP, REFINERY, RELSITE, SEWAGE, SICKNESS, THIRST, UNEMP}
    }


    test CREATE-1.3 {invalid s} -setup {
        advance
    } -body {
        ted order -reject MAD:CREATE [dict merge $m1 {s NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        s {invalid value "NONESUCH", should be a real number in range 0.0, 1.0}
    }


    test CREATE-1.4 {invalid p} -setup {
        advance
    } -body {
        ted order -reject MAD:CREATE [dict merge $m1 {p NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        p {invalid value "NONESUCH", should be a real number in range 0.0, 1.0}
    }


    test CREATE-1.5 {invalid q} -setup {
        advance
    } -body {
        ted order -reject MAD:CREATE [dict merge $m1 {q NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        q {invalid value "NONESUCH", should be a real number in range 0.0, 1.0}
    }



    test CREATE-2.1 {MAD is created} -setup {
        ted create NB1 BLUE SHIA
    } -body {
        ted order MAD:CREATE $m1
        ted order MAD:CREATE $m2
        ted order MAD:CREATE $m3

        ted query {SELECT * FROM mads}
    } -cleanup {
        cleanup
    } -result {
id oneliner       cause  s   p   q   driver 
-- -------------- ------ --- --- --- ------ 
1  The First MAD  UNIQUE 1.0 1.0 0.9 -1     
2  The Second MAD CIVCAS 0.9 0.8 0.7 -1     
3  The Third MAD  PATROL 0.7 0.6 0.5 -1     
    }


    test CREATE-2.2 {Effects} -body {
        ted notifier bind ::mad <Entity>
        ted order MAD:CREATE $m1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Entity> create 1}
    }


    test CREATE-3.1 {undo effects} -setup {
        ted order MAD:CREATE $m1
    } -body {
        ted notifier bind ::mad <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Entity> delete 1}
    }


    #-------------------------------------------------------------------
    # MAD:DELETE

    test DELETE-1.1 {required parms} -body {
        ted order -reject MAD:DELETE {}
    } -result {
        id {required value}
    }

    
    test DELETE-1.2 {unknown id} -body {
        ted order -reject MAD:DELETE id NONESUCH
    } -result {
        id {MAD does not exist or is not in initial state: "NONESUCH"}
    }


    test DELETE-1.3 {invalid MAD (not initial)} -body {
        ted order MAD:CREATE $m2
        rdb eval {UPDATE mads SET driver=1}
        ted order -reject MAD:DELETE id 2
    } -cleanup {
        cleanup
    } -result {
        id {MAD does not exist or is not in initial state: "2"}
    }


    test DELETE-2.1 {Effects} -setup {
        ted create BLUE
        ted order MAD:CREATE $m1
    } -body {
        ted notifier bind ::mad <Entity>
        ted order MAD:DELETE id 1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Entity> delete 1}
    }


    test DELETE-3.1 {Undo effects} -setup {
        ted create BLUE
        ted order MAD:CREATE $m1
        ted order MAD:DELETE id 1
    } -body {
        ted notifier bind ::mad <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Entity> create 1}
    }


    #-------------------------------------------------------------------
    # MAD:UPDATE

    test UPDATE-1.1 {required parms} -body {
        ted order -reject MAD:UPDATE {}
    } -result {
        id {required value}
    }
    

    test UPDATE-1.2 {invalid MAD} -body {
        ted order -reject MAD:UPDATE id 1 oneliner PATROL
    } -cleanup {
        cleanup
    } -result {
        id {MAD does not exist: "1"}
    }


    test UPDATE-1.3 {invalid cause} -setup {
        advance
    } -body {
        ted order -reject MAD:UPDATE id 1 cause NONESUCH
    } -cleanup {
        cleanup
    } -result {
        cause {Invalid cause "NONESUCH", should be one of: UNIQUE, CHKPOINT, CIVCAS, CMOCONST, CMODEV, CMOEDU, CMOEMP, CMOIND, CMOINF, CMOLAW, CMOMED, CMOOTHER, COERCION, COMMOUT, CRIMINAL, CULSITE, CURFEW, DISASTER, DISPLACED, FUELSHRT, GARBAGE, GUARD, HUNGER, INDSPILL, MOSQUE, ORDNANCE, ORGCAS, ORGCONST, ORGEDU, ORGEMP, ORGIND, ORGINF, ORGMED, ORGOTHER, PATROL, PIPELINE, POWEROUT, PRESENCE, PSYOP, REFINERY, RELSITE, SEWAGE, SICKNESS, THIRST, UNEMP}
    }


    test UPDATE-1.4 {invalid s} -setup {
        advance
    } -body {
        ted order -reject MAD:UPDATE id 1 s NONESUCH
    } -cleanup {
        cleanup
    } -result {
        s {invalid value "NONESUCH", should be a real number in range 0.0, 1.0}
    }


    test UPDATE-1.5 {invalid p} -setup {
        advance
    } -body {
        ted order -reject MAD:UPDATE id 1 p NONESUCH
    } -cleanup {
        cleanup
    } -result {
        p {invalid value "NONESUCH", should be a real number in range 0.0, 1.0}
    }


    test UPDATE-1.6 {invalid q} -setup {
        advance
    } -body {
        ted order -reject MAD:UPDATE id 1 q NONESUCH
    } -cleanup {
        cleanup
    } -result {
        q {invalid value "NONESUCH", should be a real number in range 0.0, 1.0}
    }


    test UPDATE-2.1 {MAD is updated} -setup {
        ted order MAD:CREATE $m1
    } -body {
        ted order MAD:UPDATE {
            id       1 
            oneliner "MAD the First"
            cause    GUARD
            s        0.5
            p        0.1
            q        0.0
        }

        ted query {SELECT * FROM mads}
    } -cleanup {
        cleanup
    } -result {
id oneliner      cause s   p   q   driver 
-- ------------- ----- --- --- --- ------ 
1  MAD the First GUARD 0.5 0.1 0.0 -1     
    }


    test UPDATE-2.2 {<Entity> update} -setup {
        ted create BLUE
        ted order MAD:CREATE $m1
    } -body {
        ted notifier bind ::mad <Entity>
        ted order MAD:UPDATE id 1 oneliner "MAD the FIRST"
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Entity> update 1}
    }


    test UPDATE-3.1 {undo undoes the change} -setup {
        ted create BLUE
        ted order MAD:CREATE $m1
        ted order MAD:UPDATE id 1 oneliner "MAD the FIRST"
    } -body {
        ted notifier bind ::mad <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::mad <Entity> update 1}
    }


    #-------------------------------------------------------------------
    # MAD:SAT:ADJUST

    test SAT:ADJUST-1.1 {required parms} -setup {
        advance
    } -body {
        ted order -reject MAD:SAT:ADJUST {}
    } -cleanup {
        cleanup
    } -result {
        id {required value}
        mad {required value}
        delta {required value}
    }
    

    test SAT:ADJUST-1.2 {invalid MAD} -setup {
        advance
    } -body {
        ted order -reject MAD:SAT:ADJUST {
            id {SHIA AUT} mad 2 delta 5
        }
    } -cleanup {
        cleanup
    } -result {
        mad {MAD does not exist: "2"}
    }


    test SAT:ADJUST-1.3 {invalid delta} -setup {
        advance
    } -body {
        ted order -reject MAD:SAT:ADJUST {
            id {SHIA AUT} mad 1 delta NONESUCH
        }
    } -cleanup {
        cleanup
    } -result {
        delta {invalid value "NONESUCH", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }


    test SAT:ADJUST-2.1 {<Entity> updates} -setup {
        advance
    } -body {
        ted notifier bind ::sat <Entity>
        ted notifier bind ::mad <Entity>
        ted order MAD:SAT:ADJUST {
            id {SHIA AUT} mad 1 delta 5
        }
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::sat <Entity> update {SHIA AUT}}
        {::mad <Entity> update 1}
    }


    test SAT:ADJUST-3.1 {undo undoes the change} -setup {
        advance

        ted order MAD:SAT:ADJUST {
            id {SHIA AUT} mad 1 delta 5
        }
    } -body {
        ted notifier bind ::sat <Entity>
        ted notifier bind ::mad <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::sat <Entity> update {SHIA AUT}}
        {::mad <Entity> update 1}
    }


    #-------------------------------------------------------------------
    # MAD:SAT:SET

    test SAT:SET-1.1 {required parms} -setup {
        advance
    } -body {
        ted order -reject MAD:SAT:SET {}
    } -cleanup {
        cleanup
    } -result {
        id {required value}
        mad {required value}
        sat {required value}
    }
    

    test SAT:SET-1.2 {invalid MAD} -setup {
        advance
    } -body {
        ted order -reject MAD:SAT:SET {
            id {SHIA AUT} mad 2 sat 5
        }
    } -cleanup {
        cleanup
    } -result {
        mad {MAD does not exist: "2"}
    }


    test SAT:SET-1.3 {invalid sat} -setup {
        advance
    } -body {
        ted order -reject MAD:SAT:SET {
            id {SHIA AUT} mad 1 sat NONESUCH
        }
    } -cleanup {
        cleanup
    } -result {
        sat {invalid value "NONESUCH", should be a real number in range -100.0, 100.0, or one of: VS, S, A, D, VD}
    }


    test SAT:SET-2.1 {<Entity> updates} -setup {
        advance
    } -body {
        ted notifier bind ::sat <Entity>
        ted notifier bind ::mad <Entity>
        ted order MAD:SAT:SET {
            id {SHIA AUT} mad 1 sat 5
        }
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::sat <Entity> update {SHIA AUT}}
        {::mad <Entity> update 1}
    }


    test SAT:SET-3.1 {undo undoes the change} -setup {
        advance

        ted order MAD:SAT:SET {
            id {SHIA AUT} mad 1 sat 5
        }
    } -body {
        ted notifier bind ::sat <Entity>
        ted notifier bind ::mad <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::sat <Entity> update {SHIA AUT}}
        {::mad <Entity> update 1}
    }

    #-------------------------------------------------------------------
    # MAD:SAT:LEVEL

    test SAT:LEVEL-1.1 {required parms} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:LEVEL {}
    } -cleanup {
        cleanup
    } -result {
        g {required value}
        c {required value}
        mad {required value}
        limit {required value}
        days {required value}
        athresh {required value}
        dthresh {required value}
    }
    

    test SAT:LEVEL-1.2 {invalid g} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:LEVEL \
            [dict merge $satlevel {g NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        g {Invalid civilian group, should be one of: SHIA, KURD}
    }


    test SAT:LEVEL-1.3 {invalid c} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:LEVEL \
            [dict merge $satlevel {c NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        c {Invalid concern "NONESUCH", should be one of: AUT, SFT, CUL, QOL}
    }


    test SAT:LEVEL-1.4 {invalid MAD} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:LEVEL \
            [dict merge $satlevel {mad NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        mad {MAD does not exist: "NONESUCH"}
    }


    test SAT:LEVEL-1.5 {invalid limit} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:LEVEL \
            [dict merge $satlevel {limit NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        limit {invalid value "NONESUCH", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }


    test SAT:LEVEL-1.6 {invalid days} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:LEVEL \
            [dict merge $satlevel {days NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        days {invalid value "NONESUCH", should be a real number no less than 0.0}
    }


    test SAT:LEVEL-1.7 {invalid athresh} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:LEVEL \
            [dict merge $satlevel {athresh NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        athresh {invalid value "NONESUCH", should be a real number in range -100.0, 100.0, or one of: VS, S, A, D, VD}
    }

    test SAT:LEVEL-1.8 {invalid dthresh} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:LEVEL \
            [dict merge $satlevel {dthresh NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        dthresh {invalid value "NONESUCH", should be a real number in range -100.0, 100.0, or one of: VS, S, A, D, VD}
    }

    test SAT:LEVEL-2.1 {Order is accepted} -setup {
        advance
    } -body {
        ted schedule +1 MAD:SAT:LEVEL $satlevel
        ted order SIM:RUN days 1 block yes
    } -cleanup {
        cleanup
    } -result {}


    #-------------------------------------------------------------------
    # MAD:SAT:SLOPE

    test SAT:SLOPE-1.1 {required parms} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:SLOPE {}
    } -cleanup {
        cleanup
    } -result {
        g {required value}
        c {required value}
        mad {required value}
        slope {required value}
        athresh {required value}
        dthresh {required value}
    }
    

    test SAT:SLOPE-1.2 {invalid g} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:SLOPE \
            [dict merge $satslope {g NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        g {Invalid civilian group, should be one of: SHIA, KURD}
    }


    test SAT:SLOPE-1.3 {invalid c} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:SLOPE \
            [dict merge $satslope {c NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        c {Invalid concern "NONESUCH", should be one of: AUT, SFT, CUL, QOL}
    }


    test SAT:SLOPE-1.4 {invalid MAD} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:SLOPE \
            [dict merge $satslope {mad NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        mad {MAD does not exist: "NONESUCH"}
    }


    test SAT:SLOPE-1.5 {invalid slope} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:SLOPE \
            [dict merge $satslope {slope NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        slope {invalid value "NONESUCH", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }


    test SAT:SLOPE-1.6 {invalid athresh} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:SLOPE \
            [dict merge $satslope {athresh NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        athresh {invalid value "NONESUCH", should be a real number in range -100.0, 100.0, or one of: VS, S, A, D, VD}
    }

    test SAT:SLOPE-1.7 {invalid dthresh} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:SAT:SLOPE \
            [dict merge $satslope {dthresh NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        dthresh {invalid value "NONESUCH", should be a real number in range -100.0, 100.0, or one of: VS, S, A, D, VD}
    }

    test SAT:SLOPE-2.1 {Order is accepted} -setup {
        advance
    } -body {
        ted schedule +1 MAD:SAT:SLOPE $satslope
        ted order SIM:RUN days 1 block yes
    } -cleanup {
        cleanup
    } -result {}


    #-------------------------------------------------------------------
    # MAD:COOP:ADJUST

    test COOP:ADJUST-1.1 {required parms} -setup {
        advance
    } -body {
        ted order -reject MAD:COOP:ADJUST {}
    } -cleanup {
        cleanup
    } -result {
        id {required value}
        mad {required value}
        delta {required value}
    }
    

    test COOP:ADJUST-1.2 {invalid MAD} -setup {
        advance
    } -body {
        ted order -reject MAD:COOP:ADJUST {
            id {SHIA BLUE} mad 2 delta 5
        }
    } -cleanup {
        cleanup
    } -result {
        mad {MAD does not exist: "2"}
    }


    test COOP:ADJUST-1.3 {invalid delta} -setup {
        advance
    } -body {
        ted order -reject MAD:COOP:ADJUST {
            id {SHIA BLUE} mad 1 delta NONESUCH
        }
    } -cleanup {
        cleanup
    } -result {
        delta {invalid value "NONESUCH", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }


    test COOP:ADJUST-2.1 {<Entity> updates} -setup {
        advance
    } -body {
        ted notifier bind ::coop <Entity>
        ted notifier bind ::mad <Entity>
        ted order MAD:COOP:ADJUST {
            id {SHIA BLUE} mad 1 delta 5
        }
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::coop <Entity> update {SHIA BLUE}}
        {::mad <Entity> update 1}
    }


    test COOP:ADJUST-3.1 {undo undoes the change} -setup {
        advance

        ted order MAD:COOP:ADJUST {
            id {SHIA BLUE} mad 1 delta 5
        }
    } -body {
        ted notifier bind ::coop <Entity>
        ted notifier bind ::mad <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::coop <Entity> update {SHIA BLUE}}
        {::mad <Entity> update 1}
    }


    #-------------------------------------------------------------------
    # MAD:COOP:SET

    test COOP:SET-1.1 {required parms} -setup {
        advance
    } -body {
        ted order -reject MAD:COOP:SET {}
    } -cleanup {
        cleanup
    } -result {
        id {required value}
        mad {required value}
        coop {required value}
    }
    
    test COOP:SET-1.2 {invalid MAD} -setup {
        advance
    } -body {
        ted order -reject MAD:COOP:SET {
            id {SHIA BLUE} mad 2 coop 5
        }
    } -cleanup {
        cleanup
    } -result {
        mad {MAD does not exist: "2"}
    }


    test COOP:SET-1.3 {invalid coop} -setup {
        advance
    } -body {
        ted order -reject MAD:COOP:SET {
            id {SHIA BLUE} mad 1 coop NONESUCH
        }
    } -cleanup {
        cleanup
    } -result {
        coop {invalid value "NONESUCH", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}
    }


    test COOP:SET-2.1 {<Entity> updates} -setup {
        advance
    } -body {
        ted notifier bind ::coop <Entity>
        ted notifier bind ::mad <Entity>
        ted order MAD:COOP:SET {
            id {SHIA BLUE} mad 1 coop 5
        }
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::coop <Entity> update {SHIA BLUE}}
        {::mad <Entity> update 1}
    }


    test COOP:SET-3.1 {undo undoes the change} -setup {
        advance

        ted order MAD:COOP:SET {
            id {SHIA BLUE} mad 1 coop 5
        }
    } -body {
        ted notifier bind ::coop <Entity>
        ted notifier bind ::mad <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::coop <Entity> update {SHIA BLUE}}
        {::mad <Entity> update 1}
    }

    #-------------------------------------------------------------------
    # MAD:COOP:LEVEL

    test COOP:LEVEL-1.1 {required parms} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:LEVEL {}
    } -cleanup {
        cleanup
    } -result {
        f {required value}
        g {required value}
        mad {required value}
        limit {required value}
        days {required value}
        athresh {required value}
        dthresh {required value}
    }
    
    test COOP:LEVEL-1.2 {invalid f} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:LEVEL \
            [dict merge $cooplevel {f NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        f {Invalid civilian group, should be one of: SHIA, KURD}
    }


    test COOP:LEVEL-1.3 {invalid g} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:LEVEL \
            [dict merge $cooplevel {g NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        g {Invalid force group, should be one of: BLUE}
    }


    test COOP:LEVEL-1.4 {invalid MAD} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:LEVEL \
            [dict merge $cooplevel {mad NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        mad {MAD does not exist: "NONESUCH"}
    }


    test COOP:LEVEL-1.5 {invalid limit} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:LEVEL \
            [dict merge $cooplevel {limit NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        limit {invalid value "NONESUCH", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }


    test COOP:LEVEL-1.6 {invalid days} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:LEVEL \
            [dict merge $cooplevel {days NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        days {invalid value "NONESUCH", should be a real number no less than 0.0}
    }


    test COOP:LEVEL-1.7 {invalid athresh} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:LEVEL \
            [dict merge $cooplevel {athresh NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        athresh {invalid value "NONESUCH", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}
    }

    test COOP:LEVEL-1.8 {invalid dthresh} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:LEVEL \
            [dict merge $cooplevel {dthresh NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        dthresh {invalid value "NONESUCH", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}
    }

    test COOP:LEVEL-2.1 {Order is accepted} -setup {
        advance
    } -body {
        ted schedule +1 MAD:COOP:LEVEL $cooplevel
        ted order SIM:RUN days 1 block yes
    } -cleanup {
        cleanup
    } -result {}


    #-------------------------------------------------------------------
    # MAD:COOP:SLOPE

    test COOP:SLOPE-1.1 {required parms} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:SLOPE {}
    } -cleanup {
        cleanup
    } -result {
        f {required value}
        g {required value}
        mad {required value}
        slope {required value}
        athresh {required value}
        dthresh {required value}
    }
    
    test COOP:SLOPE-1.2 {invalid f} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:SLOPE \
            [dict merge $coopslope {f NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        f {Invalid civilian group, should be one of: SHIA, KURD}
    }


    test COOP:SLOPE-1.3 {invalid g} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:SLOPE \
            [dict merge $coopslope {g NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        g {Invalid force group, should be one of: BLUE}
    }


    test COOP:SLOPE-1.4 {invalid MAD} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:SLOPE \
            [dict merge $coopslope {mad NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        mad {MAD does not exist: "NONESUCH"}
    }


    test COOP:SLOPE-1.5 {invalid slope} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:SLOPE \
            [dict merge $coopslope {slope NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        slope {invalid value "NONESUCH", should be a real number, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }


    test COOP:SLOPE-1.6 {invalid athresh} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:SLOPE \
            [dict merge $coopslope {athresh NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        athresh {invalid value "NONESUCH", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}
    }


    test COOP:SLOPE-1.7 {invalid dthresh} -setup {
        advance
    } -body {
        ted schedule -reject +1 MAD:COOP:SLOPE \
            [dict merge $coopslope {dthresh NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        dthresh {invalid value "NONESUCH", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}
    }


    test COOP:SLOPE-2.1 {Order is accepted} -setup {
        advance
    } -body {
        ted schedule +1 MAD:COOP:SLOPE $coopslope
        ted order SIM:RUN days 1 block yes
    } -cleanup {
        cleanup
    } -result {}


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





