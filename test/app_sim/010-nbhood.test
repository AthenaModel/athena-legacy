# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-nbhood.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    nbhood(sim) tests.
#
#    This test suite tests the nbhood(sim) mutators and queries
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*
    
    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        array unset parms
        ted cleanup
    }

    #-------------------------------------------------------------------
    # mutate create

    test create-1.1 {nbhood is created} -body {
        nbhood mutate create [ted entity NB1]
        ted query {SELECT * FROM nbhoods}
    } -cleanup {
        cleanup
    } -result {
n   longname local stacking_order urbanization vtygain refpoint polygon              obscured_by 
--- -------- ----- -------------- ------------ ------- -------- -------------------- ----------- 
NB1 Here     1     1              URBAN        1.0     100 100  80 80 120 80 100 120             
    }


    test create-1.2 {stacking_order is set} -body {
        nbhood mutate create [ted entity NB1]
        nbhood mutate create [ted entity NB2]

        ted query {SELECT n,stacking_order FROM nbhoods}
    } -cleanup {
        cleanup
    } -result {
n   stacking_order 
--- -------------- 
NB1 1              
NB2 2              
    }


    test create-1.3 {obscured_by is set} -body {
        nbhood mutate create [ted entity NB1]
        nbhood mutate create [ted entity OV1]
        ted query {SELECT n,stacking_order,obscured_by FROM nbhoods}
    } -cleanup {
        cleanup
    } -result {
n   stacking_order obscured_by 
--- -------------- ----------- 
NB1 1              OV1         
OV1 2                          
    }

    test create-1.4 {nbrel_mn records are created} -body {
        nbhood mutate create [ted entity NB1]
        nbhood mutate create [ted entity NB2]
        ted query {SELECT * FROM nbrel_mn}
    } -cleanup {
        cleanup
    } -result {
m   n   proximity effects_delay 
--- --- --------- ------------- 
NB1 NB1 HERE      0.0           
NB2 NB1 REMOTE    0.0           
NB1 NB2 REMOTE    0.0           
NB2 NB2 HERE      0.0           
    }

    test create-1.5 {demog_n records are created} -body {
        nbhood mutate create [ted entity NB1]
        rdb eval {SELECT n FROM demog_n}
    } -cleanup {
        cleanup
    } -result {NB1}

    test create-1.6 {econ_n records are created} -body {
        nbhood mutate create [ted entity NB1]
        rdb eval {SELECT n FROM econ_n}
    } -cleanup {
        cleanup
    } -result {NB1}

    test create-2.1 {undo deletes the nbhood} -setup {
        nbhood mutate create [ted entity NB1]
    } -body {
        set undo [nbhood mutate create [ted entity NB2]]
        namespace eval :: $undo

        # Is NB2 gone?
        rdb eval {SELECT n FROM nbhoods}
    } -cleanup {
        cleanup
    } -result {NB1}


    test create-2.2 {undo updates obscured_by} -setup {
        nbhood mutate create [ted entity NB1]
        set undo [nbhood mutate create [ted entity OV1]]
    } -body {
        namespace eval :: $undo
        rdb eval "SELECT n,obscured_by FROM nbhoods"
    } -cleanup {
        cleanup
    } -result {NB1 {}}

    test create-2.3 {undo deletes the nbrel_mn records} -setup {
        nbhood mutate create [ted entity NB1]
    } -body {
        set undo [nbhood mutate create [ted entity NB2]]
        namespace eval :: $undo

        # Is NB2 gone?
        ted query {SELECT * FROM nbrel_mn}
    } -cleanup {
        cleanup
    } -result {
m   n   proximity effects_delay 
--- --- --------- ------------- 
NB1 NB1 HERE      0.0           
    }


    test create-2.4 {undo deletes the demog_n record} -setup {
        nbhood mutate create [ted entity NB1]
    } -body {
        set undo [nbhood mutate create [ted entity NB2]]
        namespace eval :: $undo

        # Is NB2 gone?
        rdb eval {SELECT n FROM demog_n}
    } -cleanup {
        cleanup
    } -result {NB1}


    test create-2.5 {undo deletes the econ_n record} -setup {
        nbhood mutate create [ted entity NB1]
    } -body {
        set undo [nbhood mutate create [ted entity NB2]]
        namespace eval :: $undo

        # Is NB2 gone?
        rdb eval {SELECT n FROM econ_n}
    } -cleanup {
        cleanup
    } -result {NB1}

    #-------------------------------------------------------------------
    # mutate delete

    test delete-1.1 {Nbhood is deleted} -setup {
        ted create NB1 NB2
    } -body {
        nbhood mutate delete NB1

        # Is NB1 gone?
        rdb eval {SELECT n FROM nbhoods}
    } -cleanup {
        cleanup
    } -result {NB2}


    test delete-1.2 {obscured_by is cleared} -setup {
        ted create NB1 OV1
    } -body {
        nbhood mutate delete OV1
        ted query {SELECT n,stacking_order,obscured_by FROM nbhoods}
    } -cleanup {
        cleanup
    } -result {
n   stacking_order obscured_by 
--- -------------- ----------- 
NB1 1                          
    }

    test delete-1.3 {nbrel_mn records are deleted} -setup {
        ted create NB1 NB2
    } -body {
        nbhood mutate delete NB2
        ted query {SELECT * FROM nbrel_mn}
    } -cleanup {
        cleanup
    } -result {
m   n   proximity effects_delay 
--- --- --------- ------------- 
NB1 NB1 HERE      0.0           
    }

    test delete-1.4 {demog_n records are deleted} -setup {
        ted create NB1 NB2
    } -body {
        nbhood mutate delete NB2
        rdb eval {SELECT n FROM demog_n}
    } -cleanup {
        cleanup
    } -result {NB1}

    test delete-1.5 {econ_n records are deleted} -setup {
        ted create NB1 NB2
    } -body {
        nbhood mutate delete NB2
        rdb eval {SELECT n FROM econ_n}
    } -cleanup {
        cleanup
    } -result {NB1}


    test delete-1.6 {resident civilian groups deleted} -setup {
        ted create NB1 SHIA
    } -body {
        nbhood mutate delete NB1
        rdb eval {SELECT g FROM civgroups}
    } -cleanup {
        cleanup
    } -result {}


    test delete-2.1 {Undo restores nbhood} -setup {
        ted create NB1
        set undo [nbhood mutate delete NB1]
    } -body {
        namespace eval :: $undo
        ted query {SELECT * FROM nbhoods WHERE n='NB1'}
    } -cleanup {
        cleanup
    } -result {
n   longname local stacking_order urbanization vtygain refpoint polygon              obscured_by 
--- -------- ----- -------------- ------------ ------- -------- -------------------- ----------- 
NB1 Here     1     1              URBAN        1.0     100 100  80 80 120 80 100 120             
    }


    test delete-2.2 {Undo restores stacking order} -setup {
        ted create NB1
        ted create OV1
        set undo [nbhood mutate delete NB1]
    } -body {
        namespace eval :: $undo
        ted query {SELECT n,stacking_order,obscured_by FROM nbhoods}
    } -cleanup {
        cleanup
    } -result {
n   stacking_order obscured_by 
--- -------------- ----------- 
OV1 2                          
NB1 1              OV1         
    }


    test delete-2.3 {Undo restores nbrel_mn} -setup {
        ted create NB1
        set undo [nbhood mutate delete NB1]
    } -body {
        namespace eval :: $undo
        ted query {SELECT * FROM nbrel_mn ORDER BY m,n}
    } -cleanup {
        cleanup
    } -result {
m   n   proximity effects_delay 
--- --- --------- ------------- 
NB1 NB1 HERE      0.0           
    }


    test delete-2.4 {Undo restores demog_n} -setup {
        ted create NB1
        set undo [nbhood mutate delete NB1]
    } -body {
        namespace eval :: $undo
        rdb eval {SELECT n FROM demog_n ORDER BY n}
    } -cleanup {
        cleanup
    } -result {NB1}


    test delete-2.5 {Undo restores econ_n} -setup {
        ted create NB1
        set undo [nbhood mutate delete NB1]
    } -body {
        namespace eval :: $undo
        rdb eval {SELECT n FROM econ_n ORDER BY n}
    } -cleanup {
        cleanup
    } -result {NB1}

    test delete-2.6 {Undo restores resident civgroups} -setup {
        ted create NB1 SHIA
        set undo [nbhood mutate delete NB1]
    } -body {
        namespace eval :: $undo
        rdb eval {SELECT g FROM civgroups}
    } -cleanup {
        cleanup
    } -result {SHIA}

    #-------------------------------------------------------------------
    # mutate lower

    test lower-1.1 {Nbhood is lowered} -setup {
        ted create NB1 OV1
    } -body {
        nbhood mutate lower OV1
        ted query {SELECT n,stacking_order,obscured_by FROM nbhoods}
    } -cleanup {
        cleanup
    } -result {
n   stacking_order obscured_by 
--- -------------- ----------- 
NB1 2                          
OV1 1              NB1         
    }


    test lower-1.2 {<Stack>} -setup {
        ted create NB1 OV1
    } -body {
        ted notifier bind ::nbhood <Stack>
        nbhood mutate lower OV1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::nbhood <Stack>}
    }


    test lower-2.1 {Undo} -setup {
        ted create NB1 OV1
    } -body {
        set before [ted query {SELECT * FROM nbhoods}]

        set undo [nbhood mutate lower OV1]

        namespace eval :: $undo

        set after  [ted query {SELECT * FROM nbhoods}]

        expr {$before eq $after}
    } -cleanup {
        cleanup
    } -result {1}

    #-------------------------------------------------------------------
    # mutate raise

    test raise-1.1 {Nbhood is raised} -setup {
        ted create NB1 OV1
    } -body {
        nbhood mutate raise NB1
        ted query {SELECT n,stacking_order,obscured_by FROM nbhoods}
    } -cleanup {
        cleanup
    } -result {
n   stacking_order obscured_by 
--- -------------- ----------- 
NB1 2                          
OV1 1              NB1         
    }


    test raise-1.2 {<Stack>} -setup {
        ted create NB1 OV1
    } -body {
        ted notifier bind ::nbhood <Stack>
        nbhood mutate raise NB1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::nbhood <Stack>}
    }


    test raise-2.1 {Undo} -setup {
        ted create NB1 OV1
    } -body {
        set before [ted query {SELECT * FROM nbhoods}]

        set undo [nbhood mutate raise NB1]

        namespace eval :: $undo

        set after  [ted query {SELECT * FROM nbhoods}]

        expr {$before eq $after}
    } -cleanup {
        cleanup
    } -result {1}

    #-------------------------------------------------------------------
    # mutate update

    test update-1.1 {nbhood is updated} -setup {
        ted create NB1
    } -body {
        nbhood mutate update {
            n            NB1
            longname     "Not Here"
            local        0
            urbanization RURAL
            vtygain      2.0
            refpoint     {5 5}
            polygon      {0 0 10 0 10 10 0 10}
        }

        ted query {SELECT * FROM nbhoods}
    } -cleanup {
        cleanup
    } -result {
n   longname local stacking_order urbanization vtygain refpoint polygon             obscured_by 
--- -------- ----- -------------- ------------ ------- -------- ------------------- ----------- 
NB1 Not Here 0     1              RURAL        2.0     5 5      0 0 10 0 10 10 0 10             
    }


    test update-1.2 {Parameters can be empty} -setup {
        ted create NB1
    } -body {
        set before [ted query {SELECT * FROM nbhoods}]

        nbhood mutate update {
            n            NB1
            longname     ""
            local        ""
            urbanization ""
            vtygain      ""
            refpoint     ""
            polygon      ""
        }

        set after [ted query {SELECT * FROM nbhoods}]

        expr {$before eq $after}
    } -cleanup {
        cleanup
    } -result {1}


    test update-1.3 {stacking_order,obscured_by are set} -setup {
        ted create NB1 NB2
    } -body {
        # Move NB2 over NB1
        nbhood mutate update [ted entity OV1 n NB2 longname "There"]

        ted query {SELECT n,stacking_order,obscured_by FROM nbhoods}
    } -cleanup {
        cleanup
    } -result {
n   stacking_order obscured_by 
--- -------------- ----------- 
NB1 1              NB2         
NB2 2                          
    }


    test update-2.1 {undo undoes the change} -setup {
        ted create NB1
    } -body {
        set before [ted query {SELECT * FROM nbhoods}]

        set undo [nbhood mutate update [ted entity NB2 n NB1]]

        namespace eval :: $undo

        set after [ted query {SELECT * FROM nbhoods}]

        expr {$before eq $after}
    } -cleanup {
        cleanup
    } -result {1}


    test update-2.2 {stacking_order,obscured_by are undone} -setup {
        ted create NB1 NB2
    } -body {
        set before [ted query {SELECT * FROM nbhoods}]

        # Move NB2 over NB1
        set undo [nbhood mutate update [ted entity OV1 n NB2]]
        
        namespace eval :: $undo

        set after [ted query {SELECT * FROM nbhoods}]

        expr {$before eq $after}
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # names

    test names-1.1 {Returns neighborhood names: none defined} -body {
        nbhood names
    } -cleanup {
        cleanup
    } -result {}

    test names-1.2 {Returns neighborhood names} -setup {
        ted create NB1 NB2
    } -body {
        nbhood names
    } -cleanup {
        cleanup
    } -result {NB1 NB2}

    #-------------------------------------------------------------------
    # find

    test find-1.1 {No neighborhood to find} -body {
        nbhood find 1 1
    } -result {}
    

    test find-1.2 {Find stacked neighborhoods} -setup {
        nbhood mutate create {
            n            N1
            longname     "Nb 1"
            local        1
            urbanization RURAL
            vtygain      1.0
            refpoint     {2 2}
            polygon      {0 0 10 0 10 10 0 10}
        }

        nbhood mutate create {
            n            N2
            longname     "Nb 2"
            local        1
            urbanization RURAL
            vtygain      1.0
            refpoint     {5 5}
            polygon      {3 3 7 3 7 7 3 7}
        }
    } -body {
        set a [nbhood find 1 1]  ;# Should be N1
        set b [nbhood find 5 5]  ;# Should be N2

        nbhood mutate lower N2

        set c [nbhood find 5 5]  ;# Should be N1

        nbhood mutate raise N2

        set d [nbhood find 5 5]  ;# Should be N2

        list $a $b $c $d
    } -cleanup {
        cleanup
    } -result {N1 N2 N1 N2}

    #-------------------------------------------------------------------
    # validate

    test validate-1.1 {Invalid name: none defined} -body {
        nbhood validate NONESUCH
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid neighborhood, none are defined}

    test validate-1.2 {Invalid name: some defined} -setup {
        ted create NB1 NB2
    } -body {
        nbhood validate NONESUCH
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid neighborhood, should be one of: NB1, NB2}

    test validate-2.1 {Valid name} -setup {
        ted create NB1 NB2
    } -body {
        nbhood validate NB1
    } -cleanup {
        cleanup
    } -result {NB1}


    #-------------------------------------------------------------------
    # dbsync

    # This is effectively tested by the lower and raise tests.
    


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::






