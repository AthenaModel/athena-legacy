# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-GRANT.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) TACTIC:GRANT:* order tests.
#
#    This test suite tests the GRANT tactic's orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE BOB DAVE BRIAN CBS CNN IOM1 IOM2
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Standard items

    set T1 {
        owner       JOE
        priority    top
        klist       CBS
        alist       DAVE
        on_lock     NO
    }

    set T2 {
        owner       BOB
        priority    top
        klist       CNN
        alist       {DAVE BRIAN}
        on_lock     NO
    }

    #-------------------------------------------------------------------
    # TACTIC:GRANT:CREATE

    test CREATE-1.1 {required parms} -body {
        ted order -reject TACTIC:GRANT:CREATE {}
    } -result {
        owner {required value}
        klist {required value}
        alist {required value}
        on_lock {required value}
    }

    test CREATE-1.2 {owner is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:GRANT:CREATE {*}$T1 owner NONESUCH
    } -cleanup {
        cleanup
    } -result {
        owner {Invalid actor, should be one of: JOE, BOB, DAVE, BRIAN}
    }

    test CREATE-1.3 {klist is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:GRANT:CREATE {*}$T1 klist NONESUCH
    } -cleanup {
        cleanup
    } -result {
        klist {Invalid CAP, should be one of: CBS, CNN}
    }

    test CREATE-1.4 {cap belongs to wrong actor} -setup {
        setup
    } -body {
        ted order -reject TACTIC:GRANT:CREATE {*}$T1 klist CNN
    } -cleanup {
        cleanup
    } -result {
        klist {CAP CNN is not owned by actor JOE.}
    }

    test CREATE-1.5 {alist is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:GRANT:CREATE {*}$T1 alist NONESUCH
    } -cleanup {
        cleanup
    } -result {
        alist {Invalid actor, should be one of: JOE, BOB, DAVE, BRIAN}
    }

    test CREATE-1.6 {priority is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:GRANT:CREATE {*}$T1 priority NONESUCH
    } -cleanup {
        cleanup
    } -result {
        priority {invalid value "nonesuch", should be one of: top, bottom}
    }

    test CREATE-1.7 {on_lock is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:GRANT:CREATE {*}$T1 on_lock NONESUCH
    } -cleanup {
        cleanup
    } -result {
        on_lock {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }


    test CREATE-2.1 {tactic is created} -setup {
        setup
    } -body {
        ted order TACTIC:GRANT:CREATE $T2

        ted querylist {SELECT * FROM tactics_GRANT}
    } -cleanup {
        cleanup
    } -result {
tactic_id    1
tactic_type  GRANT
owner        BOB
narrative    Grant actors DAVE and BRIAN access to CAP CNN.
priority     1
klist        CNN
alist        DAVE BRIAN
on_lock      0
state        normal
exec_ts      
exec_flag    0
    }

    test CREATE-2.2 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:GRANT:CREATE $T1
        ted notifier received

        # NOTE: Two updates, because of priority setting.
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
        {::rdb <tactics> update 1}
    }


    test CREATE-3.1 {undo effects} -setup {
        setup
        ted order TACTIC:GRANT:CREATE $T1
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> delete 1}
    }

    #-------------------------------------------------------------------
    # TACTIC:GRANT:UPDATE

    proc setup_update_grant {} {
        variable T2
        setup
        ted order TACTIC:GRANT:CREATE $T2
    }

    test UPDATE-1.1 {required parms} -body {
        ted order -reject TACTIC:GRANT:UPDATE {}
    } -result {
        tactic_id {required value}
    }

    
    test UPDATE-1.2 {tactic_id is unknown} -setup {
        setup_update_grant
    } -body {
        ted order -reject TACTIC:GRANT:UPDATE \
            tactic_id NONESUCH
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Invalid tactic ID: "NONESUCH"}
    }

    test UPDATE-1.3 {klist is unknown} -setup {
        setup_update_grant
    } -body {
        ted order -reject TACTIC:GRANT:UPDATE tactic_id 1 klist NONESUCH
    } -cleanup {
        cleanup
    } -result {
        klist {Invalid CAP, should be one of: CBS, CNN}
    }

    test UPDATE-1.4 {cap belongs to wrong actor} -setup {
        setup_update_grant
    } -body {
        ted order -reject TACTIC:GRANT:UPDATE tactic_id 1 klist CBS
    } -cleanup {
        cleanup
    } -result {
        klist {CAP CBS is not owned by actor BOB.}
    }

    test UPDATE-1.5 {alist is invalid} -setup {
        setup_update_grant
    } -body {
        ted order -reject TACTIC:GRANT:UPDATE tactic_id 1 alist NONESUCH
    } -cleanup {
        cleanup
    } -result {
        alist {Invalid actor, should be one of: JOE, BOB, DAVE, BRIAN}
    }

    test UPDATE-1.6 {on_lock is invalid} -setup {
        setup_update_grant
    } -body {
        ted order -reject TACTIC:GRANT:UPDATE tactic_id 1 on_lock NONESUCH
    } -cleanup {
        cleanup
    } -result {
        on_lock {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }

    test UPDATE-1.7 {wrong flavor of tactic} -setup {
        setup_update_grant
        rdb eval {UPDATE tactics SET tactic_type='BOGUS'}
    } -body {
        ted order -reject TACTIC:GRANT:UPDATE tactic_id 1
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Tactic 1 is not a GRANT tactic}
    }

    test UPDATE-2.1 {tactic is updated} -setup {
        setup_update_grant
    } -body {
        ted order TACTIC:GRANT:UPDATE \
            tactic_id 1 alist BRIAN

        ted querylist {SELECT * FROM tactics_GRANT}
    } -cleanup {
        cleanup
    } -result {
tactic_id    1
tactic_type  GRANT
owner        BOB
narrative    Grant actor BRIAN access to CAP CNN.
priority     1
klist        CNN
alist        BRIAN
on_lock      0
state        normal
exec_ts      
exec_flag    0
    }

    test UPDATE-2.2 {Effects} -setup {
        setup
        ted order TACTIC:GRANT:CREATE $T2
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:GRANT:UPDATE tactic_id 1 alist BRIAN
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
    }


    test UPDATE-3.1 {undo effects} -setup {
        setup_update_grant
        ted order TACTIC:GRANT:UPDATE tactic_id 1 alist BRIAN
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





