# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-DEMOB.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    TACTIC:DEMOB:* Orders tests
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        ted create JOE BLUE ALQ
        variable S1
        variable B1
        variable T1
        set S1 [strategy getname JOE]
        ted order STRATEGY:BLOCK:ADD agent JOE
        lassign [$S1 blocks] B1
        ted order BLOCK:TACTIC:ADD block_id [$B1 id] typename DEMOB
        lassign [$B1 tactics] T1
    }

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # TACTIC:DEMOB:UPDATE

    test TACTIC:DEMOB:UPDATE-1.1 {required parameters} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEMOB:UPDATE
    } -cleanup {
        cleanup
    } -result {
        tactic_id {required value}
    }

    test TACTIC:DEMOB:UPDATE-1.2 {unknown tactic_id} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEMOB:UPDATE tactic_id NONESUCH
    } -cleanup {
        cleanup
    } -match glob -result {
        tactic_id {invalid value "NONESUCH", should be one of: *}
    }

    test TACTIC:DEMOB:UPDATE-1.3 {invalid g} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEMOB:UPDATE tactic_id [$T1 id] g NONESUCH
    } -cleanup {
        cleanup
    } -result {
        g {invalid value "NONESUCH", should be one of: BLUE}
    }

    test TACTIC:DEMOB:UPDATE-1.4 {invalid personnel} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEMOB:UPDATE tactic_id [$T1 id] personnel NONESUCH
    } -cleanup {
        cleanup
    } -result {
        personnel {invalid value "NONESUCH", expected integer}
    }

    test TACTIC:DEMOB:UPDATE-1.5 {0 personnel} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEMOB:UPDATE tactic_id [$T1 id] personnel 0
    } -cleanup {
        cleanup
    } -result {
        personnel {invalid value "0", expected integer no less than 1}
    }

    test TACTIC:DEMOB:UPDATE-2.1 {tactic updated} -setup {
        setup
    } -body {
        ted order TACTIC:DEMOB:UPDATE \
            tactic_id [$T1 id]         \
            g         BLUE             \
            mode      SOME             \
            personnel 1000

        ted pdict [$T1 getdict]
    } -cleanup {
        cleanup
    } -match glob -result {
        id         *
        execstatus NONE
        state      normal
        mode       SOME
        personnel  1000
        block      ::bean::block*
        g          BLUE
    }

    test TACTIC:DEMOB:UPDATE-2.2 {notifier event} -setup {
        setup
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        ted order TACTIC:DEMOB:UPDATE tactic_id [$T1 id] personnel 100
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}

    test TACTIC:DEMOB:UPDATE-2.3 {undo notifier event} -setup {
        setup
        ted order TACTIC:DEMOB:UPDATE tactic_id [$T1 id] personnel 100
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}
 

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







