# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-envsit.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    envsit(sim) tests.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    set s1 [dict create \
                stype     BADWATER                             \
                location  [dict get [ted entity NB1] refpoint] \
                coverage  1.0                                  \
                g         BLUE                                 \
                inception 1] 

    set s2 [dict create \
                stype     COMMOUT                              \
                location  [dict get [ted entity NB1] refpoint] \
                coverage  0.5                                  \
                g         NONE                                 \
                inception 0] 

    #-------------------------------------------------------------------
    # table
  
    test table-1.1 {Check return value} -body {
        envsit table
    } -result {envsits_t}

    #-------------------------------------------------------------------
    # mutate create

    test create-1.1 {Envsit is created} -setup {
        ted create NB1 BLUE
    } -body {
        envsit mutate create $s1
        envsit mutate create $s2

        ted query {SELECT * FROM envsits}
    } -cleanup {
        cleanup
    } -result {
s kind     stype    driver n   coverage state   ts tc change flist g    signature location inception resolver rdriver 
- -------- -------- ------ --- -------- ------- -- -- ------ ----- ---- --------- -------- --------- -------- ------- 
1 ::envsit BADWATER -1     NB1 1.0      INITIAL 0  0  NEW    ALL   BLUE           100 100  1                  0       
2 ::envsit COMMOUT  -1     NB1 0.5      INITIAL 0  0  NEW    ALL   NONE           100 100  0                  0       
    }
    

    test create-1.2 {<Entity> create} -setup {
        ted create NB1 BLUE
    } -body {
        ted notifier bind ::envsit <Entity>
        envsit mutate create $s1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::envsit <Entity> create 1}
    }


    test create-1.3 {spawn scheduled} -setup {
        ted create NB1 BLUE
    } -body {
        envsit mutate create $s1

        ted query {SELECT * FROM eventq_queue_envsitSpawn}
    } -cleanup {
        cleanup
    } -result {
id t etype       s 
-- - ----------- - 
1  1 envsitSpawn 1 
    }
    

    test create-2.1 {Undo deletes the entity} -setup {
        ted create NB1 BLUE
        set undo [envsit mutate create $s1]
    } -body {
        {*}$undo
        rdb query {SELECT s FROM envsits}
    } -cleanup {
        cleanup
    } -result {}


    test create-2.2 {On undo, <Entity> delete} -setup {
        ted create NB1 BLUE
        set undo [envsit mutate create $s1]
    } -body {
        ted notifier bind ::envsit <Entity>
        {*}$undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::envsit <Entity> delete 1}
    }


    test create-2.3 {On undo, spawn is cancelled} -setup {
        ted create NB1 BLUE
        set undo [envsit mutate create $s1]
    } -body {
        {*}$undo
        ted query {SELECT * FROM eventq_queue_envsitSpawn}
    } -cleanup {
        cleanup
    } -result {
    }

    #-------------------------------------------------------------------
    # mutate delete

    test delete-1.1 {Entity is deleted} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
        envsit mutate create $s2
    } -body {
        envsit mutate delete 1

        # Is 1 gone?
        rdb eval {SELECT s FROM envsits}
    } -cleanup {
        cleanup
    } -result {2}


    test delete-1.2 {<Entity> delete} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
    } -body {
        ted notifier bind ::envsit <Entity>
        envsit mutate delete 1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::envsit <Entity> delete 1}
    }


    test delete-1.3 {On delete, spawn is cancelled} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
    } -body {
        envsit mutate delete 1
        ted query {SELECT * FROM eventq_queue_envsitSpawn}
    } -cleanup {
        cleanup
    } -result {
    }


    test delete-2.1 {Undo restores envsit} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
        set undo [envsit mutate delete 1]
    } -body {
        {*}$undo
        ted query {SELECT * FROM envsits}
    } -cleanup {
        cleanup
    } -result {
s kind     stype    driver n   coverage state   ts tc change flist g    signature location inception resolver rdriver 
- -------- -------- ------ --- -------- ------- -- -- ------ ----- ---- --------- -------- --------- -------- ------- 
1 ::envsit BADWATER -1     NB1 1.0      INITIAL 0  0  NEW    ALL   BLUE           100 100  1                  0       
    }


    test delete-2.2 {On undo, <Entity> create} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
        set undo [envsit mutate delete 1]
    } -body {
        ted notifier bind ::envsit <Entity>
        {*}$undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::envsit <Entity> create 1}
    }


    test delete-2.3 {On undo, spawn is restored} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
        set undo [envsit mutate delete 1]
    } -body {
        {*}$undo
        ted query {SELECT * FROM eventq_queue_envsitSpawn}
    } -cleanup {
        cleanup
    } -result {
id t etype       s 
-- - ----------- - 
2  1 envsitSpawn 1 
    }


    #-------------------------------------------------------------------
    # mutate update


    test update-1.1 {envsit is updated} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
    } -body {
        envsit mutate update {
            s         1 
            stype     BADFOOD
            location  {101 101} 
            coverage  0.5
            inception 0
            g         NONE
        }

        ted query {SELECT * FROM envsits}
    } -cleanup {
        cleanup
    } -result {
s kind     stype   driver n   coverage state   ts tc change flist g    signature location inception resolver rdriver 
- -------- ------- ------ --- -------- ------- -- -- ------ ----- ---- --------- -------- --------- -------- ------- 
1 ::envsit BADFOOD -1     NB1 0.5      INITIAL 0  0  NEW    ALL   NONE           101 101  0                  0       
    }

    test update-1.2 {identical values are OK} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
    } -body {
        set a [ted query {SELECT * FROM envsits}]

        envsit mutate update [concat {s 1} $s1]

        set b [ted query {SELECT * FROM envsits}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-1.3 {empty values are OK} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
    } -body {
        set a [ted query {SELECT * FROM envsits}]

        envsit mutate update  {
            s         1
            stype     ""
            location  ""
            coverage  ""
            inception ""
            g         ""
        }

        set b [ted query {SELECT * FROM envsits}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-1.4 {<Entity> update} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
    } -body {
        ted notifier bind ::envsit <Entity>
        envsit mutate update  {
            s         1
            stype     ""
            location  ""
            coverage  ""
            inception ""
            g         ""
        }
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::envsit <Entity> update 1}
    }


    test update-1.5 {n is updated} -setup {
        ted create NB1 NB2 BLUE
        set loc [dict get [ted entity NB2] refpoint]
        envsit mutate create $s1
    } -body {
        envsit mutate update [dict merge $s1 [list s 1 location $loc]]

        ted query {SELECT s,n FROM envsits}
    } -cleanup {
        cleanup
    } -result {
s n   
- --- 
1 NB2 
    }


    test update-1.6 {spawns are cancelled on stype change} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
    } -body {
        envsit mutate update {
            s         1 
            stype     COMMOUT
            location  ""
            coverage  ""
            inception ""
            g         ""
        }

        ted query {SELECT * FROM eventq_queue_envsitSpawn}
    } -cleanup {
        cleanup
    } -result {
    }


    test update-1.7 {spawns are scheduled on stype change} -setup {
        ted create NB1 BLUE
        envsit mutate create [dict merge $s1 [list s 1 stype COMMOUT]]
    } -body {
        envsit mutate update {
            s         1 
            stype     BADWATER
            location  ""
            coverage  ""
            inception ""
            g         ""
        }

        ted query {SELECT * FROM eventq_queue_envsitSpawn}
    } -cleanup {
        cleanup
    } -result {
id t etype       s 
-- - ----------- - 
1  1 envsitSpawn 1 
    }


    test update-2.1 {undo undoes the change} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
    } -body {
        set a [ted query {SELECT * FROM envsits}]

        set undo [envsit mutate update {
            s         1 
            stype     BADFOOD
            location  ""
            coverage  ""
            inception ""
            g         ""
        }]

        {*}$undo

        set b [ted query {SELECT * FROM envsits}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-2.2 {undo sends <Entity> update} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
    } -body {
        set undo [envsit mutate update {
            s         1 
            stype     BADFOOD
            location  ""
            coverage  ""
            inception ""
            g         ""
        }]

        ted notifier bind ::envsit <Entity>
        {*}$undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::envsit <Entity> update 1}
    }


    test update-2.3 {undo restores scheduled spawn} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
    } -body {
        set undo [envsit mutate update {
            s         1 
            stype     COMMOUT
            location  ""
            coverage  ""
            inception ""
            g         ""
        }]

        {*}$undo

        ted query {SELECT * FROM eventq_queue_envsitSpawn}
    } -cleanup {
        cleanup
    } -result {
id t etype       s 
-- - ----------- - 
2  1 envsitSpawn 1 
    }


    test update-2.4 {undo cancels scheduled spawn} -setup {
        ted create NB1 BLUE
        envsit mutate create [dict merge $s1 [list stype COMMOUT]]
    } -body {
        set undo [envsit mutate update {
            s         1 
            stype     BADWATER
            location  ""
            coverage  ""
            inception ""
            g         ""
        }]

        {*}$undo

        ted query {SELECT * FROM eventq_queue_envsitSpawn}
    } -cleanup {
        cleanup
    } -result {
    }


    #-------------------------------------------------------------------
    # mutate resolve


    test resolve-1.1 {envsit is resolved by NONE} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
    } -body {
        envsit mutate resolve {
            s         1 
            resolver  NONE
        }

        ted query {SELECT * FROM envsits}
    } -cleanup {
        cleanup
    } -result {
s kind     stype    driver n   coverage state ts tc change   flist g    signature location inception resolver rdriver 
- -------- -------- ------ --- -------- ----- -- -- -------- ----- ---- --------- -------- --------- -------- ------- 
1 ::envsit BADWATER -1     NB1 1.0      ENDED 0  0  RESOLVED ALL   BLUE           100 100  1         NONE     0       
    }


    test resolve-1.2 {<Entity> update} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
    } -body {
        ted notifier bind ::envsit <Entity>
        envsit mutate resolve  {
            s        1
            resolver NONE
        }
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::envsit <Entity> update 1}
    }


    test resolve-1.3 {spawns are cancelled on resolution} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
    } -body {
        envsit mutate resolve {
            s        1 
            resolver NONE
        }

        ted query {SELECT * FROM eventq_queue_envsitSpawn}
    } -cleanup {
        cleanup
    } -result {
    }


    test resolve-2.1 {undo undoes the change} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
    } -body {
        set a [ted query {SELECT * FROM envsits}]

        set undo [envsit mutate resolve {
            s        1
            resolver NONE
        }]

        {*}$undo

        set b [ted query {SELECT * FROM envsits}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test resolve-2.2 {undo sends <Entity> update} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
    } -body {
        set undo [envsit mutate resolve {
            s        1
            resolver NONE
        }]

        ted notifier bind ::envsit <Entity>
        {*}$undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::envsit <Entity> update 1}
    }


    test resolve-2.3 {undo restores scheduled spawn} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
    } -body {
        set undo [envsit mutate resolve {
            s        1
            resolver NONE
        }]

        {*}$undo

        ted query {SELECT * FROM eventq_queue_envsitSpawn}
    } -cleanup {
        cleanup
    } -result {
id t etype       s 
-- - ----------- - 
2  1 envsitSpawn 1 
    }


    #-------------------------------------------------------------------
    # mutate reconcile

    # g set to NONE if g doesn't exist

    test reconcile-1.1 {g set to NONE if g doesn't exist} -setup {
        ted create NB1
        envsit mutate create [dict merge $s1 [list g NONESUCH]]
    } -body {
        envsit mutate reconcile

        ted query {SELECT * FROM envsits}
    } -cleanup {
        cleanup
    } -result {
s kind     stype    driver n   coverage state   ts tc change flist g    signature location inception resolver rdriver 
- -------- -------- ------ --- -------- ------- -- -- ------ ----- ---- --------- -------- --------- -------- ------- 
1 ::envsit BADWATER -1     NB1 1.0      INITIAL 0  0  NEW    ALL   NONE           100 100  1                  0       
    }


    test reconcile-1.2 {<Entity> update} -setup {
        ted create NB1
        envsit mutate create [dict merge $s1 [list g NONESUCH]]
    } -body {
        ted notifier bind ::envsit <Entity>
        envsit mutate reconcile

        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::envsit <Entity> update 1}
    }


    # resolver set to NONE if resolver doesn't exist

    test reconcile-2.1 {resolver set to NONE if resolver doesn't exist} -setup {
        ted create NB1
        envsit mutate create [dict merge $s1 [list g NONE]]
        envsit mutate resolve [list s 1 resolver BLUE]
    } -body {
        envsit mutate reconcile

        ted query {SELECT * FROM envsits}
    } -cleanup {
        cleanup
    } -result {
s kind     stype    driver n   coverage state ts tc change   flist g    signature location inception resolver rdriver 
- -------- -------- ------ --- -------- ----- -- -- -------- ----- ---- --------- -------- --------- -------- ------- 
1 ::envsit BADWATER -1     NB1 1.0      ENDED 0  0  RESOLVED ALL   NONE           100 100  1         NONE     0       
    }


    test reconcile-2.2 {<Entity> update} -setup {
        ted create NB1
        envsit mutate create [dict merge $s1 [list g NONE]]
        envsit mutate resolve [list s 1 resolver BLUE]
    } -body {
        ted notifier bind ::envsit <Entity>
        envsit mutate reconcile

        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::envsit <Entity> update 1}
    }


    # n reset

    test reconcile-3.1 {n reset} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
        nbhood mutate delete NB1
    } -body {
        envsit mutate reconcile

        ted query {SELECT * FROM envsits}
    } -cleanup {
        cleanup
    } -result {
s kind     stype    driver n coverage state   ts tc change flist g    signature location inception resolver rdriver 
- -------- -------- ------ - -------- ------- -- -- ------ ----- ---- --------- -------- --------- -------- ------- 
1 ::envsit BADWATER -1       1.0      INITIAL 0  0  NEW    ALL   BLUE           100 100  1                  0       
    }


    test reconcile-3.2 {<Entity> update} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
        nbhood mutate delete NB1
    } -body {
        ted notifier bind ::envsit <Entity>
        envsit mutate reconcile

        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::envsit <Entity> update 1}
    }


    # Undo restores everything

    test reconcile-4.1 {Undo restores everything} -setup {
        ted create NB1
        envsit mutate create $s1
        envsit mutate resolve [list s 1 resolver BRIT]
        nbhood mutate delete NB1

        set undo [envsit mutate reconcile]
    } -body {
        eval $undo

        ted query {SELECT * FROM envsits}
    } -cleanup {
        cleanup
    } -result {
s kind     stype    driver n   coverage state ts tc change   flist g    signature location inception resolver rdriver 
- -------- -------- ------ --- -------- ----- -- -- -------- ----- ---- --------- -------- --------- -------- ------- 
1 ::envsit BADWATER -1     NB1 1.0      ENDED 0  0  RESOLVED ALL   BLUE           100 100  1         BRIT     0       
    }


    test reconcile-4.2 {Undo sends <Entity> update} -setup {
        ted create NB1
        envsit mutate create $s1
        envsit mutate resolve [list s 1 resolver BRIT]
        nbhood mutate delete NB1

        set undo [envsit mutate reconcile]
    } -body {
        ted notifier bind ::envsit <Entity>
        eval $undo

        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::envsit <Entity> update 1}
        {::envsit <Entity> update 1}
    }


    #-------------------------------------------------------------------
    # get

    test get-1.1 {get -all} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
        envsit mutate create $s2
    } -body {
        set sit [envsit get 1]
        $sit oneliner
    } -cleanup {
        cleanup
    } -result {BADWATER in NB1}


    test get-1.2 {get -live} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
        envsit mutate create $s2
        envsit mutate resolve { 
            s        1 
            resolver NONE
        }
    } -body {
        set sit [envsit get 1 -live]
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {no such live situation: "1"}


    #-------------------------------------------------------------------
    # existsInNbhood

    test existsInNbhood-1.1 {get list of live envsits} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
        envsit mutate create $s2
        envsit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        envsit existsInNbhood NB1
    } -cleanup {
        cleanup
    } -result {BADWATER}


    test existsInNbhood-1.2 {Check existence of types} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
        envsit mutate create $s2
        envsit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        list \
            [envsit existsInNbhood NB1 BADWATER] \
            [envsit existsInNbhood NB1 COMMOUT]
    } -cleanup {
        cleanup
    } -result {1 0}


    #-------------------------------------------------------------------
    # absentFromNbhood

    test absentFromNbhood-1.1 {get list of absent envsits} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
        envsit mutate create $s2
        envsit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        # Only BADWATER should be missing.
        envsit absentFromNbhood NB1
    } -cleanup {
        cleanup
    } -result {BADFOOD BIO CHEM COMMOUT DISASTER DISEASE EPIDEMIC FOODSHRT FUELSHRT GARBAGE INDSPILL MOSQUE NOWATER ORDNANCE PIPELINE POWEROUT REFINERY SEWAGE}

    
    #-------------------------------------------------------------------
    # names/validate
    #
    # enum(n)-like subcommands for all envsits, live and ended.

    test names-1.1 {get list of envsit IDs} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
        envsit mutate create $s2
    } -body {
        envsit names
    } -cleanup {
        cleanup
    } -result {1 2}
    

    test names-1.2 {validate valid ID} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
        envsit mutate create $s2
    } -body {
        envsit validate 2
    } -cleanup {
        cleanup
    } -result {2}
    

    test names-1.3 {validate invalid ID} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
        envsit mutate create $s2
    } -body {
        envsit validate 3
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid environmental situation ID: "3"}
    

    #-------------------------------------------------------------------
    # initial names/validate
    #
    # enum(n)-like subcommands for envsits in the INITIAL state

    test initial_names-1.1 {get list of envsit IDs} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
        envsit mutate create $s2
        envsit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        envsit initial names
    } -cleanup {
        cleanup
    } -result {1}
    

    test initial_names-1.2 {validate valid ID} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
        envsit mutate create $s2
        envsit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        envsit initial validate 1
    } -cleanup {
        cleanup
    } -result {1}
    

    test initial_names-1.3 {validate ended ID} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
        envsit mutate create $s2
        envsit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        envsit initial validate 2
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {not a "live" situation: "2"}
    

    test initial_names-1.4 {validate active ID} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
        envsit mutate create $s2
        [envsit get 2] set state ACTIVE
    } -body {
        envsit initial validate 2
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {operation is invalid; time has passed.}

    #-------------------------------------------------------------------
    # live names/validate
    #
    # enum(n)-like subcommands for envsits that "live"

    test live_names-1.1 {get list of envsit IDs} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
        envsit mutate create $s2
        envsit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        envsit live names
    } -cleanup {
        cleanup
    } -result {1}
    

    test live_names-1.2 {validate valid ID} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
        envsit mutate create $s2
        envsit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        envsit live validate 1
    } -cleanup {
        cleanup
    } -result {1}
    

    test live_names-1.3 {validate invalid ID} -setup {
        ted create NB1 BLUE
        envsit mutate create $s1
        envsit mutate create $s2
        envsit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        envsit live validate 2
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {not a "live" situation: "2".}


    #-------------------------------------------------------------------
    # doer names/validate
    #
    # enum(n)-like subcommands for valid doing groups

    test doer-1.1 {get list of envsit IDs} -setup {
        ted create BLUE BRIT
    } -body {
        envsit doer names
    } -cleanup {
        cleanup
    } -result {NONE BLUE BRIT}
    

    test doer-1.2 {validate valid ID} -setup {
        ted create BLUE BRIT
    } -body {
        envsit doer validate BLUE
    } -cleanup {
        cleanup
    } -result {BLUE}
    

    test doer-1.3 {validate invalid ID} -setup {
        ted create BLUE BRIT
    } -body {
        envsit doer validate USAID
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid doing group, should be one of: NONE, BLUE, BRIT}


    #-------------------------------------------------------------------
    # envsitSpawn

    test envsitSpawn-1.1 {Envsit spawns} -setup {
        ted create NB1 BLUE SHIA NB1SHIA
        envsit mutate create $s1
    } -body {
        ted order SIM:RUN days 3 block yes

        ted query {SELECT * FROM envsits}
    } -cleanup {
        cleanup
    } -result {
s kind     stype    driver n   coverage state  ts tc change flist g    signature         location inception resolver rdriver 
- -------- -------- ------ --- -------- ------ -- -- ------ ----- ---- ----------------- -------- --------- -------- ------- 
1 ::envsit BADWATER 1      NB1 1.0      ACTIVE 0  0         ALL   BLUE BADWATER-2-1 none 100 100  0                  0       
2 ::envsit DISEASE  2      NB1 1.0      ACTIVE 1  1  NEW    ALL   BLUE DISEASE-2-1 none  100 100  0                  0       
    }




    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







