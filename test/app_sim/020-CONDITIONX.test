# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-CONDITIONX.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    CONDITIONX:* orders tests.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    set S1 ::strategy::SYSTEM

    proc setup {} {
        ted create SHIA
        variable S1
        variable B1
        variable C1
        ted order STRATEGY:BLOCK:ADD agent SYSTEM
        lassign [$S1 blocks] B1
        ted order BLOCK:CONDITION:ADD block_id [$B1 id] typename MOOD
        lassign [$B1 conditions] C1
        $C1 update_ {g} {g SHIA}
    }

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # CONDITIONX:STATE

    test CONDITIONX:STATE-1.1 {required parameters} -setup {
        setup
    } -body {
        ted order -reject CONDITIONX:STATE
    } -cleanup {
        cleanup
    } -result {
        condition_id {required value}
        state {required value}
    }

    test CONDITIONX:STATE-1.2 {unknown condition_id} -setup {
        setup
    } -body {
        ted order -reject CONDITIONX:STATE condition_id NONESUCH state normal
    } -cleanup {
        cleanup
    } -match glob -result {
        condition_id {invalid value "NONESUCH", should be one of: *}
    }

    test CONDITIONX:STATE-1.3 {invalid state} -setup {
        setup
    } -body {
        ted order -reject CONDITIONX:STATE condition_id [$C1 id] state NONESUCH
    } -cleanup {
        cleanup
    } -result {
        state {invalid value "nonesuch", should be one of: normal, disabled, invalid}
    }

    test CONDITIONX:STATE-2.1 {block updated} -setup {
        setup
    } -body {
        ted order CONDITIONX:STATE condition_id [$C1 id] state disabled

        $C1 state
    } -cleanup {
        cleanup
    } -result {disabled}

    test CONDITIONX:STATE-2.2 {notifier event} -setup {
        setup
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        ted order CONDITIONX:STATE condition_id [$C1 id] state disabled
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}

    test CONDITIONX:STATE-2.3 {undo notifier event} -setup {
        setup
        ted order CONDITIONX:STATE condition_id [$C1 id] state disabled
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}
 

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::




