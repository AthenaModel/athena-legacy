# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-SPEND.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) TACTIC:* order tests.
#
#    This test suite tests the TACTIC:SPEND:* orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Standard items

    set SPEND1 {
        owner       JOE
        priority    bottom
        int1        10
    }

    #-------------------------------------------------------------------
    # TACTIC:SPEND:CREATE

    test SPEND:CREATE-1.1 {required parms} -body {
        ted order -reject TACTIC:SPEND:CREATE {}
    } -result {
        owner {required value}
        int1 {required value}
    }

    
    test SPEND:CREATE-1.2 {a is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SPEND:CREATE \
            [dict merge $SPEND1 [list owner NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        owner {Invalid actor, should be one of: JOE}
    }

    test SPEND:CREATE-1.3 {int1 is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SPEND:CREATE \
            [dict merge $SPEND1 [list int1 NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        int1 {invalid value "NONESUCH", expected integer}
    }

    test SPEND:CREATE-1.4 {priority is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SPEND:CREATE [dict merge $SPEND1 {
            priority NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        priority {invalid value "nonesuch", should be one of: top, bottom}
    }

    test SPEND:CREATE-2.1 {tactic is created} -setup {
        setup
    } -body {
        ted order TACTIC:SPEND:CREATE $SPEND1

        ted query {SELECT * FROM tactics_SPEND}
    } -cleanup {
        cleanup
    } -result {
tactic_id tactic_type owner narrative                 priority state  exec_ts exec_flag int1 
--------- ----------- ----- ------------------------- -------- ------ ------- --------- ---- 
1         SPEND       JOE   Spend 10% of cash reserve 1        normal         0         10   
    }


    test SPEND:CREATE-2.2 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:SPEND:CREATE $SPEND1
        ted notifier received

        # NOTE: Two updates, because of priority setting.
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
        {::rdb <tactics> update 1}
    }


    test SPEND:CREATE-3.1 {undo effects} -setup {
        setup
        ted order TACTIC:SPEND:CREATE $SPEND1
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> delete 1}
    }


    #-------------------------------------------------------------------
    # TACTIC:SPEND:UPDATE

    proc setup_update_spendmoney {} {
        variable SPEND1
        setup
        ted order TACTIC:SPEND:CREATE $SPEND1
    }

    test SPEND:UPDATE-1.1 {required parms} -body {
        ted order -reject TACTIC:SPEND:UPDATE {}
    } -result {
        tactic_id {required value}
        int1 {required value}
    }

    
    test SPEND:UPDATE-1.2 {tactic_id is unknown} -setup {
        setup_update_spendmoney
    } -body {
        ted order -reject TACTIC:SPEND:UPDATE tactic_id NONESUCH int1 10
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Invalid tactic ID: "NONESUCH"}
    }

    test SPEND:UPDATE-1.3 {int1 is invalid} -setup {
        setup_update_spendmoney
    } -body {
        ted order -reject TACTIC:SPEND:UPDATE tactic_id 1 int1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        int1 {invalid value "NONESUCH", expected integer}
    }

    test SPEND:UPDATE-1.4 {wrong flavor of tactic} -setup {
        setup_update_spendmoney
        rdb eval {UPDATE tactics SET tactic_type='BOGUS'}
    } -body {
        ted order -reject TACTIC:SPEND:UPDATE tactic_id 1 int1 5
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Tactic 1 is not a SPEND tactic}
    }

    test SPEND:UPDATE-2.1 {activities are updated} -setup {
        setup_update_spendmoney
    } -body {
        ted order TACTIC:SPEND:UPDATE tactic_id 1 int1 20

        ted query {SELECT * FROM tactics_SPEND}
    } -cleanup {
        cleanup
    } -result {
tactic_id tactic_type owner narrative                 priority state  exec_ts exec_flag int1 
--------- ----------- ----- ------------------------- -------- ------ ------- --------- ---- 
1         SPEND       JOE   Spend 20% of cash reserve 1        normal         0         20   
    }


    test SPEND:UPDATE-2.2 {Effects} -setup {
        setup_update_spendmoney
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:SPEND:UPDATE tactic_id 1 int1 20
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
        {::rdb <tactics> update 1}
    }


    test SPEND:UPDATE-3.1 {undo effects} -setup {
        setup_update_spendmoney
        ted order TACTIC:SPEND:UPDATE tactic_id 1 int1 20
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::






