# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-defroe.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    defroe(sim) tests.
#
#    This test suite tests the defroe(sim) mutators and queries
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        array unset parms
        ted cleanup
    }


    #-------------------------------------------------------------------
    # mutate update


    test update-1.1 {defroe is updated} -setup {
        ted create NB1 NB2 BLUE
    } -body {
        defroe mutate update {
            id      {NB1 BLUE}
            defroe  HOLD_FIRE
        }

        ted query {SELECT * FROM defroe_ng}
    } -cleanup {
        cleanup
    } -result {
n   g    roe                  
--- ---- -------------------- 
NB1 BLUE FIRE_BACK_IF_PRESSED 
NB2 BLUE FIRE_BACK_IF_PRESSED 
    }


    test update-1.2 {identical values are OK} -setup {
        ted create NB1 NB2 BLUE
        set parmdict {
            id      {NB1 BLUE}
            defroe  HOLD_FIRE
        }

        defroe mutate update $parmdict
    } -body {
        set a [ted query {SELECT * FROM defroe_ng}]
        
        defroe mutate update $parmdict

        set b [ted query {SELECT * FROM defroe_ng}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-1.3 {empty values are OK} -setup {
        ted create NB1 NB2 BLUE
    } -body {
        set a [ted query {SELECT * FROM defroe_ng}]

        defroe mutate update  {
            id      {NB1 BLUE}
            defroe  HOLD_FIRE
        }

        set b [ted query {SELECT * FROM defroe_ng}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-2.1 {undo undoes the change} -setup {
        ted create NB1 NB2 BLUE
    } -body {

        set a [ted query {SELECT * FROM defroe_ng ORDER BY n,g}]

        set undo [defroe mutate update {
            id      {NB1 BLUE}
            defroe  HOLD_FIRE
        }]

        eval $undo

        set b [ted query {SELECT * FROM defroe_ng ORDER BY n,g}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # validate

    test validate-1.1 {invalid nbhood} -body {
        ted create NB1 NB2 BLUE BRIT
        defroe validate {NONESUCH NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid neighborhood, should be one of: NB1, NB2}


    test validate-1.2 {invalid group g} -setup {
        ted create NB1
    } -body {
        defroe validate {NB1 NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid uniformed force group, none are defined}


    test validate-2.1 {Valid ROE} -setup {
        ted create NB1 BLUE
    } -body {
        defroe validate {NB1 BLUE}
    } -cleanup {
        cleanup
    } -result {NB1 BLUE}


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





