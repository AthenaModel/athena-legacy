# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-ECON.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) ECON:* order tests.
#
#    This test suite tests the econ model orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    proc setup {} {
        ted create NB1 NB2
    }


    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }


    #-------------------------------------------------------------------
    # ECON:UPDATE

    test UPDATE-1.1 {required parms} -body {
        ted order -reject ECON:UPDATE {}
    } -result {
        n {required value}
    }
    

    test UPDATE-1.2 {invalid n} -setup {
        setup
    } -body {
        ted order -reject ECON:UPDATE \
            n NONESUCH
    } -cleanup {
        cleanup
    } -result {
        n {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test UPDATE-1.3 {invalid PCF: negative} -setup {
        setup
    } -body {
        ted order -reject ECON:UPDATE \
            n NB1 pcf -1
    } -cleanup {
        cleanup
    } -result {
        pcf {invalid value "-1", should be a real number no less than 0.0}
    }


    test UPDATE-1.4 {invalid PCF: > 1.0 during PREP} -setup {
        setup
    } -body {
        ted order -reject ECON:UPDATE \
            n NB1 pcf 2.0
    } -cleanup {
        cleanup
    } -result {
        pcf {invalid value "2.0", should be a real number in range 0.1, 1.0}
    }

    test UPDATE-2.1 {values are updated} -setup {
        setup
    } -body {
        ted order ECON:UPDATE {
            n   NB1
            pcf 0.5
        }

        ted query {SELECT * FROM econ_n}
    } -cleanup {
        cleanup
    } -result {
n   pcf ccf cap0 cap 
--- --- --- ---- --- 
NB1 0.5 0.0 0.0  0.0 
NB2 1.0 0.0 0.0  0.0 
    }

    test UPDATE-2.2 {PCF range is wider after PREP} -setup {
        setup
        ted create BLUE SHIA KURD
        ted lock
    } -body {
        ted order ECON:UPDATE {
            n   NB1
            pcf 2.0
        }

        ted query {SELECT n, pcf FROM econ_n}
    } -cleanup {
        cleanup
    } -result {
n   pcf 
--- --- 
NB1 2.0 
NB2 1.0 
    }

    test UPDATE-2.3 {table monitor event} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <econ_n>
        ted order ECON:UPDATE n NB1 pcf 0.5
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <econ_n> update NB1}
        {::rdb <econ_n> update NB1}
    }


    test UPDATE-3.1 {undo undoes the change} -setup {
        setup

        ted order ECON:UPDATE {
            n   NB1
            pcf 0.5
        }
    } -body {
        ted notifier bind ::rdb <econ_n>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <econ_n> update NB1}
    }

    #-------------------------------------------------------------------
    # ECON:UPDATE:MULTI

    test UPDATE:MULTI-1.1 {required parms} -setup {
        setup
    } -body {
        ted order -reject ECON:UPDATE:MULTI {}
    } -cleanup {
        cleanup
    } -result {
        ids {required value}
    }
    

    test UPDATE:MULTI-1.2 {invalid n in ids} -setup {
        setup
    } -body {
        ted order -reject ECON:UPDATE:MULTI \
            ids {NONESUCH NONESUCH}
    } -cleanup {
        cleanup
    } -result {
        ids {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test UPDATE:MULTI-1.3 {invalid pcf: negative} -setup {
        setup
    } -body {
        ted order -reject ECON:UPDATE:MULTI \
            ids {NB1 NB2} pcf -1.0
    } -cleanup {
        cleanup
    } -result {
        pcf {invalid value "-1.0", should be a real number no less than 0.0}
    }


    test UPDATE:MULTI-2.1 {one econ of several is updated} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <econ_n>

        ted order ECON:UPDATE:MULTI {
            ids  NB1
            pcf  0.5
        }

        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <econ_n> update NB1}
        {::rdb <econ_n> update NB1}
    }


    test UPDATE:MULTI-2.2 {several are updated} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <econ_n>

        ted order ECON:UPDATE:MULTI {
            ids  {NB1 NB2}
            pcf  0.5
        }

        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <econ_n> update NB1}
        {::rdb <econ_n> update NB1}
        {::rdb <econ_n> update NB2}
        {::rdb <econ_n> update NB2}
    }


    test UPDATE:MULTI-3.1 {undo undoes the change} -setup {
        setup

        ted order ECON:UPDATE:MULTI {
            ids  {NB1 NB2}
            pcf  0.5
        }
    } -body {
        ted notifier bind ::rdb <econ_n>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <econ_n> update NB1}
        {::rdb <econ_n> update NB2}
    }

    #-------------------------------------------------------------------
    # ECON:SAM:UPDATE

    test SAM:UPDATE-1.1 {required parms} -body {
        ted order -reject ECON:SAM:UPDATE {}
    } -result {
        id {required value}
        val {required value}
    }
    
    test SAM:UPDATE-1.2 {invalid id} -setup {
        setup
    } -body {
        ted order -reject ECON:SAM:UPDATE \
            id NONESUCH val 100000
    } -cleanup {
        cleanup
    } -result {
        id {Invalid SAM cell "NONESUCH", should be one of: *}
    } -match glob

    test SAM:UPDATE-1.3 {invalid val: negative} -setup {
        setup
    } -body {
        ted order -reject ECON:SAM:UPDATE \
            id BX.world.world val -1
    } -cleanup {
        cleanup
    } -result {
        val {invalid money value "-1", expected positive numeric value with optional K, M, or B suffix}
    }

    test SAM:UPDATE-2.1 {valid order} -setup {
        setup
    } -body {
        ted order ECON:SAM:UPDATE id BX.world.world val 10000
    } -cleanup {
        cleanup
    } -result {}

    test SAM:UPDATE-2.2 {monitor cell update event} -setup {
        setup
    } -body {
        ted notifier bind ::econ <SamUpdate>
        ted order ECON:SAM:UPDATE id BX.world.world val 10000
        ted notifier received
    } -cleanup {
        cleanup
        ::econ::sam reset
        ::econ::sam solve
    } -result {
        {::econ <SamUpdate> BX.world.world 10000.0}
    }

    test SAM:UPDATE-3.1 {undo undoes the change} -setup {
        setup

        ted order ECON:SAM:UPDATE {
            id  BX.world.world
            val 100000
        }
    } -body {
        ted notifier bind ::econ <SamUpdate>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
        ::econ::sam reset
        ::econ::sam solve
    } -result {
        {::econ <SamUpdate> BX.world.world 0.0}
    }

    #-------------------------------------------------------------------
    # ECON:CGE:UPDATE

    test CGE:UPDATE-1.1 {required parms} -setup {
        setup
        ted create BLUE SHIA KURD
        ted lock
    } -body {
        ted order -reject ECON:CGE:UPDATE {}
    } -cleanup {
        cleanup
    } -result {
        id {required value}
        val {required value}
    }
    
    test CGE:UPDATE-1.2 {invalid id} -setup {
        setup
        ted create BLUE SHIA KURD
        ted lock
    } -body {
        ted order -reject ECON:CGE:UPDATE \
            id NONESUCH val 100000
    } -cleanup {
        cleanup
    } -result {
        id {Invalid CGE cell "NONESUCH", should be one of: *}
    } -match glob

    test CGE:UPDATE-1.3 {invalid val: negative} -setup {
        setup
        ted create BLUE SHIA KURD
        ted lock
    } -body {
        ted order -reject ECON:CGE:UPDATE \
            id PF.world.black val -1
    } -cleanup {
        cleanup
    } -result {
        val {invalid money value "-1", expected positive numeric value with optional K, M, or B suffix}
    }

    test CGE:UPDATE-2.1 {valid order} -setup {
        setup
        ted create BLUE SHIA KURD
        ted lock
    } -body {
        ted order ECON:CGE:UPDATE id PF.world.black val 10000
    } -cleanup {
        cleanup
    } -result {}

    test CGE:UPDATE-2.2 {monitor cell update event} -setup {
        setup
        ted create BLUE SHIA KURD
        ted lock
    } -body {
        ted notifier bind ::econ <CgeUpdate>
        ted order ECON:CGE:UPDATE id PF.world.black val 10000
        ted notifier received
    } -cleanup {
        cleanup
        ::econ::cge reset
    } -result {
        {::econ <CgeUpdate>}
    }

    test CGE:UPDATE-3.1 {undo undoes the change} -setup {
        setup
        ted create BLUE SHIA KURD
        ted lock

        ted order ECON:CGE:UPDATE {
            id  PF.world.black
            val 100000
        }
    } -body {
        ted notifier bind ::econ <CgeUpdate>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
        ::econ::cge reset
    } -result {
        {::econ <CgeUpdate>}
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







