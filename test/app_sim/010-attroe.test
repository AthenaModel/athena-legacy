# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-attroe.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    attroe(sim) tests.
#
#    This test suite tests the attroe(sim) mutators and queries
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Setup for a test

    proc setup {} {
        ted create NB1 NB2 BLUE BRIT ALQ
    }

    set uf {
        id        {NB1 BLUE ALQ}
        uniformed 1
        roe       ATTACK
        cooplimit 30
        rate      ""
    }

    set nf {
        id        {NB1 ALQ BRIT}
        uniformed 0
        roe       HIT_AND_RUN
        cooplimit 40
        rate      0.5
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        array unset parms
        ted cleanup
    }

    #-------------------------------------------------------------------
    # mutate create

    test create-1.1 {uf roe is created} -setup {
        setup 
    } -body {
        attroe mutate create $uf
        ted query {SELECT * FROM attroe_nfg}
    } -cleanup {
        cleanup
    } -result {
n   f    g   uniformed roe    cooplimit rate 
--- ---- --- --------- ------ --------- ---- 
NB1 BLUE ALQ 1         ATTACK 30.0           
    }


    test create-1.2 {nf roe is created} -setup {
        setup 
    } -body {
        attroe mutate create $nf
        ted query {SELECT * FROM attroe_nfg}
    } -cleanup {
        cleanup
    } -result {
n   f   g    uniformed roe         cooplimit rate 
--- --- ---- --------- ----------- --------- ---- 
NB1 ALQ BRIT 0         HIT_AND_RUN 40.0      0.5  
    }


    test create-2.1 {undo deletes the attroe} -setup {
        setup
        attroe mutate create $uf
        set undo [attroe mutate create $nf]
    } -body {
        eval $undo
        rdb eval {SELECT n,f,g FROM attroe_nfg}
    } -cleanup {
        cleanup
    } -result {NB1 BLUE ALQ}


    #-------------------------------------------------------------------
    # mutate delete

    test delete-1.1 {ROE is deleted} -setup {
        setup
        attroe mutate create $uf
        attroe mutate create $nf
    } -body {
        attroe mutate delete {NB1 BLUE ALQ}

        # Is it gone?
        rdb eval {SELECT n,f,g FROM attroe_nfg}
    } -cleanup {
        cleanup
    } -result {NB1 ALQ BRIT}


    test delete-2.1 {Undo restores group} -setup {
        setup
        attroe mutate create $uf
        set undo [attroe mutate delete {NB1 BLUE ALQ}]
    } -body {
        eval $undo
        ted query {SELECT * FROM attroe_nfg}
    } -cleanup {
        cleanup
    } -result {
n   f    g   uniformed roe    cooplimit rate 
--- ---- --- --------- ------ --------- ---- 
NB1 BLUE ALQ 1         ATTACK 30.0           
    }


    #-------------------------------------------------------------------
    # mutate update

    test update-1.1 {attroe is updated} -setup {
        setup
        attroe mutate create $nf
    } -body {
        attroe mutate update {
            id        {NB1 ALQ BRIT}
            roe       STAND_AND_FIGHT
            cooplimit 50
            rate      1.0
        }

        ted query {SELECT * FROM attroe_nfg}
    } -cleanup {
        cleanup
    } -result {
n   f   g    uniformed roe             cooplimit rate 
--- --- ---- --------- --------------- --------- ---- 
NB1 ALQ BRIT 0         STAND_AND_FIGHT 50.0      1.0  
    }


    test update-1.2 {identical values are OK} -setup {
        setup
        attroe mutate create $nf
    } -body {
        set a [ted query {SELECT * FROM attroe_nfg}]

        attroe mutate update $nf

        set b [ted query {SELECT * FROM attroe_nfg}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-1.3 {empty values are OK} -setup {
        setup
        attroe mutate create $nf
    } -body {
        set a [ted query {SELECT * FROM attroe_nfg}]

        attroe mutate update  {
            id        {NB1 ALQ BRIT}
            roe       ""
            cooplimit ""
            rate      ""
        }

        set b [ted query {SELECT * FROM attroe_nfg}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-2.1 {undo undoes the change} -setup {
        setup
        attroe mutate create $nf
    } -body {

        set a [ted query {SELECT * FROM attroe_nfg}]

        set undo [attroe mutate update {
            id        {NB1 ALQ BRIT}
            roe       STAND_AND_FIGHT
            cooplimit 50
            rate      1.0
        }]

        eval $undo

        set b [ted query {SELECT * FROM attroe_nfg}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # exists


    test exists-1.1 {No ROE exists} -setup {
        setup
    } -body {
        attroe exists {NB1 BLUE ALQ}
    } -cleanup {
        cleanup
    } -result {0}


    test exists-1.2 {ROE exists} -setup {
        setup
        attroe mutate create $uf
        attroe mutate create $nf
    } -body {
        attroe exists {NB1 BLUE ALQ}
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # validate

    test validate-1.1 {Invalid nbhood} -setup {
        setup
    } -body {
        attroe validate {NONESUCH BLUE ALQ}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid neighborhood, should be one of: NB1, NB2}


    test validate-1.2 {Invalid group f} -setup {
        setup
    } -body {
        attroe validate {NB1 NONESUCH ALQ}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid force group, should be one of: BLUE, BRIT, ALQ}


    test validate-1.3 {Invalid group g} -setup {
        setup
    } -body {
        attroe validate {NB1 BLUE NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid force group, should be one of: BLUE, BRIT, ALQ}


    test validate-1.4 {No such ROE} -setup {
        setup
    } -body {
        attroe validate {NB1 BLUE ALQ}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Group BLUE has no ROE for group ALQ in NB1.}


    test validate-1.5 {ROE is valid} -setup {
        setup
        attroe mutate create $uf
    } -body {
        attroe validate {NB1 BLUE ALQ}
    } -cleanup {
        cleanup
    } -result {NB1 BLUE ALQ}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





