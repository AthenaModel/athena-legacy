# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-tactic_attroe.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    attroe(sim) tests.
#
#    This test suite tests the tactic::ATTROE ensemble.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        ted create JOE BOB NB1 NB2 BLUE BRIT ALQ

        cash load

        # Verify that unused columns contain NULL
        rdb nullvalue "@"
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        rdb nullvalue ""
        ted cleanup
    }

    set T1 {
        tactic_type ATTROE
        owner       JOE
        priority    top
        f           BLUE
        g           ALQ
        n           NB1
        text1       ATTACK
        int1        5
    }

    set T2 {
        tactic_type ATTROE
        owner       BOB
        priority    top
        f           ALQ
        g           BLUE
        n           NB1
        text1       HIT_AND_RUN
        int1        10
    }

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative: DO_NOT_ATTACK} -setup {
        setup
        tactic mutate create [dict merge $T1 {text1 DO_NOT_ATTACK}]
    } -body {
        tactic::ATTROE narrative [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Group BLUE will not attack ALQ in NB1.}

    test narrative-1.2 {narrative: UF vs NF} -setup {
        setup
        tactic mutate create $T1
    } -body {
        tactic::ATTROE narrative [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Group BLUE attacks ALQ in NB1 up to 5 times/week.}

    test narrative-1.3 {narrative: NF vs UF} -setup {
        setup
        tactic mutate create $T2
    } -body {
        tactic::ATTROE narrative [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Group ALQ attacks BLUE in NB1 with ROE HIT_AND_RUN up to 10 times/week.}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {check: n no longer exists} -setup {
        setup
        tactic mutate create $T1
        rdb eval {DELETE FROM nbhoods WHERE n='NB1'}
    } -body {
        tactic::ATTROE check [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Neighborhood NB1 no longer exists.}

    test check-1.2 {check: f no longer exists} -setup {
        setup
        tactic mutate create $T1
        rdb eval {DELETE FROM frcgroups WHERE g='BLUE'}
    } -body {
        tactic::ATTROE check [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Force group BLUE no longer exists.}

    test check-1.3 {check: f no longer owned by owner} -setup {
        setup
        tactic mutate create $T1
        rdb eval {UPDATE frcgroups SET a=NULL WHERE a='JOE'}
    } -body {
        tactic::ATTROE check [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Force group BLUE is no longer owned by actor JOE.}

    test check-1.4 {check: eattroeuf mismatch} -setup {
        setup
        tactic mutate create [dict merge $T1 {text1 HIT_AND_RUN}]
    } -body {
        tactic::ATTROE check [tactic get 1]
    } -cleanup {
        cleanup
    } -result {ROE is invalid for a uniformed group: "HIT_AND_RUN".}


    test check-1.5 {check: eattroenf mismatch} -setup {
        setup
        tactic mutate create [dict merge $T2 {text1 ATTACK}]
    } -body {
        tactic::ATTROE check [tactic get 1]
    } -cleanup {
        cleanup
    } -result {ROE is invalid for a non-uniformed group: "ATTACK".}

    test check-1.6 {check: g no longer exists} -setup {
        setup
        tactic mutate create $T1
        rdb eval {DELETE FROM frcgroups WHERE g='ALQ'}
    } -body {
        tactic::ATTROE check [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Force group ALQ no longer exists.}

    test check-1.7 {check: f and g both uniformed} -setup {
        setup
        tactic mutate create $T1
        rdb eval {UPDATE frcgroups SET uniformed=1}
    } -body {
        tactic::ATTROE check [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Groups BLUE and ALQ are both uniformed.}

    test check-1.8 {check: f and g both non-uniformed} -setup {
        setup
        tactic mutate create $T2
        rdb eval {UPDATE frcgroups SET uniformed=0}
    } -body {
        tactic::ATTROE check [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Groups ALQ and BLUE are both non-uniformed.}

    test check-1.9 {check: multiple failures} -setup {
        setup
        tactic mutate create $T1
        rdb eval {UPDATE frcgroups SET a=NULL, uniformed=0}
    } -body {
        tactic::ATTROE check [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Force group BLUE is no longer owned by actor JOE. ROE is invalid for a non-uniformed group: "ATTACK". Groups BLUE and ALQ are both non-uniformed.}

    #-------------------------------------------------------------------
    # dollars

    test dollars-1.1 {dollars: attack_cost is zero} -setup {
        setup
        tactic mutate create $T1
    } -body {
        tactic::ATTROE dollars [tactic get 1]
    } -cleanup {
        cleanup
    } -result {0.00}

    test dollars-1.2 {dollars: attack_cost is non-zero} -setup {
        setup
        tactic mutate create $T1
        rdb eval {UPDATE frcgroups SET attack_cost=100.0}
    } -body {
        tactic::ATTROE dollars [tactic get 1]
    } -cleanup {
        cleanup
    } -result {500.00}

    #-------------------------------------------------------------------
    # execute

    test execute-1.1 {execute: returns 1 on success} -setup {
        setup
        tactic mutate create $T1
    } -body {
        tactic::ATTROE execute [tactic get 1]
    } -cleanup {
        cleanup
    } -result {1}

    test execute-1.2 {execute: returns 0 on failure} -setup {
        setup
        rdb eval {UPDATE frcgroups SET attack_cost=1000000.0}
        tactic mutate create $T1
    } -body {
        tactic::ATTROE execute [tactic get 1]
    } -cleanup {
        cleanup
    } -result {0}

    test execute-1.3 {execute: UF vs NF} -setup {
        setup
        tactic mutate create $T1
    } -body {
        tactic::ATTROE execute [tactic get 1]
        ted query {SELECT * FROM attroe_nfg}
    } -cleanup {
        cleanup
    } -result {
n   f    g   uniformed roe    max_attacks attacks 
--- ---- --- --------- ------ ----------- ------- 
NB1 BLUE ALQ 1         ATTACK 5           0       
    }

    test execute-1.4 {execute: NF vs UF} -setup {
        setup
        tactic mutate create $T2
    } -body {
        tactic::ATTROE execute [tactic get 1]
        ted query {SELECT * FROM attroe_nfg}
    } -cleanup {
        cleanup
    } -result {
n   f   g    uniformed roe         max_attacks attacks 
--- --- ---- --------- ----------- ----------- ------- 
NB1 ALQ BLUE 0         HIT_AND_RUN 10          0       
    }

    #-------------------------------------------------------------------
    # reset

    test reset-1.1 {All attroes are deleted} -setup {
        ted create NB1 BLUE ALQ

        rdb eval {
            INSERT INTO attroe_nfg(n,f,g,roe)
            VALUES('NB1','BLUE','ALQ','ATTACK');
        }
    } -body {
        tactic::ATTROE reset
        ted query {SELECT * FROM attroe_nfg}
    } -cleanup {
        cleanup
    } -result {
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





