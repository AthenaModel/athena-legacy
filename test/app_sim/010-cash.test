# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-cash.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    cash(sim) tests.
#
#    This test suite tests the cash(sim) interface.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    proc setup {} {
        ted create JOE BOB
    }

    #-------------------------------------------------------------------
    # load

    test load-1.1 {load populates working_cash} -setup {
        setup
    } -body {
        cash load
        ted query {SELECT * FROM working_cash}
    } -cleanup {
        cleanup
    } -result {
a   cash_reserve income  cash_on_hand 
--- ------------ ------- ------------ 
JOE 200000.0     10000.0 10000.0      
BOB 150000.0     5000.0  5000.0       
    }

    test load-1.2 {load adds income} -setup {
        setup
    } -body {
        array set joe [actor get JOE]
        let a {$joe(cash_on_hand) + $joe(income)}

        cash load
        set b [rdb onecolumn {
            SELECT cash_on_hand FROM working_cash WHERE a='JOE'
        }]

        expr {$a == $b}
    } -cleanup {
        cleanup
    } -result {1}

    #-------------------------------------------------------------------
    # get

    test get-1.1 {get all working_cash columns} -setup {
        setup
        cash load
    } -body {
        ted pdict [cash get JOE]
    } -cleanup {
        cleanup
    } -result {
        cash_on_hand 10000.0
        a            JOE
        cash_reserve 200000.0
        income       10000.0
    }

    test get-1.2 {get one working_cash column} -setup {
        setup
        cash load
    } -body {
        cash get JOE cash_reserve
    } -cleanup {
        cleanup
    } -result {200000.0}

    #-------------------------------------------------------------------
    # deposit

    test deposit-1.1 {Return 0 if insufficient funds} -setup {
        setup
        cash load
    } -body {
        cash deposit JOE 1000000.0
    } -cleanup {
        cleanup
    } -result {0}

    test deposit-1.2 {Return 1 if sufficient funds} -setup {
        setup
        cash load
    } -body {
        cash deposit JOE 1.0
    } -cleanup {
        cleanup
    } -result {1}

    test deposit-1.3 {Money is transferred} -setup {
        setup
        cash load
    } -body {
        cash deposit JOE 1000
        ted query {SELECT * FROM working_cash}
    } -cleanup {
        cleanup
    } -result {
a   cash_reserve income  cash_on_hand 
--- ------------ ------- ------------ 
JOE 201000.0     10000.0 9000.0       
BOB 150000.0     5000.0  5000.0       
    }

    #-------------------------------------------------------------------
    # withdraw

    test withdraw-1.1 {Return 0 if insufficient funds} -setup {
        setup
        cash load
    } -body {
        cash withdraw JOE 1000000.0
    } -cleanup {
        cleanup
    } -result {0}

    test withdraw-1.2 {Return 1 if sufficient funds} -setup {
        setup
        cash load
    } -body {
        cash withdraw JOE 1.0
    } -cleanup {
        cleanup
    } -result {1}

    test withdraw-1.3 {Money is transferred} -setup {
        setup
        cash load
    } -body {
        cash withdraw JOE 1000
        ted query {SELECT * FROM working_cash}
    } -cleanup {
        cleanup
    } -result {
a   cash_reserve income  cash_on_hand 
--- ------------ ------- ------------ 
JOE 199000.0     10000.0 11000.0      
BOB 150000.0     5000.0  5000.0       
    }

    #-------------------------------------------------------------------
    # spend

    test spend-1.1 {Return 0 if insufficient funds} -setup {
        setup
        cash load
    } -body {
        cash spend JOE 1000000.0
    } -cleanup {
        cleanup
    } -result {0}

    test spend-1.2 {Return 1 if sufficient funds} -setup {
        setup
        cash load
    } -body {
        cash spend JOE 1.0
    } -cleanup {
        cleanup
    } -result {1}

    test spend-1.3 {Money is spent} -setup {
        setup
        cash load
    } -body {
        cash spend JOE 1000
        ted query {SELECT * FROM working_cash}
    } -cleanup {
        cleanup
    } -result {
a   cash_reserve income  cash_on_hand 
--- ------------ ------- ------------ 
JOE 200000.0     10000.0 9000.0       
BOB 150000.0     5000.0  5000.0       
    }

    #-------------------------------------------------------------------
    # give

    test give-1.1 {Gives cash to actor's cash-on-hand.} -setup {
        setup
        cash load
    } -body {
        cash give JOE 2000.0
        cash give BOB 5000.0
        ted query {SELECT a, cash_reserve, cash_on_hand FROM working_cash}
    } -cleanup {
        cleanup
    } -result {
a   cash_reserve cash_on_hand 
--- ------------ ------------ 
JOE 200000.0     12000.0      
BOB 150000.0     10000.0      
    }


    #-------------------------------------------------------------------
    # save

    test save-1.1 {Saves balances back to actors.} -setup {
        setup
        cash load
        cash withdraw JOE 2000.0
    } -body {
        cash save
        ted query {SELECT a, cash_reserve, cash_on_hand FROM actors}
    } -cleanup {
        cleanup
    } -result {
a   cash_reserve cash_on_hand 
--- ------------ ------------ 
JOE 198000.0     12000.0      
BOB 150000.0     5000.0       
    }

    test save-1.2 {Clears working cash.} -setup {
        setup
        cash load
        cash withdraw JOE 2000.0
    } -body {
        cash save
        ted query {SELECT * FROM working_cash}
    } -cleanup {
        cleanup
    } -result {
    }



    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::






