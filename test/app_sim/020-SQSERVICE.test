# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-SQSERVICE.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) SQSERVICE:* order tests.
#
#    This test suite tests the sqservice(sim) orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    proc setup {} {
        ted create JOE BOB SHIA SUNN
    }


    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # SQSERVICE:SET

    test SET-1.1 {required parms} -body {
        ted order -reject SQSERVICE:SET {}
    } -result {
        id {required value}
        funding {required value}
    }
    

    test SET-1.2 {invalid g} -setup {
        setup
    } -body {
        ted order -reject SQSERVICE:SET id {NONESUCH JOE} funding 1000
    } -cleanup {
        cleanup
    } -result {
        id {Invalid civilian group, should be one of: SHIA, SUNN}
    }

    test SET-1.3 {invalid a} -setup {
        setup
    } -body {
        ted order -reject SQSERVICE:SET id {SHIA NONESUCH} funding 1000
    } -cleanup {
        cleanup
    } -result {
        id {Invalid actor, should be one of: JOE, BOB}
    }

    test SET-1.4 {invalid funding: non-numeric} -setup {
        setup
    } -body {
        ted order -reject SQSERVICE:SET id {SHIA JOE} funding NONESUCH
    } -cleanup {
        cleanup
    } -result {
        funding {invalid money value "NONESUCH", expected positive numeric value with optional K, M, or B suffix}
    }

    test SET-1.5 {invalid funding: out of range} -setup {
        setup
    } -body {
        ted order -reject SQSERVICE:SET id {SHIA JOE} funding -1
    } -cleanup {
        cleanup
    } -result {
        funding {invalid money value "-1", expected positive numeric value with optional K, M, or B suffix}
    }

    test SET-2.1 {Record is set} -setup {
        setup
    } -body {
        ted order SQSERVICE:SET {
            id        {SUNN BOB}
            funding   1000.0
        }

        ted query {SELECT * FROM sqservice_ga ORDER BY g,a}
    } -cleanup {
        cleanup
    } -result {
g    a   funding 
---- --- ------- 
SUNN BOB 1000.0  
    }

    test SET-2.2 {table monitor event on creation} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <sqservice_ga>
        ted order SQSERVICE:SET id {SUNN BOB} funding 1000.0
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <sqservice_ga> update {SUNN BOB}}
    }


    test SET-2.3 {undo undoes the creation} -setup {
        setup
        ted order SQSERVICE:SET id {SUNN BOB} funding 1000.0
    } -body {
        ted notifier bind ::rdb <sqservice_ga>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <sqservice_ga> delete {SUNN BOB}}
    }

    #-------------------------------------------------------------------
    # SQSERVICE:RESET

    test RESET-1.1 {required parms} -body {
        ted order -reject SQSERVICE:RESET {}
    } -result {
        id {required value}
    }
    

    test RESET-1.2 {unknown g in id} -setup {
        setup
    } -body {
        ted order -reject SQSERVICE:RESET id {NONESUCH JOE}
    } -cleanup {
        cleanup
    } -result {
        id {Invalid civilian group, should be one of: SHIA, SUNN}
    }

    test RESET-1.3 {unknown a in id} -setup {
        setup
    } -body {
        ted order -reject SQSERVICE:RESET id {SHIA NONESUCH}
    } -cleanup {
        cleanup
    } -result {
        id {Invalid actor, should be one of: JOE, BOB}
    }

    test RESET-2.1 {Effects} -setup {
        setup
        ted order SQSERVICE:SET {id {SHIA JOE} funding 1000.0}
    } -body {
        ted notifier bind ::rdb <sqservice_ga>
        ted order SQSERVICE:RESET id {SHIA JOE}
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <sqservice_ga> delete {SHIA JOE}}
    }


    test RESET-2.2 {Effects on undo} -setup {
        setup
        ted order SQSERVICE:SET {id {SHIA JOE} funding 1000.0}
        ted order SQSERVICE:RESET {id {SHIA JOE}}
    } -body {
        ted notifier bind ::rdb <sqservice_ga>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <sqservice_ga> update {SHIA JOE}}
    }

    test RESET-3.1 {OK if there's no override} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <sqservice_ga>
        ted order SQSERVICE:RESET id {SHIA JOE}
        ted notifier received
    } -cleanup {
        cleanup
    } -result {}


    test RESET-3.2 {Can undo even if there was no override} -setup {
        setup
        ted order SQSERVICE:RESET {id {SHIA JOE}}
    } -body {
        ted notifier bind ::rdb <sqservice_ga>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {}



    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::








