# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-condition_at.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    condition_at(sim) tests.
#
#    This test suite tests the condition_at(sim) ensemble.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        ted create JOE BOB NB1 NB2 BLUE BRIT
        ted order TACTIC:SAVE:CREATE owner JOE int1 10

        # Verify that unused columns contain NULL
        rdb nullvalue "@"
    }

    # Clean up at a test

    proc cleanup {} {
        # Clean up the test environment
        rdb nullvalue ""
        array unset parms
        ted cleanup
    }

    # Standard Conditions.
    
    set C1 {
        cc_id          1
        condition_type AT
        t1             10
    }

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative} -setup {
        setup
        condition mutate create $C1
    } -body {
        condition::AT narrative [condition get 1]
    } -cleanup {
        cleanup
    } -result {The current simulation time is day 10, i.e., 200000ZJAN10.}

    #-------------------------------------------------------------------
    # check


    test check-1.1 {check: successful} -setup {
        setup
        condition mutate create $C1
    } -body {
        # NOTE: There's no way for the check to fail.
        condition::AT check [condition get 1]
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # eval


    proc AtEval {now} {
        simclock reset
        if {$now > 0} {
            simclock step $now
        }

        return [condition::AT eval [condition get 1]]
    }

    test eval-1.1 {eval at} -setup {
        setup
        condition mutate create $C1
    } -body {
        # t1 = 10
        set a [AtEval 0]
        set b [AtEval 7]
        set c [AtEval 14]
        set d [AtEval 21]

        list $a $b $c $d
    } -cleanup {
        cleanup
    } -result {0 0 1 0}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







