# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-DEPLOY.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) TACTIC:DEPLOY:* order tests.
#
#    This test suite tests the DEPLOY tactic's orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE BOB NB1 NB2 BLUE BRIT ALQ
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Standard items

    set D1 {
        owner       JOE
        priority    bottom
        nlist       NB1
        g           BLUE
        int1        100
    }

    set D2 {
        owner       JOE
        priority    bottom
        nlist       {NB1 NB2}
        g           BLUE
        int1        100
    }

    #-------------------------------------------------------------------
    # TACTIC:DEPLOY:CREATE

    test DEPLOY:CREATE-1.1 {required parms} -body {
        ted order -reject TACTIC:DEPLOY:CREATE {}
    } -result {
        owner {required value}
        g {required value}
        int1 {required value}
        nlist {required value}
    }

    test DEPLOY:CREATE-1.2 {owner is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY:CREATE \
            [dict merge $D1 [list owner NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        owner {Invalid actor, should be one of: JOE, BOB}
    }

    test DEPLOY:CREATE-1.3 {g is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY:CREATE \
            [dict merge $D1 [list g NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        g {Invalid force/org group "NONESUCH", should be one of: ALQ, BLUE, BRIT}
    }

    test DEPLOY:CREATE-1.4 {g is not owned by owner} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY:CREATE \
            [dict merge $D1 [list g ALQ]]
    } -cleanup {
        cleanup
    } -result {
        g {Group ALQ is not owned by actor JOE.}
    }

    test DEPLOY:CREATE-1.5 {int1 is non-integer} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY:CREATE \
            [dict merge $D1 [list int1 NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        int1 {invalid value "NONESUCH", expected integer}
    }

    test DEPLOY:CREATE-1.6 {int1 is non-positive} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY:CREATE \
            [dict merge $D1 [list int1 0]]
    } -cleanup {
        cleanup
    } -result {
        int1 {invalid value "0", expected integer no less than 1}
    }

    test DEPLOY:CREATE-1.7 {nlist is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY:CREATE \
            [dict merge $D1 [list nlist NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        nlist {Invalid neighborhood, should be one of: NB1, NB2}
    }

    test DEPLOY:CREATE-1.8 {priority is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY:CREATE [dict merge $D1 {
            priority NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        priority {invalid value "nonesuch", should be one of: top, bottom}
    }

    test DEPLOY:CREATE-2.1 {tactic is created} -setup {
        setup
    } -body {
        ted order TACTIC:DEPLOY:CREATE $D2

        ted query {SELECT * FROM tactics}
    } -cleanup {
        cleanup
    } -result {
tactic_id tactic_type owner narrative                                                                   priority state  exec_ts exec_flag m n nlist   f g    text1 int1 
--------- ----------- ----- --------------------------------------------------------------------------- -------- ------ ------- --------- - - ------- - ---- ----- ---- 
1         DEPLOY      JOE   Deploy 100 of group BLUE's available personnel into neighborhoods NB1, NB2. 1        normal         0             NB1 NB2   BLUE       100  
    }


    test DEPLOY:CREATE-2.2 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:DEPLOY:CREATE $D1
        ted notifier received

        # NOTE: Two updates, because of priority setting.
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
        {::rdb <tactics> update 1}
    }


    test DEPLOY:CREATE-3.1 {undo effects} -setup {
        setup
        ted order TACTIC:DEPLOY:CREATE $D1
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> delete 1}
    }

    #-------------------------------------------------------------------
    # TACTIC:DEPLOY:UPDATE

    proc setup_update_defend {} {
        variable D2
        setup
        ted order TACTIC:DEPLOY:CREATE $D2
    }

    test DEPLOY:UPDATE-1.1 {required parms} -body {
        ted order -reject TACTIC:DEPLOY:UPDATE {}
    } -result {
        tactic_id {required value}
    }

    
    test DEPLOY:UPDATE-1.2 {tactic_id is unknown} -setup {
        setup_update_defend
    } -body {
        ted order -reject TACTIC:DEPLOY:UPDATE \
            tactic_id NONESUCH
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Invalid tactic ID: "NONESUCH"}
    }

    test DEPLOY:UPDATE-1.3 {g is unknown} -setup {
        setup_update_defend
    } -body {
        ted order -reject TACTIC:DEPLOY:UPDATE tactic_id 1 g NONESUCH
    } -cleanup {
        cleanup
    } -result {
        g {Invalid force/org group "NONESUCH", should be one of: ALQ, BLUE, BRIT}
    }

    test DEPLOY:UPDATE-1.4 {int1 is non-integer} -setup {
        setup_update_defend
    } -body {
        ted order -reject TACTIC:DEPLOY:UPDATE tactic_id 1 int1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        int1 {invalid value "NONESUCH", expected integer}
    }

    test DEPLOY:UPDATE-1.5 {int1 is non-positive} -setup {
        setup_update_defend
    } -body {
        ted order -reject TACTIC:DEPLOY:UPDATE tactic_id 1 int1 0
    } -cleanup {
        cleanup
    } -result {
        int1 {invalid value "0", expected integer no less than 1}
    }

    test DEPLOY:UPDATE-1.6 {nlist is invalid} -setup {
        setup_update_defend
    } -body {
        ted order -reject TACTIC:DEPLOY:UPDATE tactic_id 1 nlist NONESUCH
    } -cleanup {
        cleanup
    } -result {
        nlist {Invalid neighborhood, should be one of: NB1, NB2}
    }

    test DEPLOY:UPDATE-1.7 {wrong flavor of tactic} -setup {
        setup_update_defend
        rdb eval {UPDATE tactics SET tactic_type='BOGUS'}
    } -body {
        ted order -reject TACTIC:DEPLOY:UPDATE tactic_id 1
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Tactic 1 is not a DEPLOY tactic}
    }

    test DEPLOY:UPDATE-2.1 {tactic is updated} -setup {
        setup_update_defend
    } -body {
        ted order TACTIC:DEPLOY:UPDATE \
            tactic_id 1 int1 150

        ted query {SELECT * FROM tactics}
    } -cleanup {
        cleanup
    } -result {
tactic_id tactic_type owner narrative                                                                   priority state  exec_ts exec_flag m n nlist   f g    text1 int1 
--------- ----------- ----- --------------------------------------------------------------------------- -------- ------ ------- --------- - - ------- - ---- ----- ---- 
1         DEPLOY      JOE   Deploy 150 of group BLUE's available personnel into neighborhoods NB1, NB2. 1        normal         0             NB1 NB2   BLUE       150  
    }


    test DEPLOY:UPDATE-2.2 {Effects} -setup {
        setup_update_defend
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:DEPLOY:UPDATE tactic_id 1 int1 150
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
        {::rdb <tactics> update 1}
    }


    test DEPLOY:UPDATE-3.1 {undo effects} -setup {
        setup_update_defend
        ted order TACTIC:DEPLOY:UPDATE tactic_id 1 int1 150
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





