# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-DEPLOY.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    TACTIC:DEPLOY:* Orders tests
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        ted create JOE BLUE ALQ NB1 NB2 SUNN SHIA KURD
        variable S1
        variable B1
        variable T1
        set S1 [strategy getname JOE]
        ted order STRATEGY:BLOCK:ADD agent JOE
        lassign [$S1 blocks] B1
        ted order BLOCK:TACTIC:ADD block_id [$B1 id] typename DEPLOY
        lassign [$B1 tactics] T1
    }

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # TACTIC:DEPLOY

    test TACTIC:DEPLOY-1.1 {required parameters} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY
    } -cleanup {
        cleanup
    } -result {
        tactic_id {required value}
    }

    test TACTIC:DEPLOY-1.2 {unknown tactic_id} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY tactic_id NONESUCH
    } -cleanup {
        cleanup
    } -match glob -result {
        tactic_id {invalid value "NONESUCH", should be one of: *}
    }

    test TACTIC:DEPLOY-1.3 {invalid g} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY tactic_id [$T1 id] g NONESUCH
    } -cleanup {
        cleanup
    } -result {
        g {invalid value "NONESUCH", should be one of: BLUE}
    }

    test TACTIC:DEPLOY-1.4 {invalid nlist} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY tactic_id [$T1 id] nlist NONESUCH
    } -cleanup {
        cleanup
    } -result {
        nlist {Invalid neighborhood, should be one of: NB1, NB2}
    }

    test TACTIC:DEPLOY-1.5 {invalid mode} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY tactic_id [$T1 id] mode NONESUCH
    } -cleanup {
        cleanup
    } -result {
        mode {invalid value "NONESUCH", should be one of: SOME, ALL}
    }

    test TACTIC:DEPLOY-1.6 {invalid personnel} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY tactic_id [$T1 id] personnel NONESUCH
    } -cleanup {
        cleanup
    } -result {
        personnel {invalid value "NONESUCH", expected integer}
    }

    test TACTIC:DEPLOY-1.7 {0 personnel} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY tactic_id [$T1 id] personnel 0
    } -cleanup {
        cleanup
    } -result {
        personnel {invalid value "0", expected integer no less than 1}
    }

    test TACTIC:DEPLOY-1.8 {invalid reinforce} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY tactic_id [$T1 id] reinforce NONESUCH
    } -cleanup {
        cleanup
    } -result {
        reinforce {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }

    test TACTIC:DEPLOY-1.9 {mode SOME, previous personnel is 0} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY tactic_id [$T1 id] mode SOME
    } -cleanup {
        cleanup
    } -result {
        personnel {Positive personnel required when mode is SOME}
    }

    test TACTIC:DEPLOY-2.1 {tactic updated} -setup {
        setup

        # set last_tick so that we can verify that it is cleared
        $T1 set last_tick 5
    } -body {
        ted order TACTIC:DEPLOY \
            tactic_id [$T1 id] \
            g         BLUE     \
            mode      SOME     \
            personnel 1000     \
            reinforce no       \
            nlist     NB1

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match glob -result {
        execstatus NONE
        g          BLUE
        id         *
        last_tick  {}
        mode       SOME
        nlist      NB1
        parent     ::bean::block*
        personnel  1000
        reinforce  0
        state      normal
    }

    test TACTIC:DEPLOY-2.2 {notifier event} -setup {
        setup
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        ted order TACTIC:DEPLOY tactic_id [$T1 id] personnel 100
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}

    test TACTIC:DEPLOY-2.3 {undo notifier event} -setup {
        setup
        ted order TACTIC:DEPLOY tactic_id [$T1 id] personnel 100
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}
 

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







