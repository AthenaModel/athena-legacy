# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-block.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    block(sim) tests.
#
#    This test suite tests the block(sim) mutators and queries
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    # setup ?-lock?
    #
    # With -lock, locks the scenario and creates a coffer for JOE.
    proc setup {{opt ""}} {
        variable B1
        variable BJOE
        variable coffer

        ted create JOE BOB NB1 NB2 BLUE BRIT SHIA SUNN KURD

        # NEXT, if desired, lock the scenario and create a coffer for JOE
        if {$opt eq "-lock"} {
            parm set econ.disable yes
            ted lock
            cash load
            personnel load
            set coffer [coffer new JOE]
        }

        # NEXT, add a block to the system's strategy
        ::strategy::SYSTEM addblock_
        set B1 [lindex [::strategy::SYSTEM blocks] 0]

        # NEXT, add a block to JOE's strategy
        ::strategy::JOE addblock_
        set BJOE [lindex [::strategy::JOE blocks] 0]

    }

    # Clean up after a test

    proc cleanup {} {
        strategyx locking 0
        ted cleanup
    }

    proc lastcond {block} {
        return [lindex [$block conditions] end]
    }

    proc lasttactic {block} {
        return [lindex [$block tactics] end]
    }



    #-------------------------------------------------------------------
    # constructor

    test constructor-1.1 {block is created} -setup {
        setup
    } -body {
        ted pdict [$B1 getdict]
    } -cleanup {
        cleanup
    } -match glob -result {
        cmode      ALL
        execstatus NONE
        state      normal
        tmode      ALWAYS
        conditions {}
        emode      ALL
        strategy   ::strategy::SYSTEM
        id         *
        once       0
        t1         {}
        onlock     0
        t2         {}
        intent     {}
        tactics    {}
        exectime   {}
    }

    #-------------------------------------------------------------------
    # agent

    test agent-1.1 {can retrieve owning agent} -setup {
        setup
    } -body {
        $B1 agent
    } -cleanup {
        cleanup
    } -result {SYSTEM}
    
    #-------------------------------------------------------------------
    # strategy

    test strategy-1.1 {can retrieve owning strategy} -setup {
        setup
    } -body {
        $B1 strategy
    } -cleanup {
        cleanup
    } -result {::strategy::SYSTEM}
        
    #-------------------------------------------------------------------
    # state

    test state-1.1 {can retrieve state} -setup {
        setup
    } -body {
        $B1 state
    } -cleanup {
        cleanup
    } -result {normal}

    #-------------------------------------------------------------------
    # view

    test view-1.1 {view, exectime not set} -setup {
        setup
    } -body {
        $B1 set exectime ""
        ted pdict [$B1 view]
    } -cleanup {
        cleanup
    } -result {
        cmode           ALL
        execstatus      NONE
        state           normal
        tmode           ALWAYS
        conditions      {}
        emode           ALL
        strategy        ::strategy::SYSTEM
        id              4
        once            0
        t1              {}
        onlock          0
        t2              {}
        intent          {}
        tactics         {}
        exectime        {}
        agent           SYSTEM
        pretty_once     No
        pretty_onlock   No
        timestring      {every week}
        pretty_exectime -
    }

    test view-1.2 {view, exectime set} -setup {
        setup
    } -body {
        $B1 set exectime 5
        ted pdict [$B1 view]
    } -cleanup {
        cleanup
    } -result {
        cmode           ALL
        execstatus      NONE
        state           normal
        tmode           ALWAYS
        conditions      {}
        emode           ALL
        strategy        ::strategy::SYSTEM
        id              4
        once            0
        t1              {}
        onlock          0
        t2              {}
        intent          {}
        tactics         {}
        exectime        5
        agent           SYSTEM
        pretty_once     No
        pretty_onlock   No
        timestring      {every week}
        pretty_exectime 2012W06
    }
    
    #-------------------------------------------------------------------
    # update_

    test update-1.1 {update_ clears parameters} -setup {
        setup
    } -body {
        $B1 set execstatus SUCCESS
        $B1 set exectime   1
        $B1 update_ {cmode} {cmode ANY}
        ted pdict [$B1 getdict]
    } -cleanup {
        cleanup
    } -match glob -result {
        cmode      ANY
        execstatus NONE
        state      normal
        tmode      ALWAYS
        conditions {}
        emode      ALL
        strategy   ::strategy::SYSTEM
        id         *
        once       0
        t1         {}
        onlock     0
        t2         {}
        intent     {}
        tactics    {}
        exectime   {}
    }

    #-------------------------------------------------------------------
    # addtactic_

    test addtactic-1.1 {adds a tactic with default settings} -setup {
        setup
    } -body {
        $B1 addtactic_ SIGEVENT
        $B1 tactics
    } -cleanup {
        cleanup
    } -match glob -result {::bean::SIGEVENT*}

    test addtactic-1.2 {can be undone} -setup {
        setup
    } -body {
        set undo [$B1 addtactic_ SIGEVENT]
        set tactics [$B1 tactics]
        namespace eval :: $undo

        set count 0
        foreach tactic $tactics {
            if {[info object isa object $tactic]} {
                incr count
            }
        }
        list [$B1 tactics] $count
    } -cleanup {
        cleanup
    } -result {{} 0}
  
    test addtactic-1.3 {clears exec data} -setup {
        setup
    } -body {
        $B1 set execstatus SUCCESS
        $B1 set exectime   1
        $B1 addtactic_ SIGEVENT
        list [$B1 get execstatus] [$B1 get exectime]
    } -cleanup {
        cleanup
    } -result {NONE {}}

    #-------------------------------------------------------------------
    # deletetactic_

    test deletetactic-1.1 {deletes a tactic} -setup {
        setup
        $B1 addtactic_ SIGEVENT
        $B1 addtactic_ SIGEVENT
    } -body {
        set T1 [lindex [$B1 tactics] 0]
        $B1 deletetactic_ [$T1 id]
        llength [$B1 tactics]
        # TBD: We really need two different tactic types here.
    } -cleanup {
        cleanup
    } -result {1}

    test deletetactic-1.2 {can be undone} -setup {
        setup
        $B1 addtactic_ SIGEVENT
        $B1 addtactic_ SIGEVENT
    } -body {
        set T1 [lindex [$B1 tactics] 0]
        set undo [$B1 deletetactic_ [$T1 id]]
        namespace eval :: $undo
        llength [$B1 tactics]
        # TBD: We really need two different tactic types here.
    } -cleanup {
        cleanup
    } -result {2}
  
    test deletetactic-1.3 {clears exec data} -setup {
        setup
        $B1 addtactic_ SIGEVENT
    } -body {
        $B1 set execstatus SUCCESS
        $B1 set exectime   1

        set T1 [lindex [$B1 tactics] 0]
        $B1 deletetactic_ [$T1 id]

        list [$B1 get execstatus] [$B1 get exectime]
    } -cleanup {
        cleanup
    } -result {NONE {}}

    #-------------------------------------------------------------------
    # movetactic_
    #
    # Since the actual rearrangement is handled by emoveitem, this code
    # will not test all possible moves.

    test movetactic_-1.1 {moves a tactic} -setup {
        setup
        $B1 addtactic_ SIGEVENT
        $B1 addtactic_ SIGEVENT
        lassign [$B1 tactics] T1 T2
    } -body {
        $B1 movetactic_ [$T2 id] top
        expr {[$B1 tactics] eq [list $T2 $T1]}
    } -cleanup {
        cleanup
    } -result {1}

    test movetactic_-2.1 {undo: tactics is restored} -setup {
        setup
        $B1 addtactic_ SIGEVENT
        $B1 addtactic_ SIGEVENT
        lassign [$B1 tactics] T1 T2
    } -body {
        set before [$B1 tactics]
        set undo [$B1 movetactic_ [$T2 id] top]
        namespace eval :: $undo
        set after [$B1 tactics]
        expr {$before eq $after}
    } -cleanup {
        cleanup
    } -result {1}
    
    #-------------------------------------------------------------------
    # addcondition_

    test addcondition-1.1 {adds a condition with default settings} -setup {
        setup
    } -body {
        $B1 addcondition_ MOOD
        $B1 conditions
    } -cleanup {
        cleanup
    } -match glob -result {::bean::MOOD*}

    test addcondition-1.2 {can be undone} -setup {
        setup
    } -body {
        set undo [$B1 addcondition_ MOOD]
        set conditions [$B1 conditions]
        namespace eval :: $undo

        set count 0
        foreach cond $conditions {
            if {[info object isa object $cond]} {
                incr count
            }
        }
        list [$B1 conditions] $count
    } -cleanup {
        cleanup
    } -result {{} 0}
  
    test addcondition-1.3 {clears exec data} -setup {
        setup
    } -body {
        $B1 set execstatus SUCCESS
        $B1 set exectime   1
        $B1 addcondition_ MOOD
        list [$B1 get execstatus] [$B1 get exectime]
    } -cleanup {
        cleanup
    } -result {NONE {}}

    #-------------------------------------------------------------------
    # deletecondition_

    test deletecondition-1.1 {deletes a condition} -setup {
        setup
        $B1 addcondition_ MOOD
        $B1 addcondition_ MOOD
    } -body {
        set C1 [lindex [$B1 conditions] 0]
        $B1 deletecondition_ [$C1 id]
        llength [$B1 conditions]
        # TBD: We really need two different condition types here.
    } -cleanup {
        cleanup
    } -result {1}

    test deletecondition-1.2 {can be undone} -setup {
        setup
        $B1 addcondition_ MOOD
        $B1 addcondition_ MOOD
    } -body {
        set C1 [lindex [$B1 conditions] 0]
        set undo [$B1 deletecondition_ [$C1 id]]
        namespace eval :: $undo
        llength [$B1 conditions]
        # TBD: We really need two different condition types here.
    } -cleanup {
        cleanup
    } -result {2}
  
    test deletecondition-1.3 {clears exec data} -setup {
        setup
        $B1 addcondition_ MOOD
    } -body {
        $B1 set execstatus SUCCESS
        $B1 set exectime   1

        set C1 [lindex [$B1 conditions] 0]
        $B1 deletecondition_ [$C1 id]

        list [$B1 get execstatus] [$B1 get exectime]
    } -cleanup {
        cleanup
    } -result {NONE {}}

    #-------------------------------------------------------------------
    # conditions

    test conditions-1.1 {returns conditions} -setup {
        setup
    } -body {
        $B1 set conditions {A B C D}
        $B1 conditions
    } -cleanup {
        cleanup
    } -result {A B C D}

    test conditions-1.2 {returns a specific condition} -setup {
        setup
    } -body {
        $B1 set conditions {A B C D}
        $B1 conditions end
    } -cleanup {
        cleanup
    } -result {D}


    #-------------------------------------------------------------------
    # condition_ids

    test condition_ids-1.1 {returns condition IDs} -setup {
        setup
    } -body {
        $B1 addcondition_ MOOD
        $B1 addcondition_ MOOD
        $B1 addcondition_ MOOD

        set a [conditionx ids]
        set b [$B1 condition_ids]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}

    #-------------------------------------------------------------------
    # tactics

    test tactics-1.1 {returns tactics} -setup {
        setup
    } -body {
        $B1 set tactics {A B C D}
        $B1 tactics
    } -cleanup {
        cleanup
    } -result {A B C D}

    test tactics-1.2 {returns a specific tactic} -setup {
        setup
    } -body {
        $B1 set tactics {A B C D}
        $B1 tactics end
    } -cleanup {
        cleanup
    } -result {D}


    #-------------------------------------------------------------------
    # tactic_ids

    test tactic_ids-1.1 {returns tactic IDs} -setup {
        setup
    } -body {
        $B1 addtactic_ SIGEVENT
        $B1 addtactic_ SIGEVENT
        $B1 addtactic_ SIGEVENT

        set a [tacticx ids]
        set b [$B1 tactic_ids]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {all tactics are valid} -setup {
        setup
        $B1 addtactic_ SIGEVENT
        $B1 addtactic_ SIGEVENT
    } -body {
        $B1 check
    } -cleanup {
        cleanup
    } -result {}


    test check-1.2 {some tactics are invalid} -setup {
        setup
        $B1 addtactic_ SIGEVENT
        $B1 addtactic_ SIGEVENT
        $B1 addtactic_ EXECUTIVE
        $B1 addtactic_ EXECUTIVE
    } -body {
        $B1 check
    } -cleanup {
        cleanup
    } -match glob -result {tactics {*EXECUTIVE* {command *} ::bean::EXECUTIVE* {command *}}}

    #-------------------------------------------------------------------
    # timestring

    test timestring-1.1 {tmode ALWAYS} -setup {
        setup
    } -body {
        $B1 set tmode ALWAYS
        $B1 timestring
    } -cleanup {
        cleanup
    } -result {every week}
    
    test timestring-1.2 {tmode AT} -setup {
        setup
    } -body {
        $B1 set tmode AT
        $B1 set t1    5
        $B1 timestring
    } -cleanup {
        cleanup
    } -result {at week 2012W06 (5)}

    test timestring-1.3 {tmode BEFORE} -setup {
        setup
    } -body {
        $B1 set tmode BEFORE
        $B1 set t1    7
        $B1 timestring
    } -cleanup {
        cleanup
    } -result {every week before 2012W08 (7)}

    test timestring-1.4 {tmode AFTER} -setup {
        setup
    } -body {
        $B1 set tmode AFTER
        $B1 set t1    10
        $B1 timestring
    } -cleanup {
        cleanup
    } -result {every week after 2012W11 (10)}

    test timestring-1.5 {tmode DURING} -setup {
        setup
    } -body {
        $B1 set tmode DURING
        $B1 set t1    5
        $B1 set t2    15
        $B1 timestring
    } -cleanup {
        cleanup
    } -result {every week from 2012W06 (5) to 2012W16 (15)}

    #-------------------------------------------------------------------
    # istime

    test istime-1.1 {tmode ALWAYS} -setup {
        setup
    } -body {
        $B1 set tmode ALWAYS
        $B1 istime
    } -cleanup {
        cleanup
    } -result {1}
    
    test istime-2.1 {tmode AT, success} -setup {
        setup
        simclock advance 10
    } -body {
        $B1 set tmode AT
        $B1 set t1    10
        $B1 istime
    } -cleanup {
        cleanup
    } -result {1}
    
    test istime-2.2 {tmode AT, failure} -setup {
        setup
        simclock advance 10
    } -body {
        $B1 set tmode AT
        $B1 set t1    12
        $B1 istime
    } -cleanup {
        cleanup
    } -result {0}

    test istime-3.1 {tmode BEFORE, t < t1} -setup {
        setup
        simclock advance 9
    } -body {
        $B1 set tmode BEFORE
        $B1 set t1    10
        $B1 istime
    } -cleanup {
        cleanup
    } -result {1}
    
    test istime-3.2 {tmode BEFORE, t = t1} -setup {
        setup
        simclock advance 10
    } -body {
        $B1 set tmode BEFORE
        $B1 set t1    10
        $B1 istime
    } -cleanup {
        cleanup
    } -result {0}
    
    test istime-3.3 {tmode BEFORE, t > t1} -setup {
        setup
        simclock advance 11
    } -body {
        $B1 set tmode BEFORE
        $B1 set t1    10
        $B1 istime
    } -cleanup {
        cleanup
    } -result {0}
    
    test istime-4.1 {tmode AFTER, t < t1} -setup {
        setup
        simclock advance 9
    } -body {
        $B1 set tmode AFTER
        $B1 set t1    10
        $B1 istime
    } -cleanup {
        cleanup
    } -result {0}
    
    test istime-4.2 {tmode AFTER, t = t1} -setup {
        setup
        simclock advance 10
    } -body {
        $B1 set tmode AFTER
        $B1 set t1    10

        $B1 istime
    } -cleanup {
        cleanup
    } -result {0}
    
    test istime-4.3 {tmode AFTER, t > t1} -setup {
        setup
        simclock advance 11
    } -body {
        $B1 set tmode AFTER
        $B1 set t1    10
        $B1 istime
    } -cleanup {
        cleanup
    } -result {1}

    test istime-5.1 {tmode DURING, t < t1} -setup {
        setup
        simclock advance 9
    } -body {
        $B1 set tmode DURING
        $B1 set t1    10
        $B1 set t2    15
        $B1 istime
    } -cleanup {
        cleanup
    } -result {0}
    
    test istime-5.2 {tmode DURING, t = t1} -setup {
        setup
        simclock advance 10
    } -body {
        $B1 set tmode DURING
        $B1 set t1    10
        $B1 set t2    15
        $B1 istime
    } -cleanup {
        cleanup
    } -result {1}
    
    test istime-5.3 {tmode DURING, t1 < t < t2} -setup {
        setup
        simclock advance 11
    } -body {
        $B1 set tmode DURING
        $B1 set t1    10
        $B1 set t2    15
        $B1 istime
    } -cleanup {
        cleanup
    } -result {1}
    
    test istime-5.4 {tmode DURING, t = t2} -setup {
        setup
        simclock advance 15
    } -body {
        $B1 set tmode DURING
        $B1 set t1    10
        $B1 set t2    15
        $B1 istime
    } -cleanup {
        cleanup
    } -result {1}
    
    test istime-5.5 {tmode DURING, t > t2} -setup {
        setup
        simclock advance 16
    } -body {
        $B1 set tmode DURING
        $B1 set t1    10
        $B1 set t2    15
        $B1 istime
    } -cleanup {
        cleanup
    } -result {0}
    


    #-------------------------------------------------------------------
    # execflag
    
    test execflag-1.1 {1 if execstatus is SUCCESS} -setup {
        setup
    } -body {
        $B1 set execstatus ""
        set a [$B1 execflag]

        $B1 set execstatus SUCCESS
        set b [$B1 execflag]

        list $a $b
    } -cleanup {
        cleanup
    } -result {0 1}

    #-------------------------------------------------------------------
    # execute

    proc addExecutive {} {
        variable BJOE

        $BJOE addtactic_ EXECUTIVE
        set t [lasttactic $BJOE]
        $t set command "# dummy"
        $t check

        return $t
    }

    proc addSigevent {} {
        variable BJOE

        $BJOE addtactic_ SIGEVENT
        set t [lasttactic $BJOE]
        $t set msg "howdy"

        return $t
    }

    proc addDeploy {personnel} {
        variable BJOE
        
        $BJOE addtactic_ DEPLOY
        set t [lasttactic $BJOE]
        $t set g BLUE
        $t set nlist NB1
        $t set personnel $personnel
        $t set mode ALL
        $t check

        return $t
    }

    proc addSpend {amount} {
        variable BJOE
        
        $BJOE addtactic_ SPEND
        set t [lasttactic $BJOE]
        $t set mode SOME
        $t set amount $amount
        $t check

        return $t
    }


    proc tstate {} {
        variable BJOE
        set result [list]
        foreach t [$BJOE tactics] {
            lappend result [$t id] [$t execstatus]
        }

        return $result
    }

    test execute-1.1 {SKIPPED if state is not normal} -setup {
        setup -lock
    } -body {
        addExecutive
        $BJOE set state disabled
        $BJOE execute $coffer
        $BJOE execstatus
    } -cleanup {
        cleanup
    } -result {SKIPPED}
 
    test execute-2.1 {SKIPPED on lock if onlock=0} -setup {
        setup -lock
        strategyx locking 1
    } -body {
        addExecutive
        $BJOE set onlock 0
        $BJOE execute $coffer
        $BJOE execstatus
    } -cleanup {
        cleanup
    } -result {SKIPPED}
    
    test execute-2.2 {SKIPPED on lock if no tactics} -setup {
        setup -lock
        strategyx locking 1
    } -body {
        $BJOE set onlock 1
        $BJOE execute $coffer
        $BJOE execstatus
    } -cleanup {
        cleanup
    } -result {SKIPPED}
    
    test execute-2.3 {SKIPPED on lock if no normal tactics} -setup {
        setup -lock
        strategyx locking 1
    } -body {
        $BJOE set onlock 1
        set t [addExecutive]
        $t set state disabled
        $BJOE execute $coffer
        list [$BJOE execstatus] [tstate]
    } -cleanup {
        cleanup
    } -result {SKIPPED {6 SKIPPED}}

    test execute-2.4 {SKIPPED on lock if no onlock tactics} -setup {
        setup -lock
        strategyx locking 1
    } -body {
        $BJOE set onlock 1
        set t [addSigevent]
        $BJOE execute $coffer
        list [$BJOE execstatus] [tstate]
    } -cleanup {
        cleanup
    } -result {SKIPPED {6 SKIPPED}}

    test execute-3.1 {SUCCESS on lock if normal with onlock tactic} -setup {
        setup -lock
        strategyx locking 1
    } -body {
        $BJOE set onlock 1
        addSigevent
        set t [addExecutive]
        $BJOE execute $coffer
        list [$BJOE execstatus] [tstate]
    } -cleanup {
        cleanup
    } -result {SUCCESS {6 SKIPPED 7 SUCCESS}}

     test execute-4.1 {FAIL_TIME if time constraint not met} -setup {
        setup -lock
    } -body {
        $BJOE set tmode AT
        $BJOE set t1    10
        $BJOE execute $coffer
        $BJOE execstatus
    } -cleanup {
        cleanup
    } -result {FAIL_TIME}

    test execute-5.1 {cmode ALL, not all are met} -setup {
        setup -lock
    } -body {
        $BJOE addcondition_ MOOD
        set C1 [lastcond $BJOE]

        $BJOE addcondition_ MOOD
        set C2 [lastcond $BJOE]

        $C1 update_ {g comp limit} {g SHIA comp GT limit -20}
        $C2 update_ {g comp limit} {g SUNN comp GT limit  20}

        $BJOE set cmode ALL
        $BJOE execute $coffer
        $BJOE execstatus
    } -cleanup {
        cleanup
    } -result {FAIL_CONDITIONS}
    
    test execute-5.2 {cmode ANY, none are met} -setup {
        setup -lock
    } -body {
        $BJOE addcondition_ MOOD
        set C1 [lastcond $BJOE]

        $BJOE addcondition_ MOOD
        set C2 [lastcond $BJOE]

        $C1 update_ {g comp limit} {g SHIA comp GT limit 20}
        $C2 update_ {g comp limit} {g SUNN comp GT limit 20}


        $BJOE set cmode ANY
        $BJOE execute $coffer
        $BJOE execstatus
    } -cleanup {
        cleanup
    } -result {FAIL_CONDITIONS}
    
    test execute-6.1 {cmode ALL, all are met} -setup {
        setup -lock
    } -body {
        addSigevent ;# So the block isn't empty
        $BJOE addcondition_ MOOD
        set C1 [lastcond $BJOE]

        $BJOE addcondition_ MOOD
        set C2 [lastcond $BJOE]

        $C1 update_ {g comp limit} {g SHIA comp GT limit -20}
        $C2 update_ {g comp limit} {g SUNN comp GT limit -20}

        $BJOE set cmode ALL
        $BJOE execute $coffer
        $BJOE execstatus
    } -cleanup {
        cleanup
    } -result {SUCCESS}

    test execute-6.2 {cmode ANY, some are met} -setup {
        setup -lock
    } -body {
        addSigevent ;# So the block isn't empty
        $BJOE addcondition_ MOOD
        set C1 [lastcond $BJOE]

        $BJOE addcondition_ MOOD
        set C2 [lastcond $BJOE]

        $C1 update_ {g comp limit} {g SHIA comp GT limit -20}
        $C2 update_ {g comp limit} {g SUNN comp GT limit  20}

        $BJOE set cmode ANY
        $BJOE execute $coffer
        $BJOE execstatus
    } -cleanup {
        cleanup
    } -result {SUCCESS}

    test execute-6.3 {disabled conditions are ignored} -setup {
        setup -lock
    } -body {
        addSigevent ;# So the block isn't empty
        $BJOE addcondition_ MOOD
        set C1 [lastcond $BJOE]

        $BJOE addcondition_ MOOD
        set C2 [lastcond $BJOE]

        $C1 update_ {g comp limit} {g SHIA comp GT limit  20}
        $C2 update_ {g comp limit} {g SUNN comp GT limit -20}

        $C1 set state disabled
        $BJOE set cmode ALL
        $BJOE execute $coffer
        list [$BJOE execstatus] [tstate]
    } -cleanup {
        cleanup
    } -result {SUCCESS {6 SUCCESS}}
    
    test execute-6.4 {invalid conditions are ignored} -setup {
        setup -lock
    } -body {
        addSigevent ;# So the block isn't empty
        $BJOE addcondition_ MOOD
        set C1 [lastcond $BJOE]

        $BJOE addcondition_ MOOD
        set C2 [lastcond $BJOE]

        $C2 update_ {g comp limit} {g SUNN comp GT limit -20}

        $C1 set state invalid
        $BJOE set cmode ALL
        $BJOE execute $coffer
        list [$BJOE execstatus] [tstate]
    } -cleanup {
        cleanup
    } -result {SUCCESS {6 SUCCESS}}
    
    test execute-7.1 {insufficient resources for 1, emode=ALL} -setup {
        setup -lock
    } -body {
        addSigevent 
        addDeploy 30000  ;# Shouldn't be any troops mobilized.

        $BJOE set emode ALL
        $BJOE execute $coffer
        list [$BJOE execstatus] [tstate]
    } -cleanup {
        cleanup
    } -result {FAIL_RESOURCES {6 SKIPPED 7 FAIL_RESOURCES}}
    
    test execute-7.2 {insufficient resources for 1, emode=SOME} -setup {
        setup -lock
    } -body {
        addSigevent 
        addDeploy 30000  ;# Shouldn't be any troops mobilized.

        $BJOE set emode SOME
        $BJOE execute $coffer
        list [$BJOE execstatus] [tstate]
    } -cleanup {
        cleanup
    } -result {SUCCESS {6 SUCCESS 7 FAIL_RESOURCES}}

    test execute-8.1 {obligates on lock} -setup {
        setup -lock
        addSpend 1000.0
        $coffer spend [$coffer cash]
        $coffer withdraw 2000
        $BJOE set onlock 1
        strategyx locking 1
    } -body {

        set a [$coffer cash]
        $BJOE execute $coffer
        set b [$coffer cash]
        list $a $b
    } -cleanup {
        cleanup
    } -result {2000.0 1000.0}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







