# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-FUND.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) TACTIC:FUND:* order tests.
#
#    This test suite tests the FUND tactic's orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE BOB
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Standard items

    set T1 {
        owner       JOE
        priority    bottom
        a           BOB
        x1          2000.0
        on_lock     NO
    }

    #-------------------------------------------------------------------
    # TACTIC:FUND:CREATE

    test FUND:CREATE-1.1 {required parms} -body {
        ted order -reject TACTIC:FUND:CREATE {}
    } -result {
        owner {required value}
        a {required value}
        x1 {required value}
        on_lock {required value}
    }

    test FUND:CREATE-1.2 {owner is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUND:CREATE \
            [dict merge $T1 [list owner NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        owner {Invalid actor, should be one of: JOE, BOB}
    }

    test FUND:CREATE-1.3 {a is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUND:CREATE \
            [dict merge $T1 [list a NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        a {Invalid actor, should be one of: JOE, BOB}
    }

    test FUND:CREATE-1.4 {x1 is non-numeric} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUND:CREATE \
            [dict merge $T1 [list x1 NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        x1 {invalid money value "NONESUCH", expected positive numeric value with optional K, M, or B suffix}
    }

    test FUND:CREATE-1.5 {x1 is negative} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUND:CREATE \
            [dict merge $T1 [list x1 -1]]
    } -cleanup {
        cleanup
    } -result {
        x1 {invalid money value "-1", expected positive numeric value with optional K, M, or B suffix}
    }

    test FUND:CREATE-1.6 {priority is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUND:CREATE [dict merge $T1 {
            priority NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        priority {invalid value "nonesuch", should be one of: top, bottom}
    }

    test FUND:CREATE-2.1 {tactic is created} -setup {
        setup
    } -body {
        ted order TACTIC:FUND:CREATE $T1

        ted querylist {SELECT * FROM tactics_FUND}
    } -cleanup {
        cleanup
    } -result {
tactic_id    1
tactic_type  FUND
owner        JOE
narrative    Fund actor BOB with $2,000.00/week.
priority     1
state        normal
exec_ts      
exec_flag    0
a            BOB
x1           2000.0
on_lock      NO
    }


    test FUND:CREATE-2.2 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:FUND:CREATE $T1
        ted notifier received

        # NOTE: Two updates, because of priority setting.
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
        {::rdb <tactics> update 1}
    }


    test FUND:CREATE-3.1 {undo effects} -setup {
        setup
        ted order TACTIC:FUND:CREATE $T1
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> delete 1}
    }

    #-------------------------------------------------------------------
    # TACTIC:FUND:UPDATE

    proc setup_update_deploy {} {
         variable T1
        setup
        ted order TACTIC:FUND:CREATE $T1
    }

    test FUND:UPDATE-1.1 {required parms} -body {
        ted order -reject TACTIC:FUND:UPDATE {}
    } -result {
        tactic_id {required value}
    }

    
    test FUND:UPDATE-1.2 {tactic_id is unknown} -setup {
        setup_update_deploy
    } -body {
        ted order -reject TACTIC:FUND:UPDATE \
            tactic_id NONESUCH
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Invalid tactic ID: "NONESUCH"}
    }

    test FUND:UPDATE-1.3 {a is unknown} -setup {
        setup_update_deploy
    } -body {
        ted order -reject TACTIC:FUND:UPDATE tactic_id 1 a NONESUCH
    } -cleanup {
        cleanup
    } -result {
        a {Invalid actor, should be one of: JOE, BOB}
    }

    test FUND:UPDATE-1.4 {x1 is non-integer} -setup {
        setup_update_deploy
    } -body {
        ted order -reject TACTIC:FUND:UPDATE tactic_id 1 x1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        x1 {invalid money value "NONESUCH", expected positive numeric value with optional K, M, or B suffix}
    }

    test FUND:UPDATE-1.5 {x1 is negative} -setup {
        setup_update_deploy
    } -body {
        ted order -reject TACTIC:FUND:UPDATE tactic_id 1 x1 -1
    } -cleanup {
        cleanup
    } -result {
        x1 {invalid money value "-1", expected positive numeric value with optional K, M, or B suffix}
    }

    test FUND:UPDATE-1.6 {wrong flavor of tactic} -setup {
        setup_update_deploy
        rdb eval {UPDATE tactics SET tactic_type='BOGUS'}
    } -body {
        ted order -reject TACTIC:FUND:UPDATE tactic_id 1
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Tactic 1 is not a FUND tactic}
    }

    test FUND:UPDATE-2.1 {tactic is updated} -setup {
        setup_update_deploy
    } -body {
        ted order TACTIC:FUND:UPDATE \
            tactic_id 1 x1 5000.0 a JOE

        ted querylist {SELECT * FROM tactics_FUND}
    } -cleanup {
        cleanup
    } -result {
tactic_id    1
tactic_type  FUND
owner        JOE
narrative    Fund actor JOE with $5,000.00/week.
priority     1
state        normal
exec_ts      
exec_flag    0
a            JOE
x1           5000.0
on_lock      NO
    }

    test FUND:UPDATE-2.2 {Effects} -setup {
        setup
        ted order TACTIC:FUND:CREATE $T1
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:FUND:UPDATE tactic_id 1 x1 5000.0
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
        {::rdb <tactics> update 1}
    }


    test FUND:UPDATE-3.1 {undo effects} -setup {
        setup_update_deploy
        ted order TACTIC:FUND:UPDATE tactic_id 1 x1 5000.0
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





