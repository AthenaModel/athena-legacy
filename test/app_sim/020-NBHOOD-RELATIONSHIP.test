# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-NBHOOD-RELATIONSHIP.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) NBHOOD:RELATIONSHIP:* order tests.
#
#    This test suite tests the neighborhood relationship orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    proc setup {} {
        ted create NB1 NB2
        nbrel mutate reconcile
    }


    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }


    #-------------------------------------------------------------------
    # NBHOOD:RELATIONSHIP:UPDATE

    test UPDATE-1.1 {required parms} -body {
        ted order -reject NBHOOD:RELATIONSHIP:UPDATE {}
    } -result {
        m {required value}
        n {required value}
    }
    

    test UPDATE-1.2 {invalid m, n} -setup {
        setup
    } -body {
        ted order -reject NBHOOD:RELATIONSHIP:UPDATE \
            m NONESUCH n NONESUCH
    } -cleanup {
        cleanup
    } -result {
        m {Invalid neighborhood, should be one of: NB1, NB2}
        n {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test UPDATE-1.3 {invalid proximity: unknown symbol} -setup {
        setup
    } -body {
        ted order -reject NBHOOD:RELATIONSHIP:UPDATE \
            m NB1 n NB2 proximity NONESUCH
    } -cleanup {
        cleanup
    } -result {
        proximity {invalid value "NONESUCH", should be one of: HERE, NEAR, FAR, REMOTE}
    }


    test UPDATE-1.4 {invalid proximity: HERE when m != n} -setup {
        setup
    } -body {
        ted order -reject NBHOOD:RELATIONSHIP:UPDATE \
            m NB1 n NB2 proximity HERE
    } -cleanup {
        cleanup
    } -result {
        proximity {Proximity of NB1 to NB2 cannot be HERE}
    }


    test UPDATE-1.5 {invalid proximity: not HERE when m = n} -setup {
        setup
    } -body {
        ted order -reject NBHOOD:RELATIONSHIP:UPDATE \
            m NB1 n NB1 proximity FAR
    } -cleanup {
        cleanup
    } -result {
        proximity {Proximity of NB1 to itself must be HERE}
    }


    test UPDATE-1.6 {invalid effects_delay: not a number} -setup {
        setup
    } -body {
        ted order -reject NBHOOD:RELATIONSHIP:UPDATE \
            m NB1 n NB1 effects_delay NONESUCH
    } -cleanup {
        cleanup
    } -result {
        effects_delay {invalid value "NONESUCH", should be a real number no less than 0.0}
    }


    test UPDATE-1.7 {invalid effects_delay: negative} -setup {
        setup
    } -body {
        ted order -reject NBHOOD:RELATIONSHIP:UPDATE \
            m NB1 n NB1 effects_delay -0.1
    } -cleanup {
        cleanup
    } -result {
        effects_delay {invalid value "-0.1", should be a real number no less than 0.0}
    }


    test UPDATE-1.8 {effects_delay != 0, m == n} -setup {
        setup
    } -body {
        ted order -reject NBHOOD:RELATIONSHIP:UPDATE \
            m NB1 n NB1 effects_delay 0.1
    } -cleanup {
        cleanup
    } -result {
        effects_delay {Effects Delay cannot be non-zero for these neighborhoods.}
    }


    test UPDATE-2.1 {values are updated} -setup {
        setup
    } -body {
        ted order NBHOOD:RELATIONSHIP:UPDATE {
            m             NB1
            n             NB2
            proximity     NEAR
            effects_delay 1.0
        }

        ted query {SELECT * FROM nbrel_mn}
    } -cleanup {
        cleanup
    } -result {
m   n   proximity effects_delay 
--- --- --------- ------------- 
NB1 NB1 HERE      0.0           
NB1 NB2 NEAR      1.0           
NB2 NB1 REMOTE    0.0           
NB2 NB2 HERE      0.0           
    }


    test UPDATE-2.2 {<Entity> update} -setup {
        setup
    } -body {
        ted notifier bind ::nbrel <Entity>
        ted order NBHOOD:RELATIONSHIP:UPDATE m NB1 n NB2
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::nbrel <Entity> update {NB1 NB2}}
    }


    test UPDATE-3.1 {undo undoes the change} -setup {
        setup

        ted order NBHOOD:RELATIONSHIP:UPDATE {
            m             NB1
            n             NB2
            proximity     NEAR
            effects_delay 1.0
        }
    } -body {
        ted notifier bind ::nbrel <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::nbrel <Entity> update {NB1 NB2}}
    }

    #-------------------------------------------------------------------
    # NBHOOD:RELATIONSHIP:UPDATE:MULTI

    test UPDATE:MULTI-1.1 {required parms} -setup {
        setup
    } -body {
        ted order -reject NBHOOD:RELATIONSHIP:UPDATE:MULTI {}
    } -cleanup {
        cleanup
    } -result {
        ids {required value}
    }
    

    test UPDATE:MULTI-1.2 {invalid m in ids} -setup {
        setup
    } -body {
        ted order -reject NBHOOD:RELATIONSHIP:UPDATE:MULTI \
            ids {{NONESUCH NONESUCH}}
    } -cleanup {
        cleanup
    } -result {
        ids {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test UPDATE:MULTI-1.3 {invalid n in ids} -setup {
        setup
    } -body {
        ted order -reject NBHOOD:RELATIONSHIP:UPDATE:MULTI \
            ids {{NB1 NONESUCH}}
    } -cleanup {
        cleanup
    } -result {
        ids {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test UPDATE:MULTI-1.4 {invalid proximity: unknown symbol} -setup {
        setup
    } -body {
        ted order -reject NBHOOD:RELATIONSHIP:UPDATE:MULTI \
            ids {{NB1 NB2}} proximity NONESUCH
    } -cleanup {
        cleanup
    } -result {
        proximity {invalid value "NONESUCH", should be one of: HERE, NEAR, FAR, REMOTE}
    }


    test UPDATE:MULTI-1.5 {invalid proximity: HERE when m != n} -setup {
        setup
    } -body {
        ted order -reject NBHOOD:RELATIONSHIP:UPDATE:MULTI \
            ids {{NB1 NB2}} proximity HERE
    } -cleanup {
        cleanup
    } -result {
        proximity {Proximity cannot be HERE for these neighborhoods.}
    }


    test UPDATE:MULTI-1.6 {invalid proximity: not HERE when m = n} -setup {
        setup
    } -body {
        ted order -reject NBHOOD:RELATIONSHIP:UPDATE:MULTI \
            ids {{NB1 NB1}} proximity FAR
    } -cleanup {
        cleanup
    } -result {
        proximity {Proximity cannot be HERE for these neighborhoods.}
    }


    test UPDATE:MULTI-1.7 {invalid effects_delay: not a number} -setup {
        setup
    } -body {
        ted order -reject NBHOOD:RELATIONSHIP:UPDATE:MULTI \
            ids {{NB1 NB2}} effects_delay NONESUCH
    } -cleanup {
        cleanup
    } -result {
        effects_delay {invalid value "NONESUCH", should be a real number no less than 0.0}
    }


    test UPDATE:MULTI-1.8 {invalid effects_delay: negative} -setup {
        setup
    } -body {
        ted order -reject NBHOOD:RELATIONSHIP:UPDATE:MULTI \
            ids {{NB1 NB2}} effects_delay -0.1
    } -cleanup {
        cleanup
    } -result {
        effects_delay {invalid value "-0.1", should be a real number no less than 0.0}
    }


    test UPDATE:MULTI-1.9 {effects_delay != 0.0 when m=n} -setup {
        setup
    } -body {
        ted order -reject NBHOOD:RELATIONSHIP:UPDATE:MULTI \
            ids {{NB1 NB2} {NB1 NB1}} effects_delay 0.1
    } -cleanup {
        cleanup
    } -result {
        effects_delay {Effects Delay cannot be non-zero for these neighborhoods.}
    }

    test UPDATE:MULTI-2.1 {one nbrel of several is updated} -setup {
        setup
    } -body {
        ted notifier bind ::nbrel <Entity>

        ted order NBHOOD:RELATIONSHIP:UPDATE:MULTI {
            ids           {{NB1 NB2}}
            proximity     NEAR
            effects_delay 1.0
        }

        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::nbrel <Entity> update {NB1 NB2}}
    }


    test UPDATE:MULTI-2.2 {several are updated} -setup {
        setup
    } -body {
        ted notifier bind ::nbrel <Entity>

        ted order NBHOOD:RELATIONSHIP:UPDATE:MULTI {
            ids           {{NB1 NB2} {NB2 NB1}}
            proximity     NEAR
            effects_delay 1.0
        }

        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::nbrel <Entity> update {NB1 NB2}}
        {::nbrel <Entity> update {NB2 NB1}}
    }


    test UPDATE:MULTI-3.1 {undo undoes the change} -setup {
        setup

        ted order NBHOOD:RELATIONSHIP:UPDATE:MULTI {
            ids           {{NB1 NB2} {NB2 NB1}}
            proximity     NEAR
            effects_delay 1.0
        }
    } -body {
        ted notifier bind ::nbrel <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::nbrel <Entity> update {NB1 NB2}}
        {::nbrel <Entity> update {NB2 NB1}}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::






