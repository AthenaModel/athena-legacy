# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-SITUATION-ENVIRONMENTAL.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) ABSIT:* order tests.
#
#    This test suite tests the absit-related orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Standard units
    set s1 {
        location  B00B00
        stype     BADWATER
        coverage  1.0
        inception 1
        resolver  NONE
    }

    set s2 {
        location  B00B00
        stype COMMOUT
        coverage  0.5
        inception 0
        resolver  BLUE
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    #-------------------------------------------------------------------
    # ABSIT:CREATE

    test CREATE-1.1 {required parms} -body {
        ted order -reject ABSIT:CREATE {}
    } -result {
        location {required value}
        stype {required value}
    }

    
    test CREATE-1.2 {location is not a mapref} -body {
        ted create BLUE
        ted order -reject ABSIT:CREATE \
            {*}$s1 location NONESUCH
    } -cleanup {
        cleanup
    } -result {
        location {not a map reference string}
    }


    test CREATE-1.3 {location not in nbhood} -body {
        ted create BLUE
        ted order -reject ABSIT:CREATE \
            $s1
    } -cleanup {
        cleanup
    } -result {
        location {Should be within a neighborhood}
    }


    test CREATE-1.4 {invalid stype} -body {
        ted create BLUE
        ted order -reject ABSIT:CREATE \
            {*}$s1 stype NONESUCH
    } -cleanup {
        cleanup
    } -result {
        stype {invalid value "NONESUCH", should be one of: BADFOOD, BADWATER, COMMOUT, CULSITE, DISASTER, DISEASE, EPIDEMIC, FOODSHRT, FUELSHRT, GARBAGE, INDSPILL, MINEFIELD, NOWATER, ORDNANCE, PIPELINE, POWEROUT, REFINERY, RELSITE, SEWAGE}
    }


    test CREATE-1.5 {duplicate stype} -setup {
        ted create BLUE
        ted create NB1
        ted order ABSIT:CREATE $s1
    } -body {
        ted order -reject ABSIT:CREATE $s1
    } -cleanup {
        cleanup
    } -result {
        stype {An absit of this type already exists in this neighborhood.}
    }


    test CREATE-1.6 {invalid coverage} -body {
        ted create BLUE
        ted order -reject ABSIT:CREATE \
            {*}$s1 coverage 2.0
    } -cleanup {
        cleanup
    } -result {
        coverage {invalid value "2.0", should be a real number in range 0.0, 1.0}
    }


    test CREATE-1.7 {coverage can't be 0.0} -setup {
        ted create NB1 BLUE
    } -body {
        ted order -reject ABSIT:CREATE \
            {*}$s1 coverage 0.0
    } -cleanup {
        cleanup
    } -result {
        coverage {Coverage must be greater than 0.}
    }


    test CREATE-1.8 {invalid inception} -body {
        ted create BLUE
        ted order -reject ABSIT:CREATE \
            {*}$s1 inception NONESUCH
    } -cleanup {
        cleanup
    } -result {
        inception {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }


    test CREATE-1.9 {invalid resolver} -body {
        ted create BLUE
        ted order -reject ABSIT:CREATE \
            {*}$s1 resolver NONESUCH
    } -cleanup {
        cleanup
    } -result {
        resolver {Invalid group "NONESUCH", should be one of: NONE, BLUE}
    }


    test CREATE-1.10 {invalid rduration} -body {
        ted create BLUE
        ted order -reject ABSIT:CREATE \
            {*}$s1 rduration NONESUCH
    } -cleanup {
        cleanup
    } -result {
        rduration {invalid value "NONESUCH", expected integer}
    }



    test CREATE-2.1 {absit is created} -setup {
        ted create NB1 BLUE
    } -body {
        ted order ABSIT:CREATE $s1

        ted querylist {SELECT * FROM absits}
    } -cleanup {
        cleanup
    } -result {
s          1
stype      BADWATER
location   100 100
coverage   1.0
inception  1
resolver   NONE
rduration  1
n          NB1
state      INITIAL
ts         0
tr         1
    }


    test CREATE-2.2 {Effects} -setup {
        ted create NB1 BLUE
    } -body {
        ted notifier bind ::rdb <absits>
        ted order ABSIT:CREATE $s1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <absits> update 1}
    }


    test CREATE-3.1 {undo effects} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
    } -body {
        ted notifier bind ::rdb <absits>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <absits> delete 1}
    }


    #-------------------------------------------------------------------
    # ABSIT:DELETE

    test DELETE-1.1 {required parms} -body {
        ted order -reject ABSIT:DELETE {}
    } -result {
        s {required value}
    }

    
    test DELETE-1.2 {unknown s} -body {
        ted order -reject ABSIT:DELETE s NONESUCH
    } -result {
        s {not a "live" situation: "NONESUCH"}
    }


    test DELETE-1.3 {s not in initial state} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
        rdb eval {UPDATE absits SET state='ONGOING' WHERE s=1}
    } -body {
        ted order -reject ABSIT:DELETE s 1
    } -cleanup {
        cleanup
    } -result {
        s {operation is invalid; time has passed.}
    }


    test DELETE-2.1 {Effects} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
    } -body {
        ted notifier bind ::rdb <absits>
        ted order ABSIT:DELETE s 1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <absits> delete 1}
    }


    test DELETE-3.1 {Undo effects} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
        ted order ABSIT:DELETE s 1
    } -body {
        ted notifier bind ::rdb <absits>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <absits> update 1}
    }


    #-------------------------------------------------------------------
    # ABSIT:UPDATE

    # 1.*: parameter type validation
    # 2.*: correct operation
    # 3.*: undo

    test UPDATE-1.1 {required parms} -body {
        ted order -reject ABSIT:UPDATE {}
    } -result {
        s {required value}
    }
    
    test UPDATE-1.2 {location is not a mapref} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
    } -body {
        ted order -reject ABSIT:UPDATE s 1 location NONESUCH
    } -cleanup {
        cleanup
    } -result {
        location {not a map reference string}
    }


    test UPDATE-1.3 {invalid stype} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
    } -body {
        ted order -reject ABSIT:UPDATE s 1 stype NONESUCH
    } -cleanup {
        cleanup
    } -result {
        stype {invalid value "NONESUCH", should be one of: BADFOOD, BADWATER, COMMOUT, CULSITE, DISASTER, DISEASE, EPIDEMIC, FOODSHRT, FUELSHRT, GARBAGE, INDSPILL, MINEFIELD, NOWATER, ORDNANCE, PIPELINE, POWEROUT, REFINERY, RELSITE, SEWAGE}
    }


    test UPDATE-1.4 {invalid coverage} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
    } -body {
        ted order -reject ABSIT:UPDATE s 1 coverage NONESUCH
    } -cleanup {
        cleanup
    } -result {
        coverage {invalid value "NONESUCH", should be a real number in range 0.0, 1.0}
    }


    test UPDATE-1.5 {invalid inception} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
    } -body {
        ted order -reject ABSIT:UPDATE s 1 inception NONESUCH
    } -cleanup {
        cleanup
    } -result {
        inception {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }


    test UPDATE-1.6 {invalid resolver} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
    } -body {
        ted order -reject ABSIT:UPDATE s 1 resolver NONESUCH
    } -cleanup {
        cleanup
    } -result {
        resolver {Invalid group "NONESUCH", should be one of: NONE, BLUE}
    }


    test UPDATE-1.7 {invalid rduration} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
    } -body {
        ted order -reject ABSIT:UPDATE s 1 rduration NONESUCH
    } -cleanup {
        cleanup
    } -result {
        rduration {invalid value "NONESUCH", expected integer}
    }


    test UPDATE-1.8 {location is not in a nbhood} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
    } -body {
        ted order -reject ABSIT:UPDATE s 1 location A00A00
    } -cleanup {
        cleanup
    } -result {
        location {Should be within a neighborhood}
    }


    test UPDATE-1.9 {Not INITIAL state} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
        rdb eval {UPDATE absits SET state='ONGOING' WHERE s=1}
    } -body {
        ted order -reject ABSIT:UPDATE s 1 \
            stype     COMMOUT \
            location  A00A00  \
            coverage  0.5     \
            inception NO      \
            resolver  NONE
    } -cleanup {
        cleanup
    } -result {
        s {operation is invalid; time has passed.}
    }


    test UPDATE-2.1 {absit is updated} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
    } -body {
        ted order ABSIT:UPDATE {
            s         1 
            location  B01B01
            stype     COMMOUT
            inception NO
            resolver  BLUE
            rduration 10
        }

        ted querylist {SELECT * FROM absits}
    } -cleanup {
        cleanup
    } -result {
s          1
stype      COMMOUT
location   101 101
coverage   1.0
inception  0
resolver   BLUE
rduration  10
n          NB1
state      INITIAL
ts         0
tr         10
    }


    test UPDATE-2.2 {table monitor event} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
    } -body {
        ted notifier bind ::rdb <absits>
        ted order ABSIT:UPDATE s 1 stype COMMOUT
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <absits> update 1}
    }


    test UPDATE-3.1 {undo undoes the change} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
        ted order ABSIT:UPDATE {
            s         1 
            location  B01B01
            stype     COMMOUT
            inception NO
        }
    } -body {
        ted notifier bind ::rdb <absits>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <absits> update 1}
    }


    #-------------------------------------------------------------------
    # ABSIT:MOVE

    # 1.*: parameter type validation
    # 2.*: correct operation
    # 3.*: undo

    test MOVE-1.1 {required parms} -body {
        ted order -reject ABSIT:MOVE {}
    } -result {
        s {required value}
    }
    
    test MOVE-1.2 {location is not a mapref} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
    } -body {
        ted order -reject ABSIT:MOVE s 1 location NONESUCH
    } -cleanup {
        cleanup
    } -result {
        location {not a map reference string}
    }

    test MOVE-1.3 {INITIAL state; location is not in a nbhood} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
    } -body {
        ted order -reject ABSIT:MOVE s 1 location A00A00
    } -cleanup {
        cleanup
    } -result {
        location {Should be within a neighborhood}
    }


    test MOVE-1.4 {Not INITIAL sate; location is out of neighborhood} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
        rdb eval {UPDATE absits SET state='ONGOING' WHERE s=1}
    } -body {
        ted order -reject ABSIT:MOVE s 1 location A00A00
    } -cleanup {
        cleanup
    } -result {
        location {Cannot remove situation from its neighborhood}
    }


    test MOVE-2.1 {absit is updated} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
    } -body {
        ted order ABSIT:MOVE {
            s         1 
            location  B01B01
        }

        ted query {SELECT s, location FROM absits}
    } -cleanup {
        cleanup
    } -result {
s location 
- -------- 
1 101 101  
    }


    test MOVE-2.2 {table monitor event} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
    } -body {
        ted notifier bind ::rdb <absits>
        ted order ABSIT:MOVE s 1 location B01B01
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <absits> update 1}
    }


    test MOVE-3.1 {undo undoes the change} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
        ted order ABSIT:MOVE {
            s         1 
            location  B01B01
        }
    } -body {
        ted notifier bind ::rdb <absits>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <absits> update 1}
    }


    #-------------------------------------------------------------------
    # ABSIT:RESOLVE

    # 1.*: parameter type validation
    # 2.*: correct operation
    # 3.*: undo

    test RESOLVE-1.1 {required parms} -body {
        ted order -reject ABSIT:RESOLVE {}
    } -result {
        s {required value}
    }
    
    test RESOLVE-1.2 {s is not a live situation} -body {
        ted order -reject ABSIT:RESOLVE s 1
    } -cleanup {
        cleanup
    } -result {
        s {not a "live" situation: "1".}
    }


    test RESOLVE-1.3 {invalid resolver} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
    } -body {
        ted order -reject ABSIT:RESOLVE s 1 resolver NONESUCH
    } -cleanup {
        cleanup
    } -result {
        resolver {Invalid group "NONESUCH", should be one of: NONE, BLUE}
    }


    test RESOLVE-2.1 {absit is resolved} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
    } -body {
        ted order ABSIT:RESOLVE s 1 resolver BLUE

        ted querylist {SELECT * FROM absits}
    } -cleanup {
        cleanup
    } -result {
s          1
stype      BADWATER
location   100 100
coverage   1.0
inception  1
resolver   BLUE
rduration  0
n          NB1
state      RESOLVED
ts         0
tr         0
    }


    test RESOLVE-2.2 {absit is resolved, resolver is omitted} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
    } -body {
        ted order ABSIT:RESOLVE s 1

        ted querylist {SELECT * FROM absits}
    } -cleanup {
        cleanup
    } -result {
s          1
stype      BADWATER
location   100 100
coverage   1.0
inception  1
resolver   NONE
rduration  0
n          NB1
state      RESOLVED
ts         0
tr         0
    }


    test RESOLVE-2.3 {table monitor event} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
    } -body {
        ted notifier bind ::rdb <absits>
        ted order ABSIT:RESOLVE s 1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <absits> update 1}
    }


    test RESOLVE-3.1 {undo undoes the change} -setup {
        ted create NB1 BLUE
        ted order ABSIT:CREATE $s1
        ted order ABSIT:RESOLVE s 1 resolver BLUE
    } -body {
        ted notifier bind ::rdb <absits>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <absits> update 1}
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::










