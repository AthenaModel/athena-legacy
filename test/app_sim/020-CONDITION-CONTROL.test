# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-CONDITION-CONTROL.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) CONDITION:CONTROL:* order tests.
#
#    This test suite tests the CONDITION:CONTROL:* orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE BOB NB1 NB2 NB3
        ted order TACTIC:DEPOSIT:CREATE owner JOE amount 10
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Standard items

    set C1 {
        cc_id          1
        a              JOE
        list1          NB1
    }

    set C2 {
        cc_id          1
        a              JOE
        list1          {NB1 NB2 NB3}
    }

    #-------------------------------------------------------------------
    # CONDITION:CONTROL:CREATE

    test CONTROL:CREATE-1.1 {required parms} -body {
        ted order -reject CONDITION:CONTROL:CREATE {}
    } -result {
        cc_id {required value}
        a {required value}
        list1 {required value}
    }

    
    test CONTROL:CREATE-1.2 {tactic is unknown} -setup {
        setup
    } -body {
        ted order -reject CONDITION:CONTROL:CREATE \
            [dict merge $C1 [list cc_id NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        cc_id {Invalid goal or tactic ID: "NONESUCH"}
    }

    test CONTROL:CREATE-1.3 {actor is unknown} -setup {
        setup
    } -body {
        ted order -reject CONDITION:CONTROL:CREATE \
            [dict merge $C1 [list a NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        a {Invalid actor, should be one of: BOB, JOE}
    }

    test CONTROL:CREATE-1.4 {nbhood is invalid} -setup {
        setup
    } -body {
        ted order -reject CONDITION:CONTROL:CREATE \
            [dict merge $C1 [list list1 {NB1 NONESUCH}]]
    } -cleanup {
        cleanup
    } -result {
        list1 {Invalid neighborhood, should be one of: NB1, NB2, NB3}
    }

    test CONTROL:CREATE-2.1 {condition is created} -setup {
        setup
    } -body {
        ted order CONDITION:CONTROL:CREATE $C2

        ted querylist {SELECT * FROM conditions_CONTROL}
    } -cleanup {
        cleanup
    } -result {
condition_id    1
condition_type  CONTROL
cc_id           1
narrative       Actor JOE controls neighborhoods NB1, NB2, NB3.
state           normal
flag            
a               JOE
list1           NB1 NB2 NB3
    }


    test CONTROL:CREATE-2.2 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <conditions>
        ted order CONDITION:CONTROL:CREATE $C1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
    }


    test CONTROL:CREATE-3.1 {undo effects} -setup {
        setup
        ted order CONDITION:CONTROL:CREATE $C1
    } -body {
        ted notifier bind ::rdb <conditions>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> delete 1}
    }


    #-------------------------------------------------------------------
    # CONDITION:CONTROL:UPDATE

    proc setup_update {} {
        variable C1
        setup
        ted order CONDITION:CONTROL:CREATE $C1
    }

    test CONTROL:UPDATE-1.1 {required parms} -body {
        ted order -reject CONDITION:CONTROL:UPDATE {}
    } -result {
        condition_id {required value}
    }

    
    test CONTROL:UPDATE-1.2 {condition_id is unknown} -setup {
        setup_update
    } -body {
        ted order -reject CONDITION:CONTROL:UPDATE condition_id NONESUCH \
            list1 NB1
    } -cleanup {
        cleanup
    } -result {
        condition_id {Invalid condition ID: "NONESUCH"}
    }

    test CONTROL:UPDATE-1.3 {actor is unknown} -setup {
        setup_update
    } -body {
        ted order -reject CONDITION:CONTROL:UPDATE condition_id 1 a NONESUCH
    } -cleanup {
        cleanup
    } -result {
        a {Invalid actor, should be one of: BOB, JOE}
    }

    test CONTROL:UPDATE-1.4 {list1 is invalid} -setup {
        setup_update
    } -body {
        ted order -reject CONDITION:CONTROL:UPDATE condition_id 1 \
            list1 {NB1 NONESUCH}
    } -cleanup {
        cleanup
    } -result {
        list1 {Invalid neighborhood, should be one of: NB1, NB2, NB3}
    }

    test CONTROL:UPDATE-1.5 {wrong flavor of condition} -setup {
        setup_update
        rdb eval {UPDATE conditions SET condition_type='BOGUS'}
    } -body {
        ted order -reject CONDITION:CONTROL:UPDATE condition_id 1 a BOB
    } -cleanup {
        cleanup
    } -result {
        condition_id {Condition 1 is not a CONTROL condition}
    }

    test CONTROL:UPDATE-2.1 {activities are updated} -setup {
        setup_update
    } -body {
        ted order CONDITION:CONTROL:UPDATE condition_id 1 a BOB \
            list1 {NB1 NB2}

        ted querylist {SELECT * FROM conditions_CONTROL}
    } -cleanup {
        cleanup
    } -result {
condition_id    1
condition_type  CONTROL
cc_id           1
narrative       Actor BOB controls neighborhoods NB1, NB2.
state           normal
flag            
a               BOB
list1           NB1 NB2
    }


    test CONTROL:UPDATE-2.2 {Effects} -setup {
        setup_update
    } -body {
        ted notifier bind ::rdb <conditions>
        ted order CONDITION:CONTROL:UPDATE condition_id 1 list1 NB2
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
    }


    test CONTROL:UPDATE-3.1 {undo effects} -setup {
        setup_update
        ted order CONDITION:CONTROL:UPDATE condition_id 1 list1 NB2
    } -body {
        ted notifier bind ::rdb <conditions>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







