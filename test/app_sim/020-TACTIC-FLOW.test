# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-FLOW.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) TACTIC:FLOW:* order tests.
#
#    This test suite tests the FLOW tactic's orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Standard items

    set T1 {
        owner       SYSTEM
        priority    bottom
        f           SHIA
        g           KURD
        text1       ALL
        int1        ""
        x1          ""
        once        YES
    }


    #-------------------------------------------------------------------
    # TACTIC:FLOW:CREATE

    test FLOW:CREATE-1.1 {required parms} -body {
        ted order -reject TACTIC:FLOW:CREATE {}
    } -result {
        owner {required value}
        f {required value}
        g {required value}
        text1 {required value}
        once {required value}
    }

    test FLOW:CREATE-1.2 {owner is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FLOW:CREATE {*}$T1 owner NONESUCH
    } -cleanup {
        cleanup
    } -result {
        owner {Invalid system agent, should be one of: SYSTEM}
    }

    test FLOW:CREATE-1.3 {f is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FLOW:CREATE {*}$T1 f NONESUCH
    } -cleanup {
        cleanup
    } -result {
        f {Invalid civilian group, should be one of: SHIA, SUNN, KURD}
    }

    test FLOW:CREATE-1.4 {g is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FLOW:CREATE {*}$T1 g NONESUCH
    } -cleanup {
        cleanup
    } -result {
        g {invalid value "NONESUCH", should be one of: SUNN, KURD}
    }

    test FLOW:CREATE-1.5 {g equals f} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FLOW:CREATE {*}$T1 g SHIA
    } -cleanup {
        cleanup
    } -result {
        g {invalid value "SHIA", should be one of: SUNN, KURD}
    }

    test FLOW:CREATE-1.6 {text1 is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FLOW:CREATE {*}$T1 text1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        text1 {invalid value "NONESUCH", should be one of: ALL, NUMBER, RATE}
    }

    test FLOW:CREATE-1.7 {int1 is non-integer} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FLOW:CREATE {*}$T1 int1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        int1 {invalid value "NONESUCH", expected integer}
    }

    test FLOW:CREATE-1.8 {int1 is negative} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FLOW:CREATE {*}$T1 int1 -1
    } -cleanup {
        cleanup
    } -result {
        int1 {invalid value "-1", expected integer no less than 0}
    }

    test FLOW:CREATE-1.9 {text1=NUMBER, int1 is missing} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FLOW:CREATE {*}$T1 text1 NUMBER int1 ""
    } -cleanup {
        cleanup
    } -result {
        int1 {Required value when mode is NUMBER.}
    }

    test FLOW:CREATE-1.10 {x1 is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FLOW:CREATE {*}$T1 x1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        x1 {invalid value "NONESUCH", expected double}
    }

    test FLOW:CREATE-1.11 {text1=RATE, x1 is missing} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FLOW:CREATE {*}$T1 text1 RATE x1 ""
    } -cleanup {
        cleanup
    } -result {
        x1 {Required value when mode is RATE.}
    }


    test FLOW:CREATE-1.12 {once is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FLOW:CREATE {*}$T1 once NONESUCH
    } -cleanup {
        cleanup
    } -result {
        once {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }

    test FLOW:CREATE-1.13 {priority is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FLOW:CREATE {*}$T1 priority NONESUCH
    } -cleanup {
        cleanup
    } -result {
        priority {invalid value "nonesuch", should be one of: top, bottom}
    }

    test FLOW:CREATE-2.1 {tactic is created: SOME} -setup {
        setup
    } -body {
        ted order TACTIC:FLOW:CREATE $T1

        ted querylist {SELECT * FROM tactics_FLOW}
    } -cleanup {
        cleanup
    } -result {
tactic_id    1
tactic_type  FLOW
owner        SYSTEM
narrative    Flow all remaining members of SHIA into KURD.
priority     1
state        normal
exec_ts      
exec_flag    0
f            SHIA
g            KURD
text1        ALL
int1         
x1           
once         1
    }


    test FLOW:CREATE-2.2 {tactic is created: NUMBER} -setup {
        setup
    } -body {
        ted order TACTIC:FLOW:CREATE {*}$T1 text1 NUMBER int1 500

        ted querylist {SELECT * FROM tactics_FLOW}
    } -cleanup {
        cleanup
    } -result {
tactic_id    1
tactic_type  FLOW
owner        SYSTEM
narrative    Flow 500 members of SHIA into KURD.
priority     1
state        normal
exec_ts      
exec_flag    0
f            SHIA
g            KURD
text1        NUMBER
int1         500
x1           
once         1
    }

    test FLOW:CREATE-2.3 {tactic is created: RATE} -setup {
        setup
    } -body {
        ted order TACTIC:FLOW:CREATE {*}$T1 text1 RATE x1 5.0

        ted querylist {SELECT * FROM tactics_FLOW}
    } -cleanup {
        cleanup
    } -result {
tactic_id    1
tactic_type  FLOW
owner        SYSTEM
narrative    Flow population from SHIA to KURD at a rate of 5.0%/year.
priority     1
state        normal
exec_ts      
exec_flag    0
f            SHIA
g            KURD
text1        RATE
int1         
x1           5.0
once         1
    }


    test FLOW:CREATE-2.4 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:FLOW:CREATE $T1
        ted notifier received

        # NOTE: Two updates, because of priority setting.
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
        {::rdb <tactics> update 1}
    }


    test FLOW:CREATE-3.1 {undo effects} -setup {
        setup
        ted order TACTIC:FLOW:CREATE $T1
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> delete 1}
    }

    #-------------------------------------------------------------------
    # TACTIC:FLOW:UPDATE

    proc setup_update_flow {} {
        variable T1
        setup
        ted order TACTIC:FLOW:CREATE $T1
    }

    test FLOW:UPDATE-1.1 {required parms} -body {
        ted order -reject TACTIC:FLOW:UPDATE {}
    } -result {
        tactic_id {required value}
    }

    
    test FLOW:UPDATE-1.2 {tactic_id is unknown} -setup {
        setup_update_flow
    } -body {
        ted order -reject TACTIC:FLOW:UPDATE \
            tactic_id NONESUCH
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Invalid tactic ID: "NONESUCH"}
    }

    test FLOW:UPDATE-1.3 {f is unknown} -setup {
        setup_update_flow
    } -body {
        ted order -reject TACTIC:FLOW:UPDATE tactic_id 1 f NONESUCH
    } -cleanup {
        cleanup
    } -result {
        f {Invalid civilian group, should be one of: SHIA, SUNN, KURD}
    }

    test FLOW:UPDATE-1.4 {g is unknown} -setup {
        setup_update_flow
    } -body {
        ted order -reject TACTIC:FLOW:UPDATE tactic_id 1 g NONESUCH
    } -cleanup {
        cleanup
    } -result {
        g {invalid value "NONESUCH", should be one of: SHIA, SUNN, KURD}
    }

    test FLOW:UPDATE-1.5 {text1 is invalid} -setup {
        setup_update_flow
    } -body {
        ted order -reject TACTIC:FLOW:UPDATE tactic_id 1 text1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        text1 {invalid value "NONESUCH", should be one of: ALL, NUMBER, RATE}
    }


    test FLOW:UPDATE-1.6 {int1 is non-integer} -setup {
        setup_update_flow
    } -body {
        ted order -reject TACTIC:FLOW:UPDATE tactic_id 1 int1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        int1 {invalid value "NONESUCH", expected integer}
    }

    test FLOW:UPDATE-1.7 {int1 is non-positive} -setup {
        setup_update_flow
    } -body {
        ted order -reject TACTIC:FLOW:UPDATE tactic_id 1 int1 -1
    } -cleanup {
        cleanup
    } -result {
        int1 {invalid value "-1", expected integer no less than 0}
    }

    test FLOW:UPDATE-1.8 {text1 now NUMBER, int1 is missing} -setup {
        setup_update_flow
    } -body {
        ted order -reject TACTIC:FLOW:UPDATE tactic_id 1 text1 NUMBER
    } -cleanup {
        cleanup
    } -result {
        int1 {Required value when mode is NUMBER.}
    }

    test FLOW:UPDATE-1.9 {x1 is non-numeric} -setup {
        setup_update_flow
    } -body {
        ted order -reject TACTIC:FLOW:UPDATE tactic_id 1 x1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        x1 {invalid value "NONESUCH", expected double}
    }

    test FLOW:UPDATE-1.10 {text1 now RATE, x1 is missing} -setup {
        setup_update_flow
    } -body {
        ted order -reject TACTIC:FLOW:UPDATE tactic_id 1 text1 RATE
    } -cleanup {
        cleanup
    } -result {
        x1 {Required value when mode is RATE.}
    }

    test FLOW:UPDATE-1.11 {once is invalid} -setup {
        setup_update_flow
    } -body {
        ted order -reject TACTIC:FLOW:UPDATE tactic_id 1 once NONESUCH
    } -cleanup {
        cleanup
    } -result {
        once {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }

    test FLOW:UPDATE-1.12 {wrong flavor of tactic} -setup {
        setup_update_flow
        rdb eval {UPDATE tactics SET tactic_type='BOGUS'}
    } -body {
        ted order -reject TACTIC:FLOW:UPDATE tactic_id 1
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Tactic 1 is not a FLOW tactic}
    }

    test FLOW:UPDATE-2.1 {tactic is updated} -setup {
        setup_update_flow
    } -body {
        ted order TACTIC:FLOW:UPDATE \
            tactic_id 1 text1 NUMBER int1 150

        ted querylist {SELECT * FROM tactics_FLOW}
    } -cleanup {
        cleanup
    } -result {
tactic_id    1
tactic_type  FLOW
owner        SYSTEM
narrative    Flow 150 members of SHIA into KURD.
priority     1
state        normal
exec_ts      
exec_flag    0
f            SHIA
g            KURD
text1        NUMBER
int1         150
x1           
once         1
    }

    test FLOW:UPDATE-2.2 {Effects} -setup {
        setup
        ted order TACTIC:FLOW:CREATE $T1
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:FLOW:UPDATE tactic_id 1 text1 NUMBER int1 150
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
        {::rdb <tactics> update 1}
    }


    test FLOW:UPDATE-3.1 {undo effects} -setup {
        setup_update_flow
        ted order TACTIC:FLOW:UPDATE tactic_id 1 text1 NUMBER int1 150
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





