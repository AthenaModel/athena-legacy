# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-condition.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    condition(sim) tests.
#
#    This test suite tests the condition(sim) mutators and queries
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        variable B1
        variable C1

        # FIRST, create a scenario
        ted create JOE BOB NB1 NB2 BLUE BRIT SHIA SUNN KURD

        # NEXT, add a MOOD condition to the system's strategy
        set B1 [ted addblock SYSTEM]
        set C1 [ted addcondition $B1 MOOD]
    }

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #===================================================================
    # condition class methods
    #
    # [condition define] is tested implicitly.

    #-------------------------------------------------------------------
    # type

    test type-1.1 {return type given type name} -body {
        condition type MOOD
    } -result {::condition::MOOD}
    

    #-------------------------------------------------------------------
    # types

    test types-1.1 {lists type objects} -body {
        condition types
    } -result {::condition::MOOD ::condition::NBMOOD}
    
    #-------------------------------------------------------------------
    # typenames

    test typenames-1.1 {lists type names} -body {
        condition typenames
    } -result {MOOD NBMOOD}

    #-------------------------------------------------------------------
    # typedict

    test typedict-1.1 {lists types and titles} -body {
        # Spot check
        set a [llength [condition types]]
        set b [dict size [condition typedict]]
        set c [dict get [condition typedict] ::condition::MOOD]
        
        list [expr {$a == $b}] $c
    } -result {1 {MOOD: Group Mood}}

    #===================================================================
    # condition::<type> class methods

    #-------------------------------------------------------------------
    # ctype's typename

    test ctype_typename-1.1 {return type's name} -body {
        condition::MOOD typename
    } -result {MOOD}
    
    #-------------------------------------------------------------------
    # ctype's title

    test ctype_title-1.1 {return type's title} -body {
        condition::MOOD title
    } -result {Group Mood}
    
    #===================================================================
    # condition instance methods


    #-------------------------------------------------------------------
    # constructor

    test constructor-1.1 {condition is created} -setup {
        setup
    } -body {
        ted pdict [$C1 getdict]
    } -cleanup {
        cleanup
    } -match glob -result {
        metflag {}
        id      *
        state   invalid
        block   ::bean::block*
        limit   0.0
        comp    EQ
        g       {}
    }

    #-------------------------------------------------------------------
    # typename

    test typename-1.1 {can retrieve typename} -setup {
        setup
    } -body {
        $C1 typename
    } -cleanup {
        cleanup
    } -result {MOOD}
    
    #-------------------------------------------------------------------
    # agent

    test agent-1.1 {can retrieve owning agent} -setup {
        setup
    } -body {
        $C1 agent
    } -cleanup {
        cleanup
    } -result {SYSTEM}
    
    #-------------------------------------------------------------------
    # strategy

    test strategy-1.1 {can retrieve owning strategy} -setup {
        setup
    } -body {
        $C1 strategy
    } -cleanup {
        cleanup
    } -result {::strategy::SYSTEM}
    
    #-------------------------------------------------------------------
    # block

    test block-1.1 {can retrieve owning block} -setup {
        setup
    } -body {
        $C1 block
    } -cleanup {
        cleanup
    } -match glob -result {::bean::block*}
    
    #-------------------------------------------------------------------
    # state

    test state-1.1 {can retrieve state} -setup {
        setup
    } -body {
        $C1 state
    } -cleanup {
        cleanup
    } -result {invalid}
    
    #-------------------------------------------------------------------
    # isknown

    # This method is tested with eval.

    #-------------------------------------------------------------------
    # ismet

    # This method is tested with eval.

    #-------------------------------------------------------------------
    # check

    test check-1.1 {returns errors} -setup {
        setup
    } -body {
        $C1 set g NONESUCH
        $C1 check
    } -cleanup {
        cleanup
    } -match glob -result {g {*}}

    test check-1.2 {sets state to invalid on failure} -setup {
        setup
    } -body {
        $C1 set g NONESUCH
        $C1 set state normal 
        $C1 check
        $C1 state
    } -cleanup {
        cleanup
    } -result {invalid}
    
    test check-1.3 {will reset invalid to normal on success} -setup {
        setup
    } -body {
        $C1 set g SHIA
        $C1 check
        $C1 state
    } -cleanup {
        cleanup
    } -result {normal}
    
    test check-1.4 {will not reset disabled to normal on success} -setup {
        setup
    } -body {
        $C1 set g SHIA
        $C1 set state disabled
        $C1 check
        $C1 state
    } -cleanup {
        cleanup
    } -result {disabled}

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {returns narrative string} -setup {
        setup
    } -body {
        $C1 set g SHIA
        $C1 narrative
    } -cleanup {
        cleanup
    } -result {Group SHIA's mood is equal to 0.00}
    

    #-------------------------------------------------------------------
    # eval/metflag

    test eval-1.1 {metflag is initially unknown, and presumed unmet} -setup {
        setup
    } -body {
        list [$C1 isknown] [$C1 ismet]
    } -cleanup {
        cleanup
    } -result {0 0}
    
    test eval-1.2 {eval evaluates condition} -setup {
        setup
        $C1 set g SHIA
        $C1 set limit -20.0
        ted lock
    } -body {
        $C1 set comp GT
        set a [$C1 eval]

        $C1 set comp LT
        set b [$C1 eval]

        list $a $b
    } -cleanup {
        cleanup
    } -result {1 0}

    test eval-1.3 {after eval metflag is known} -setup {
        setup
        $C1 set g SHIA
        $C1 set limit -20.0
        $C1 set comp GT
        ted lock
    } -body {
        set a [$C1 eval]
        list [$C1 isknown] $a [$C1 ismet]
    } -cleanup {
        cleanup
    } -result {1 1 1}

    #-------------------------------------------------------------------
    # update_

    test update-1.1 {update_ clears the metflag} -setup {
        setup
        $C1 set g SHIA
        ted lock
        $C1 eval
    } -body {
        set a [$C1 isknown]
        $C1 update_ {comp} {comp LT}
        set b [$C1 isknown]

        list $a $b
    } -cleanup {
        cleanup
    } -result {1 0}

    test update-1.2 {update_ does a sanity check} -setup {
        setup
    } -body {
        set a [$C1 state]
        $C1 update_ {g} {g SHIA}
        set b [$C1 state]

        list $a $b
    } -cleanup {
        cleanup
    } -result {invalid normal}
    

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::

