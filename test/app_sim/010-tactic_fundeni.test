# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-tactic_fundeni.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    tactic_fundeni(sim) tests.
#
#    This test suite tests the tactic::FUNDENI ensemble.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        ted create JOE BOB NB1 NB2 SHIA SUNN KURD NO_ONE

        demog start
        rdb eval {
            UPDATE demog_g SET population=10000 WHERE g='SHIA';
            UPDATE demog_g SET population=20000 WHERE g='SUNN';
            UPDATE demog_g SET population=40000 WHERE g='KURD';

            INSERT INTO influence_na(n,a,influence)
            VALUES('NB1','JOE',0.5);
            INSERT INTO influence_na(n,a,influence)
            VALUES('NB2','JOE',0.5);
        }

        # Verify that unused columns contain NULL
        rdb nullvalue "@"
    }

    proc execute_setup {} {
        setup
        service start
        service load
        cash load
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        rdb nullvalue ""
        array unset parms
        ted cleanup
    }

    set T1 {
        tactic_type FUNDENI
        owner       JOE
        priority    top
        x1          2000.0
        glist       SHIA
        on_lock     NO
    }

    set T2 {
        tactic_type FUNDENI
        owner       JOE
        priority    top
        x1          7000.0
        glist       {SHIA SUNN KURD}
        on_lock     NO
    }

    set T3 {
        tactic_type FUNDENI
        owner       JOE
        priority    top
        x1          7000.0
        glist       NO_ONE
        on_lock     NO
    }
       


    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative: one group} -setup {
        setup
        tactic mutate create $T1
    } -body {
        tactic::FUNDENI narrative [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Fund $2,000.00 worth of Essential Non-Infrastructure services for group SHIA.}

    test narrative-1.2 {narrative: three groups} -setup {
        setup
        tactic mutate create $T2
    } -body {
        tactic::FUNDENI narrative [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Fund $7,000.00 worth of Essential Non-Infrastructure services for these groups (SHIA, SUNN, KURD).}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {check: g in glist no longer exists} -setup {
        setup
        tactic mutate create $T2
        rdb eval {DELETE FROM civgroups WHERE g='SUNN'}
    } -body {
        tactic::FUNDENI check [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Invalid civilian group, should be one of: SHIA, KURD, NO_ONE}

    test check-1.2 {check: multiple g in glist no longer exist} -setup {
        setup
        tactic mutate create $T2
        rdb eval {DELETE FROM civgroups}
    } -body {
        tactic::FUNDENI check [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Invalid civilian group, none are defined}

    #-------------------------------------------------------------------
    # dollars

    test dollars-1.1 {dollars = x1} -setup {
        setup
        tactic mutate create $T1
    } -body {
        tactic::FUNDENI dollars [tactic get 1]
    } -cleanup {
        cleanup
    } -result {2,000.00}

    #-------------------------------------------------------------------
    # execute

    test execute-1.1 {execute: insufficient support} -setup {
        execute_setup
        rdb eval {UPDATE influence_na SET support = 0.0}
        parm set service.ENI.minSupport 0.2
        tactic mutate create $T1
    } -body {
        tactic::FUNDENI execute [tactic get 1]
    } -cleanup {
        cleanup
    } -result {0}

    test execute-1.2 {execute: insufficient funds} -setup {
        execute_setup
        rdb eval {UPDATE working_cash SET cash_on_hand=0}
        tactic mutate create $T1
    } -body {
        tactic::FUNDENI execute [tactic get 1]
    } -cleanup {
        cleanup
    } -result {0}

    test execute-1.3 {execute: funding empty group} -setup {
        execute_setup
        tactic mutate create $T3
    } -body {
        tactic::FUNDENI execute [tactic get 1]
    } -cleanup {
        cleanup
    } -result {0}

    test execute-1.4 {execute: 1 on success} -setup {
        execute_setup
        tactic mutate create $T1
    } -body {
        tactic::FUNDENI execute [tactic get 1]
    } -cleanup {
        cleanup
    } -result {1}

    test execute-1.5 {execute: 1 group} -setup {
        execute_setup
        tactic mutate create $T1
    } -body {
        tactic::FUNDENI execute [tactic get 1]
        ted query {SELECT * FROM working_service_ga ORDER BY g,a}
    } -cleanup {
        cleanup
    } -result {
g      a   funding 
------ --- ------- 
KURD   BOB 0.0     
KURD   JOE 0.0     
NO_ONE BOB 0.0     
NO_ONE JOE 0.0     
SHIA   BOB 0.0     
SHIA   JOE 2000.0  
SUNN   BOB 0.0     
SUNN   JOE 0.0     
    }

    test execute-1.6 {execute: 3 group} -setup {
        execute_setup
        tactic mutate create $T2
    } -body {
        tactic::FUNDENI execute [tactic get 1]
        ted query {SELECT * FROM working_service_ga ORDER BY g,a}
    } -cleanup {
        cleanup
    } -result {
g      a   funding 
------ --- ------- 
KURD   BOB 0.0     
KURD   JOE 4000.0  
NO_ONE BOB 0.0     
NO_ONE JOE 0.0     
SHIA   BOB 0.0     
SHIA   JOE 1000.0  
SUNN   BOB 0.0     
SUNN   JOE 2000.0  
    }

    test execute-1.7 {execute: deduct cost from cash_on_hand} -setup {
        execute_setup
        tactic mutate create $T1
        rdb eval {
            UPDATE groups SET cost=1.0;
            UPDATE working_cash SET cash_on_hand=10000.0;
        }

    } -body {
        tactic::FUNDENI execute [tactic get 1]
        cash get JOE cash_on_hand
    } -cleanup {
        cleanup
    } -result {8000.0}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





