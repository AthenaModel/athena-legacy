# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-gofer_number.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    actor(sim) tests.
#
#    This test suite tests the gofer::NUMBER type.
#
#    NOTE: The type itself is implemented using gofer(n); thus,
#    we don't need to test the behavior of the type itself.  As a result,
#    this test suite focusses on the gofer::NUMBER-specific rule
#    objects.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.
namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    proc setup {} {
        ted create JOE BOB BLUE BRIT TAL SUNN SHIA KURD USAID
    }

    proc cleanup {} {
        # Clean up the test environment
        array unset parms
        ted cleanup
    }


    #-------------------------------------------------------------------
    # Rule: BY_VALUE

    test BY_VALUE-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::BY_VALUE construct 45.0
    } -cleanup {
        cleanup
    } -result {raw_value 45.0}

    test BY_VALUE-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::BY_VALUE validate {raw_value 45.0}
    } -cleanup {
        cleanup
    } -result {raw_value 45.0}

    test BY_VALUE-2.2 {validate, invalid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::BY_VALUE validate {raw_value NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "NONESUCH", expected double}

    test BY_VALUE-3.1 {narrative} -body {
        ::gofer::NUMBER::BY_VALUE narrative {raw_value 45.0}
    } -result {45.0}

    test BY_VALUE-4.1 {eval} -setup {
        setup
    } -body {
        ::gofer::NUMBER::BY_VALUE eval {raw_value 45.0}
    } -cleanup {
        cleanup
    } -result {45.0}

    #-------------------------------------------------------------------
    # Rule: ASSIGNED

    test ASSIGNED-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::ASSIGNED construct BLUE PATROL NB1
    } -cleanup {
        cleanup
    } -result {g BLUE activity PATROL n NB1}

    test ASSIGNED-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::ASSIGNED validate {g blue activity patrol n nb1}
    } -cleanup {
        cleanup
    } -result {g BLUE activity PATROL n NB1}

    test ASSIGNED-2.2 {validate, invalid n} -setup {
        setup
    } -body {
        ::gofer::NUMBER::ASSIGNED validate {g BLUE activity PATROL n NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test ASSIGNED-2.3 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::ASSIGNED validate {g NONESUCH activity PATROL n NB1}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid force/org group "NONESUCH", should be one of: BLUE, BRIT, TAL, USAID}

    test ASSIGNED-2.4 {validate, invalid activity} -setup {
        setup
    } -body {
        ::gofer::NUMBER::ASSIGNED validate {g BLUE activity NONESUCH n NB1}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Group BLUE cannot be assigned activity NONESUCH}

    test ASSIGNED-3.1 {narrative} -body {
        ::gofer::NUMBER::ASSIGNED narrative {g BLUE activity PATROL n NB1}
    } -result {assigned("BLUE","PATROL","NB1")}

    test ASSIGNED-4.1 {eval, no data} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::ASSIGNED eval {g BLUE activity PATROL n NB1}
    } -cleanup {
        cleanup
    } -result {0}

    test ASSIGNED-4.1 {eval, data} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::ASSIGNED eval {g BLUE activity PATROL n NB1}
    } -cleanup {
        cleanup
    } -result {0}

    #-------------------------------------------------------------------
    # Rule: COOP

    test COOP-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::COOP construct SHIA BLUE
    } -cleanup {
        cleanup
    } -result {f SHIA g BLUE}

    test COOP-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::COOP validate {f shia g blue}
    } -cleanup {
        cleanup
    } -result {f SHIA g BLUE}

    test COOP-2.2 {validate, invalid f} -setup {
        setup
    } -body {
        ::gofer::NUMBER::COOP validate {f NONESUCH g BLUE}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test COOP-2.3 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::COOP validate {f SHIA g NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid force group,*}

    test COOP-3.1 {narrative} -body {
        ::gofer::NUMBER::COOP narrative {f SHIA g BLUE}
    } -result {coop("SHIA","BLUE")}

    test COOP-4.1 {eval} -setup {
        setup
        # Set coop to 25.0
        ted order COOP:UPDATE \
            id {SHIA BLUE} base 25.0 regress_to NATURAL natural 25.0
        ted lock
    } -body {
        ::gofer::NUMBER::COOP eval {f SHIA g BLUE}
    } -cleanup {
        cleanup
    } -result {25.0}

    #-------------------------------------------------------------------
    # Rule: COVERAGE

    test COVERAGE-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::COVERAGE construct NB1 BLUE PRESENCE
    } -cleanup {
        cleanup
    } -result {n NB1 g BLUE a PRESENCE}

    test COVERAGE-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::COVERAGE validate {n nb1 g shia a patrol}
    } -cleanup {
        cleanup
    } -result {n NB1 g SHIA a PATROL}

    test COVERAGE-2.2 {validate, invalid n} -setup {
        setup
    } -body {
        ::gofer::NUMBER::COVERAGE validate {n NONESUCH g BLUE a PATROL}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test COVERAGE-2.3 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::COVERAGE validate {n NB1 g NONESUCH a PATROL}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid group,*}

    test COVERAGE-2.4 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::COVERAGE validate {n NB1 g SHIA a NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid activity,*}

    test COVERAGE-3.1 {narrative} -body {
        ::gofer::NUMBER::COVERAGE narrative {n NB1 g SHIA a PATROL}
    } -result {coverage("NB1","SHIA","PATROL")}

    test COVERAGE-4.1 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::COVERAGE eval {n NB1 g SHIA a PATROL}
    } -cleanup {
        cleanup
    } -result {0.0}

    test COVERAGE-4.1 {eval no data before lock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::COVERAGE eval {n NB1 g SHIA a PATROL}
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # Rule: INFLUENCE

    test INFLUENCE-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INFLUENCE construct JOE NB1
    } -cleanup {
        cleanup
    } -result {a JOE n NB1}

    test INFLUENCE-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INFLUENCE validate {a joe n nb1}
    } -cleanup {
        cleanup
    } -result {a JOE n NB1}

    test INFLUENCE-2.2 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INFLUENCE validate {a NONESUCH n NB1}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test INFLUENCE-2.3 {validate, invalid n} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INFLUENCE validate {a JOE n NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test INFLUENCE-3.1 {narrative} -body {
        ::gofer::NUMBER::INFLUENCE narrative {a JOE n NB1}
    } -result {influence("JOE","NB1")}

    test INFLUENCE-4.1 {eval, no value available} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INFLUENCE eval {a JOE n NB1}
    } -cleanup {
        cleanup
    } -result {0.0}

    test INFLUENCE-4.2 {eval, value available} -setup {
        setup
        # Set influence to 0.75
        rdb eval {
            INSERT OR REPLACE INTO influence_na(n,a,influence)
            VALUES('NB1','JOE',0.75)
        }
    } -body {
        ::gofer::NUMBER::INFLUENCE eval {a JOE n NB1}
    } -cleanup {
        cleanup
    } -result {0.75}

    #-------------------------------------------------------------------
    # Rule: MOOD

    test MOOD-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::MOOD construct SHIA
    } -cleanup {
        cleanup
    } -result {g SHIA}

    test MOOD-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::MOOD validate {g shia}
    } -cleanup {
        cleanup
    } -result {g SHIA}

    test MOOD-2.2 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::MOOD validate {g NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test MOOD-3.1 {narrative} -body {
        ::gofer::NUMBER::MOOD narrative {g SHIA}
    } -result {mood("SHIA")}

    test MOOD-4.1 {eval} -setup {
        setup
        ted order SAT:UPDATE:MULTI ids {
            {SHIA AUT} {SHIA CUL} {SHIA QOL} {SHIA SFT}
        } base 25.0 hist_flag 1 current 25.0

        ted lock
        
    } -body {
        ::gofer::NUMBER::MOOD eval {g SHIA}
    } -cleanup {
        cleanup
    } -result {22.9}

    #-------------------------------------------------------------------
    # Rule: NBCOOP

    test NBCOOP-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBCOOP construct NB1 BLUE
    } -cleanup {
        cleanup
    } -result {n NB1 g BLUE}

    test NBCOOP-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBCOOP validate {n nb1 g blue}
    } -cleanup {
        cleanup
    } -result {n NB1 g BLUE}

    test NBCOOP-2.2 {validate, invalid n} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBCOOP validate {n NONESUCH g BLUE}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test NBCOOP-2.3 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBCOOP validate {n NB1 g NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid force group,*}

    test NBCOOP-3.1 {narrative} -body {
        ::gofer::NUMBER::NBCOOP narrative {n NB1 g BLUE}
    } -result {nbcoop("NB1","BLUE")}

    test NBCOOP-4.1 {eval} -setup {
        setup
        # Set NBCOOP to 25.0
        ted order COOP:UPDATE \
            id {SHIA BLUE} base 25.0 regress_to NATURAL natural 25.0
        ted lock
    } -body {
        ::gofer::NUMBER::NBCOOP eval {n NB1 g BLUE}
    } -cleanup {
        cleanup
    } -result {37.5}

    #-------------------------------------------------------------------
    # Rule: NBMOOD

    test NBMOOD-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBMOOD construct NB1
    } -cleanup {
        cleanup
    } -result {n NB1}

    test NBMOOD-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBMOOD validate {n nb1}
    } -cleanup {
        cleanup
    } -result {n NB1}

    test NBMOOD-2.2 {validate, invalid n} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBMOOD validate {n NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test NBMOOD-3.1 {narrative} -body {
        ::gofer::NUMBER::NBMOOD narrative {n NB1}
    } -result {nbmood("NB1")}

    test NBMOOD-4.1 {eval} -setup {
        setup
        ted lock
        rdb eval {UPDATE uram_n SET nbmood=25.0 WHERE n='NB1'}
        
    } -body {
        ::gofer::NUMBER::NBMOOD eval {n NB1}
    } -cleanup {
        cleanup
    } -result {25.0}

    #-------------------------------------------------------------------
    # Rule: NBSUPPORT

    test NBSUPPORT-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBSUPPORT construct JOE NB1
    } -cleanup {
        cleanup
    } -result {a JOE n NB1}

    test NBSUPPORT-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBSUPPORT validate {a joe n nb1}
    } -cleanup {
        cleanup
    } -result {a JOE n NB1}

    test NBSUPPORT-2.2 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBSUPPORT validate {a NONESUCH n NB1}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test NBSUPPORT-2.3 {validate, invalid n} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBSUPPORT validate {a JOE n NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test NBSUPPORT-3.1 {narrative} -body {
        ::gofer::NUMBER::NBSUPPORT narrative {a JOE n NB1}
    } -result {nbsupport("JOE","NB1")}

    test NBSUPPORT-4.1 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::NBSUPPORT eval {a JOE n NB1}
    } -cleanup {
        cleanup
    } -result {0.00}

    #-------------------------------------------------------------------
    # Rule: PCTCONTROL

    test PCTCONTROL-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PCTCONTROL construct {JOE BOB}
    } -cleanup {
        cleanup
    } -result {alist {JOE BOB}}

    test PCTCONTROL-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PCTCONTROL validate {alist {joe bob}}
    } -cleanup {
        cleanup
    } -result {alist {JOE BOB}}

    test PCTCONTROL-2.2 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PCTCONTROL validate {alist NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test PCTCONTROL-3.1 {narrative} -body {
        ::gofer::NUMBER::PCTCONTROL narrative {alist {JOE BOB}}
    } -result {pctcontrol("JOE","BOB")}

    test PCTCONTROL-4.1 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::PCTCONTROL eval {alist JOE}
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # Rule: SAT

    test SAT-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SAT construct SHIA SFT
    } -cleanup {
        cleanup
    } -result {g SHIA c SFT}

    test SAT-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SAT validate {g shia c sft}
    } -cleanup {
        cleanup
    } -result {g SHIA c SFT}

    test SAT-2.2 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SAT validate {g NONESUCH c SFT}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test SAT-2.3 {validate, invalid c} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SAT validate {g SHIA c NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {invalid value "NONESUCH", should be one of: AUT, SFT, CUL, QOL}

    test SAT-3.1 {narrative} -body {
        ::gofer::NUMBER::SAT narrative {g SHIA c SFT}
    } -result {sat("SHIA","SFT")}

    test SAT-4.1 {eval} -setup {
        setup
        # Set sat to 25.0
        ted order SAT:UPDATE \
            id {SHIA SFT} base 25.0 hist_flag 1 current 25.0
        ted lock
    } -body {
        ::gofer::NUMBER::SAT eval {g SHIA c SFT}
    } -cleanup {
        cleanup
    } -result {25.0}

    #-------------------------------------------------------------------
    # Rule: SECURITY_CIV

    test SECURITY_CIV-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SECURITY_CIV construct SHIA
    } -cleanup {
        cleanup
    } -result {g SHIA}

    test SECURITY_CIV-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SECURITY_CIV validate {g shia}
    } -cleanup {
        cleanup
    } -result {g SHIA}

    test SECURITY_CIV-2.2 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SECURITY_CIV validate {g NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test SECURITY_CIV-3.1 {narrative} -body {
        ::gofer::NUMBER::SECURITY_CIV narrative {g SHIA}
    } -result {security("SHIA")}

    test SECURITY_CIV-4.1 {eval} -setup {
        setup
        #Setup sets the security_civ to 31
        ted lock
    } -body {
        ::gofer::NUMBER::SECURITY_CIV eval {g SHIA}
    } -cleanup {
        cleanup
    } -result {31}

    test SECURITY_CIV-4.1 {eval no data} -setup {
        setup
        #Setup sets the security_civ to 31
    } -body {
        ::gofer::NUMBER::SECURITY_CIV eval {g SHIA}
    } -cleanup {
        cleanup
    } -result {0}

    #-------------------------------------------------------------------
    # Rule: SECURITY

    test SECURITY-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SECURITY construct SHIA NB1
    } -cleanup {
        cleanup
    } -result {g SHIA n NB1}

    test SECURITY-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SECURITY validate {g shia n nb1}
    } -cleanup {
        cleanup
    } -result {g SHIA n NB1}

    test SECURITY-2.2 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SECURITY validate {g NONESUCH n NB1}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid group,*}

    test SECURITY-2.3 {validate, invalid n} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SECURITY validate {g SHIA n NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test SECURITY-3.1 {narrative} -body {
        ::gofer::NUMBER::SECURITY narrative {g SHIA n NB1}
    } -result {security("SHIA","NB1")}

    test SECURITY-4.1 {eval} -setup {
        setup
        #Setup sets the security to 31
        ted lock
    } -body {
        ::gofer::NUMBER::SECURITY eval {g SHIA n NB1}
    } -cleanup {
        cleanup
    } -result {31}

    test SECURITY-4.2 {eval no data} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SECURITY eval {g SHIA n NB1}
    } -cleanup {
        cleanup
    } -result {0}

    #-------------------------------------------------------------------
    # Rule: SUPPORT_CIV

    test SUPPORT_CIV-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SUPPORT_CIV construct JOE SUNN
    } -cleanup {
        cleanup
    } -result {a JOE g SUNN}

    test SUPPORT_CIV-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SUPPORT_CIV validate {a joe g sunn}
    } -cleanup {
        cleanup
    } -result {a JOE g SUNN}

    test SUPPORT_CIV-2.2 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SUPPORT_CIV validate {a NONESUCH g SUNN}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test SUPPORT_CIV-2.3 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SUPPORT_CIV validate {a JOE g NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test SUPPORT_CIV-3.1 {narrative} -body {
        ::gofer::NUMBER::SUPPORT_CIV narrative {a JOE g SUNN}
    } -result {support("JOE","SUNN")}

    test SUPPORT_CIV-4.1 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::SUPPORT_CIV eval {a JOE g SUNN}
    } -cleanup {
        cleanup
    } -result {0.00}

    #-------------------------------------------------------------------
    # Rule: SUPPORT

    test SUPPORT-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SUPPORT construct JOE BLUE NB1
    } -cleanup {
        cleanup
    } -result {a JOE g BLUE n NB1}

    test SUPPORT-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SUPPORT validate {a joe g blue n nb1}
    } -cleanup {
        cleanup
    } -result {a JOE g BLUE n NB1}

    test SUPPORT-2.2 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SUPPORT validate {a NONESUCH g BLUE n NB1}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test SUPPORT-2.3 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SUPPORT validate {a JOE g NONESUCH n NB1}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid group,*}

    test SUPPORT-2.4 {validate, invalid n} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SUPPORT validate {a JOE g BLUE n NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test SUPPORT-3.1 {narrative} -body {
        ::gofer::NUMBER::SUPPORT narrative {a JOE g BLUE n NB1}
    } -result {support("JOE","BLUE","NB1")}

    test SUPPORT-4.1 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::SUPPORT eval {a JOE g BLUE n NB1}
    } -cleanup {
        cleanup
    } -result {0.00}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::

