# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-rel.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    rel(sim) tests.
#
#    This test suite tests the rel(sim) mutators and queries
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        array unset parms
        ted cleanup
    }

    #-------------------------------------------------------------------
    # mutate create

    test create-1.1 {override is created} -setup {
        ted create BLUE SHIA
    } -body {
        hrel mutate create {id {SHIA BLUE} hrel 0.5}
        ted query {SELECT * FROM hrel_fg}
    } -cleanup {
        cleanup
    } -result {
f    g    hrel 
---- ---- ---- 
SHIA BLUE 0.5  
    }

    test create-2.1 {undo deletes the override} -setup {
        ted create BLUE SHIA
        set undo [hrel mutate create {id {SHIA BLUE} hrel 0.5}]
    } -body {
        namespace eval :: $undo
        rdb eval {SELECT * FROM hrel_fg}
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # mutate delete

    test delete-1.1 {Record is deleted} -setup {
        ted create BLUE SHIA
        hrel mutate create {id {SHIA BLUE} hrel 0.5}
    } -body {
        hrel mutate delete {SHIA BLUE}

        # Is SHIA gone?
        rdb eval {SELECT f,g FROM hrel_fg}
    } -cleanup {
        cleanup
    } -result {}

    test delete-2.1 {Undo restores record} -setup {
        ted create BLUE SHIA
        hrel mutate create {id {SHIA BLUE} hrel 0.5}
        set undo [hrel mutate delete {SHIA BLUE}]
    } -body {
        namespace eval :: $undo
        ted query {SELECT * FROM hrel_fg}
    } -cleanup {
        cleanup
    } -result {
f    g    hrel 
---- ---- ---- 
SHIA BLUE 0.5  
    }


    #-------------------------------------------------------------------
    # mutate update


    test update-1.1 {rel is updated} -setup {
        ted create BLUE BRIT
        hrel mutate create {id {BLUE BRIT} hrel 0.5}
    } -body {
        hrel mutate update {
            id   {BLUE BRIT}
            hrel  0.7
        }

        ted query {SELECT * FROM hrel_fg ORDER BY f,g}
    } -cleanup {
        cleanup
    } -result {
f    g    hrel 
---- ---- ---- 
BLUE BRIT 0.7  
    }


    test update-1.2 {identical values are OK} -setup {
        ted create BLUE BRIT

        set parmdict {
            id   {BLUE BRIT}
            hrel  0.5
        }

        hrel mutate create $parmdict
    } -body {
        set a [ted query {SELECT * FROM hrel_fg ORDER BY f,g}]
        
        hrel mutate update $parmdict

        set b [ted query {SELECT * FROM hrel_fg ORDER BY f,g}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-1.3 {empty values are OK} -setup {
        ted create BLUE BRIT
        hrel mutate create {id {BLUE BRIT} hrel 0.5}
    } -body {
        set a [ted query {SELECT * FROM hrel_fg ORDER BY f,g}]

        hrel mutate update  {
            id   {BLUE BRIT}
            hrel  ""
        }

        set b [ted query {SELECT * FROM hrel_fg ORDER BY f,g}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-2.1 {undo undoes the change} -setup {
        ted create BLUE BRIT
        hrel mutate create {id {BLUE BRIT} hrel 0.0}
    } -body {

        set a [ted query {SELECT * FROM hrel_fg ORDER BY f,g}]

        set undo [hrel mutate update {
            id   {BLUE BRIT}
            hrel  0.5
        }]

        eval $undo

        set b [ted query {SELECT * FROM hrel_fg ORDER BY f,g}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # exists

    test exists-1.1 {groups do exist} -body {
        hrel exists {NONESUCH NONESUCH}
    } -cleanup {
        cleanup
    } -result {0}


    test exists-1.2 {record does not exist} -body {
        ted create BLUE BRIT
        hrel exists {BLUE BRIT}
    } -cleanup {
        cleanup
    } -result {0}

    test exists-1.3 {record exists} -setup {
        ted create BLUE BRIT
        hrel mutate create {id {BLUE BRIT} hrel 0.5}
    } -body {
        hrel exists {BLUE BRIT}
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # validate

    test validate-1.1 {invalid group f} -body {
        hrel validate {NONESUCH NONESUCH}
    } -returnCodes {
        error
    } -result {Invalid group, none are defined}


    test validate-1.2 {Invalid group g} -setup {
        ted create BLUE BRIT
    } -body {
        hrel validate {BLUE NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid group, should be one of: BLUE, BRIT}


    test validate-1.3 {f eq g} -setup {
        ted create BLUE BRIT
    } -body {
        hrel validate {BLUE BLUE}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {A group's relationship with itself cannot be overridden.}

    test validate-2.1 {Valid relationship} -setup {
        ted create BLUE BRIT
    } -body {
        hrel validate {BLUE BRIT}
    } -cleanup {
        cleanup
    } -result {BLUE BRIT}

    #-------------------------------------------------------------------
    # hrel_view
    #
    # The hrel_view is implemented in scenariodb.sql, not in rel.tcl,
    # so perhaps it doesn't belong here; on the other hand, it pulls
    # together affinities from the bsystem with relationship overrides
    # from hrel_fg, and it ought to be tested somewhere.

    test hrel_view-1.1 {Defaults to 1.0 and 0.0} -setup {
        ted create BLUE BRIT
    } -body {
        ted query {SELECT * FROM hrel_view ORDER BY f,g}
    } -cleanup {
        cleanup
    } -result {
f    g    hrel_nat hrel override 
---- ---- -------- ---- -------- 
BLUE BLUE 1.0      1.0  0        
BLUE BRIT 0.0      0.0  0        
BRIT BLUE 0.0      0.0  0        
BRIT BRIT 1.0      1.0  0        
    }

    test hrel_view-1.2 {hrel_fg overrides bsystem values} -setup {
        ted create BLUE BRIT
    } -body {
        hrel mutate create {id {BLUE BRIT} hrel 0.5}
        ted query {SELECT * FROM hrel_view ORDER BY f,g}
    } -cleanup {
        cleanup
    } -result {
f    g    hrel_nat hrel override 
---- ---- -------- ---- -------- 
BLUE BLUE 1.0      1.0  0        
BLUE BRIT 0.0      0.5  1        
BRIT BLUE 0.0      0.0  0        
BRIT BRIT 1.0      1.0  0        
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





