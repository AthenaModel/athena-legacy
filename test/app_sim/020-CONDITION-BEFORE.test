# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-CONDITION-BEFORE.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) CONDITION:BEFORE:* order tests.
#
#    This test suite tests the CONDITION:BEFORE:* orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE BOB NB1 NB2 BLUE BRIT ALQ
        ted order TACTIC:DEPOSIT:CREATE owner JOE amount 10
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Standard items

    set C1 {
        cc_id          1
        t1             10
    }

    #-------------------------------------------------------------------
    # CONDITION:BEFORE:CREATE

    test BEFORE:CREATE-1.1 {required parms} -body {
        ted order -reject CONDITION:BEFORE:CREATE {}
    } -result {
        cc_id {required value}
        t1 {required value}
    }

    
    test BEFORE:CREATE-1.2 {tactic is unknown} -setup {
        setup
    } -body {
        ted order -reject CONDITION:BEFORE:CREATE \
            [dict merge $C1 [list cc_id NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        cc_id {Invalid goal or tactic ID: "NONESUCH"}
    }

    test BEFORE:CREATE-1.3 {t1 is not timespec} -setup {
        setup
    } -body {
        ted order -reject CONDITION:BEFORE:CREATE \
            [dict merge $C1 [list t1 NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        t1 {invalid time spec "NONESUCH", base time should be "NOW", "T0", an integer tick, or a week string}
    }

    test BEFORE:CREATE-2.1 {condition is created} -setup {
        setup
    } -body {
        ted order CONDITION:BEFORE:CREATE $C1

        ted querylist {SELECT * FROM conditions_BEFORE}
    } -cleanup {
        cleanup
    } -result {
condition_id    1
condition_type  BEFORE
cc_id           1
narrative       The current simulation time is earlier than week 10, i.e., before 2012W11.
state           normal
flag            
t1              10
    }


    test BEFORE:CREATE-2.2 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <conditions>
        ted order CONDITION:BEFORE:CREATE $C1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
    }


    test BEFORE:CREATE-3.1 {undo effects} -setup {
        setup
        ted order CONDITION:BEFORE:CREATE $C1
    } -body {
        ted notifier bind ::rdb <conditions>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> delete 1}
    }


    #-------------------------------------------------------------------
    # CONDITION:BEFORE:UPDATE

    proc setup_update {} {
        variable C1
        setup
        ted order CONDITION:BEFORE:CREATE $C1
    }

    test BEFORE:UPDATE-1.1 {required parms} -body {
        ted order -reject CONDITION:BEFORE:UPDATE {}
    } -result {
        condition_id {required value}
        t1 {required value}
    }

    
    test BEFORE:UPDATE-1.2 {condition_id is unknown} -setup {
        setup_update
    } -body {
        ted order -reject CONDITION:BEFORE:UPDATE condition_id NONESUCH t1 2
    } -cleanup {
        cleanup
    } -result {
        condition_id {Invalid condition ID: "NONESUCH"}
    }

    test BEFORE:UPDATE-1.3 {t1 is not timespec} -setup {
        setup_update
    } -body {
        ted order -reject CONDITION:BEFORE:UPDATE condition_id 1 t1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        t1 {invalid time spec "NONESUCH", base time should be "NOW", "T0", an integer tick, or a week string}
    }

    test BEFORE:UPDATE-1.4 {wrong flavor of condition} -setup {
        setup_update
        rdb eval {UPDATE conditions SET condition_type='BOGUS'}
    } -body {
        ted order -reject CONDITION:BEFORE:UPDATE condition_id 1 t1 5
    } -cleanup {
        cleanup
    } -result {
        condition_id {Condition 1 is not a BEFORE condition}
    }

    test BEFORE:UPDATE-2.1 {activities are updated} -setup {
        setup_update
    } -body {
        ted order CONDITION:BEFORE:UPDATE condition_id 1 t1 2 

        ted querylist {SELECT * FROM conditions_BEFORE}
    } -cleanup {
        cleanup
    } -result {
condition_id    1
condition_type  BEFORE
cc_id           1
narrative       The current simulation time is earlier than week 2, i.e., before 2012W03.
state           normal
flag            
t1              2
    }


    test BEFORE:UPDATE-2.2 {Effects} -setup {
        setup_update
    } -body {
        ted notifier bind ::rdb <conditions>
        ted order CONDITION:BEFORE:UPDATE condition_id 1 t1 2
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
    }


    test BEFORE:UPDATE-3.1 {undo effects} -setup {
        setup_update
        ted order CONDITION:BEFORE:UPDATE condition_id 1 t1 2
    } -body {
        ted notifier bind ::rdb <conditions>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::










