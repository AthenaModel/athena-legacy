# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-CONDITION-NBMOOD.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) CONDITION:NBMOOD:* order tests.
#
#    This test suite tests the CONDITION:NBMOOD:* orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE BOB NB1 NB2 BLUE BRIT ALQ
        ted order TACTIC:SAVE:CREATE owner JOE int1 10
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Standard items

    set C1 {
        cc_id          1
        n              NB1
        op1            GT
        x1             45.0
    }

    #-------------------------------------------------------------------
    # CONDITION:NBMOOD:CREATE

    test CREATE-1.1 {required parms} -body {
        ted order -reject CONDITION:NBMOOD:CREATE {}
    } -result {
        cc_id {required value}
        n {required value}
        op1 {required value}
        x1 {required value}
    }

    
    test CREATE-1.2 {tactic is unknown} -setup {
        setup
    } -body {
        ted order -reject CONDITION:NBMOOD:CREATE \
            [dict merge $C1 [list cc_id NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        cc_id {Invalid goal or tactic ID: "NONESUCH"}
    }

    test CREATE-1.3 {nbhood is unknown} -setup {
        setup
    } -body {
        ted order -reject CONDITION:NBMOOD:CREATE \
            [dict merge $C1 [list n NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        n {Invalid neighborhood, should be one of: NB1, NB2}
    }

    test CREATE-1.4 {op1 is invalid} -setup {
        setup
    } -body {
        ted order -reject CONDITION:NBMOOD:CREATE \
            [dict merge $C1 [list op1 NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        op1 {invalid value "NONESUCH", should be one of: EQ, GE, GT, LE, LT}
    }

    test CREATE-1.5 {x1 is invalid} -setup {
        setup
    } -body {
        ted order -reject CONDITION:NBMOOD:CREATE [dict merge $C1 {
            x1 NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        x1 {invalid value "NONESUCH", should be a real number in range -100.0, 100.0, or one of: VS, S, A, D, VD}
    }

    test CREATE-2.1 {condition is created} -setup {
        setup
    } -body {
        ted order CONDITION:NBMOOD:CREATE $C1

        ted querylist {SELECT * FROM conditions_NBMOOD}
    } -cleanup {
        cleanup
    } -result {
condition_id    1
condition_type  NBMOOD
cc_id           1
narrative       Neighborhood NB1's mood is greater than 45.00.
state           normal
flag            
n               NB1
op1             GT
x1              45.0
    }


    test CREATE-2.2 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <conditions>
        ted order CONDITION:NBMOOD:CREATE $C1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
    }


    test CREATE-3.1 {undo effects} -setup {
        setup
        ted order CONDITION:NBMOOD:CREATE $C1
    } -body {
        ted notifier bind ::rdb <conditions>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> delete 1}
    }


    #-------------------------------------------------------------------
    # CONDITION:NBMOOD:UPDATE

    proc setup_update {} {
        variable C1
        setup
        ted order CONDITION:NBMOOD:CREATE $C1
    }

    test UPDATE-1.1 {required parms} -body {
        ted order -reject CONDITION:NBMOOD:UPDATE {}
    } -result {
        condition_id {required value}
    }

    
    test UPDATE-1.2 {condition_id is unknown} -setup {
        setup_update
    } -body {
        ted order -reject CONDITION:NBMOOD:UPDATE condition_id NONESUCH x1 10
    } -cleanup {
        cleanup
    } -result {
        condition_id {Invalid condition ID: "NONESUCH"}
    }

    test UPDATE-1.3 {nbhood is unknown} -setup {
        setup_update
    } -body {
        ted order -reject CONDITION:NBMOOD:UPDATE condition_id 1 n NONESUCH
    } -cleanup {
        cleanup
    } -result {
        n {Invalid neighborhood, should be one of: NB1, NB2}
    }

    test UPDATE-1.4 {op1 is invalid} -setup {
        setup_update
    } -body {
        ted order -reject CONDITION:NBMOOD:UPDATE condition_id 1 op1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        op1 {invalid value "NONESUCH", should be one of: EQ, GE, GT, LE, LT}
    }

    test UPDATE-1.5 {x1 is invalid} -setup {
        setup_update
    } -body {
        ted order -reject CONDITION:NBMOOD:UPDATE condition_id 1 x1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        x1 {invalid value "NONESUCH", should be a real number in range -100.0, 100.0, or one of: VS, S, A, D, VD}
    }

    test UPDATE-1.6 {wrong flavor of condition} -setup {
        setup_update
        rdb eval {UPDATE conditions SET condition_type='BOGUS'}
    } -body {
        ted order -reject CONDITION:NBMOOD:UPDATE condition_id 1 x1 5
    } -cleanup {
        cleanup
    } -result {
        condition_id {Condition 1 is not a NBMOOD condition}
    }

    test UPDATE-2.1 {activities are updated} -setup {
        setup_update
    } -body {
        ted order CONDITION:NBMOOD:UPDATE condition_id 1 op1 EQ x1 20

        ted querylist {SELECT * FROM conditions_NBMOOD}
    } -cleanup {
        cleanup
    } -result {
condition_id    1
condition_type  NBMOOD
cc_id           1
narrative       Neighborhood NB1's mood is equal to 20.00.
state           normal
flag            
n               NB1
op1             EQ
x1              20.0
    }


    test UPDATE-2.2 {Effects} -setup {
        setup_update
    } -body {
        ted notifier bind ::rdb <conditions>
        ted order CONDITION:NBMOOD:UPDATE condition_id 1 x1 20
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
        {::rdb <conditions> update 1}
    }


    test UPDATE-3.1 {undo effects} -setup {
        setup_update
        ted order CONDITION:NBMOOD:UPDATE condition_id 1 x1 20
    } -body {
        ted notifier bind ::rdb <conditions>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







