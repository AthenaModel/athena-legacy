# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-gofer_civgroups.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    civgroup(sim) tests.
#
#    This test suite tests the gofer::CIVGROUPS type.
#
#    NOTE: The type itself is implemented using gofer(n); thus,
#    we don't need to test the behavior of the type itself.  As a result,
#    this test suite focusses on the gofer::CIVGROUPS-specific rule
#    objects.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.
namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    proc setup {} {
        ted create JOE BOB BLUE BRIT SHIA SUNN KURD
    }

    proc cleanup {} {
        # Clean up the test environment
        array unset parms
        ted cleanup
    }

    #-------------------------------------------------------------------
    # Rule: BY_VALUE

    test BY_VALUE-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::BY_VALUE construct {SUNN SHIA}
    } -cleanup {
        cleanup
    } -result {raw_value {SUNN SHIA}}

    test BY_VALUE-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::BY_VALUE validate {raw_value {SUNN SHIA}}
    } -cleanup {
        cleanup
    } -result {raw_value {SUNN SHIA}}

    test BY_VALUE-2.2 {validate, invalid} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::BY_VALUE validate {raw_value {SUNN NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group*}

    test BY_VALUE-3.1 {narrative} -body {
        ::gofer::CIVGROUPS::BY_VALUE narrative {raw_value SUNN}
    } -result {group SUNN}

    test BY_VALUE-4.1 {eval} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::BY_VALUE eval {raw_value {SUNN SHIA}}
    } -cleanup {
        cleanup
    } -result {SUNN SHIA}

    #-------------------------------------------------------------------
    # Rule: RESIDENT_IN

    test RESIDENT_IN-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::RESIDENT_IN construct {NB1 NB2}
    } -cleanup {
        cleanup
    } -result {nlist {NB1 NB2}}

    test RESIDENT_IN-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::RESIDENT_IN validate {nlist {NB1 NB2}}
    } -cleanup {
        cleanup
    } -result {nlist {NB1 NB2}}

    test RESIDENT_IN-2.2 {validate, invalid} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::RESIDENT_IN validate {nlist {NB1 NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood*}

    test RESIDENT_IN-3.1 {narrative} -body {
        ::gofer::CIVGROUPS::RESIDENT_IN narrative {nlist NB1}
    } -result {non-empty civilian groups resident in NB1}

    test RESIDENT_IN-4.1 {eval, valid} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::RESIDENT_IN eval {nlist {NB1 NB2}}
    } -cleanup {
        cleanup
    } -result {SHIA SUNN KURD}


    #-------------------------------------------------------------------
    # Rule: NOT_RESIDENT_IN

    test NOT_RESIDENT_IN-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::NOT_RESIDENT_IN construct {NB1 NB2}
    } -cleanup {
        cleanup
    } -result {nlist {NB1 NB2}}

    test NOT_RESIDENT_IN-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::NOT_RESIDENT_IN validate {nlist {NB1 NB2}}
    } -cleanup {
        cleanup
    } -result {nlist {NB1 NB2}}

    test NOT_RESIDENT_IN-2.2 {validate, invalid} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::NOT_RESIDENT_IN validate {nlist {NB1 NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood*}

    test NOT_RESIDENT_IN-3.1 {narrative} -body {
        ::gofer::CIVGROUPS::NOT_RESIDENT_IN narrative {nlist NB1}
    } -result {non-empty civilian groups not resident in NB1}

    test NOT_RESIDENT_IN-4.1 {eval, valid} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::NOT_RESIDENT_IN eval {nlist NB2}
    } -cleanup {
        cleanup
    } -result {SHIA SUNN}

    test NOT_RESIDENT_IN-4.2 {eval, valid} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::NOT_RESIDENT_IN eval {nlist {NB1 NB2}}
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # Rule: MOOD_IS_GOOD

    proc setupMood {} {
        setup
        ted lock
        aram sat bset 1 SHIA AUT  100.0
        aram sat bset 1 SHIA CUL  100.0
        aram sat bset 1 SHIA QOL  100.0
        aram sat bset 1 SHIA SFT  100.0
        aram sat bset 1 SUNN AUT -100.0
        aram sat bset 1 SUNN CUL -100.0
        aram sat bset 1 SUNN QOL -100.0
        aram sat bset 1 SUNN SFT -100.0
        ted step
    }

    test MOOD_IS_GOOD-1.1 {construct} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::MOOD_IS_GOOD construct
    } -cleanup {
        cleanup
    } -result {}

    test MOOD_IS_GOOD-2.1 {validate} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::MOOD_IS_GOOD validate {}
    } -cleanup {
        cleanup
    } -result {}

    test MOOD_IS_GOOD-3.1 {narrative} -body {
        ::gofer::CIVGROUPS::MOOD_IS_GOOD narrative {}
    } -match glob -result {civilian groups whose mood is good}

    test MOOD_IS_GOOD-4.1 {eval} -setup {
        setupMood
    } -body {
        ::gofer::CIVGROUPS::MOOD_IS_GOOD eval {}
    } -cleanup {
        cleanup
    } -result {SHIA}

    #-------------------------------------------------------------------
    # Rule: MOOD_IS_BAD

    test MOOD_IS_BAD-1.1 {construct} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::MOOD_IS_BAD construct
    } -cleanup {
        cleanup
    } -result {}

    test MOOD_IS_BAD-2.1 {validate} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::MOOD_IS_BAD validate {}
    } -cleanup {
        cleanup
    } -result {}

    test MOOD_IS_BAD-3.1 {narrative} -body {
        ::gofer::CIVGROUPS::MOOD_IS_BAD narrative {}
    } -match glob -result {civilian groups whose mood is bad}

    test MOOD_IS_BAD-4.1 {eval} -setup {
        setupMood
    } -body {
        ::gofer::CIVGROUPS::MOOD_IS_BAD eval {}
    } -cleanup {
        cleanup
    } -result {SUNN}

    #-------------------------------------------------------------------
    # Rule: MOOD_IS_AMBIVALENT

    test MOOD_IS_AMBIVALENT-1.1 {construct} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::MOOD_IS_AMBIVALENT construct
    } -cleanup {
        cleanup
    } -result {}

    test MOOD_IS_AMBIVALENT-2.1 {validate} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::MOOD_IS_AMBIVALENT validate {}
    } -cleanup {
        cleanup
    } -result {}

    test MOOD_IS_AMBIVALENT-3.1 {narrative} -body {
        ::gofer::CIVGROUPS::MOOD_IS_AMBIVALENT narrative {}
    } -match glob -result {civilian groups whose mood is ambivalent}

    test MOOD_IS_AMBIVALENT-4.1 {eval} -setup {
        setupMood
    } -body {
        ::gofer::CIVGROUPS::MOOD_IS_AMBIVALENT eval {}
    } -cleanup {
        cleanup
    } -result {KURD}


    #-------------------------------------------------------------------
    # Rule: SUPPORTING_ACTOR

    test SUPPORTING_ACTOR-1.1 {construct} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::SUPPORTING_ACTOR construct any {JOE BOB}
    } -cleanup {
        cleanup
    } -result {anyall ANY alist {JOE BOB}}

    test SUPPORTING_ACTOR-2.1 {validate} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::SUPPORTING_ACTOR validate {anyall any alist {JOE BOB}}
    } -cleanup {
        cleanup
    } -result {anyall ANY alist {JOE BOB}}

    test SUPPORTING_ACTOR-3.1 {narrative} -body {
        ::gofer::CIVGROUPS::SUPPORTING_ACTOR narrative {anyall ANY alist JOE}
    } -match glob -result {civilian groups that actively support *}

    test SUPPORTING_ACTOR-4.1 {eval} -setup {
        setup
        foreach {g a support} {
            SHIA BOB 0.3
            SHIA JOE 0.3
            SUNN BOB 0.0
            BLUE BOB 0.3
        } {
            rdb eval {
                INSERT INTO support_nga(n,g,a,support)
                VALUES('NB1',$g,$a,$support)
            }
        }
    } -body {
        ::gofer::CIVGROUPS::SUPPORTING_ACTOR eval {anyall ANY alist BOB}
    } -cleanup {
        cleanup
    } -result {SHIA}

    #-------------------------------------------------------------------
    # Rule: LIKING_ACTOR

    test LIKING_ACTOR-1.1 {construct} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::LIKING_ACTOR construct any {JOE BOB}
    } -cleanup {
        cleanup
    } -result {anyall ANY alist {JOE BOB}}

    test LIKING_ACTOR-2.1 {validate} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::LIKING_ACTOR validate {anyall any alist {JOE BOB}}
    } -cleanup {
        cleanup
    } -result {anyall ANY alist {JOE BOB}}

    test LIKING_ACTOR-3.1 {narrative} -body {
        ::gofer::CIVGROUPS::LIKING_ACTOR narrative {anyall ANY alist JOE}
    } -match glob -result {civilian groups that like *}

    test LIKING_ACTOR-4.1 {eval} -setup {
        setup
        ted lock
        aram vrel bset 1 SHIA BOB  0.3
        aram vrel bset 1 SHIA JOE  0.3
        aram vrel bset 1 SUNN BOB  0.0
        aram vrel bset 1 BLUE BOB  0.3
        ted step
    } -body {
        ::gofer::CIVGROUPS::LIKING_ACTOR eval {anyall ANY alist BOB}
    } -cleanup {
        cleanup
    } -result {SHIA}

    #-------------------------------------------------------------------
    # Rule: DISLIKING_ACTOR

    test DISLIKING_ACTOR-1.1 {construct} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::DISLIKING_ACTOR construct any {JOE BOB}
    } -cleanup {
        cleanup
    } -result {anyall ANY alist {JOE BOB}}

    test DISLIKING_ACTOR-2.1 {validate} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::DISLIKING_ACTOR validate {anyall any alist {JOE BOB}}
    } -cleanup {
        cleanup
    } -result {anyall ANY alist {JOE BOB}}

    test DISLIKING_ACTOR-3.1 {narrative} -body {
        ::gofer::CIVGROUPS::DISLIKING_ACTOR narrative {anyall ANY alist JOE}
    } -match glob -result {civilian groups that dislike *}

    test DISLIKING_ACTOR-4.1 {eval} -setup {
        setup
        ted lock
        aram vrel bset 1 SHIA BOB -0.3
        aram vrel bset 1 SHIA JOE -0.3
        aram vrel bset 1 SUNN BOB  0.0
        aram vrel bset 1 BLUE BOB -0.3
        ted step
    } -body {
        ::gofer::CIVGROUPS::DISLIKING_ACTOR eval {anyall ANY alist BOB}
    } -cleanup {
        cleanup
    } -result {SHIA}

    #-------------------------------------------------------------------
    # Rule: LIKING_GROUP

    test LIKING_GROUP-1.1 {construct} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::LIKING_GROUP construct any {BRIT BLUE}
    } -cleanup {
        cleanup
    } -result {anyall ANY glist {BRIT BLUE}}

    test LIKING_GROUP-2.1 {validate} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::LIKING_GROUP validate {anyall any glist {BRIT BLUE}}
    } -cleanup {
        cleanup
    } -result {anyall ANY glist {BRIT BLUE}}

    test LIKING_GROUP-3.1 {narrative} -body {
        ::gofer::CIVGROUPS::LIKING_GROUP narrative {anyall ANY glist BRIT}
    } -match glob -result {civilian groups that like *}

    test LIKING_GROUP-4.1 {eval} -setup {
        setup
        ted lock
        aram hrel bset 1 SHIA KURD  0.3
        aram hrel bset 1 SHIA SUNN  0.3
        aram hrel bset 1 SUNN KURD  0.0
        aram hrel bset 1 BLUE KURD  0.3
        ted step
    } -body {
        ::gofer::CIVGROUPS::LIKING_GROUP eval {anyall ANY glist KURD}
    } -cleanup {
        cleanup
    } -result {SHIA}

    #-------------------------------------------------------------------
    # Rule: DISLIKING_GROUP

    test DISLIKING_GROUP-1.1 {construct} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::DISLIKING_GROUP construct any {BRIT BLUE}
    } -cleanup {
        cleanup
    } -result {anyall ANY glist {BRIT BLUE}}

    test DISLIKING_GROUP-2.1 {validate} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::DISLIKING_GROUP validate {anyall any glist {BRIT BLUE}}
    } -cleanup {
        cleanup
    } -result {anyall ANY glist {BRIT BLUE}}

    test DISLIKING_GROUP-3.1 {narrative} -body {
        ::gofer::CIVGROUPS::DISLIKING_GROUP narrative {anyall ANY glist BRIT}
    } -match glob -result {civilian groups that dislike *}

    test DISLIKING_GROUP-4.1 {eval} -setup {
        setup
        ted lock
        aram hrel bset 1 SHIA KURD -0.3
        aram hrel bset 1 SHIA SUNN -0.3
        aram hrel bset 1 SUNN KURD  0.0
        aram hrel bset 1 BLUE KURD -0.3
        ted step
    } -body {
        ::gofer::CIVGROUPS::DISLIKING_GROUP eval {anyall ANY glist KURD}
    } -cleanup {
        cleanup
    } -result {SHIA}

    #-------------------------------------------------------------------
    # Rule: LIKED_BY_GROUP

    test LIKED_BY_GROUP-1.1 {construct} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::LIKED_BY_GROUP construct any {BRIT BLUE}
    } -cleanup {
        cleanup
    } -result {anyall ANY glist {BRIT BLUE}}

    test LIKED_BY_GROUP-2.1 {validate} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::LIKED_BY_GROUP validate {anyall any glist {BRIT BLUE}}
    } -cleanup {
        cleanup
    } -result {anyall ANY glist {BRIT BLUE}}

    test LIKED_BY_GROUP-3.1 {narrative} -body {
        ::gofer::CIVGROUPS::LIKED_BY_GROUP narrative {anyall ANY glist BRIT}
    } -match glob -result {civilian groups that are liked by *}

    test LIKED_BY_GROUP-4.1 {eval} -setup {
        setup
        ted lock
        aram hrel bset 1 SHIA SUNN  0.3
        aram hrel bset 1 SHIA KURD  0.0
        aram hrel bset 1 KURD SUNN  0.3
        aram hrel bset 1 SHIA BLUE  0.3
        ted step
    } -body {
        ::gofer::CIVGROUPS::LIKED_BY_GROUP eval {anyall ANY glist SHIA}
    } -cleanup {
        cleanup
    } -result {SUNN}

    #-------------------------------------------------------------------
    # Rule: DISLIKED_BY_GROUP

    test DISLIKED_BY_GROUP-1.1 {construct} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::DISLIKED_BY_GROUP construct any {BRIT BLUE}
    } -cleanup {
        cleanup
    } -result {anyall ANY glist {BRIT BLUE}}

    test DISLIKED_BY_GROUP-2.1 {validate} -setup {
        setup
    } -body {
        ::gofer::CIVGROUPS::DISLIKED_BY_GROUP validate {anyall any glist {BRIT BLUE}}
    } -cleanup {
        cleanup
    } -result {anyall ANY glist {BRIT BLUE}}

    test DISLIKED_BY_GROUP-3.1 {narrative} -body {
        ::gofer::CIVGROUPS::DISLIKED_BY_GROUP narrative {anyall ANY glist BRIT}
    } -match glob -result {civilian groups that are disliked by *}

    test DISLIKED_BY_GROUP-4.1 {eval} -setup {
        setup
        ted lock
        aram hrel bset 1 SHIA SUNN -0.3
        aram hrel bset 1 SHIA KURD  0.0
        aram hrel bset 1 KURD SUNN -0.3
        aram hrel bset 1 SHIA BLUE -0.3
        ted step
    } -body {
        ::gofer::CIVGROUPS::DISLIKED_BY_GROUP eval {anyall ANY glist SHIA}
    } -cleanup {
        cleanup
    } -result {SUNN}


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::

