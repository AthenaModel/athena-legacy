# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-gofer_civgroups.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    civgroup(sim) tests.
#
#    This test suite tests the gofer_civgroups type.
#
#    NOTE: The type itself is implemented using gofer(n); thus,
#    we don't need to test the behavior of the type itself.  As a result,
#    this test suite focusses on the gofer_civgroups-specific rule
#    objects.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    proc setup {} {
        ted create JOE BOB BLUE SHIA SUNN KURD
    }

    proc cleanup {} {
        # Clean up the test environment
        array unset parms
        ted cleanup
    }

    #-------------------------------------------------------------------
    # Rule: by_value

    test by_value-1.1 {keys} -body {
        ::gofer_civgroups::by_value keys
    } -result {raw_value}
    
    test by_value-2.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer_civgroups::by_value construct {SUNN SHIA}
    } -cleanup {
        cleanup
    } -result {raw_value {SUNN SHIA}}

    test by_value-2.2 {construct, invalid} -setup {
        setup
    } -body {
        ::gofer_civgroups::by_value construct {SUNN NONESUCH SHIA}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group*}

    test by_value-3.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer_civgroups::by_value validate {raw_value {SUNN SHIA}}
    } -cleanup {
        cleanup
    } -result {raw_value {SUNN SHIA}}

    test by_value-3.2 {validate, invalid} -setup {
        setup
    } -body {
        ::gofer_civgroups::by_value validate {raw_value {SUNN NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group*}

    test by_value-4.1 {narrative, one group} -body {
        ::gofer_civgroups::by_value narrative {raw_value SUNN}
    } -result {group SUNN}

    test by_value-4.2 {narrative, several groups} -body {
        ::gofer_civgroups::by_value narrative {
            raw_value {SUNN SHIA KURD}
        }
    } -result {these groups (SUNN, SHIA, KURD)}
    
    test by_value-4.3 {narrative, -brief} -body {
        ::gofer_civgroups::by_value narrative {
            raw_value {A B C D E F G H I J}
        } -brief
    } -result {these groups (A, B, C, D, E, F, G, H, ...)}

    test by_value-5.1 {eval, valid} -setup {
        setup
    } -body {
        ::gofer_civgroups::by_value eval {raw_value {SUNN SHIA}}
    } -cleanup {
        cleanup
    } -result {SUNN SHIA}

    #-------------------------------------------------------------------
    # Rule: resident_in

    test resident_in-1.1 {keys} -body {
        ::gofer_civgroups::resident_in keys
    } -result {nlist}
    
    test resident_in-2.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer_civgroups::resident_in construct {NB1 NB2}
    } -cleanup {
        cleanup
    } -result {nlist {NB1 NB2}}

    test resident_in-2.2 {construct, invalid} -setup {
        setup
    } -body {
        ::gofer_civgroups::resident_in construct {NB1 NONESUCH NB2}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood*}

    test resident_in-3.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer_civgroups::resident_in validate {nlist {NB1 NB2}}
    } -cleanup {
        cleanup
    } -result {nlist {NB1 NB2}}

    test resident_in-3.2 {validate, invalid} -setup {
        setup
    } -body {
        ::gofer_civgroups::resident_in validate {nlist {NB1 NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood*}

    test resident_in-4.1 {narrative, one nbhood} -body {
        ::gofer_civgroups::resident_in narrative {nlist NB1}
    } -result {non-empty civilian groups resident in NB1}

    test resident_in-4.2 {narrative, several nbhoods} -body {
        ::gofer_civgroups::resident_in narrative {
            nlist {NB1 NB2}
        }
    } -result {non-empty civilian groups resident in these neighborhoods (NB1, NB2)}
    
    test resident_in-4.3 {narrative, -brief} -body {
        ::gofer_civgroups::resident_in narrative {
            nlist {A B C D E F G H I J}
        } -brief
    } -result {non-empty civilian groups resident in these neighborhoods (A, B, C, D, E, F, G, H, ...)}

    test resident_in-5.1 {eval, valid} -setup {
        setup
    } -body {
        ::gofer_civgroups::resident_in eval {nlist {NB1 NB2}}
    } -cleanup {
        cleanup
    } -result {SHIA SUNN KURD}


    #-------------------------------------------------------------------
    # Rule: supporting_actor

    test supporting_actor-1.1 {keys} -body {
        ::gofer_civgroups::supporting_actor keys
    } -result {alist}
    
    test supporting_actor-2.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer_civgroups::supporting_actor construct {JOE BOB}
    } -cleanup {
        cleanup
    } -result {alist {JOE BOB}}

    test supporting_actor-2.2 {construct, invalid} -setup {
        setup
    } -body {
        ::gofer_civgroups::supporting_actor construct {JOE NONESUCH BOB}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor*}

    test supporting_actor-3.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer_civgroups::supporting_actor validate {alist {JOE BOB}}
    } -cleanup {
        cleanup
    } -result {alist {JOE BOB}}

    test supporting_actor-3.2 {validate, invalid} -setup {
        setup
    } -body {
        ::gofer_civgroups::supporting_actor validate {alist {JOE NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor*}

    test supporting_actor-4.1 {narrative, one nbhood} -body {
        ::gofer_civgroups::supporting_actor narrative {alist JOE}
    } -result {civilian groups that actively support actor JOE}

    test supporting_actor-4.2 {narrative, several nbhoods} -body {
        ::gofer_civgroups::supporting_actor narrative {
            alist {JOE BOB}
        }
    } -result {civilian groups that actively support any of these actors (JOE, BOB)}
    
    test supporting_actor-4.3 {narrative, -brief} -body {
        ::gofer_civgroups::supporting_actor narrative {
            alist {A B C D E F G H I J}
        } -brief
    } -result {civilian groups that actively support any of these actors (A, B, C, D, E, F, G, H, ...)}

    test supporting_actor-5.1 {eval, valid} -setup {
        setup
        rdb eval {
            INSERT INTO support_nga(n,g,a,support)
            VALUES('NB1','SHIA','JOE',0.3);

            INSERT INTO support_nga(n,g,a,support)
            VALUES('NB1','SUNN','JOE',0.0);

            INSERT INTO support_nga(n,g,a,support)
            VALUES('NB1','SHIA','BOB',0.3);
        }
    } -body {
        ::gofer_civgroups::supporting_actor eval {alist JOE}
    } -cleanup {
        cleanup
    } -result {SHIA}




    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





