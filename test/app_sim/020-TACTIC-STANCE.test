# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-STANCE.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) TACTIC:STANCE:* order tests.
#
#    This test suite tests the STANCE tactic's orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE BOB BLUE BRIT SUNN SHIA KURD USAID ALQ
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Standard items

    set T1 {
        owner       JOE
        f           BLUE
        text1       GROUP
        glist       {BRIT USAID}
        x1          0.75
        on_lock     1
        priority    bottom
    }

    set T2 {
        owner       BOB
        f           ALQ
        text1       NBHOOD
        nlist       NB1
        x1          0.65
        on_lock     1
        priority    bottom
    }

    #-------------------------------------------------------------------
    # TACTIC:STANCE:CREATE

    test CREATE-1.1 {required parms} -body {
        ted order -reject TACTIC:STANCE:CREATE {}
    } -result {
        owner {required value}
    }

    test CREATE-1.2 {owner is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:STANCE:CREATE \
            [dict merge $T1 [list owner NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        owner {Invalid actor, should be one of: JOE, BOB}
    }

    test CREATE-1.3 {f is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:STANCE:CREATE \
            [dict merge $T1 [list f NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        f {invalid value "NONESUCH", should be one of: BLUE, BRIT}
    }

    test CREATE-1.4 {text1 is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:STANCE:CREATE \
            [dict merge $T1 [list text1 NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        text1 {invalid value "NONESUCH", should be one of: GROUP, NBHOOD}
    }

    test CREATE-1.5 {GROUP; glist is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:STANCE:CREATE \
            [dict merge $T1 [list glist NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        glist {invalid value "NONESUCH", should be one of: ALQ, BRIT, KURD, SHIA, SUNN, USAID}
    }

    test CREATE-1.6 {NBHOOD; nlist is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:STANCE:CREATE \
            [dict merge $T2 [list nlist NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        nlist {Invalid neighborhood, should be one of: NB1, NB2}
    }

    test CREATE-1.7 {x1 is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:STANCE:CREATE \
            [dict merge $T1 [list x1 1.1]]
    } -cleanup {
        cleanup
    } -result {
        x1 {invalid value "1.1", should be a real number in range -1.0, 1.0, or one of: SUPPORT, LIKE, INDIFF, DISLIKE, OPPOSE}
    }

    test CREATE-1.8 {on_lock is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:STANCE:CREATE [dict merge $T1 {
            on_lock NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        on_lock {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }

    test CREATE-1.9 {priority is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:STANCE:CREATE [dict merge $T1 {
            priority NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        priority {invalid value "nonesuch", should be one of: top, bottom}
    }

    test CREATE-2.1 {tactic is created: GROUP} -setup {
        setup
    } -body {
        ted order TACTIC:STANCE:CREATE $T1

        ted querylist {SELECT * FROM tactics_STANCE}
    } -cleanup {
        cleanup
    } -result {
tactic_id    1
tactic_type  STANCE
owner        JOE
narrative    Group BLUE adopts a stance of 0.75 (Supports) toward these groups: BRIT, USAID.
priority     1
f            BLUE
text1        GROUP
glist        BRIT USAID
nlist        
x1           0.75
on_lock      1
state        normal
exec_ts      
exec_flag    0
    }

    test CREATE-2.2 {tactic is created: NBHOOD} -setup {
        setup
    } -body {
        ted order TACTIC:STANCE:CREATE $T2

        ted querylist {SELECT * FROM tactics_STANCE}
    } -cleanup {
        cleanup
    } -result {
tactic_id    1
tactic_type  STANCE
owner        BOB
narrative    Group ALQ adopts a stance of 0.65 (Supports) toward the civilians in this neighborhood: NB1.
priority     1
f            ALQ
text1        NBHOOD
glist        
nlist        NB1
x1           0.65
on_lock      1
state        normal
exec_ts      
exec_flag    0
    }

    test CREATE-2.3 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:STANCE:CREATE $T1
        ted notifier received

        # NOTE: Two updates, because of priority setting.
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
        {::rdb <tactics> update 1}
    }


    test CREATE-3.1 {undo effects} -setup {
        setup
        ted order TACTIC:STANCE:CREATE $T1
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> delete 1}
    }

    #-------------------------------------------------------------------
    # TACTIC:STANCE:UPDATE

    proc setup_update_stance {} {
        variable T2
        setup
        ted order TACTIC:STANCE:CREATE $T2
    }

    test UPDATE-1.1 {required parms} -body {
        ted order -reject TACTIC:STANCE:UPDATE {}
    } -result {
        tactic_id {required value}
    }

    
    test UPDATE-1.2 {tactic_id is unknown} -setup {
        setup_update_stance
    } -body {
        ted order -reject TACTIC:STANCE:UPDATE \
            tactic_id NONESUCH
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Invalid tactic ID: "NONESUCH"}
    }

    test UPDATE-1.3 {f is unknown} -setup {
        setup_update_stance
    } -body {
        ted order -reject TACTIC:STANCE:UPDATE tactic_id 1 f NONESUCH
    } -cleanup {
        cleanup
    } -result {
        f {invalid value "NONESUCH", should be one of: ALQ}
    }

    test UPDATE-1.4 {text1 is invalid} -setup {
        setup_update_stance
    } -body {
        ted order -reject TACTIC:STANCE:UPDATE tactic_id 1 text1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        text1 {invalid value "NONESUCH", should be one of: GROUP, NBHOOD}
    }

    test UPDATE-1.5 {glist is invalid} -setup {
        setup_update_stance
    } -body {
        ted order -reject TACTIC:STANCE:UPDATE tactic_id 1 \
            text1 GROUP glist NONESUCH
    } -cleanup {
        cleanup
    } -result {
        glist {invalid value "NONESUCH", should be one of: BLUE, BRIT, KURD, SHIA, SUNN, USAID}
    }

    test UPDATE-1.6 {nlist is invalid} -setup {
        setup_update_stance
    } -body {
        ted order -reject TACTIC:STANCE:UPDATE tactic_id 1 \
            text1 NBHOOD nlist NONESUCH
    } -cleanup {
        cleanup
    } -result {
        nlist {Invalid neighborhood, should be one of: NB1, NB2}
    }

    test UPDATE-1.7 {x1 is invalid} -setup {
        setup_update_stance
    } -body {
        ted order -reject TACTIC:STANCE:UPDATE tactic_id 1 x1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        x1 {invalid value "NONESUCH", should be a real number in range -1.0, 1.0, or one of: SUPPORT, LIKE, INDIFF, DISLIKE, OPPOSE}
    }

    test UPDATE-1.8 {on_lock is invalid} -setup {
        setup_update_stance
    } -body {
        ted order -reject TACTIC:STANCE:UPDATE tactic_id 1 on_lock NONESUCH
    } -cleanup {
        cleanup
    } -result {
        on_lock {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }

    test UPDATE-1.9 {wrong flavor of tactic} -setup {
        setup_update_stance
        rdb eval {UPDATE tactics SET tactic_type='BOGUS'}
    } -body {
        ted order -reject TACTIC:STANCE:UPDATE tactic_id 1
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Tactic 1 is not a STANCE tactic}
    }

    test UPDATE-2.1 {tactic is updated} -setup {
        setup_update_stance
    } -body {
        ted order TACTIC:STANCE:UPDATE \
            tactic_id 1 text1 GROUP glist {SUNN SHIA}

        ted querylist {SELECT * FROM tactics_STANCE}
    } -cleanup {
        cleanup
    } -result {
tactic_id    1
tactic_type  STANCE
owner        BOB
narrative    Group ALQ adopts a stance of 0.65 (Supports) toward these groups: SUNN, SHIA.
priority     1
f            ALQ
text1        GROUP
glist        SUNN SHIA
nlist        NB1
x1           0.65
on_lock      1
state        normal
exec_ts      
exec_flag    0
    }

    test UPDATE-2.2 {Effects} -setup {
        setup
        ted order TACTIC:STANCE:CREATE $T2
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:STANCE:UPDATE tactic_id 1 x1 0.5
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
    }


    test UPDATE-3.1 {undo effects} -setup {
        setup_update_stance
        ted order TACTIC:STANCE:UPDATE tactic_id 1 x1 0.5
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





