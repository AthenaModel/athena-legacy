# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-smart_civgroups.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    civgroup(sim) tests.
#
#    This test suite tests the smart_civgroups type.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        array unset parms
        ted cleanup
    }

    #-------------------------------------------------------------------
    # by_name

    test by_name-1.1 {creates a vdict} -setup {
        ted create SHIA SUNN KURD
    } -body {
        smart_civgroups by_name {SHIA SUNN KURD}
    } -cleanup {
        cleanup
    } -result {rule by_name glist {SHIA SUNN KURD}}
    
    test by_name-1.2 {validates} -setup {
        ted create SHIA SUNN KURD
    } -body {
        smart_civgroups by_name {SHIA SUNN NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group*}
    
    #-------------------------------------------------------------------
    # by_nbhood

    test by_nbhood-1.1 {creates a vdict} -setup {
        ted create NB1 NB2
    } -body {
        smart_civgroups by_nbhood NB1
    } -cleanup {
        cleanup
    } -result {rule by_nbhood n NB1}
    
    test by_nbhood-1.2 {validates} -setup {
        ted create NB1 NB2
    } -body {
        smart_civgroups by_nbhood NONESUCH
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood*}
    

    #-------------------------------------------------------------------
    # validate

    test validate-1.1 {invalid rule} -setup {
        ted create SUNN SHIA KURD
    } -body {
        smart_civgroups validate {rule NONESUCH glist NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Unknown rule: "nonesuch"}

    test validate-1.2 {no rule} -setup {
        ted create SUNN SHIA KURD
    } -body {
        smart_civgroups validate {glist NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {No rule specified}

    # by_name

    test validate-2.1 {by_name: canonicalizes} -setup {
        ted create SUNN SHIA KURD
    } -body {
        smart_civgroups validate {rule BY_NAME glist {SUNN SHIA} n NB1}
    } -cleanup {
        cleanup
    } -result {rule by_name glist {SUNN SHIA}}

    test validate-2.2 {by_name: invalid civgroup} -setup {
        ted create SUNN SHIA KURD
    } -body {
        smart_civgroups validate {rule by_name glist {SHIA NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group*}

    test validate-2.3 {by_name: no groups} -setup {
        ted create SUNN SHIA KURD
    } -body {
        smart_civgroups validate {rule by_name glist {}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {No groups selected}

    # by_nbhood

    test validate-3.1 {by_nbhood: canonicalizes} -setup {
        ted create SUNN SHIA KURD
    } -body {
        smart_civgroups validate {rule BY_NBHOOD glist {SUNN SHIA} n NB1}
    } -cleanup {
        cleanup
    } -result {rule by_nbhood n NB1}

    test validate-3.2 {by_nbhood: invalid nbhood} -setup {
        ted create SUNN SHIA KURD
    } -body {
        smart_civgroups validate {rule by_nbhood n NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood*}

    #-------------------------------------------------------------------
    # eval

    test eval-1.1 {no rule} -setup {
        ted create JOE BLUE SUNN SHIA KURD
    } -body {
        smart_civgroups eval {glist {SUNN SHIA}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {*no rule specified}
    
    test eval-1.2 {invalid rule} -setup {
        ted create JOE BLUE SUNN SHIA KURD
    } -body {
        smart_civgroups eval {rule NONESUCH glist {SUNN SHIA}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Unknown rule: "NONESUCH"}
    
    test eval-1.3 {by_name} -setup {
        ted create JOE BLUE SUNN SHIA KURD
    } -body {
        smart_civgroups eval {rule by_name glist {SUNN KURD}}
    } -cleanup {
        cleanup
    } -result {SUNN KURD}

    test eval-1.4 {by_nbhood} -setup {
        ted create JOE BLUE SUNN SHIA KURD
    } -body {
        smart_civgroups eval {rule by_nbhood n NB1}
    } -cleanup {
        cleanup
    } -result {SHIA SUNN}

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {no rule} -setup {
        ted create JOE BLUE SUNN SHIA KURD
    } -body {
        smart_civgroups narrative {glist {SUNN SHIA}}
    } -cleanup {
        cleanup
    } -result {}
    
    test narrative-1.2 {empty rule} -setup {
        ted create JOE BLUE SUNN SHIA KURD
    } -body {
        smart_civgroups narrative {rule "" glist {SUNN SHIA}}
    } -cleanup {
        cleanup
    } -result {}
    
    test narrative-1.3 {invalid rule} -setup {
        ted create JOE BLUE SUNN SHIA KURD
    } -body {
        smart_civgroups narrative {rule NONESUCH glist {SUNN SHIA}}
    } -cleanup {
        cleanup
    } -result {Unknown rule: "NONESUCH"}
    
    test narrative-1.4 {by_name} -setup {
        ted create JOE BLUE SUNN SHIA KURD
    } -body {
        smart_civgroups narrative {rule by_name glist {SUNN KURD}}
    } -cleanup {
        cleanup
    } -result {these groups (SUNN, KURD)}

    test narrative-1.5 {by_nbhood} -setup {
        ted create JOE BLUE SUNN SHIA KURD
    } -body {
        smart_civgroups narrative {rule by_nbhood n NB1}
    } -cleanup {
        cleanup
    } -result {non-empty civilian groups resident in NB1}
   
    test narrative-1.6 {brief} -body {
        smart_civgroups narrative {
            rule by_name
            glist {A B C D E F G H I J} 
        } -brief
    } -cleanup {
        cleanup
    } -result {these groups (A, B, C, D, E, F, G, H, ...)}
    
    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





