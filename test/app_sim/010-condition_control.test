# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-condition_control.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    condition_control(sim) tests.
#
#    This test suite tests the condition_control(sim) ensemble.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    # setup ?n1...?
    #
    # Sets up for a test; makes JOE appear to control the listed
    # neighborhoods.

    proc setup {args} {
        ted create JOE BOB NB1 NB2 NB3 NB4
        ted order TACTIC:DEPOSIT:CREATE owner JOE amount 10

        foreach n [nbhood names] {
            if {$n in $args} {
                set a BOB
            } else {
                set a JOE
            }

            rdb eval {
                INSERT INTO control_n(n,controller) VALUES($n,$a)
            }
        }

        # Verify that unused columns contain NULL
        rdb nullvalue "@"
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        rdb eval {DELETE FROM control_n}
        rdb nullvalue ""
        array unset parms
        ted cleanup
    }

    # Standard Conditions.
    #
    # Because the conditions will belong to JOE, we will make them
    # reference BOB; that way, when we delete BOB to test "check",
    # we won't delete the condition collection along with him.
    
    set C1 {
        cc_id          1
        condition_type CONTROL
        a              BOB
        list1          NB1
    }

    set C2 {
        cc_id          1
        condition_type CONTROL
        a              BOB
        list1          {NB1 NB2 NB3}
    }


    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative: one nbhood} -setup {
        setup
        condition mutate create $C1
    } -body {
        condition::CONTROL narrative [condition get 1]
    } -cleanup {
        cleanup
    } -result {Actor BOB controls neighborhood NB1.}

    test narrative-1.2 {narrative: multiple nbhoods} -setup {
        setup
        condition mutate create $C2
    } -body {
        condition::CONTROL narrative [condition get 1]
    } -cleanup {
        cleanup
    } -result {Actor BOB controls neighborhoods NB1, NB2, NB3.}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {check: successful} -setup {
        setup
        condition mutate create $C1
    } -body {
        condition::CONTROL check [condition get 1]
    } -cleanup {
        cleanup
    } -result {}

    test check-1.2 {check: actor deleted} -setup {
        setup
        condition mutate create $C1
        actor mutate delete BOB
    } -body {
        condition::CONTROL check [condition get 1]
    } -cleanup {
        cleanup
    } -result {Actor BOB no longer exists.}

    test check-1.3 {check: nbhood deleted} -setup {
        setup
        condition mutate create $C2
        nbhood mutate delete NB2
    } -body {
        condition::CONTROL check [condition get 1]
    } -cleanup {
        cleanup
    } -result {Neighborhood NB2 no longer exists.}

    test check-1.4 {check: multiple} -setup {
        setup
        condition mutate create $C2
        actor mutate delete BOB
        nbhood mutate delete NB2
        nbhood mutate delete NB3
    } -body {
        condition::CONTROL check [condition get 1]
    } -cleanup {
        cleanup
    } -result {Actor BOB no longer exists. Neighborhood NB2 no longer exists. Neighborhood NB3 no longer exists.}

    #-------------------------------------------------------------------
    # eval


    test eval-1.1 {One neighborhood, controlled} -setup {
        setup NB1
        condition mutate create $C1
    } -body {
        condition::CONTROL eval [condition get 1]
    } -cleanup {
        cleanup
    } -result {1}

    test eval-1.2 {One neighborhood, not controlled} -setup {
        setup
        condition mutate create $C1
    } -body {
        condition::CONTROL eval [condition get 1]
    } -cleanup {
        cleanup
    } -result {0}

    test eval-1.3 {Multiple neighborhoods, controlled} -setup {
        setup NB1 NB2 NB3
        condition mutate create $C2
    } -body {
        condition::CONTROL eval [condition get 1]
    } -cleanup {
        cleanup
    } -result {1}

    test eval-1.4 {Multiple neighborhoods, not all controlled} -setup {
        setup NB1 NB3
        condition mutate create $C2
    } -body {
        condition::CONTROL eval [condition get 1]
    } -cleanup {
        cleanup
    } -result {0}

    test eval-1.5 {Multiple neighborhoods, some uncontrolled} -setup {
        setup NB1 NB2 NB3
        rdb eval {UPDATE control_n SET controller=NULL WHERE n='NB2'}
        condition mutate create $C2
    } -body {
        condition::CONTROL eval [condition get 1]
    } -cleanup {
        cleanup
    } -result {0}


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







