# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-civgroup.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    civgroup(sim) tests.
#
#    This test suite tests the civgroup(sim) mutators and queries
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        array unset parms
        ted cleanup
    }

    #-------------------------------------------------------------------
    # mutate create

    test create-1.1 {civgroup is created} -body {
        civgroup mutate create [ted entity SHIA]
        ted query {SELECT * FROM civgroups_view}
    } -cleanup {
        cleanup
    } -result {
g    longname color   shape   symbol gtype 
---- -------- ------- ------- ------ ----- 
SHIA Shia     #c00001 NEUTRAL        CIV   
    }


    test create-1.2 {<Entity> create} -body {
        ted notifier bind ::civgroup <Entity>
        civgroup mutate create [ted entity SHIA]
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::civgroup <Entity> create SHIA}
    }


    test create-2.1 {undo deletes the civgroup} -setup {
        civgroup mutate create [ted entity SHIA]
        set undo [civgroup mutate create [ted entity SUNN]]
    } -body {
        {*}$undo
        rdb eval {SELECT g FROM civgroups_view}
    } -cleanup {
        cleanup
    } -result {SHIA}


    test create-2.2 {On undo, <Entity> delete} -setup {
        set undo [civgroup mutate create [ted entity SHIA]]
    } -body {
        ted notifier bind ::civgroup <Entity>
        {*}$undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::civgroup <Entity> delete SHIA}
    }

    #-------------------------------------------------------------------
    # mutate delete

    test delete-1.1 {Group is deleted} -setup {
        ted create SHIA SUNN
    } -body {
        civgroup mutate delete SHIA

        # Is SHIA gone?
        rdb eval {SELECT g FROM civgroups_view}
    } -cleanup {
        cleanup
    } -result {SUNN}


    test delete-1.2 {<Entity> delete} -setup {
        ted create SHIA
    } -body {
        ted notifier bind ::civgroup <Entity>
        civgroup mutate delete SHIA
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::civgroup <Entity> delete SHIA}
    }


    test delete-2.1 {Undo restores group} -setup {
        ted create SHIA
        set undo [civgroup mutate delete SHIA]
    } -body {
        {*}$undo
        ted query {SELECT * FROM civgroups_view}
    } -cleanup {
        cleanup
    } -result {
g    longname color   shape   symbol gtype 
---- -------- ------- ------- ------ ----- 
SHIA Shia     #c00001 NEUTRAL        CIV   
    }


    test delete-2.2 {On undo, <Entity> create} -setup {
        ted create SHIA
        set undo [civgroup mutate delete SHIA]
    } -body {
        ted notifier bind ::civgroup <Entity>
        {*}$undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::civgroup <Entity> create SHIA}
    }

    #-------------------------------------------------------------------
    # mutate update


    test update-1.1 {civgroup is updated} -setup {
        ted create SHIA
    } -body {
        civgroup mutate update {
            g            SHIA
            longname     "Shia Folk"
            color        "#ff0000"
            shape        FRIEND
        }

        ted query {SELECT * FROM civgroups_view}
    } -cleanup {
        cleanup
    } -result {
g    longname  color   shape  symbol gtype 
---- --------- ------- ------ ------ ----- 
SHIA Shia Folk #ff0000 FRIEND        CIV   
    }


    test update-1.2 {identical values are OK} -setup {
        ted create SHIA
    } -body {
        set a [ted query {SELECT * FROM civgroups_view}]

        civgroup mutate update [ted entity SHIA]

        set b [ted query {SELECT * FROM civgroups_view}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-1.3 {empty values are OK} -setup {
        ted create SHIA
    } -body {
        set a [ted query {SELECT * FROM civgroups_view}]

        civgroup mutate update  {
            g            SHIA
            longname     ""
            color        ""
        }

        set b [ted query {SELECT * FROM civgroups_view}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-1.4 {<Entity> update} -setup {
        ted create SHIA
    } -body {
        ted notifier bind ::civgroup <Entity>
        civgroup mutate update  {
            g            SHIA
            longname     ""
            color        ""
        }
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::civgroup <Entity> update SHIA}
    }


    test update-2.1 {undo undoes the change} -setup {
        ted create SHIA
    } -body {

        set a [ted query {SELECT * FROM civgroups_view}]

        set undo [civgroup mutate update {
            g            SHIA
            longname     "Shia Folk"
            color        "#ff0000"
        }]

        {*}$undo

        set b [ted query {SELECT * FROM civgroups_view}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}

    test update-2.2 {undo sends <Entity> update} -setup {
        ted create SHIA
    } -body {
        set undo [civgroup mutate update {
            g            SHIA
            longname     ""
            color        ""
        }]

        ted notifier bind ::civgroup <Entity>
        {*}$undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::civgroup <Entity> update SHIA}
    }


    #-------------------------------------------------------------------
    # names

    test names-1.1 {Returns names: none defined} -body {
        civgroup names
    } -cleanup {
        cleanup
    } -result {}

    test names-1.2 {Returns names} -setup {
        ted create SHIA SUNN
    } -body {
        civgroup names
    } -cleanup {
        cleanup
    } -result {SHIA SUNN}


    #-------------------------------------------------------------------
    # validate

    test validate-1.1 {Invalid name: none defined} -body {
        civgroup validate NONESUCH
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid civilian group, none are defined}

    test validate-1.2 {Invalid name: some defined} -setup {
        ted create SHIA SUNN
    } -body {
        civgroup validate NONESUCH
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid civilian group, should be one of: SHIA, SUNN}

    test validate-2.1 {Valid name} -setup {
        ted create SHIA SUNN
    } -body {
        civgroup validate SUNN
    } -cleanup {
        cleanup
    } -result {SUNN}


    #-------------------------------------------------------------------
    # reconfigure

    test reconfigure-1.1 {can be called} -body {
        # This is currently a no-op
        civgroup reconfigure
    } -result {}
    


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





