# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-order-NBHOOD.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) NBHOOD:* order tests.
#
#    This test suite tests the nbhood-related orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Default neighborhoods.  nb1 and nb2 do not overlap.
    # overnb1 overlaps nb1's refpoint

    set nb1 {
        longname "Here"
        urbanization URBAN
        refpoint B00B00
        polygon {A80A80 B20A80 B00B20}
    }

    set overnb1 {
        longname "Over"
        urbanization SUBURBAN
        refpoint B01B01
        polygon {A81A81 B21A81 B01B21}
    }

    set nb2 {
        longname "There"
        urbanization RURAL
        refpoint D00D00
        polygon {C80C80 D20C80 D00D20}
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        array unset parms
        ted notifier forget

        # Delete all neighborhoods and reinitialize the module
        rdb eval {DELETE FROM nbhoods}
        nbhood reconfigure
    }

    #-------------------------------------------------------------------
    # NBHOOD:CREATE

    test NBHOOD:CREATE-1.1 {required parms} -body {
        ted order -reject NBHOOD:CREATE {}
    } -result {
        longname {required value}
        urbanization {required value}
        refpoint {required value}
        polygon {required value}
    }

    
    test NBHOOD:CREATE-1.2 {Duplicate longname} -setup {
        ted order NBHOOD:CREATE $nb1
    } -body {
        ted order -reject NBHOOD:CREATE $nb1 
    } -cleanup {
        cleanup
    } -result {
        longname {An entity with this name already exists}
    }


    test NBHOOD:CREATE-1.3 {longname duplicates n} -setup {
        rdb eval {
            INSERT INTO nbhoods(n) VALUES('Here')
        }
    } -body {
        ted order -reject NBHOOD:CREATE $nb1
    } -cleanup {
        cleanup
    } -result {
        longname {An entity with this ID already exists}
    }


    test NBHOOD:CREATE-1.4 {invalid urbanization} -body {
        ted order -reject NBHOOD:CREATE [dict merge $nb1 {
            urbanization NONESUCH
        }]
    } -result {
        urbanization {invalid value, "NONESUCH"}
    }


    test NBHOOD:CREATE-1.5 {polygon: invalid map ref} -body {
        ted order -reject NBHOOD:CREATE [dict merge $nb1 {
            polygon {A80A80 B20A80 Z99Z99 B00B20}
        }]
    } -result {
        polygon {point "Z99Z99" is not a map reference string}
    }


    test NBHOOD:CREATE-1.6 {polygon: duplicate polygon} -setup {
        ted order NBHOOD:CREATE  $nb1
    } -body {
        ted order -reject NBHOOD:CREATE \
            [dict merge $nb2 [list polygon [dict get $nb1 polygon]]]
    } -cleanup {
        cleanup
    } -result {
        polygon {A neighborhood with this polygon already exists}
    }
    

    test NBHOOD:CREATE-1.7 {refpoint: invalid map ref} -body {
        ted order -reject NBHOOD:CREATE [dict merge $nb1 {
            refpoint X99X99
        }]
    } -result {
        refpoint {not a map reference string}
    }


    test NBHOOD:CREATE-1.8 {refpoint: duplicate refpoint} -setup {
        ted order NBHOOD:CREATE  $nb1
    } -body {
        ted order -reject NBHOOD:CREATE \
            [dict merge $nb2 [list refpoint [dict get $nb1 refpoint]]]
    } -cleanup {
        cleanup
    } -result {
        refpoint {A neighborhood with this reference point already exists}
    }


    test NBHOOD:CREATE-1.9 {refpoint not in polygon} -body {
        ted order -reject NBHOOD:CREATE [dict merge $nb1 {
            refpoint A00A00
        }]
    } -result {
        refpoint {not in polygon}
    }


    test NBHOOD:CREATE-2.1 {nbhood is created} -body {
        ted order NBHOOD:CREATE $nb1
        set parms [join [dict keys $nb1] ","]
        ted query "SELECT n,$parms FROM nbhoods"
    } -cleanup {
        cleanup
    } -result {
n    longname urbanization refpoint polygon              
---- -------- ------------ -------- -------------------- 
N001 Here     URBAN        100 100  80 80 120 80 100 120 
    }


    test NBHOOD:CREATE-2.2 {stacking_order is set} -body {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $nb2
        ted query "SELECT n,longname,stacking_order FROM nbhoods"
    } -cleanup {
        cleanup
    } -result {
n    longname stacking_order 
---- -------- -------------- 
N001 Here     1              
N002 There    2              
    }


    test NBHOOD:CREATE-2.3 {obscured_by is set} -body {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $overnb1
        ted query "SELECT n,longname,obscured_by FROM nbhoods"
    } -cleanup {
        cleanup
    } -result {
n    longname obscured_by 
---- -------- ----------- 
N001 Here     N002        
N002 Over                 
    }


    test NBHOOD:CREATE-2.4 {<Entity> create} -body {
        ted notifier bind ::nbhood <Entity>
        ted order NBHOOD:CREATE $nb1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::nbhood <Entity> create N001}
    }


    test NBHOOD:CREATE-3.1 {undo deletes the nbhood} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $nb2
    } -body {
        cif undo
        ted query "SELECT n,longname FROM nbhoods"
    } -cleanup {
        cleanup
    } -result {
n    longname 
---- -------- 
N001 Here     
    }


    test NBHOOD:CREATE-3.2 {undo updates obscured_by} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $overnb1
    } -body {
        cif undo
        ted query "SELECT n,longname,obscured_by FROM nbhoods"
    } -cleanup {
        cleanup
    } -result {
n    longname obscured_by 
---- -------- ----------- 
N001 Here                 
    }

    #-------------------------------------------------------------------
    # NBHOOD:DELETE

    test NBHOOD:DELETE-1.1 {required parms} -body {
        ted order -reject NBHOOD:DELETE {}
    } -result {
        n {required value}
    }
    
    test NBHOOD:DELETE-1.2 {unknown n} -body {
        ted order -reject NBHOOD:DELETE n NONESUCH
    } -result {
        n {Invalid neighborhood, none are defined}
    }

    test NBHOOD:DELETE-2.1 {Nbhood is deleted} -setup {
        ted order NBHOOD:CREATE $nb1
    } -body {
        ted order NBHOOD:DELETE n N001
        nbhood names
    } -cleanup {
        cleanup
    } -result {}

    test NBHOOD:DELETE-2.2 {<Entity> delete} -setup {
        ted order NBHOOD:CREATE $nb1
    } -body {
        ted notifier bind ::nbhood <Entity>
        ted order NBHOOD:DELETE n N001
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::nbhood <Entity> delete N001}
    }

    test NBHOOD:DELETE-3.1 {Can't undo} -setup {
        ted order NBHOOD:CREATE $nb1
    } -body {
        ted order NBHOOD:DELETE n N001
        cif canundo
    } -cleanup {
        cleanup
    } -result {}


    #-------------------------------------------------------------------
    # NBHOOD:LOWER

    test NBHOOD:LOWER-1.1 {required parms} -body {
        ted order -reject NBHOOD:LOWER {}
    } -result {
        n {required value}
    }
    
    test NBHOOD:LOWER-1.2 {unknown n} -body {
        ted order -reject NBHOOD:LOWER n NONESUCH
    } -result {
        n {Invalid neighborhood, none are defined}
    }

    test NBHOOD:LOWER-2.1 {Nbhood is lower} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $overnb1
    } -body {
        ted order NBHOOD:LOWER n N002
        ted query {SELECT n,longname,stacking_order,obscured_by FROM nbhoods}
    } -cleanup {
        cleanup
    } -result {
n    longname stacking_order obscured_by 
---- -------- -------------- ----------- 
N001 Here     2                          
N002 Over     1              N001        
    }

    test NBHOOD:LOWER-2.2 {<Entity> stack} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $overnb1
    } -body {
        ted notifier bind ::nbhood <Entity>
        ted order NBHOOD:LOWER n N002
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::nbhood <Entity> stack}
    }

    test NBHOOD:LOWER-3.1 {Undo} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $overnb1
    } -body {
        ted order NBHOOD:LOWER n N002
        cif undo
        ted query {SELECT n,longname,stacking_order,obscured_by FROM nbhoods}
    } -cleanup {
        cleanup
    } -result {
n    longname stacking_order obscured_by 
---- -------- -------------- ----------- 
N001 Here     1              N002        
N002 Over     2                          
    }

    #-------------------------------------------------------------------
    # NBHOOD:RAISE

    test NBHOOD:RAISE-1.1 {required parms} -body {
        ted order -reject NBHOOD:RAISE {}
    } -result {
        n {required value}
    }
    
    test NBHOOD:RAISE-1.2 {unknown n} -body {
        ted order -reject NBHOOD:RAISE n NONESUCH
    } -result {
        n {Invalid neighborhood, none are defined}
    }

    test NBHOOD:RAISE-2.1 {Nbhood is lower} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $overnb1
    } -body {
        ted order NBHOOD:RAISE n N001
        ted query {SELECT n,longname,stacking_order,obscured_by FROM nbhoods}
    } -cleanup {
        cleanup
    } -result {
n    longname stacking_order obscured_by 
---- -------- -------------- ----------- 
N001 Here     2                          
N002 Over     1              N001        
    }

    test NBHOOD:RAISE-2.2 {<Entity> stack} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $overnb1
    } -body {
        ted notifier bind ::nbhood <Entity>
        ted order NBHOOD:RAISE n N001
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::nbhood <Entity> stack}
    }

    test NBHOOD:RAISE-3.1 {Undo} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $overnb1
    } -body {
        ted order NBHOOD:RAISE n N001
        cif undo
        ted query {SELECT n,longname,stacking_order,obscured_by FROM nbhoods}
    } -cleanup {
        cleanup
    } -result {
n    longname stacking_order obscured_by 
---- -------- -------------- ----------- 
N001 Here     1              N002        
N002 Over     2                          
    }

    #-------------------------------------------------------------------
    # NBHOOD:UPDATE

    test NBHOOD:UPDATE-1.1 {required parms} -body {
        ted order -reject NBHOOD:UPDATE {}
    } -result {
        n {required value}
    }
    
    test NBHOOD:UPDATE-1.2 {Duplicate longname} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $nb2
    } -body {
        ted order -reject NBHOOD:UPDATE n N001 longname There
    } -cleanup {
        cleanup
    } -result {
        longname {An entity with this name already exists}
    }

    test NBHOOD:UPDATE-1.3 {longname duplicates n} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $nb2
    } -body {
        ted order -reject NBHOOD:UPDATE n N001 longname N002
    } -cleanup {
        cleanup
    } -result {
        longname {An entity with this ID already exists}
    }

    test NBHOOD:UPDATE-1.4 {invalid urbanization} -setup {
        ted order NBHOOD:CREATE $nb1
    } -body {
        ted order -reject NBHOOD:UPDATE n N001 urbanization NONESUCH
    } -cleanup {
        cleanup
    } -result {
        urbanization {invalid value, "NONESUCH"}
    }

    test NBHOOD:UPDATE-1.5 {polygon: invalid map ref} -setup {
        ted order NBHOOD:CREATE $nb1
    } -body {
        ted order -reject NBHOOD:UPDATE           \
            n       N001                          \
            polygon {A80A80 B20A80 Z99Z99 B00B20}
    } -cleanup {
        cleanup
    } -result {
        polygon {point "Z99Z99" is not a map reference string}
    }

    test NBHOOD:UPDATE-1.6 {polygon: duplicate polygon} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $nb2
    } -body {
        ted order -reject NBHOOD:UPDATE     \
            n       N001                    \
            polygon [dict get $nb2 polygon]
    } -cleanup {
        cleanup
    } -result {
        polygon {A neighborhood with this polygon already exists}
    }

    test NBHOOD:UPDATE-1.7 {refpoint: invalid map ref} -setup {
        ted order NBHOOD:CREATE $nb1
    } -body {
        ted order -reject NBHOOD:UPDATE \
            n        N001               \
            refpoint X99X99
    } -cleanup {
        cleanup
    } -result {
        refpoint {not a map reference string}
    }

    test NBHOOD:UPDATE-1.9 {refpoint: duplicate refpoint} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $nb2
    } -body {
        ted order -reject NBHOOD:UPDATE       \
            n        N001                     \
            refpoint [dict get $nb2 refpoint]
    } -cleanup {
        cleanup
    } -result {
        polygon {A neighborhood with this reference point already exists}
    }

    test NBHOOD:UPDATE-1.8 {refpoint not in polygon} -setup {
        ted order NBHOOD:CREATE $nb1
    } -body {
        ted order -reject NBHOOD:UPDATE \
            n        N001               \
            refpoint A00A00
    } -cleanup {
        cleanup
    } -result {
        refpoint {not in polygon}
    }

    test NBHOOD:UPDATE-2.1 {nbhood is updated} -setup {
        ted order NBHOOD:CREATE $nb1
    } -body {
        ted order NBHOOD:UPDATE {
            n            N001
            longname     "Not Here"
            urbanization RURAL
            refpoint     A05A05
            polygon      {A00A00 A10A00 A10A10 A00A10}
        }

        set parms [join [dict keys $nb1] ","]
        ted query "SELECT n,$parms FROM nbhoods"
    } -cleanup {
        cleanup
    } -result {
n    longname urbanization refpoint polygon             
---- -------- ------------ -------- ------------------- 
N001 Not Here RURAL        5 5      0 0 10 0 10 10 0 10 
    }

    test NBHOOD:UPDATE-2.2 {stacking_order,obscured_by are set} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $nb2
    } -body {
        # Move N002 over N001
        ted order NBHOOD:UPDATE [dict merge $overnb1 {n N002}]
        ted query "SELECT n,longname,stacking_order,obscured_by FROM nbhoods"
    } -cleanup {
        cleanup
    } -result {
n    longname stacking_order obscured_by 
---- -------- -------------- ----------- 
N001 Here     1                          
N002 Over     2              N001        
    }

    test NBHOOD:UPDATE-2.3 {<Entity> update} -setup {
        ted order NBHOOD:CREATE $nb1
    } -body {
        ted notifier bind ::nbhood <Entity>
        ted order NBHOOD:UPDATE n N001 longname "Not Here"
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::nbhood <Entity> update N001}
    }


    test NBHOOD:UPDATE-3.1 {undo undoes the change} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:UPDATE [dict merge $overnb1 {n N001}]
    } -body {
        cif undo
        ted query {
            SELECT n,longname,urbanization,refpoint,polygon FROM nbhoods
        }
    } -cleanup {
        cleanup
    } -result {
n    longname urbanization refpoint polygon              
---- -------- ------------ -------- -------------------- 
N001 Here     URBAN        100 100  80 80 120 80 100 120 
    }

    test NBHOOD:UPDATE-3.2 {stacking_order,obscured_by are undone} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order NBHOOD:CREATE $nb2

        # Move N002 over N001
        ted order NBHOOD:UPDATE [dict merge $overnb1 {n N002}]
    } -body {
        cif undo
        ted query "SELECT n,longname,stacking_order,obscured_by FROM nbhoods"
    } -cleanup {
        cleanup
    } -result {
n    longname stacking_order obscured_by 
---- -------- -------------- ----------- 
N001 Here     1                          
N002 There    2                          
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::




