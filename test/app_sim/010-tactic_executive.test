# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-tactic_executive.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    tactic_executive(sim) tests.
#
#    This test suite tests the tactic::EXECUTIVE ensemble.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        ted create JOE
    }

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    set T1 {
        tactic_type EXECUTIVE
        owner       JOE
        priority    top
        text1       {sigevent "Tactic T1"}
        once        0
    }

    set T2 {
        tactic_type EXECUTIVE
        owner       SYSTEM
        priority    top
        text1       {error "Simulated Error"}
        once        1
    }

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative: repeated} -setup {
        setup
        tactic mutate create $T1
    } -body {
        tactic::EXECUTIVE narrative [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Executive command: sigevent "Tactic T1"}

    test narrative-1.2 {narrative: once only} -setup {
        setup
        tactic mutate create $T2
    } -body {
        tactic::EXECUTIVE narrative [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Executive command: error "Simulated Error" (once only)}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {check: always OK} -setup {
        setup
        tactic mutate create $T1
    } -body {
        tactic::EXECUTIVE check [tactic get 1]
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # dollars

    test dollars-1.1 {dollars} -setup {
        setup
        tactic mutate create $T1
    } -body {
        tactic::EXECUTIVE dollars [tactic get 1]
    } -cleanup {
        cleanup
    } -result {n/a}

    #-------------------------------------------------------------------
    # execute

    test execute-1.1 {execute: 1 on success} -setup {
        setup
        tactic mutate create $T1
    } -body {
        tactic::EXECUTIVE execute [tactic get 1]
    } -cleanup {
        cleanup
    } -result {1}

    test execute-1.2 {execute: 0 on failure} -setup {
        setup
        tactic mutate create $T2
    } -body {
        tactic::EXECUTIVE execute [tactic get 1]
    } -cleanup {
        cleanup
    } -result {0}

    test execute-1.3 {execute: effects, success} -setup {
        setup
        tactic mutate create $T1
    } -body {
        tactic::EXECUTIVE execute [tactic get 1]
        ted query {SELECT t, level, component, narrative FROM sigevents}
    } -cleanup {
        cleanup
    } -result {
t level component narrative                       
- ----- --------- ------------------------------- 
0 1     script    Tactic T1                       
0 1     tactic    EXECUTIVE: sigevent "Tactic T1" 
    }

    test execute-1.4 {execute: effects, failure} -setup {
        setup
        tactic mutate create $T2
    } -body {
        tactic::EXECUTIVE execute [tactic get 1]
        ted querylist {SELECT t, level, component, narrative FROM sigevents}
    } -cleanup {
        cleanup
    } -result {
t          0
level      0
component  tactic
narrative  EXECUTIVE: Failed to execute command {error "Simulated Error"}: Simulated Error
    }

    # execute-1.5 {execute: rollback on failure}: TBD: Wait until orders work.

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





