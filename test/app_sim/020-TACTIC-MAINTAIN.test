# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-MAINTAIN.test
#
# AUTHOR:
#    Dave Hanks
#
# DESCRIPTION:
#    app_sim(1) TACTIC:MAINTAIN:* order tests.
#
#    This test suite tests the MAINTAIN tactic's orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE NB1 NB2 SHIA SUNN KURD BLUE
        variable S1
        variable B1
        variable T1

        set S1 [strategy getname JOE]
        ted order STRATEGY:BLOCK:ADD agent JOE
        lassign [$S1 blocks] B1
        ted order BLOCK:TACTIC:ADD block_id [$B1 id] typename MAINTAIN
        lassign [$B1 tactics] T1
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    #-------------------------------------------------------------------
    # TACTIC:MAINTAIN

    test TACTIC:MAINTAIN-1.1 {required parms} -setup {
        setup
    } -body {
        ted order -reject TACTIC:MAINTAIN
    } -result {
        tactic_id {required value}
    }

    test TACTIC:MAINTAIN-1.2 {tactic_id is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:MAINTAIN tactic_id NONESUCH
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Invalid MAINTAIN ID: "NONESUCH"}
    }

    test TACTIC:MAINTAIN-1.3 {rmode is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:MAINTAIN tactic_id [$T1 id] rmode NONESUCH
    } -cleanup {
        cleanup
    } -result {
        rmode {invalid value "NONESUCH", should be one of: FULL, UPTO}
    }

    test TACTIC:MAINTAIN-1.4 {amount is non-numeric} -setup {
        setup
    } -body {
        ted order -reject TACTIC:MAINTAIN tactic_id [$T1 id] amount NONESUCH
    } -cleanup {
        cleanup
    } -result {
        amount {invalid money value "NONESUCH", expected positive numeric value with optional K, M, or B suffix}
    }

    test TACTIC:MAINTAIN-1.5 {level is non-numeric} -setup {
        setup
    } -body {
        ted order -reject TACTIC:MAINTAIN tactic_id [$T1 id] level NONESUCH
    } -cleanup {
        cleanup
    } -result {
        level {invalid value "NONESUCH", expected double}
    }

    test TACTIC:MAINTAIN-1.6 {amount is negative} -setup {
        setup
    } -body {
        ted order -reject TACTIC:MAINTAIN tactic_id [$T1 id] amount -1
    } -cleanup {
        cleanup
    } -result {
        amount {invalid money value "-1", expected positive numeric value with optional K, M, or B suffix}
    }

    test TACTIC:MAINTAIN-1.7 {level is negative} -setup {
        setup
    } -body {
        ted order -reject TACTIC:MAINTAIN tactic_id [$T1 id] level -1
    } -cleanup {
        cleanup
    } -result {
        level {invalid value "-1", expected double in range 0.0, 100.0}
    }

    test TACTIC:MAINTAIN-1.8 {mode requires level, no level} -setup {
        setup
    } -body {
        ted order -reject TACTIC:MAINTAIN \
            tactic_id [$T1 id] rmode UPTO level 0.0
    } -cleanup {
        cleanup
    } -result {
        level {You must specify a capacity level > 0.0}
    }

    test TACTIC:MAINTAIN-2.1 {tactic is created} -setup {
        setup
    } -body {
        ted order TACTIC:MAINTAIN tactic_id [$T1 id] \
            nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        amount     0.0
        execstatus NONE
        faildict   {}
        id         *
        level      0.0
        nlist      {_type NBHOODS _rule BY_VALUE nlist {NB1 NB2}}
        parent     ::bean::block*
        percent    0.0
        rmode      FULL
        state      normal
    }

    test TACTIC:MAINTAIN-2.2 {tactic is created, UPTO} -setup {
        setup
    } -body {
        ted order TACTIC:MAINTAIN tactic_id [$T1 id] rmode UPTO level 90.0 \
            nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        amount     0.0
        execstatus NONE
        faildict   {}
        id         *
        level      90.0
        nlist      {_type NBHOODS _rule BY_VALUE nlist {NB1 NB2}}
        parent     ::bean::block*
        percent    0.0
        rmode      UPTO
        state      normal
    }

    test TACTIC:MAINTAIN-2.3 {notifier event} -setup {
        setup
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        ted order TACTIC:MAINTAIN tactic_id [$T1 id] \
            nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}] \
            amount 10000
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::projectlib::bean <Monitor>}
    }


    test TACTIC:MAINTAIN-3.1 {undo effects} -setup {
        setup
        ted order TACTIC:MAINTAIN tactic_id [$T1 id] \
            nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}] \
            amount 10000
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::projectlib::bean <Monitor>}
    }

    test TACTIC:MAINTAIN-4.1 {identity} -setup {
        setup
    } -body {
        ted tactic identity $T1
    } -cleanup {
        cleanup
    } -result {OK}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





