# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-ATTROE.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) TACTIC:ATTROE:* order tests.
#
#    This test suite tests the ATTROE tactic's orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE BOB NB1 NB2 BLUE BRIT ALQ TAL
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Standard items

    set T1 {
        owner       JOE
        priority    bottom
        n           NB1
        f           BLUE
        g           ALQ
        text1       ATTACK
        int1        5
    }

    set T2 {
        owner       BOB
        priority    top
        f           ALQ
        g           BLUE
        n           NB1
        text1       HIT_AND_RUN
        int1        10
    }

    #-------------------------------------------------------------------
    # TACTIC:ATTROE:CREATE

    test CREATE-1.1 {required parms} -body {
        ted order -reject TACTIC:ATTROE:CREATE {}
    } -result {
        owner {required value}
        f {required value}
        g {required value}
        n {required value}
    }

    
    test CREATE-1.2 {owner is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ATTROE:CREATE \
            [dict merge $T1 [list owner NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        owner {Invalid actor, should be one of: JOE, BOB}
    }

    test CREATE-1.3 {f is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ATTROE:CREATE \
            [dict merge $T1 [list f NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        f {Invalid force group, should be one of: BLUE, BRIT, ALQ, TAL}
    }

    test CREATE-1.4 {g is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ATTROE:CREATE \
            [dict merge $T1 [list g NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        g {Invalid force group, should be one of: BLUE, BRIT, ALQ, TAL}
    }

    test CREATE-1.5 {n is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ATTROE:CREATE \
            [dict merge $T1 [list n NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        n {Invalid neighborhood, should be one of: NB1, NB2}
    }

    test CREATE-1.6 {int1 is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ATTROE:CREATE \
            [dict merge $T1 [list int1 NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        int1 {invalid value "NONESUCH", expected integer}
    }

    test CREATE-1.7 {priority is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ATTROE:CREATE [dict merge $T1 {
            priority NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        priority {invalid value "nonesuch", should be one of: top, bottom}
    }

    test CREATE-1.8 {f is not owned by owner} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ATTROE:CREATE \
            [dict merge $T2 [list owner JOE]]
    } -cleanup {
        cleanup
    } -result {
        f {Group ALQ is not owned by actor JOE.}
    }

    test CREATE-1.9 {f and g both uniformed} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ATTROE:CREATE \
            [dict merge $T1 [list g BRIT]]
    } -cleanup {
        cleanup
    } -result {
        g {Groups BLUE and BRIT are both uniformed}
    }

    test CREATE-1.10 {f and g both non-uniformed} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ATTROE:CREATE \
            [dict merge $T2 [list g TAL]]
    } -cleanup {
        cleanup
    } -result {
        g {Groups ALQ and TAL are both non-uniformed}
    }

    test CREATE-1.11 {not a uniformed ROE} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ATTROE:CREATE \
            [dict merge $T1 [list text1 HIT_AND_RUN]]
    } -cleanup {
        cleanup
    } -result {
        text1 {invalid value "HIT_AND_RUN", should be one of: DO_NOT_ATTACK, ATTACK}
    }

    test CREATE-1.12 {not a non-uniformed ROE} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ATTROE:CREATE \
            [dict merge $T2 [list text1 ATTACK]]
    } -cleanup {
        cleanup
    } -result {
        text1 {invalid value "ATTACK", should be one of: DO_NOT_ATTACK, HIT_AND_RUN, STAND_AND_FIGHT}
    }


    test CREATE-2.1 {tactic is created: UF vs NF} -setup {
        setup
    } -body {
        ted order TACTIC:ATTROE:CREATE $T1

        ted querylist {SELECT * FROM tactics_ATTROE}
    } -cleanup {
        cleanup
    } -result {
tactic_id    1
tactic_type  ATTROE
owner        JOE
narrative    Group BLUE attacks ALQ in NB1 up to 5 times/week.
priority     1
n            NB1
f            BLUE
g            ALQ
text1        ATTACK
int1         5
state        normal
exec_ts      
exec_flag    0
    }


    test CREATE-2.2 {tactic is created: NF vs UF} -setup {
        setup
    } -body {
        ted order TACTIC:ATTROE:CREATE $T2

        ted querylist {SELECT * FROM tactics_ATTROE}
    } -cleanup {
        cleanup
    } -result {
tactic_id    1
tactic_type  ATTROE
owner        BOB
narrative    Group ALQ attacks BLUE in NB1 with ROE HIT_AND_RUN up to 10 times/week.
priority     1
n            NB1
f            ALQ
g            BLUE
text1        HIT_AND_RUN
int1         10
state        normal
exec_ts      
exec_flag    0
    }

    test CREATE-2.3 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:ATTROE:CREATE $T1
        ted notifier received

        # NOTE: Two updates, because of priority setting.
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
        {::rdb <tactics> update 1}
    }


    test CREATE-3.1 {undo effects} -setup {
        setup
        ted order TACTIC:ATTROE:CREATE $T1
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> delete 1}
    }

    #-------------------------------------------------------------------
    # TACTIC:ATTROE:UPDATE

    proc setup_update {tdict} {
        setup
        ted order TACTIC:ATTROE:CREATE $tdict
    }

    test UPDATE-1.1 {required parms} -body {
        ted order -reject TACTIC:ATTROE:UPDATE {}
    } -result {
        tactic_id {required value}
    }

    
    test UPDATE-1.2 {tactic_id is unknown} -setup {
        setup_update $T1
    } -body {
        ted order -reject TACTIC:ATTROE:UPDATE \
            tactic_id NONESUCH text1 HOLD_FIRE
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Invalid tactic ID: "NONESUCH"}
    }

    test UPDATE-1.3 {f is unknown} -setup {
        setup_update $T1
    } -body {
        ted order -reject TACTIC:ATTROE:UPDATE \
            tactic_id 1 f NONESUCH
    } -cleanup {
        cleanup
    } -result {
        f {Invalid force group, should be one of: BLUE, BRIT, ALQ, TAL}
    }

    test UPDATE-1.4 {g is unknown} -setup {
        setup_update $T1
    } -body {
        ted order -reject TACTIC:ATTROE:UPDATE \
            tactic_id 1 g NONESUCH
    } -cleanup {
        cleanup
    } -result {
        g {Invalid force group, should be one of: BLUE, BRIT, ALQ, TAL}
    }

    test UPDATE-1.5 {n is unknown} -setup {
        setup_update $T1
    } -body {
        ted order -reject TACTIC:ATTROE:UPDATE \
            tactic_id 1 n NONESUCH
    } -cleanup {
        cleanup
    } -result {
        n {Invalid neighborhood, should be one of: NB1, NB2}
    }

    test UPDATE-1.6 {int1 is invalid} -setup {
        setup_update $T1
    } -body {
        ted order -reject TACTIC:ATTROE:UPDATE \
            tactic_id 1 int1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        int1 {invalid value "NONESUCH", expected integer}
    }

    test UPDATE-1.7 {wrong flavor of tactic} -setup {
        setup_update $T1
        rdb eval {UPDATE tactics SET tactic_type='BOGUS'}
    } -body {
        ted order -reject TACTIC:ATTROE:UPDATE tactic_id 1 int1 7
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Tactic 1 is not a ATTROE tactic}
    }

    test UPDATE-1.8 {f is not owned by owner} -setup {
        setup_update $T1
    } -body {
        ted order -reject TACTIC:ATTROE:UPDATE \
            tactic_id 1 f ALQ g BLUE text1 HIT_AND_RUN
    } -cleanup {
        cleanup
    } -result {
        f {Group ALQ is not owned by actor JOE.}
    }

    test UPDATE-1.9 {both uniformed} -setup {
        setup_update $T1
    } -body {
        ted order -reject TACTIC:ATTROE:UPDATE \
            tactic_id 1 g BRIT
    } -cleanup {
        cleanup
    } -result {
        g {Groups BLUE and BRIT are both uniformed}
    }

    test UPDATE-1.10 {both non-uniformed} -setup {
        setup_update $T2
    } -body {
        ted order -reject TACTIC:ATTROE:UPDATE \
            tactic_id 1 g TAL
    } -cleanup {
        cleanup
    } -result {
        g {Groups ALQ and TAL are both non-uniformed}
    }

    test UPDATE-1.11 {bad UF ROE} -setup {
        setup_update $T1
    } -body {
        ted order -reject TACTIC:ATTROE:UPDATE \
            tactic_id 1 text1 HIT_AND_RUN
    } -cleanup {
        cleanup
    } -result {
        text1 {invalid value "HIT_AND_RUN", should be one of: DO_NOT_ATTACK, ATTACK}
    }

    test UPDATE-1.12 {bad NF ROE} -setup {
        setup_update $T2
    } -body {
        ted order -reject TACTIC:ATTROE:UPDATE \
            tactic_id 1 text1 ATTACK
    } -cleanup {
        cleanup
    } -result {
        text1 {invalid value "ATTACK", should be one of: DO_NOT_ATTACK, HIT_AND_RUN, STAND_AND_FIGHT}
    }

    test UPDATE-2.1 {activities are updated: UF vs NF} -setup {
        setup_update $T1
    } -body {
        ted order TACTIC:ATTROE:UPDATE \
            tactic_id 1 int1 7

        ted querylist {SELECT * FROM tactics_ATTROE}
    } -cleanup {
        cleanup
    } -result {
tactic_id    1
tactic_type  ATTROE
owner        JOE
narrative    Group BLUE attacks ALQ in NB1 up to 7 times/week.
priority     1
n            NB1
f            BLUE
g            ALQ
text1        ATTACK
int1         7
state        normal
exec_ts      
exec_flag    0
    }


    test UPDATE-2.2 {Effects} -setup {
        setup_update $T1
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:ATTROE:UPDATE tactic_id 1 int1 7
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
    }


    test UPDATE-3.1 {undo effects} -setup {
        setup_update $T1
        ted order TACTIC:ATTROE:UPDATE tactic_id 1 int1 7
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





