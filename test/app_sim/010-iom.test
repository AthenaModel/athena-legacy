# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-iom.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    iom(sim) tests.
#
#    This test suite tests the iom(sim) mutators and queries
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test
    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # ioms
    # TBD: Should test with real hooks, but there aren't any
    # real hooks yet.

    set m1 {
        iom_id     M1
        longname   "IOM One"
        hook_id    ""
    }

    set m2 {
        iom_id     M2
        longname   "IOM Two"
        hook_id    ""
    }

    #-------------------------------------------------------------------
    # mutate create

    test create-1.1 {iom is created} -body {
        iom mutate create $m1
        ted querylist {SELECT * FROM ioms}
    } -cleanup {
        cleanup
    } -result {
iom_id     M1
longname   IOM One
hook_id    
narrative  
    }

    test create-2.1 {undo deletes the iom} -setup {
        iom mutate create $m1
        set undo [iom mutate create $m2]
    } -body {
        namespace eval :: $undo
        rdb eval {SELECT iom_id FROM ioms}
    } -cleanup {
        cleanup
    } -result {M1}


    #-------------------------------------------------------------------
    # mutate delete

    test delete-1.1 {iom is deleted} -setup {
        iom mutate create $m1
        iom mutate create $m2
    } -body {
        iom mutate delete M1

        # Is M1 gone?
        rdb eval {SELECT iom_id FROM ioms}
    } -cleanup {
        cleanup
    } -result {M2}

    test delete-1.2 {Undo restores iom} -setup {
        iom mutate create $m1
        iom mutate create $m2
        set undo [iom mutate delete M1]
    } -body {
        namespace eval :: $undo
        ted querylist {SELECT * FROM ioms ORDER BY iom_id}
    } -cleanup {
        cleanup
    } -result {
iom_id     M1
longname   IOM One
hook_id    
narrative  

iom_id     M2
longname   IOM Two
hook_id    
narrative  
    }

    test delete-2.1 {payload records are deleted} -constraints tbd -setup {
        iom mutate create $m1
        iom mutate create $m2
    } -body {
        iom mutate delete M1

        rdb eval {
            SELECT iom_id,part_number FROM iom_parts 
            ORDER BY iom_id,part_number
        }
    } -cleanup {
        cleanup
    } -result {M2 1}

    test delete-2.2 {Undo restores payload records} -constraints tbd -setup {
        iom mutate create $m1
        iom mutate create $m2
        
        set undo [iom mutate delete M1]
    } -body {
        namespace eval :: $undo
        rdb eval {
            SELECT iom_id,part_number FROM iom_parts 
            ORDER BY iom_id,part_number
        }
    } -cleanup {
        cleanup
    } -result {M1 1 M1 2 M2 1}

    #-------------------------------------------------------------------
    # mutate update
    #
    # TBD: Should have tests with real hooks, once we have real hooks.

    test update-1.1 {iom is updated} -setup {
        iom mutate create $m1
    } -body {
        iom mutate update {
            iom_id   M1
            longname "Support the Govt"
            hook_id  ""
        }

        ted querylist {SELECT * FROM ioms}
    } -cleanup {
        cleanup
    } -result {
iom_id     M1
longname   Support the Govt
hook_id    
narrative  
    }


    test update-1.2 {identical values are OK} -setup {
        iom mutate create $m1
    } -body {
        set a [ted query {SELECT * FROM ioms}]

        iom mutate update $m1

        set b [ted query {SELECT * FROM ioms}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-1.3 {empty values are OK} -setup {
        iom mutate create $m1
    } -body {
        set a [ted query {SELECT * FROM ioms}]

        iom mutate update  {
            iom_id   M1
            longname ""
            hook_id  ""
        }

        set b [ted query {SELECT * FROM ioms}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-2.1 {undo undoes the change} -setup {
        iom mutate create $m1
    } -body {
        set a [ted query {SELECT * FROM ioms}]

        set undo [iom mutate update {
            iom_id   M1
            longname "Support the Govt"
            hook_id  ""
        }]

        namespace eval :: $undo

        set b [ted query {SELECT * FROM ioms}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # names

    test names-1.1 {Returns names: none defined} -body {
        iom names
    } -cleanup {
        cleanup
    } -result {}

    test names-1.2 {Returns names} -setup {
        iom mutate create $m1
        iom mutate create $m2
    } -body {
        iom names
    } -cleanup {
        cleanup
    } -result {M1 M2}


    #-------------------------------------------------------------------
    # validate

    test validate-1.1 {Invalid name: none defined} -body {
        iom validate NONESUCH
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid IOM, none are defined}

    test validate-1.2 {Invalid name: some defined} -setup {
        iom mutate create $m1
        iom mutate create $m2
    } -body {
        iom validate NONESUCH
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid IOM, should be one of: M1, M2}

    test validate-2.1 {Valid name} -setup {
        iom mutate create $m1
        iom mutate create $m2
    } -body {
        iom validate M2
    } -cleanup {
        cleanup
    } -result {M2}

    #-------------------------------------------------------------------
    # exists

    test exists-1.1 {iom doesn't exist} -setup {
        iom mutate create $m1
        iom mutate create $m2
    } -body {
        iom exists P3
    } -cleanup {
        cleanup
    } -result {0}

    test exists-1.2 {iom exists} -setup {
        iom mutate create $m1
        iom mutate create $m2
    } -body {
        iom exists M2
    } -cleanup {
        cleanup
    } -result {1}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::

