# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-ACTIVITY.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) ACTIVITY:* order tests.
#
#    This test suite tests the unit-related orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Standard items

    set c1 {
        g         BLUE
        n         NB1
        a         PATROL
        personnel 50
        start     +5
        finish    +30
        pattern   daily
        priority  bottom
    }

    set c2 {
        g         USAID
        n         NB1
        a         CMO_HEALTHCARE
        personnel 40
        start     +10
        finish    NEVER
        pattern   {byweekday M T W Th F}
        priority  bottom
    }

    set c3 {
        g         BLUE
        n         NB1
        a         CURFEW
        personnel 70
        start     +3
        finish    NEVER
        pattern   daily
        priority  bottom
    }

    set c4 {
        g         SHIA
        n         NB1
        a         DISPLACED
        personnel 70
        start     +3
        finish    NEVER
        pattern   daily
        priority  bottom
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    #-------------------------------------------------------------------
    # ACTIVITY:SCHEDULE

    test SCHEDULE-1.1 {required parms} -body {
        ted order -reject ACTIVITY:SCHEDULE {}
    } -result {
        g {required value}
        n {required value}
        a {required value}
        personnel {required value}
        start {required value}
        pattern {required value}
    }

    
    test SCHEDULE-1.2 {n is unknown} -setup {
        ted create NB1 BLUE
    } -body {
        ted order -reject ACTIVITY:SCHEDULE \
            [dict merge $c1 [list n NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        n {Invalid neighborhood, should be one of: NB1}
    }

    test SCHEDULE-1.3 {g is unknown} -setup {
        ted create NB1 BLUE
    } -body {
        ted order -reject ACTIVITY:SCHEDULE \
            [dict merge $c1 [list g NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        g {Invalid group, should be one of: BLUE}
    }

    test SCHEDULE-1.4 {CIV g doesn't reside in n} -setup {
        ted create NB1 NB2 SHIA KURD
    } -body {
        ted order -reject ACTIVITY:SCHEDULE \
            [dict merge $c4 [list n NB2]]
    } -cleanup {
        cleanup
    } -result {
        n {Group SHIA does not reside in neighborhood NB2}
    }

    test SCHEDULE-1.5 {a is unknown} -setup {
        ted create NB1 BLUE
    } -body {
        ted order -reject ACTIVITY:SCHEDULE [dict merge $c1 [list a NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        a {Invalid activity, should be one of: CHECKPOINT, CMO_CONSTRUCTION, CMO_DEVELOPMENT, CMO_EDUCATION, CMO_EMPLOYMENT, CMO_HEALTHCARE, CMO_INDUSTRY, CMO_INFRASTRUCTURE, CMO_LAW_ENFORCEMENT, CMO_OTHER, COERCION, CRIMINAL_ACTIVITIES, CURFEW, DISPLACED, GUARD, IN_CAMP, PATROL, PSYOP}
    }

    test SCHEDULE-1.6 {tn is unknown} -setup {
        ted create NB1 BLUE
    } -body {
        ted order -reject ACTIVITY:SCHEDULE \
            [dict merge $c1 [list tn NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        tn {Invalid neighborhood, should be one of: NB1}
    }

    test SCHEDULE-1.7 {a is NONE} -setup {
        ted create NB1 BLUE
    } -body {
        ted order -reject ACTIVITY:SCHEDULE [dict merge $c1 [list a NONE]]
    } -cleanup {
        cleanup
    } -result {
        a {Invalid activity, should be one of: CHECKPOINT, CMO_CONSTRUCTION, CMO_DEVELOPMENT, CMO_EDUCATION, CMO_EMPLOYMENT, CMO_HEALTHCARE, CMO_INDUSTRY, CMO_INFRASTRUCTURE, CMO_LAW_ENFORCEMENT, CMO_OTHER, COERCION, CRIMINAL_ACTIVITIES, CURFEW, DISPLACED, GUARD, IN_CAMP, PATROL, PSYOP}
    }

    test SCHEDULE-1.8 {a is invalid for this group type} -setup {
        ted create NB1 USAID
    } -body {
        ted order -reject ACTIVITY:SCHEDULE [dict merge $c2 {
            a PATROL
        }]
    } -cleanup {
        cleanup
    } -result {
        a {Group USAID cannot be assigned activity PATROL}
    }


    test SCHEDULE-1.9 {personnel is invalid} -setup {
        ted create NB1 BLUE
    } -body {
        ted order -reject ACTIVITY:SCHEDULE [dict merge $c1 {
            personnel 0
        }]
    } -cleanup {
        cleanup
    } -result {
        personnel {invalid value "0", expected integer no less than 1}
    }


    test SCHEDULE-1.10 {start is invalid} -setup {
        ted create NB1 BLUE
    } -body {
        ted order -reject ACTIVITY:SCHEDULE [dict merge $c1 {
            start NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        start {invalid time spec "NONESUCH", base time should be "NOW", "T0", an integer tick, or a zulu-time string}
    }

    test SCHEDULE-1.11 {state is PREP, start is negative} -setup {
        ted create NB1 BLUE
    } -body {
        ted order -reject ACTIVITY:SCHEDULE [dict merge $c1 {
            start -1
        }]
    } -cleanup {
        cleanup
    } -result {
        start {The scheduled time must not be in the past.}
    }

    test SCHEDULE-1.12 {state is PAUSED, start is not in future} -setup {
        ted create NB1 BLUE SHIA
        ted lock
    } -body {
        ted order -reject ACTIVITY:SCHEDULE [dict merge $c1 {
            start 0
        }]
    } -cleanup {
        cleanup
    } -result {
        start {The scheduled time must be strictly in the future.}
    }

    test SCHEDULE-1.13 {finish is invalid} -setup {
        ted create NB1 BLUE
    } -body {
        ted order -reject ACTIVITY:SCHEDULE [dict merge $c1 {
            finish NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        finish {invalid value "NONESUCH", should be "NEVER" or a timespec with base time of "NOW", "T0", an integer tick, or a zulu-time string}
    }


    test SCHEDULE-1.14 {finish is prior to start} -setup {
        ted create NB1 BLUE
    } -body {
        ted order -reject ACTIVITY:SCHEDULE [dict merge $c1 {
            finish +1
        }]
    } -cleanup {
        cleanup
    } -result {
        finish {The end of the interval, "1", is prior to the start, "5"}
    }

    test SCHEDULE-1.15 {pattern is unknown} -setup {
        ted create NB1 BLUE
    } -body {
        ted order -reject ACTIVITY:SCHEDULE [dict merge $c1 {
            pattern NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        pattern {invalid value "NONESUCH", should be one of: daily, byweekday, once}
    }


    test SCHEDULE-1.16 {pattern daily takes no arguments} -setup {
        ted create NB1 BLUE
    } -body {
        ted order -reject ACTIVITY:SCHEDULE [dict merge $c1 {
            pattern {daily su th sa}
        }]
    } -cleanup {
        cleanup
    } -result {
        pattern {Pattern "daily" takes no arguments}
    }

    test SCHEDULE-1.17 {pattern byweekday requires list of days} -setup {
        ted create NB1 BLUE
    } -body {
        ted order -reject ACTIVITY:SCHEDULE [dict merge $c1 {
            pattern byweekday
        }]
    } -cleanup {
        cleanup
    } -result {
        pattern {No day names given for "byweekday" pattern}
    }

    test SCHEDULE-1.18 {before is unknown} -setup {
        ted create NB1 BLUE
    } -body {
        ted order -reject ACTIVITY:SCHEDULE [dict merge $c1 {
            priority NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        priority {invalid value "nonesuch", should be one of: top, bottom}
    }

    test SCHEDULE-2.1 {activities are scheduled} -setup {
        ted create NB1 BLUE USAID SHIA
    } -body {
        ted order ACTIVITY:SCHEDULE $c1
        ted order ACTIVITY:SCHEDULE $c2
        ted order ACTIVITY:SCHEDULE $c3
        ted order ACTIVITY:SCHEDULE $c4

        ted query {SELECT * FROM calendar}
    } -cleanup {
        cleanup
    } -result {
cid n   g     a              tn  personnel priority start finish pattern              
--- --- ----- -------------- --- --------- -------- ----- ------ -------------------- 
1   NB1 BLUE  PATROL         NB1 50        1        5     30     daily                
2   NB1 USAID CMO_HEALTHCARE NB1 40        1        10           byweekday M T W Th F 
3   NB1 BLUE  CURFEW         NB1 70        2        3            daily                
4   NB1 SHIA  DISPLACED      NB1 70        1        3            daily                
    }


    test SCHEDULE-2.2 {tn can be different than n} -setup {
        ted create NB1 NB2 BLUE USAID SHIA
    } -body {
        ted order ACTIVITY:SCHEDULE {*}$c1 tn NB2
        ted order ACTIVITY:SCHEDULE {*}$c2 tn NB2
        ted order ACTIVITY:SCHEDULE {*}$c3 tn NB2
        ted order ACTIVITY:SCHEDULE {*}$c4 tn NB2

        ted query {SELECT * FROM calendar}
    } -cleanup {
        cleanup
    } -result {
cid n   g     a              tn  personnel priority start finish pattern              
--- --- ----- -------------- --- --------- -------- ----- ------ -------------------- 
1   NB1 BLUE  PATROL         NB2 50        1        5     30     daily                
2   NB1 USAID CMO_HEALTHCARE NB2 40        1        10           byweekday M T W Th F 
3   NB1 BLUE  CURFEW         NB2 70        2        3            daily                
4   NB1 SHIA  DISPLACED      NB2 70        1        3            daily                
    }

    test SCHEDULE-2.3 {Effects} -setup {
        ted create NB1 BLUE
    } -body {
        ted notifier bind ::rdb <calendar>
        ted order ACTIVITY:SCHEDULE $c1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <calendar> update 1}
        {::rdb <calendar> update 1}
    }


    test SCHEDULE-3.1 {undo effects} -setup {
        ted create NB1 BLUE
        ted order ACTIVITY:SCHEDULE $c1
    } -body {
        ted notifier bind ::rdb <calendar>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <calendar> delete 1}
    }


    #-------------------------------------------------------------------
    # ACTIVITY:UPDATE

    test UPDATE-1.1 {required parms} -body {
        ted order -reject ACTIVITY:UPDATE {}
    } -result {
        cid {required value}
    }

    
    test UPDATE-1.2 {cid is unknown} -setup {
        ted create NB1 BLUE USAID
        ted order ACTIVITY:SCHEDULE $c1
        ted order ACTIVITY:SCHEDULE $c2
    } -body {
        ted order -reject ACTIVITY:UPDATE cid NONESUCH 
    } -cleanup {
        cleanup
    } -result {
        cid {Invalid calendar item ID: "NONESUCH"}
    }


    test UPDATE-1.3 {personnel is invalid} -setup {
        ted create NB1 BLUE USAID
        ted order ACTIVITY:SCHEDULE $c1
        ted order ACTIVITY:SCHEDULE $c2
    } -body {
        ted order -reject ACTIVITY:UPDATE cid 1 personnel 0
    } -cleanup {
        cleanup
    } -result {
        personnel {invalid value "0", expected integer no less than 1}
    }


    test UPDATE-1.4 {start is invalid} -setup {
        ted create NB1 BLUE USAID
        ted order ACTIVITY:SCHEDULE $c1
        ted order ACTIVITY:SCHEDULE $c2
    } -body {
        ted order -reject ACTIVITY:UPDATE cid 1 start NONESUCH
    } -cleanup {
        cleanup
    } -result {
        start {invalid time spec "NONESUCH", base time should be "NOW", "T0", an integer tick, or a zulu-time string}
    }

    test UPDATE-1.5 {state is PREP, start is negative} -setup {
        ted create NB1 BLUE USAID SHIA
        ted order ACTIVITY:SCHEDULE $c1
        ted order ACTIVITY:SCHEDULE $c2
    } -body {
        ted order -reject ACTIVITY:UPDATE cid 1 start -1
    } -cleanup {
        cleanup
    } -result {
        start {The scheduled time must not be in the past.}
    }

    test UPDATE-1.6 {state is PAUSED, start is not in future} -setup {
        ted create NB1 BLUE USAID SHIA
        ted order ACTIVITY:SCHEDULE $c1
        ted order ACTIVITY:SCHEDULE $c2
        ted lock
    } -body {
        ted order -reject ACTIVITY:UPDATE cid 1 start 0
    } -cleanup {
        cleanup
    } -result {
        start {The scheduled time must be strictly in the future.}
    }

    test UPDATE-1.7 {finish is invalid} -setup {
        ted create NB1 BLUE USAID
        ted order ACTIVITY:SCHEDULE $c1
        ted order ACTIVITY:SCHEDULE $c2
    } -body {
        ted order -reject ACTIVITY:UPDATE cid 1 finish NONESUCH
    } -cleanup {
        cleanup
    } -result {
        finish {invalid value "NONESUCH", should be "NEVER" or a timespec with base time of "NOW", "T0", an integer tick, or a zulu-time string}
    }


    test UPDATE-1.8 {finish is prior to start} -setup {
        ted create NB1 BLUE USAID
        ted order ACTIVITY:SCHEDULE $c1
        ted order ACTIVITY:SCHEDULE $c2
    } -body {
        ted order -reject ACTIVITY:UPDATE cid 1 finish +1
    } -cleanup {
        cleanup
    } -result {
        finish {The end of the interval, "1", is prior to the start, "5"}
    }

    test UPDATE-1.9 {pattern is unknown} -setup {
        ted create NB1 BLUE USAID
        ted order ACTIVITY:SCHEDULE $c1
        ted order ACTIVITY:SCHEDULE $c2
    } -body {
        ted order -reject ACTIVITY:UPDATE cid 1 pattern NONESUCH
    } -cleanup {
        cleanup
    } -result {
        pattern {invalid value "NONESUCH", should be one of: daily, byweekday, once}
    }


    test UPDATE-1.10 {pattern daily takes no argument} -setup {
        ted create NB1 BLUE USAID
        ted order ACTIVITY:SCHEDULE $c1
        ted order ACTIVITY:SCHEDULE $c2
    } -body {
        ted order -reject ACTIVITY:UPDATE cid 1 pattern {daily su th sa}
    } -cleanup {
        cleanup
    } -result {
        pattern {Pattern "daily" takes no arguments}
    }

    test UPDATE-1.11 {pattern byweekday requires list of days} -setup {
        ted create NB1 BLUE USAID
        ted order ACTIVITY:SCHEDULE $c1
        ted order ACTIVITY:SCHEDULE $c2
    } -body {
        ted order -reject ACTIVITY:UPDATE cid 1 pattern byweekday
    } -cleanup {
        cleanup
    } -result {
        pattern {No day names given for "byweekday" pattern}
    }

    test UPDATE-2.1 {activities are updated} -setup {
        ted create NB1 BLUE USAID 
        ted order ACTIVITY:SCHEDULE $c1
        ted order ACTIVITY:SCHEDULE $c2
    } -body {
        ted order ACTIVITY:UPDATE \
            cid 1 personnel 100 start +10 finish never pattern {byweekday th f sa}

        ted query {SELECT * FROM calendar}
    } -cleanup {
        cleanup
    } -result {
cid n   g     a              tn  personnel priority start finish pattern              
--- --- ----- -------------- --- --------- -------- ----- ------ -------------------- 
1   NB1 BLUE  PATROL         NB1 100       1        10           byweekday Th F Sa    
2   NB1 USAID CMO_HEALTHCARE NB1 40        1        10           byweekday M T W Th F 
    }


    test UPDATE-2.2 {Effects} -setup {
        ted create NB1 BLUE USAID
        ted order ACTIVITY:SCHEDULE $c1
        ted order ACTIVITY:SCHEDULE $c2
    } -body {
        ted notifier bind ::rdb <calendar>
        ted order ACTIVITY:UPDATE cid 2 personnel 5
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <calendar> update 2}
    }


    test UPDATE-3.1 {undo effects} -setup {
        ted create NB1 BLUE USAID
        ted order ACTIVITY:SCHEDULE $c1
        ted order ACTIVITY:SCHEDULE $c2
        ted order ACTIVITY:UPDATE cid 2 personnel 5
    } -body {
        ted notifier bind ::rdb <calendar>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <calendar> update 2}
    }


    #-------------------------------------------------------------------
    # ACTIVITY:CANCEL

    test CANCEL-1.1 {required parms} -body {
        ted order -reject ACTIVITY:CANCEL {}
    } -result {
        cid {required value}
    }

    
    test CANCEL-1.2 {unknown cid} -body {
        ted order -reject ACTIVITY:CANCEL cid NONESUCH
    } -result {
        cid {Invalid calendar item ID: "NONESUCH"}
    }


    test CANCEL-2.1 {Effects} -setup {
        ted create NB1 BLUE
        ted order ACTIVITY:SCHEDULE $c1
    } -body {
        ted notifier bind ::rdb <calendar>
        ted order ACTIVITY:CANCEL cid 1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <calendar> delete 1}
    }


    test CANCEL-3.1 {Undo effects} -setup {
        ted create NB1 BLUE
        ted order ACTIVITY:SCHEDULE $c1
        ted order ACTIVITY:CANCEL cid 1
    } -body {
        ted notifier bind ::rdb <calendar>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <calendar> update 1}
    }


    #-------------------------------------------------------------------
    # ACTIVITY:PRIORITY

    test PRIORITY-1.1 {required parms} -body {
        ted order -reject ACTIVITY:PRIORITY {}
    } -result {
        cid {required value}
        priority {required value}
    }

    
    test PRIORITY-1.2 {unknown cid} -body {
        ted order -reject ACTIVITY:PRIORITY cid NONESUCH priority top
    } -result {
        cid {Invalid calendar item ID: "NONESUCH"}
    }

    test PRIORITY-1.3 {invalid before} -setup {
        ted create NB1 BLUE
        ted order ACTIVITY:SCHEDULE $c1
    } -body {
        ted order -reject ACTIVITY:PRIORITY cid 1 priority NONESUCH
    } -cleanup {
        cleanup
    } -result {
        priority {invalid value "nonesuch", should be one of: top, raise, lower, bottom}
    }

    test PRIORITY-2.1 {set priority} -setup {
        ted create NB1 BLUE USAID
        ted order ACTIVITY:SCHEDULE $c1
        ted order ACTIVITY:SCHEDULE $c2
        ted order ACTIVITY:SCHEDULE $c3
    } -body {
        ted order ACTIVITY:PRIORITY cid 3 priority top
        ted query {SELECT cid,priority FROM calendar ORDER BY priority}
    } -cleanup {
        cleanup
    } -result {
cid priority 
--- -------- 
2   1        
3   1        
1   2        
    }

    test PRIORITY-2.2 {Effects} -setup {
        ted create NB1 BLUE USAID
        ted order ACTIVITY:SCHEDULE $c1
        ted order ACTIVITY:SCHEDULE $c2
        ted order ACTIVITY:SCHEDULE $c3
    } -body {
        ted notifier bind ::rdb <calendar>
        ted order ACTIVITY:PRIORITY cid 3 priority top
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <calendar> update 3}
        {::rdb <calendar> update 1}
    }


    test PRIORITY-3.1 {Undo effects} -setup {
        ted create NB1 BLUE USAID
        ted order ACTIVITY:SCHEDULE $c1
        ted order ACTIVITY:SCHEDULE $c2
        ted order ACTIVITY:SCHEDULE $c3
        ted order ACTIVITY:PRIORITY cid 3 priority top
    } -body {
        ted notifier bind ::rdb <calendar>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <calendar> update 1}
        {::rdb <calendar> update 3}
    }



    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





