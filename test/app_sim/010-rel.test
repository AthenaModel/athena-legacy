# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-rel.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    rel(sim) tests.
#
#    This test suite tests the rel(sim) mutators and queries
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        array unset parms
        ted cleanup
    }

    #-------------------------------------------------------------------
    # mutate reconcile

    # Create relationships

    test reconcile-1.1 {FRC/ORG with FRC/ORG} -setup {
        ted create BLUE BRIT USAID HAL
    } -body {
        rel mutate reconcile

        # Every group is 1.0 with itself and 0.0 with every other.
        ted query {SELECT * FROM rel_nfg}
    } -cleanup {
        cleanup
    } -result {
n       f     g     rel 
------- ----- ----- --- 
PLAYBOX BLUE  BLUE  1.0 
PLAYBOX BLUE  BRIT  0.0 
PLAYBOX BRIT  BLUE  0.0 
PLAYBOX BLUE  HAL   0.0 
PLAYBOX HAL   BLUE  0.0 
PLAYBOX BLUE  USAID 0.0 
PLAYBOX USAID BLUE  0.0 
PLAYBOX BRIT  BRIT  1.0 
PLAYBOX BRIT  HAL   0.0 
PLAYBOX HAL   BRIT  0.0 
PLAYBOX BRIT  USAID 0.0 
PLAYBOX USAID BRIT  0.0 
PLAYBOX HAL   HAL   1.0 
PLAYBOX HAL   USAID 0.0 
PLAYBOX USAID HAL   0.0 
PLAYBOX USAID USAID 1.0 
    }

    test reconcile-1.2 {nbgroups with all other groups} -setup {
        ted create NB1 NB2 BLUE USAID SHIA SUNN KURD NB1SHIA 
    } -body {
        rel mutate reconcile
        
        # Note that: 
        #
        # * There are no relationships in NB2, because there are 
        #   no nbgroups in NB2
        #
        # * SUNN and KURD have relationships only with SHIA in
        #   NB1, since NB1SUNN and NB2KURD don't exist.
        ted query {SELECT * FROM rel_nfg}
    } -cleanup {
        cleanup
    } -result {
n       f     g     rel 
------- ----- ----- --- 
NB1     BLUE  SHIA  0.0 
NB1     SHIA  BLUE  0.0 
NB1     KURD  SHIA  0.0 
NB1     SHIA  KURD  0.0 
NB1     SHIA  SHIA  1.0 
NB1     SUNN  SHIA  0.0 
NB1     SHIA  SUNN  0.0 
NB1     USAID SHIA  0.0 
NB1     SHIA  USAID 0.0 
PLAYBOX BLUE  BLUE  1.0 
PLAYBOX BLUE  USAID 0.0 
PLAYBOX USAID BLUE  0.0 
PLAYBOX USAID USAID 1.0 
    }

    test reconcile-1.3 {<Entity> create} -setup {
        ted create NB1 BLUE USAID SHIA NB1SHIA
    } -body {
        ted notifier bind ::rel <Entity>
        rel mutate reconcile
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rel <Entity> create {NB1 BLUE SHIA}}
        {::rel <Entity> create {NB1 SHIA BLUE}}
        {::rel <Entity> create {NB1 SHIA SHIA}}
        {::rel <Entity> create {NB1 USAID SHIA}}
        {::rel <Entity> create {NB1 SHIA USAID}}
        {::rel <Entity> create {PLAYBOX BLUE BLUE}}
        {::rel <Entity> create {PLAYBOX BLUE USAID}}
        {::rel <Entity> create {PLAYBOX USAID BLUE}}
        {::rel <Entity> create {PLAYBOX USAID USAID}}
    }


    test reconcile-1.4 {Created curves are undone} -setup {
        ted create NB1 BLUE USAID SHIA NB1SHIA
        set undo [rel mutate reconcile]
    } -body {
        eval $undo
        rdb query {SELECT * FROM rel_nfg}
    } -cleanup {
        cleanup
    } -result {}
    

    test reconcile-1.5 {On undo: <Entity> delete} -setup {
        ted create NB1 BLUE USAID SHIA NB1SHIA
        set undo [rel mutate reconcile]
    } -body {
        ted notifier bind ::rel <Entity>
        eval $undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rel <Entity> delete {NB1 BLUE SHIA}}
        {::rel <Entity> delete {NB1 SHIA BLUE}}
        {::rel <Entity> delete {NB1 SHIA SHIA}}
        {::rel <Entity> delete {NB1 USAID SHIA}}
        {::rel <Entity> delete {NB1 SHIA USAID}}
        {::rel <Entity> delete {PLAYBOX BLUE BLUE}}
        {::rel <Entity> delete {PLAYBOX BLUE USAID}}
        {::rel <Entity> delete {PLAYBOX USAID BLUE}}
        {::rel <Entity> delete {PLAYBOX USAID USAID}}
    }

    
    test reconcile-2.1 {FRC/ORG relationships deleted with group} -setup {
        ted create NB1 BLUE USAID SHIA NB1SHIA
        rel mutate reconcile
    } -body {
        frcgroup mutate delete BLUE
        orggroup mutate delete USAID
        rel mutate reconcile

        # NB1SHIA curves are left
        ted query {SELECT * FROM rel_nfg}
    } -cleanup {
        cleanup
    } -result {
n   f    g    rel 
--- ---- ---- --- 
NB1 SHIA SHIA 1.0 
    }


    test reconcile-2.2 {nbgroup relationships deleted with group} -setup {
        ted create NB1 BLUE SHIA NB1SHIA NB1SUNN
        rel mutate reconcile
    } -body {
        nbgroup mutate delete NB1 SHIA
        rel mutate reconcile

        # SHIA has no relationship with itself or BLUE in NB1.
        ted query {SELECT * FROM rel_nfg}
    } -cleanup {
        cleanup
    } -result {
n       f    g    rel 
------- ---- ---- --- 
NB1     BLUE SUNN 0.0 
NB1     SUNN BLUE 0.0 
NB1     SHIA SUNN 0.0 
NB1     SUNN SHIA 0.0 
PLAYBOX BLUE BLUE 1.0 
    }


    test reconcile-2.4 {<Entity> Delete} -setup {
        ted create NB1 BLUE USAID SHIA NB1SHIA
        rel mutate reconcile
    } -body {
        nbgroup mutate delete NB1 SHIA
        orggroup mutate delete USAID

        ted notifier bind ::rel <Entity>
        rel mutate reconcile
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rel <Entity> delete {NB1 BLUE SHIA}}
        {::rel <Entity> delete {NB1 SHIA BLUE}}
        {::rel <Entity> delete {NB1 SHIA SHIA}}
        {::rel <Entity> delete {NB1 USAID SHIA}}
        {::rel <Entity> delete {NB1 SHIA USAID}}
        {::rel <Entity> delete {PLAYBOX BLUE USAID}}
        {::rel <Entity> delete {PLAYBOX USAID BLUE}}
        {::rel <Entity> delete {PLAYBOX USAID USAID}}
    }


    test reconcile-2.5 {On undo: deleted relationships are restored} -setup {
        # FIRST, create the groups and relationships
        ted create NB1 BLUE USAID SHIA NB1SHIA
        rel mutate reconcile

        # NEXT, update one, so that we can see that it's restored
        rel mutate update [list id {NB1 BLUE SHIA} rel 0.5]

        # NEXT, delete the groups and relationships, and get the
        # undo script.
        nbgroup mutate delete NB1 SHIA
        orggroup mutate delete USAID

        set undo [rel mutate reconcile]
    } -body {
        eval $undo
        ted query {SELECT * FROM rel_nfg}
    } -cleanup {
        cleanup
    } -result {
n       f     g     rel 
------- ----- ----- --- 
PLAYBOX BLUE  BLUE  1.0 
NB1     BLUE  SHIA  0.5 
NB1     SHIA  BLUE  0.0 
NB1     SHIA  SHIA  1.0 
NB1     USAID SHIA  0.0 
NB1     SHIA  USAID 0.0 
PLAYBOX BLUE  USAID 0.0 
PLAYBOX USAID BLUE  0.0 
PLAYBOX USAID USAID 1.0 
    }


    test reconcile-2.6 {On undo: <Entity> create} -setup {
        # FIRST, create the groups and relationships
        ted create NB1 BLUE USAID SHIA NB1SHIA
        rel mutate reconcile

        # NEXT, delete the groups and relationships, and get the
        # undo script.
        nbgroup mutate delete NB1 SHIA
        orggroup mutate delete USAID

        set undo [rel mutate reconcile]
    } -body {
        ted notifier bind ::rel <Entity>
        eval $undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rel <Entity> create {NB1 BLUE SHIA}}
        {::rel <Entity> create {NB1 SHIA BLUE}}
        {::rel <Entity> create {NB1 SHIA SHIA}}
        {::rel <Entity> create {NB1 USAID SHIA}}
        {::rel <Entity> create {NB1 SHIA USAID}}
        {::rel <Entity> create {PLAYBOX BLUE USAID}}
        {::rel <Entity> create {PLAYBOX USAID BLUE}}
        {::rel <Entity> create {PLAYBOX USAID USAID}}
    }


    test reconcile-3.1 {Reconcile doesn't affect valid curves} -setup {
        ted create NB1 BLUE USAID SHIA NB1SHIA
        rel mutate reconcile
    } -body {
        ted notifier bind ::rel <Entity>
        rel mutate reconcile
        ted notifier received
    } -cleanup {
        cleanup
    } -result {}


    #-------------------------------------------------------------------
    # mutate update


    test update-1.1 {rel is updated} -setup {
        ted create BLUE BRIT
        rel mutate reconcile
    } -body {
        rel mutate update {
            id   {PLAYBOX BLUE BRIT}
            rel  0.5
        }

        ted query {SELECT * FROM rel_nfg}
    } -cleanup {
        cleanup
    } -result {
n       f    g    rel 
------- ---- ---- --- 
PLAYBOX BLUE BLUE 1.0 
PLAYBOX BLUE BRIT 0.5 
PLAYBOX BRIT BLUE 0.0 
PLAYBOX BRIT BRIT 1.0 
    }


    test update-1.2 {identical values are OK} -setup {
        ted create BLUE BRIT
        rel mutate reconcile
        set parmdict {
            id   {PLAYBOX BLUE BRIT}
            rel  0.5
        }

        rel mutate update $parmdict
    } -body {
        set a [ted query {SELECT * FROM rel_nfg}]
        
        rel mutate update $parmdict

        set b [ted query {SELECT * FROM rel_nfg}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-1.3 {empty values are OK} -setup {
        ted create BLUE BRIT
        rel mutate reconcile
    } -body {
        set a [ted query {SELECT * FROM rel_nfg}]

        rel mutate update  {
            id   {PLAYBOX BLUE BRIT}
            rel  ""
        }

        set b [ted query {SELECT * FROM rel_nfg}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-1.4 {<Entity> update} -setup {
        ted create BLUE BRIT
        rel mutate reconcile
    } -body {
        ted notifier bind ::rel <Entity>
        rel mutate update  {
            id   {PLAYBOX BLUE BRIT}
            rel  ""
        }
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rel <Entity> update {PLAYBOX BLUE BRIT}}
    }


    test update-2.1 {undo undoes the change} -setup {
        ted create BLUE BRIT
        rel mutate reconcile
    } -body {

        set a [ted query {SELECT * FROM rel_nfg}]

        set undo [rel mutate update {
            id   {PLAYBOX BLUE BRIT}
            rel  0.5
        }]

        eval $undo

        set b [ted query {SELECT * FROM rel_nfg}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-2.2 {undo sends <Entity> update} -setup {
        ted create BLUE BRIT
        rel mutate reconcile
    } -body {
        set undo [rel mutate update {
            id   {PLAYBOX BLUE BRIT}
            rel  ""
        }]

        ted notifier bind ::rel <Entity>
        eval $undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rel <Entity> update {PLAYBOX BLUE BRIT}}
    }

    #-------------------------------------------------------------------
    # exists

    test exists-1.1 {rel does not exist} -body {
        rel exists NONESUCH NONESUCH NONESUCH
    } -cleanup {
        cleanup
    } -result {0}


    test exists-1.2 {rel exists} -setup {
        ted create BLUE BRIT
        rel mutate reconcile
    } -body {
        rel exists PLAYBOX BLUE BRIT
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # validate

    test validate-1.1 {invalid nbhood} -body {
        rel validate {NONESUCH NONESUCH NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid neighborhood, should be one of: PLAYBOX}


    test validate-1.2 {invalid group f} -setup {
        ted create NB1
    } -body {
        rel validate {NB1 NONESUCH NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid group, none are defined}


    test validate-1.3 {Invalid group g} -setup {
        ted create NB1 BLUE
    } -body {
        rel validate {NB1 BLUE NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid group, should be one of: BLUE}


    test validate-1.4 {Invalid relationship} -setup {
        ted create NB1 BLUE
    } -body {
        rel validate {NB1 BLUE BLUE}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Relationship is not tracked for BLUE with BLUE in NB1.}


    test validate-2.1 {Valid group} -setup {
        ted create NB1 BLUE
        rel mutate reconcile
    } -body {
        rel validate {PLAYBOX BLUE BLUE}
    } -cleanup {
        cleanup
    } -result {PLAYBOX BLUE BLUE}

    #-------------------------------------------------------------------
    # nbhood validate

    test nbhood_validate-1.1 {Invalid neighborhood} -setup {
        ted create NB1
    } -body {
        rel nbhood validate NONESUCH
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid neighborhood, should be one of: PLAYBOX, NB1}
    
    test nbhood_validate-2.1 {PLAYBOX is valid} -setup {
        ted create NB1
    } -body {
        rel nbhood validate PLAYBOX
    } -cleanup {
        cleanup
    } -result {PLAYBOX}

    test nbhood_validate-2.2 {NB1 is valid} -setup {
        ted create NB1
    } -body {
        rel nbhood validate NB1
    } -cleanup {
        cleanup
    } -result {NB1}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





