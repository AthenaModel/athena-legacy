# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-rel.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    rel(sim) tests.
#
#    This test suite tests the rel(sim) mutators and queries
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        array unset parms
        ted cleanup
    }

    #-------------------------------------------------------------------
    # mutate reconcile

    # Create relationships

    test reconcile-1.1 {Relationships created} -setup {
        ted create BLUE USAID SHIA
    } -body {
        rel mutate reconcile

        # Every group is 1.0 with itself and 0.0 with every other.
        ted query {SELECT * FROM rel_fg}
    } -cleanup {
        cleanup
    } -result {
f     g     rel 
----- ----- --- 
BLUE  BLUE  1.0 
BLUE  USAID 0.0 
BLUE  SHIA  0.0 
USAID BLUE  0.0 
USAID USAID 1.0 
USAID SHIA  0.0 
SHIA  BLUE  0.0 
SHIA  USAID 0.0 
SHIA  SHIA  1.0 
    }


    test reconcile-1.3 {Created curves are undone} -setup {
        ted create NB1 BLUE USAID SHIA
        set undo [rel mutate reconcile]
    } -body {
        eval $undo
        rdb query {SELECT * FROM rel_fg}
    } -cleanup {
        cleanup
    } -result {}
    

    test reconcile-2.1 {relationships deleted with group} -setup {
        ted create NB1 BLUE USAID SHIA
        rel mutate reconcile
    } -body {
        frcgroup mutate delete BLUE
        rel mutate reconcile

        # USAID and SHIA relationships are left
        ted query {SELECT * FROM rel_fg}
    } -cleanup {
        cleanup
    } -result {
f     g     rel 
----- ----- --- 
USAID USAID 1.0 
USAID SHIA  0.0 
SHIA  USAID 0.0 
SHIA  SHIA  1.0 
    }

    test reconcile-2.3 {On undo: deleted relationships are restored} -setup {
        # FIRST, create the groups and relationships
        ted create NB1 BLUE USAID SHIA
        rel mutate reconcile

        # NEXT, update one, so that we can see that it's restored
        rel mutate update [list id {BLUE SHIA} rel 0.5]

        # NEXT, delete the groups and relationships, and get the
        # undo script.
        civgroup mutate delete SHIA

        set undo [rel mutate reconcile]
    } -body {
        eval $undo
        ted query {SELECT * FROM rel_fg}
    } -cleanup {
        cleanup
    } -result {
f     g     rel 
----- ----- --- 
BLUE  BLUE  1.0 
BLUE  USAID 0.0 
USAID BLUE  0.0 
USAID USAID 1.0 
BLUE  SHIA  0.5 
USAID SHIA  0.0 
SHIA  BLUE  0.0 
SHIA  USAID 0.0 
SHIA  SHIA  1.0 
    }


    #-------------------------------------------------------------------
    # mutate update


    test update-1.1 {rel is updated} -setup {
        ted create BLUE BRIT
        rel mutate reconcile
    } -body {
        rel mutate update {
            id   {BLUE BRIT}
            rel  0.5
        }

        ted query {SELECT * FROM rel_fg}
    } -cleanup {
        cleanup
    } -result {
f    g    rel 
---- ---- --- 
BLUE BLUE 1.0 
BLUE BRIT 0.5 
BRIT BLUE 0.0 
BRIT BRIT 1.0 
    }


    test update-1.2 {identical values are OK} -setup {
        ted create BLUE BRIT
        rel mutate reconcile
        set parmdict {
            id   {BLUE BRIT}
            rel  0.5
        }

        rel mutate update $parmdict
    } -body {
        set a [ted query {SELECT * FROM rel_fg}]
        
        rel mutate update $parmdict

        set b [ted query {SELECT * FROM rel_fg}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-1.3 {empty values are OK} -setup {
        ted create BLUE BRIT
        rel mutate reconcile
    } -body {
        set a [ted query {SELECT * FROM rel_fg}]

        rel mutate update  {
            id   {BLUE BRIT}
            rel  ""
        }

        set b [ted query {SELECT * FROM rel_fg}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-2.1 {undo undoes the change} -setup {
        ted create BLUE BRIT
        rel mutate reconcile
    } -body {

        set a [ted query {SELECT * FROM rel_fg}]

        set undo [rel mutate update {
            id   {BLUE BRIT}
            rel  0.5
        }]

        eval $undo

        set b [ted query {SELECT * FROM rel_fg}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # exists

    test exists-1.1 {rel does not exist} -body {
        rel exists NONESUCH NONESUCH
    } -cleanup {
        cleanup
    } -result {0}


    test exists-1.2 {rel exists} -setup {
        ted create BLUE BRIT
        rel mutate reconcile
    } -body {
        rel exists BLUE BRIT
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # validate

    test validate-1.1 {invalid group f} -body {
        rel validate {NONESUCH NONESUCH}
    } -returnCodes {
        error
    } -result {Invalid group, none are defined}


    test validate-1.2 {Invalid group g} -setup {
        ted create BLUE BRIT
    } -body {
        rel validate {BLUE NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid group, should be one of: BLUE, BRIT}


    test validate-2.1 {Valid group} -setup {
        ted create BLUE BRIT
        rel mutate reconcile
    } -body {
        rel validate {BLUE BRIT}
    } -cleanup {
        cleanup
    } -result {BLUE BRIT}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





