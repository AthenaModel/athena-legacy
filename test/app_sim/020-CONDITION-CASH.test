# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-CONDITION-CASH.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) CONDITION:CASH:* order tests.
#
#    This test suite tests the CONDITION:CASH:* orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE BOB NB1 NB2 BLUE BRIT ALQ
        ted order TACTIC:DEPOSIT:CREATE owner JOE amount 10
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Standard items

    set C1 {
        cc_id          1
        a              JOE
        op1            GT
        x1             10000
    }

    #-------------------------------------------------------------------
    # CONDITION:CASH:CREATE

    test CASH:CREATE-1.1 {required parms} -body {
        ted order -reject CONDITION:CASH:CREATE {}
    } -result {
        cc_id {required value}
        a {required value}
        op1 {required value}
        x1 {required value}
    }

    
    test CASH:CREATE-1.2 {tactic is unknown} -setup {
        setup
    } -body {
        ted order -reject CONDITION:CASH:CREATE \
            [dict merge $C1 [list cc_id NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        cc_id {Invalid goal or tactic ID: "NONESUCH"}
    }

    test CASH:CREATE-1.3 {actor is unknown} -setup {
        setup
    } -body {
        ted order -reject CONDITION:CASH:CREATE \
            [dict merge $C1 [list a NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        a {Invalid actor, should be one of: BOB, JOE}
    }

    test CASH:CREATE-1.4 {op1 is invalid} -setup {
        setup
    } -body {
        ted order -reject CONDITION:CASH:CREATE \
            [dict merge $C1 [list op1 NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        op1 {invalid value "NONESUCH", should be one of: EQ, GE, GT, LE, LT}
    }

    test CASH:CREATE-1.5 {x1 is invalid} -setup {
        setup
    } -body {
        ted order -reject CONDITION:CASH:CREATE [dict merge $C1 {
            x1 NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        x1 {invalid money value "NONESUCH", expected positive numeric value with optional K, M, or B suffix}
    }

    test CASH:CREATE-2.1 {condition is created} -setup {
        setup
    } -body {
        ted order CONDITION:CASH:CREATE $C1

        ted querylist {SELECT * FROM conditions_CASH}
    } -cleanup {
        cleanup
    } -result {
condition_id    1
condition_type  CASH
cc_id           1
narrative       Actor JOE's cash reserve is greater than $10,000
state           normal
flag            
a               JOE
op1             GT
x1              10000.0
    }


    test CASH:CREATE-2.2 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <conditions>
        ted order CONDITION:CASH:CREATE $C1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
    }


    test CASH:CREATE-3.1 {undo effects} -setup {
        setup
        ted order CONDITION:CASH:CREATE $C1
    } -body {
        ted notifier bind ::rdb <conditions>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> delete 1}
    }


    #-------------------------------------------------------------------
    # CONDITION:CASH:UPDATE

    proc setup_update_savings {} {
        variable C1
        setup
        ted order CONDITION:CASH:CREATE $C1
    }

    test CASH:UPDATE-1.1 {required parms} -body {
        ted order -reject CONDITION:CASH:UPDATE {}
    } -result {
        condition_id {required value}
    }

    
    test CASH:UPDATE-1.2 {condition_id is unknown} -setup {
        setup_update_savings
    } -body {
        ted order -reject CONDITION:CASH:UPDATE condition_id NONESUCH x1 10
    } -cleanup {
        cleanup
    } -result {
        condition_id {Invalid condition ID: "NONESUCH"}
    }

    test CASH:UPDATE-1.3 {actor is unknown} -setup {
        setup_update_savings
    } -body {
        ted order -reject CONDITION:CASH:UPDATE condition_id 1 a NONESUCH
    } -cleanup {
        cleanup
    } -result {
        a {Invalid actor, should be one of: BOB, JOE}
    }

    test CASH:UPDATE-1.4 {op1 is invalid} -setup {
        setup_update_savings
    } -body {
        ted order -reject CONDITION:CASH:UPDATE condition_id 1 op1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        op1 {invalid value "NONESUCH", should be one of: EQ, GE, GT, LE, LT}
    }

    test CASH:UPDATE-1.5 {x1 is invalid} -setup {
        setup_update_savings
    } -body {
        ted order -reject CONDITION:CASH:UPDATE condition_id 1 x1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        x1 {invalid money value "NONESUCH", expected positive numeric value with optional K, M, or B suffix}
    }

    test CASH:UPDATE-1.6 {wrong flavor of condition} -setup {
        setup_update_savings
        rdb eval {UPDATE conditions SET condition_type='BOGUS'}
    } -body {
        ted order -reject CONDITION:CASH:UPDATE condition_id 1 x1 5
    } -cleanup {
        cleanup
    } -result {
        condition_id {Condition 1 is not a CASH condition}
    }

    test CASH:UPDATE-2.1 {activities are updated} -setup {
        setup_update_savings
    } -body {
        ted order CONDITION:CASH:UPDATE condition_id 1 a BOB op1 EQ x1 20

        ted querylist {SELECT * FROM conditions_CASH}
    } -cleanup {
        cleanup
    } -result {
condition_id    1
condition_type  CASH
cc_id           1
narrative       Actor BOB's cash reserve is equal to $20.00
state           normal
flag            
a               BOB
op1             EQ
x1              20.0
    }


    test CASH:UPDATE-2.2 {Effects} -setup {
        setup_update_savings
    } -body {
        ted notifier bind ::rdb <conditions>
        ted order CONDITION:CASH:UPDATE condition_id 1 x1 20
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
    }


    test CASH:UPDATE-3.1 {undo effects} -setup {
        setup_update_savings
        ted order CONDITION:CASH:UPDATE condition_id 1 x1 20
    } -body {
        ted notifier bind ::rdb <conditions>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







