# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-ensit.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    ensit(sim) tests.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    set s1 [dict create \
                stype     BADWATER                             \
                location  [dict get [ted entity NB1] refpoint] \
                coverage  1.0                                  \
                g         BLUE                                 \
                resolver  NONE                                 \
                inception 1                                    \
                rduration ""] 

    set s2 [dict create \
                stype     COMMOUT                              \
                location  [dict get [ted entity NB1] refpoint] \
                coverage  0.5                                  \
                g         NONE                                 \
                resolver  BLUE                                 \
                inception 0                                    \
                rduration ""] 

    set s3 [dict create \
                stype     INDSPILL                             \
                location  [dict get [ted entity NB1] refpoint] \
                coverage  1.0                                  \
                g         BLUE                                 \
                resolver  NONE                                 \
                inception 1                                    \
                rduration ""] 

    #-------------------------------------------------------------------
    # mutate create

    test create-1.1 {Ensit is created} -setup {
        ted create NB1 BLUE
    } -body {
        ensit mutate create $s1
        ensit mutate create $s2

        ted querylist {SELECT * FROM ensits}
    } -cleanup {
        cleanup
    } -result {
s          1
stype      BADWATER
location   100 100
coverage   1.0
inception  1
resolver   NONE
rduration  1
n          NB1
state      INITIAL
ts         0
tr         1

s          2
stype      COMMOUT
location   100 100
coverage   0.5
inception  0
resolver   BLUE
rduration  1
n          NB1
state      INITIAL
ts         0
tr         1
    }
    

    test create-1.2 {Ensit is created, duration can be set} -setup {
        ted create JOE NB1 BLUE SHIA
    } -body {
        ensit mutate create [dict merge $s1 [list rduration 20]]

        ted querylist {SELECT * FROM ensits}
    } -cleanup {
        cleanup
    } -result {
s          1
stype      BADWATER
location   100 100
coverage   1.0
inception  1
resolver   NONE
rduration  20
n          NB1
state      INITIAL
ts         0
tr         20
    }

    test create-1.3 {If created while PAUSED, ts = now+1} -setup {
        ted create JOE NB1 BLUE SHIA
    } -body {
        ted lock
        ensit mutate create $s1

        ted querylist {SELECT * FROM ensits}
    } -cleanup {
        cleanup
    } -result {
s          1
stype      BADWATER
location   100 100
coverage   1.0
inception  1
resolver   NONE
rduration  1
n          NB1
state      INITIAL
ts         1
tr         2
    }

    

    test create-2.1 {Undo deletes the entity} -setup {
        ted create NB1 BLUE
        set undo [ensit mutate create $s1]
    } -body {
        {*}$undo
        rdb query {SELECT s FROM ensits}
    } -cleanup {
        cleanup
    } -result {}


    #-------------------------------------------------------------------
    # mutate delete

    test delete-1.1 {Entity is deleted} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
        ensit mutate create $s2
    } -body {
        ensit mutate delete 1

        # Is 1 gone?
        rdb eval {SELECT s FROM ensits}
    } -cleanup {
        cleanup
    } -result {2}


    test delete-2.1 {Undo restores ensit} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
        set undo [ensit mutate delete 1]
    } -body {
        {*}$undo
        ted querylist {SELECT * FROM ensits}
    } -cleanup {
        cleanup
    } -result {
s          1
stype      BADWATER
location   100 100
coverage   1.0
inception  1
resolver   NONE
rduration  1
n          NB1
state      INITIAL
ts         0
tr         1
    }


    #-------------------------------------------------------------------
    # mutate update


    test update-1.1 {ensit is updated} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
    } -body {
        ensit mutate update {
            s         1 
            stype     BADFOOD
            location  {101 101} 
            coverage  0.5
            inception 0
            g         NONE
            resolver  BLUE
            rduration 10
        }

        ted querylist {SELECT * FROM ensits}
    } -cleanup {
        cleanup
    } -result {
s          1
stype      BADFOOD
location   101 101
coverage   0.5
inception  0
resolver   BLUE
rduration  10
n          NB1
state      INITIAL
ts         0
tr         10
    }

    test update-1.2 {identical values are OK} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
    } -body {
        set a [ted query {SELECT * FROM ensits}]

        ensit mutate update [concat {s 1} $s1]

        set b [ted query {SELECT * FROM ensits}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-1.3 {empty values are OK} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
    } -body {
        set a [ted query {SELECT * FROM ensits}]

        ensit mutate update  {
            s         1
            stype     ""
            location  ""
            coverage  ""
            inception ""
            g         ""
            resolver  ""
            rduration ""
        }

        set b [ted query {SELECT * FROM ensits}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-1.5 {n is updated} -setup {
        ted create NB1 NB2 BLUE
        set loc [dict get [ted entity NB2] refpoint]
        ensit mutate create $s1
    } -body {
        ensit mutate update [dict merge $s1 [list s 1 location $loc]]

        ted query {SELECT s,n FROM ensits}
    } -cleanup {
        cleanup
    } -result {
s n   
- --- 
1 NB2 
    }


    test update-2.1 {undo undoes the change} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
    } -body {
        set a [ted query {SELECT * FROM ensits}]

        set undo [ensit mutate update {
            s         1 
            stype     BADFOOD
            location  ""
            coverage  ""
            inception ""
            g         ""
            resolver  ""
            rduration ""
        }]

        {*}$undo

        set b [ted query {SELECT * FROM ensits}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # mutate resolve


    test resolve-1.1 {ensit is resolved by NONE} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
    } -body {
        ensit mutate resolve {
            s         1 
            resolver  NONE
        }

        ted querylist {SELECT * FROM ensits}
    } -cleanup {
        cleanup
    } -result {
s          1
stype      BADWATER
location   100 100
coverage   1.0
inception  1
resolver   NONE
rduration  0
n          NB1
state      RESOLVED
ts         0
tr         0
    }


    test resolve-2.1 {undo undoes the change} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
    } -body {
        set a [ted query {SELECT * FROM ensits}]

        set undo [ensit mutate resolve {
            s        1
            resolver NONE
        }]

        {*}$undo

        set b [ted query {SELECT * FROM ensits}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # mutate reconcile

    test reconcile-1.1 {resolver set to NONE if resolver doesn't exist} -setup {
        ted create NB1
        ensit mutate create [dict merge $s1 [list g NONE]]
        ensit mutate resolve [list s 1 resolver BLUE]
    } -body {
        ensit mutate reconcile

        ted querylist {SELECT * FROM ensits}
    } -cleanup {
        cleanup
    } -result {
s          1
stype      BADWATER
location   100 100
coverage   1.0
inception  1
resolver   NONE
rduration  0
n          NB1
state      RESOLVED
ts         0
tr         0
    }


    # n reset

    test reconcile-2.1 {n reset} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
        nbhood mutate delete NB1
    } -body {
        ensit mutate reconcile

        ted querylist {SELECT * FROM ensits}
    } -cleanup {
        cleanup
    } -result {
s          1
stype      BADWATER
location   100 100
coverage   1.0
inception  1
resolver   NONE
rduration  1
n          
state      INITIAL
ts         0
tr         1
    }


    # Undo restores everything

    test reconcile-3.1 {Undo restores everything} -setup {
        ted create NB1
        ensit mutate create $s1
        ensit mutate resolve [list s 1 resolver BRIT]
        nbhood mutate delete NB1

        set undo [ensit mutate reconcile]
    } -body {
        eval $undo

        ted querylist {SELECT * FROM ensits}
    } -cleanup {
        cleanup
    } -result {
s          1
stype      BADWATER
location   100 100
coverage   1.0
inception  1
resolver   BRIT
rduration  0
n          NB1
state      RESOLVED
ts         0
tr         0
    }


    #-------------------------------------------------------------------
    # get

    test get-1.1 {get all} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
        ensit mutate create $s2
    } -body {
        ted pdict [ensit get 1]
        
    } -cleanup {
        cleanup
    } -result {
        rduration 1
        state     INITIAL
        resolver  NONE
        s         1
        stype     BADWATER
        tr        1
        ts        0
        location  {100 100}
        inception 1
        coverage  1.0
        n         NB1
    }

    test get-1.2 {get parm} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
        ensit mutate create $s2
    } -body {
        ensit get 1 n
    } -cleanup {
        cleanup
    } -result {NB1}

    #-------------------------------------------------------------------
    # existsInNbhood

    test existsInNbhood-1.1 {get list of live ensits} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
        ensit mutate create $s2

        ensit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        ensit existsInNbhood NB1
    } -cleanup {
        cleanup
    } -result {BADWATER}


    test existsInNbhood-1.2 {Check existence of types} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
        ensit mutate create $s2
        ensit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        list \
            [ensit existsInNbhood NB1 BADWATER] \
            [ensit existsInNbhood NB1 COMMOUT]
    } -cleanup {
        cleanup
    } -result {1 0}


    #-------------------------------------------------------------------
    # absentFromNbhood

    test absentFromNbhood-1.1 {get list of absent ensits} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
        ensit mutate create $s2
        ensit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        # Only BADWATER should be missing.
        ensit absentFromNbhood NB1
    } -cleanup {
        cleanup
    } -result {BADFOOD COMMOUT CULSITE DISASTER DISEASE EPIDEMIC FOODSHRT FUELSHRT GARBAGE INDSPILL MINEFIELD NOWATER ORDNANCE PIPELINE POWEROUT REFINERY RELSITE SEWAGE}

    
    #-------------------------------------------------------------------
    # names/validate
    #
    # enum(n)-like subcommands for all ensits, live and RESOLVED.

    test names-1.1 {get list of ensit IDs} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
        ensit mutate create $s2
    } -body {
        ensit names
    } -cleanup {
        cleanup
    } -result {1 2}
    

    test names-1.2 {validate valid ID} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
        ensit mutate create $s2
    } -body {
        ensit validate 2
    } -cleanup {
        cleanup
    } -result {2}
    

    test names-1.3 {validate invalid ID} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
        ensit mutate create $s2
    } -body {
        ensit validate 3
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid environmental situation ID: "3"}
    

    #-------------------------------------------------------------------
    # initial names/validate
    #
    # enum(n)-like subcommands for ensits in the INITIAL state

    test initial_names-1.1 {get list of ensit IDs} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
        ensit mutate create $s2
        ensit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        ensit initial names
    } -cleanup {
        cleanup
    } -result {1}
    

    test initial_names-1.2 {validate valid ID} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
        ensit mutate create $s2
        ensit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        ensit initial validate 1
    } -cleanup {
        cleanup
    } -result {1}
    

    test initial_names-1.3 {validate RESOLVED ID} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
        ensit mutate create $s2
        ensit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        ensit initial validate 2
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {not a "live" situation: "2"}
    

    test initial_names-1.4 {validate active ID} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
        ensit mutate create $s2
        rdb eval {UPDATE ensits SET state='ONGOING' WHERE s=2}
    } -body {
        ensit initial validate 2
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {operation is invalid; time has passed.}

    #-------------------------------------------------------------------
    # live names/validate
    #
    # enum(n)-like subcommands for ensits that "live"

    test live_names-1.1 {get list of ensit IDs} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
        ensit mutate create $s2
        ensit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        ensit live names
    } -cleanup {
        cleanup
    } -result {1}
    

    test live_names-1.2 {validate valid ID} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
        ensit mutate create $s2
        ensit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        ensit live validate 1
    } -cleanup {
        cleanup
    } -result {1}
    

    test live_names-1.3 {validate invalid ID} -setup {
        ted create NB1 BLUE
        ensit mutate create $s1
        ensit mutate create $s2
        ensit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        ensit live validate 2
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {not a "live" situation: "2".}


    #-------------------------------------------------------------------
    # rebase

    test rebase-1.1 {Clean up ensits} -setup {
        ted create NB1 JOE BLUE SHIA
        ensit mutate create $s1
        ensit mutate create $s2
        ensit mutate create $s3
        ted lock
        ensit mutate resolve {s 1 resolver NONE}
        ted step
        ted step
    } -body {
        ensit rebase

        # RESOLVED ensits should be gone.  For those remaining,
        # tc=ts=now (t=2); state is INITIAL; inception is 0;
        # driver IDs are unassigned; duration is truncated.
        ted querylist {SELECT * FROM ensits}
    } -cleanup {
        cleanup
    } -result {
s          3
stype      INDSPILL
location   100 100
coverage   1.0
inception  0
resolver   NONE
rduration  10
n          NB1
state      INITIAL
ts         2
tr         12
    }    

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
    parm set dam.UNEMP.active yes
}

namespace delete ::athena_test::tests::









