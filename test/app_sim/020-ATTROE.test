# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-ROE-ATTACK.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) ATTROE:* order tests.
#
#    This test suite tests the attroe-related orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    proc setup {} {
        ted create NB1 NB2 BLUE BRIT ALQ TAL
    }

    set blue_alq {
        id        {NB1 BLUE ALQ}
        roe       ATTACK
        cooplimit 30
    }

    set blue_tal {
        id        {NB1 BLUE TAL}
        roe       ATTACK
        cooplimit 40
    }

    set alq_blue {
        id        {NB1 ALQ BLUE}
        roe       HIT_AND_RUN
        cooplimit 40
        rate      0.5
    }

    set tal_blue {
        id        {NB1 TAL BLUE}
        roe       STAND_AND_FIGHT
        cooplimit 30
        rate      0.25
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
        cif clear
    }

    #-------------------------------------------------------------------
    # ATTROE:UF:CREATE

    test U-CREATE-1.1 {required parms} -setup {
        setup
    } -body {
        ted order -reject ATTROE:UF:CREATE {}
    } -cleanup {
        cleanup
    } -result {
        id {required value}
        roe {required value}
        cooplimit {required value}
    }


    test U-CREATE-1.2 {n is not a nbhood} -setup {
        setup
    } -body {
        ted order -reject ATTROE:UF:CREATE \
            [dict merge $blue_alq {id NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        id {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test U-CREATE-1.3 {f is not a uniformed force group} -setup {
        setup
    } -body {
        ted order -reject ATTROE:UF:CREATE \
            [dict merge $blue_alq {id {NB1 ALQ ALQ}}]
    } -cleanup {
        cleanup
    } -result {
        id {Invalid uniformed force group, should be one of: BLUE, BRIT}
    }


    test U-CREATE-1.4 {g is not a non-uniformed force group} -setup {
        setup
    } -body {
        ted order -reject ATTROE:UF:CREATE \
            [dict merge $blue_alq {id {NB1 BRIT BRIT}}]
    } -cleanup {
        cleanup
    } -result {
        id {Invalid non-uniformed force group, should be one of: ALQ, TAL}
    }


    test U-CREATE-1.5 {id is already defined} -setup {
        setup
        ted order ATTROE:UF:CREATE $blue_alq
    } -body {
        ted order -reject ATTROE:UF:CREATE $blue_alq
    } -cleanup {
        cleanup
    } -result {
        id {Group BLUE already has an ROE with group ALQ in NB1}
    }


    test U-CREATE-1.6 {Invalid ROE} -setup {
        setup
    } -body {
        ted order -reject ATTROE:UF:CREATE \
            [dict merge $blue_alq {roe NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        roe {invalid value "NONESUCH", should be one of: DO_NOT_ATTACK, ATTACK}
    }


    test U-CREATE-1.7 {Non-numeric coop limit} -setup {
        setup
    } -body {
        ted order -reject ATTROE:UF:CREATE \
            [dict merge $blue_alq {cooplimit NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        cooplimit {invalid value "NONESUCH", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}
    }


    test U-CREATE-1.8 {Coop limit out of range} -setup {
        setup
    } -body {
        ted order -reject ATTROE:UF:CREATE \
            [dict merge $blue_alq {cooplimit -1}]
    } -cleanup {
        cleanup
    } -result {
        cooplimit {invalid value "-1", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}
    }


    test U-CREATE-2.1 {roe is created} -setup {
        setup
    } -body {
        ted order ATTROE:UF:CREATE $blue_alq
        ted order ATTROE:UF:CREATE $blue_tal

        ted query {SELECT * FROM attroe_nfg}
    } -cleanup {
        cleanup
    } -result {
n   f    g   uniformed roe    cooplimit rate 
--- ---- --- --------- ------ --------- ---- 
NB1 BLUE ALQ 1         ATTACK 30.0           
NB1 BLUE TAL 1         ATTACK 40.0           
    }


    test U-CREATE-2.2 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::attroe <Entity>
        ted order ATTROE:UF:CREATE $blue_alq
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::attroe <Entity> create {NB1 BLUE ALQ}}
    }


    test U-CREATE-3.1 {undo effects} -setup {
        setup
        ted order ATTROE:UF:CREATE $blue_alq
    } -body {
        ted notifier bind ::attroe <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::attroe <Entity> delete {NB1 BLUE ALQ}}
    }


    #-------------------------------------------------------------------
    # ATTROE:DELETE

    test DELETE-1.1 {required parms} -body {
        ted order -reject ATTROE:DELETE {}
    } -result {
        id {required value}
    }

    
    test DELETE-1.2 {unknown n,f,g} -setup {
        setup
    } -body {
        ted order -reject ATTROE:DELETE id {NONESUCH NONESUCH NONESUCH}
    } -cleanup {
        cleanup
    } -result {
        id {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test DELETE-1.3 {no such attroe} -setup {
        setup
    } -body {
        ted order -reject ATTROE:DELETE id {NB1 BLUE ALQ}
    } -cleanup {
        cleanup
    } -result {
        id {Group BLUE has no ROE for group ALQ in NB1.}
    }


    test DELETE-2.1 {Effects} -setup {
        setup
        ted order ATTROE:UF:CREATE $blue_alq
    } -body {
        ted notifier bind ::attroe <Entity>
        ted order ATTROE:DELETE id {NB1 BLUE ALQ}
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::attroe <Entity> delete {NB1 BLUE ALQ}}
    }


    test DELETE-3.1 {Undo effects} -setup {
        setup
        ted order ATTROE:UF:CREATE $blue_alq
        ted order ATTROE:DELETE id {NB1 BLUE ALQ}
    } -body {
        ted notifier bind ::attroe <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::attroe <Entity> create {NB1 BLUE ALQ}}
    }


    #-------------------------------------------------------------------
    # ATTROE:UF:UPDATE

    test U-UPDATE-1.1 {required parms} -body {
        ted order -reject ATTROE:UF:UPDATE {}
    } -result {
        id {required value}
    }
    

    test U-UPDATE-1.2 {invalid n, f, g} -setup {
        setup
    } -body {
        ted order -reject ATTROE:UF:UPDATE \
            id {NONESUCH NONESUCH NONESUCH}
    } -cleanup {
        cleanup
    } -result {
        id {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test U-UPDATE-1.3 {undefined entity} -setup {
        setup
    } -body {
        ted order -reject ATTROE:UF:UPDATE \
            id {NB1 BLUE ALQ}
    } -cleanup {
        cleanup
    } -result {
        id {Group BLUE has no ROE for group ALQ in NB1.}
    }


    test U-UPDATE-1.4 {invalid roe} -setup {
        setup
        ted order ATTROE:UF:CREATE $blue_alq
    } -body {
        ted order -reject ATTROE:UF:UPDATE \
            id {NB1 BLUE ALQ} roe NONESUCH
    } -cleanup {
        cleanup
    } -result {
        roe {invalid value "NONESUCH", should be one of: DO_NOT_ATTACK, ATTACK}
    }


    test U-UPDATE-1.5 {non-numeric cooplimit} -setup {
        setup
        ted order ATTROE:UF:CREATE $blue_alq
    } -body {
        ted order -reject ATTROE:UF:UPDATE \
            id {NB1 BLUE ALQ} cooplimit NONESUCH
    } -cleanup {
        cleanup
    } -result {
        cooplimit {invalid value "NONESUCH", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}
    }


    test U-UPDATE-1.6 {cooplimit out of range} -setup {
        setup
        ted order ATTROE:UF:CREATE $blue_alq
    } -body {
        ted order -reject ATTROE:UF:UPDATE \
            id {NB1 BLUE ALQ} cooplimit -1
    } -cleanup {
        cleanup
    } -result {
        cooplimit {invalid value "-1", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}
    }


    test U-UPDATE-2.1 {attroe is updated} -setup {
        setup
        ted order ATTROE:UF:CREATE $blue_alq
    } -body {
        ted order ATTROE:UF:UPDATE {
            id             {NB1 BLUE ALQ}
            roe            DO_NOT_ATTACK
            cooplimit      20
        }

        ted query {SELECT * FROM attroe_nfg}
    } -cleanup {
        cleanup
    } -result {
n   f    g   uniformed roe           cooplimit rate 
--- ---- --- --------- ------------- --------- ---- 
NB1 BLUE ALQ 1         DO_NOT_ATTACK 20.0           
    }


    test U-UPDATE-2.2 {Effects} -setup {
        setup
        ted order ATTROE:UF:CREATE $blue_alq
    } -body {
        ted notifier bind ::attroe <Entity>
        ted order ATTROE:UF:UPDATE \
            id {NB1 BLUE ALQ} roe DO_NOT_ATTACK
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::attroe <Entity> update {NB1 BLUE ALQ}}
    }


    test U-UPDATE-3.1 {undo undoes the change} -setup {
        setup
        ted order ATTROE:UF:CREATE $blue_alq
        ted order ATTROE:UF:UPDATE {
            id             {NB1 BLUE ALQ}
            roe            DO_NOT_ATTACK
            cooplimit      20
        }
    } -body {
        ted notifier bind ::attroe <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::attroe <Entity> update {NB1 BLUE ALQ}}
    }

    #-------------------------------------------------------------------
    # ATTROE:UF:UPDATE:MULTI

    test U-UPDATE:MULTI-1.1 {required parms} -body {
        ted order -reject ATTROE:UF:UPDATE:MULTI {}
    } -result {
        ids {required value}
    }
    

    test U-UPDATE:MULTI-1.2 {invalid ids, bad nbhood} -setup {
        setup
    } -body {
        ted order -reject ATTROE:UF:UPDATE:MULTI \
            ids {{NONESUCH BLUE ALQ}}
    } -cleanup {
        cleanup
    } -result {
        ids {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test U-UPDATE:MULTI-1.3 {invalid ids, bad group f} -setup {
        setup
    } -body {
        ted order -reject ATTROE:UF:UPDATE:MULTI \
            ids {{NB1 NONESUCH ALQ}}
    } -cleanup {
        cleanup
    } -result {
        ids {Invalid uniformed force group, should be one of: BLUE, BRIT}
    }


    test U-UPDATE:MULTI-1.4 {invalid ids, bad group g} -setup {
        setup
    } -body {
        ted order -reject ATTROE:UF:UPDATE:MULTI \
            ids {{NB1 BLUE NONESUCH}}
    } -cleanup {
        cleanup
    } -result {
        ids {Invalid non-uniformed force group, should be one of: ALQ, TAL}
    }


    test U-UPDATE:MULTI-1.5 {invalid ids, no entity} -setup {
        setup
    } -body {
        ted order -reject ATTROE:UF:UPDATE:MULTI \
            ids {{NB1 BLUE ALQ}}
    } -cleanup {
        cleanup
    } -result {
        ids {Group BLUE has no ROE for group ALQ in NB1.}
    }
    
    test U-UPDATE:MULTI-1.6 {invalid roe} -setup {
        setup
        ted order ATTROE:UF:CREATE $blue_alq
    } -body {
        ted order -reject ATTROE:UF:UPDATE:MULTI \
            ids {{NB1 BLUE ALQ}} roe NONESUCH
    } -cleanup {
        cleanup
    } -result {
        roe {invalid value "NONESUCH", should be one of: DO_NOT_ATTACK, ATTACK}
    }


    test U-UPDATE:MULTI-1.7 {invalid cooplimit} -setup {
        setup
        ted order ATTROE:UF:CREATE $blue_alq
    } -body {
        ted order -reject ATTROE:UF:UPDATE:MULTI \
            ids {{NB1 BLUE ALQ}} cooplimit NONESUCH
    } -cleanup {
        cleanup
    } -result {
        cooplimit {invalid value "NONESUCH", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}
    }



    test U-UPDATE:MULTI-2.1 {one entity of several is updated} -setup {
        setup
        ted order ATTROE:UF:CREATE $blue_alq
        ted order ATTROE:UF:CREATE $blue_tal
    } -body {
        ted notifier bind ::attroe <Entity>

        ted order ATTROE:UF:UPDATE:MULTI {
            ids            {{NB1 BLUE ALQ}}
            roe            DO_NOT_ATTACK
            cooplimit      0.0
        }

        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::attroe <Entity> update {NB1 BLUE ALQ}}
    }


    test U-UPDATE:MULTI-2.2 {several attroe_nfg are updated} -setup {
        setup
        ted order ATTROE:UF:CREATE $blue_alq
        ted order ATTROE:UF:CREATE $blue_tal
    } -body {
        ted notifier bind ::attroe <Entity>

        ted order ATTROE:UF:UPDATE:MULTI {
            ids            {{NB1 BLUE ALQ} {NB1 BLUE TAL}}
            roe            DO_NOT_ATTACK
            cooplimit      0.0
        }

        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::attroe <Entity> update {NB1 BLUE ALQ}}
        {::attroe <Entity> update {NB1 BLUE TAL}}
    }



    test U-UPDATE:MULTI-3.1 {undo effects} -setup {
        setup
        ted order ATTROE:UF:CREATE $blue_alq
        ted order ATTROE:UF:CREATE $blue_tal
        ted order ATTROE:UF:UPDATE:MULTI {
            ids            {{NB1 BLUE ALQ} {NB1 BLUE TAL}}
            roe            DO_NOT_ATTACK
        }
    } -body {
        ted notifier bind ::attroe <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::attroe <Entity> update {NB1 BLUE ALQ}}
        {::attroe <Entity> update {NB1 BLUE TAL}}
    }

    #-------------------------------------------------------------------
    # ATTROE:NF:CREATE

    test N-CREATE-1.1 {required parms} -setup {
        setup
    } -body {
        ted order -reject ATTROE:NF:CREATE {}
    } -cleanup {
        cleanup
    } -result {
        id {required value}
        roe {required value}
        cooplimit {required value}
        rate {required value}
    }


    test N-CREATE-1.2 {n is not a nbhood} -setup {
        setup
    } -body {
        ted order -reject ATTROE:NF:CREATE \
            [dict merge $alq_blue {id NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        id {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test N-CREATE-1.3 {f is not a non-uniformed force group} -setup {
        setup
    } -body {
        ted order -reject ATTROE:NF:CREATE \
            [dict merge $alq_blue {id {NB1 BLUE BLUE}}]
    } -cleanup {
        cleanup
    } -result {
        id {Invalid non-uniformed force group, should be one of: ALQ, TAL}
    }


    test N-CREATE-1.4 {g is not a uniformed force group} -setup {
        setup
    } -body {
        ted order -reject ATTROE:NF:CREATE \
            [dict merge $alq_blue {id {NB1 ALQ ALQ}}]
    } -cleanup {
        cleanup
    } -result {
        id {Invalid uniformed force group, should be one of: BLUE, BRIT}
    }


    test N-CREATE-1.5 {n,f,g is already defined} -setup {
        setup
        ted order ATTROE:NF:CREATE $alq_blue
    } -body {
        ted order -reject ATTROE:NF:CREATE $alq_blue
    } -cleanup {
        cleanup
    } -result {
        id {Group ALQ already has an ROE with group BLUE in NB1}
    }


    test N-CREATE-1.6 {Invalid ROE} -setup {
        setup
    } -body {
        ted order -reject ATTROE:NF:CREATE \
            [dict merge $alq_blue {roe NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        roe {invalid value "NONESUCH", should be one of: DO_NOT_ATTACK, HIT_AND_RUN, STAND_AND_FIGHT}
    }


    test N-CREATE-1.7 {Non-numeric coop limit} -setup {
        setup
    } -body {
        ted order -reject ATTROE:NF:CREATE \
            [dict merge $alq_blue {cooplimit NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        cooplimit {invalid value "NONESUCH", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}
    }


    test N-CREATE-1.8 {Coop limit out of range} -setup {
        setup
    } -body {
        ted order -reject ATTROE:NF:CREATE \
            [dict merge $alq_blue {cooplimit -1}]
    } -cleanup {
        cleanup
    } -result {
        cooplimit {invalid value "-1", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}
    }


    test N-CREATE-1.9 {Non-numeric rate} -setup {
        setup
    } -body {
        ted order -reject ATTROE:NF:CREATE \
            [dict merge $alq_blue {rate NONESUCH}]
    } -cleanup {
        cleanup
    } -result {
        rate {invalid value "NONESUCH", should be a real number no less than 0.0}
    }


    test N-CREATE-1.10 {Rate out of range} -setup {
        setup
    } -body {
        ted order -reject ATTROE:NF:CREATE \
            [dict merge $alq_blue {rate -1}]
    } -cleanup {
        cleanup
    } -result {
        rate {invalid value "-1", should be a real number no less than 0.0}
    }


    test N-CREATE-2.1 {roe is created} -setup {
        setup
    } -body {
        ted order ATTROE:NF:CREATE $alq_blue
        ted order ATTROE:NF:CREATE $tal_blue

        ted query {SELECT * FROM attroe_nfg}
    } -cleanup {
        cleanup
    } -result {
n   f   g    uniformed roe             cooplimit rate 
--- --- ---- --------- --------------- --------- ---- 
NB1 ALQ BLUE 0         HIT_AND_RUN     40.0      0.5  
NB1 TAL BLUE 0         STAND_AND_FIGHT 30.0      0.25 
    }


    test N-CREATE-2.2 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::attroe <Entity>
        ted order ATTROE:NF:CREATE $alq_blue
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::attroe <Entity> create {NB1 ALQ BLUE}}
    }


    test N-CREATE-3.1 {undo effects} -setup {
        setup
        ted order ATTROE:NF:CREATE $alq_blue
    } -body {
        ted notifier bind ::attroe <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::attroe <Entity> delete {NB1 ALQ BLUE}}
    }


    #-------------------------------------------------------------------
    # ATTROE:NF:UPDATE

    test N-UPDATE-1.1 {required parms} -body {
        ted order -reject ATTROE:NF:UPDATE {}
    } -result {
        id {required value}
    }
    

    test N-UPDATE-1.2 {invalid n, f, g} -setup {
        setup
    } -body {
        ted order -reject ATTROE:NF:UPDATE \
            id {NONESUCH NONESUCH NONESUCH}
    } -cleanup {
        cleanup
    } -result {
        id {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test N-UPDATE-1.3 {undefined entity} -setup {
        setup
    } -body {
        ted order -reject ATTROE:NF:UPDATE \
            id {NB1 ALQ BLUE}
    } -cleanup {
        cleanup
    } -result {
        id {Group ALQ has no ROE for group BLUE in NB1.}
    }


    test N-UPDATE-1.4 {invalid roe} -setup {
        setup
        ted order ATTROE:NF:CREATE $alq_blue
    } -body {
        ted order -reject ATTROE:NF:UPDATE \
            id {NB1 ALQ BLUE} roe NONESUCH
    } -cleanup {
        cleanup
    } -result {
        roe {invalid value "NONESUCH", should be one of: DO_NOT_ATTACK, HIT_AND_RUN, STAND_AND_FIGHT}
    }


    test N-UPDATE-1.5 {non-numeric cooplimit} -setup {
        setup
        ted order ATTROE:NF:CREATE $alq_blue
    } -body {
        ted order -reject ATTROE:NF:UPDATE \
            id {NB1 ALQ BLUE} cooplimit NONESUCH
    } -cleanup {
        cleanup
    } -result {
        cooplimit {invalid value "NONESUCH", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}
    }


    test N-UPDATE-1.6 {cooplimit out of range} -setup {
        setup
        ted order ATTROE:NF:CREATE $alq_blue
    } -body {
        ted order -reject ATTROE:NF:UPDATE \
            id {NB1 ALQ BLUE} cooplimit -1
    } -cleanup {
        cleanup
    } -result {
        cooplimit {invalid value "-1", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}
    }


    test N-UPDATE-1.7 {non-numeric rate} -setup {
        setup
        ted order ATTROE:NF:CREATE $alq_blue
    } -body {
        ted order -reject ATTROE:NF:UPDATE \
            id {NB1 ALQ BLUE} rate NONESUCH
    } -cleanup {
        cleanup
    } -result {
        rate {invalid value "NONESUCH", should be a real number no less than 0.0}
    }


    test N-UPDATE-1.8 {rate out of range} -setup {
        setup
        ted order ATTROE:NF:CREATE $alq_blue
    } -body {
        ted order -reject ATTROE:NF:UPDATE \
            id {NB1 ALQ BLUE} rate -1
    } -cleanup {
        cleanup
    } -result {
        rate {invalid value "-1", should be a real number no less than 0.0}
    }


    test N-UPDATE-2.1 {attroe is updated} -setup {
        setup
        ted order ATTROE:NF:CREATE $alq_blue
    } -body {
        ted order ATTROE:NF:UPDATE {
            id             {NB1 ALQ BLUE}
            roe            DO_NOT_ATTACK
            cooplimit      20
            rate           0.6
        }

        ted query {SELECT * FROM attroe_nfg}
    } -cleanup {
        cleanup
    } -result {
n   f   g    uniformed roe           cooplimit rate 
--- --- ---- --------- ------------- --------- ---- 
NB1 ALQ BLUE 0         DO_NOT_ATTACK 20.0      0.6  
    }


    test N-UPDATE-2.2 {Effects} -setup {
        setup
        ted order ATTROE:NF:CREATE $alq_blue
    } -body {
        ted notifier bind ::attroe <Entity>
        ted order ATTROE:NF:UPDATE \
            id {NB1 ALQ BLUE} roe DO_NOT_ATTACK
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::attroe <Entity> update {NB1 ALQ BLUE}}
    }


    test N-UPDATE-3.1 {undo undoes the change} -setup {
        setup
        ted order ATTROE:NF:CREATE $alq_blue
        ted order ATTROE:NF:UPDATE {
            id             {NB1 ALQ BLUE}
            roe            DO_NOT_ATTACK
            cooplimit      20
            rate           0.6
        }
    } -body {
        ted notifier bind ::attroe <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::attroe <Entity> update {NB1 ALQ BLUE}}
    }

    #-------------------------------------------------------------------
    # ATTROE:NF:UPDATE:MULTI

    test N-UPDATE:MULTI-1.1 {required parms} -body {
        ted order -reject ATTROE:NF:UPDATE:MULTI {}
    } -result {
        ids {required value}
    }
    

    test N-UPDATE:MULTI-1.2 {invalid ids, bad nbhood} -setup {
        setup
    } -body {
        ted order -reject ATTROE:NF:UPDATE:MULTI \
            ids {{NONESUCH ALQ BLUE}}
    } -cleanup {
        cleanup
    } -result {
        ids {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test N-UPDATE:MULTI-1.3 {invalid ids, bad group f} -setup {
        setup
    } -body {
        ted order -reject ATTROE:NF:UPDATE:MULTI \
            ids {{NB1 NONESUCH BLUE}}
    } -cleanup {
        cleanup
    } -result {
        ids {Invalid non-uniformed force group, should be one of: ALQ, TAL}
    }


    test N-UPDATE:MULTI-1.4 {invalid ids, bad group g} -setup {
        setup
    } -body {
        ted order -reject ATTROE:NF:UPDATE:MULTI \
            ids {{NB1 ALQ NONESUCH}}
    } -cleanup {
        cleanup
    } -result {
        ids {Invalid uniformed force group, should be one of: BLUE, BRIT}
    }


    test N-UPDATE:MULTI-1.5 {invalid ids, no entity} -setup {
        setup
    } -body {
        ted order -reject ATTROE:NF:UPDATE:MULTI \
            ids {{NB1 ALQ BLUE}}
    } -cleanup {
        cleanup
    } -result {
        ids {Group ALQ has no ROE for group BLUE in NB1.}
    }
    
    test N-UPDATE:MULTI-1.6 {invalid roe} -setup {
        setup
        ted order ATTROE:NF:CREATE $alq_blue
    } -body {
        ted order -reject ATTROE:NF:UPDATE:MULTI \
            ids {{NB1 ALQ BLUE}} roe NONESUCH
    } -cleanup {
        cleanup
    } -result {
        roe {invalid value "NONESUCH", should be one of: DO_NOT_ATTACK, HIT_AND_RUN, STAND_AND_FIGHT}
    }


    test N-UPDATE:MULTI-1.7 {invalid cooplimit} -setup {
        setup
        ted order ATTROE:NF:CREATE $alq_blue
    } -body {
        ted order -reject ATTROE:NF:UPDATE:MULTI \
            ids {{NB1 ALQ BLUE}} cooplimit NONESUCH
    } -cleanup {
        cleanup
    } -result {
        cooplimit {invalid value "NONESUCH", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}
    }


    test N-UPDATE:MULTI-1.8 {invalid rate} -setup {
        setup
        ted order ATTROE:NF:CREATE $alq_blue
    } -body {
        ted order -reject ATTROE:NF:UPDATE:MULTI \
            ids {{NB1 ALQ BLUE}} rate NONESUCH
    } -cleanup {
        cleanup
    } -result {
        rate {invalid value "NONESUCH", should be a real number no less than 0.0}
    }



    test N-UPDATE:MULTI-2.1 {one entity of several is updated} -setup {
        setup
        ted order ATTROE:NF:CREATE $alq_blue
        ted order ATTROE:NF:CREATE $tal_blue
    } -body {
        ted notifier bind ::attroe <Entity>

        ted order ATTROE:NF:UPDATE:MULTI {
            ids            {{NB1 ALQ BLUE}}
            roe            DO_NOT_ATTACK
            cooplimit      0.0
            rate           0.0
        }

        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::attroe <Entity> update {NB1 ALQ BLUE}}
    }


    test N-UPDATE:MULTI-2.2 {several attroe_nfg are updated} -setup {
        setup
        ted order ATTROE:NF:CREATE $alq_blue
        ted order ATTROE:NF:CREATE $tal_blue
    } -body {
        ted notifier bind ::attroe <Entity>

        ted order ATTROE:NF:UPDATE:MULTI {
            ids            {{NB1 ALQ BLUE} {NB1 TAL BLUE}}
            roe            DO_NOT_ATTACK
            cooplimit      0.0
            rate           0.0
        }

        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::attroe <Entity> update {NB1 ALQ BLUE}}
        {::attroe <Entity> update {NB1 TAL BLUE}}
    }



    test N-UPDATE:MULTI-3.1 {undo effects} -setup {
        setup
        ted order ATTROE:NF:CREATE $alq_blue
        ted order ATTROE:NF:CREATE $tal_blue
        ted order ATTROE:NF:UPDATE:MULTI {
            ids            {{NB1 ALQ BLUE} {NB1 TAL BLUE}}
            roe            DO_NOT_ATTACK
        }
    } -body {
        ted notifier bind ::attroe <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::attroe <Entity> update {NB1 ALQ BLUE}}
        {::attroe <Entity> update {NB1 TAL BLUE}}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::









