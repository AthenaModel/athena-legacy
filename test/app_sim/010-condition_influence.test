# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-condition_influence.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    condition_influence(sim) tests.
#
#    This test suite tests the condition_influence(sim) ensemble.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        ted create JOE BOB NB1 NB2 BLUE BRIT
        ted order TACTIC:SAVE:CREATE owner JOE int1 10

        # Verify that unused columns contain NULL
        rdb nullvalue "@"
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        rdb nullvalue ""
        rdb eval {DELETE FROM influence_na}
        array unset parms
        ted cleanup
    }

    # Standard Conditions.
    
    set C1 {
        cc_id          1
        condition_type INFLUENCE
        a              BOB
        n              NB1
        op1            LT
        x1             0.5
    }

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative} -setup {
        setup
        condition mutate create $C1
    } -body {
        condition::INFLUENCE narrative [condition get 1]
    } -cleanup {
        cleanup
    } -result {Actor BOB's influence in NB1 is less than 0.50}

    #-------------------------------------------------------------------
    # check


    test check-1.1 {check: successful} -setup {
        setup
        condition mutate create $C1
    } -body {
        condition::INFLUENCE check [condition get 1]
    } -cleanup {
        cleanup
    } -result {}

    test check-1.2 {check: actor deleted} -setup {
        setup
        condition mutate create $C1
        rdb eval {DELETE FROM actors WHERE a='BOB'}
    } -body {
        condition::INFLUENCE check [condition get 1]
    } -cleanup {
        cleanup
    } -result {Actor BOB no longer exists.}

    test check-1.3 {check: nbhood deleted} -setup {
        setup
        condition mutate create $C1
        rdb eval {DELETE FROM nbhoods WHERE n='NB1'}
    } -body {
        condition::INFLUENCE check [condition get 1]
    } -cleanup {
        cleanup
    } -result {Neighborhood NB1 no longer exists.}

    test check-1.4 {check: multiple deleted} -setup {
        setup
        condition mutate create $C1
        rdb eval {DELETE FROM actors WHERE a='BOB'}
        rdb eval {DELETE FROM nbhoods WHERE n='NB1'}
    } -body {
        condition::INFLUENCE check [condition get 1]
    } -cleanup {
        cleanup
    } -result {Actor BOB no longer exists. Neighborhood NB1 no longer exists.}

    #-------------------------------------------------------------------
    # eval


    # Sets up for an influence comparison.  Presumes that BOB is the
    # actor and that there is a INFLUENCE condition with condition_id
    # 1.

    proc InfluenceEval {influence comp amount} {
        rdb eval {
            INSERT OR REPLACE INTO influence_na(n,a,influence)
            VALUES('NB1','BOB',$influence)
        }

        condition mutate update [list condition_id 1 op1 $comp x1 $amount]
        return [condition::INFLUENCE eval [condition get 1]]
    }

    test eval-1.1 {evaluate condition} -setup {
        setup
        condition mutate create $C1
    } -body {
        set a [InfluenceEval 0.6 LT 0.5]
        set b [InfluenceEval 0.4 LT 0.5]
        set c [InfluenceEval 0.123 EQ 0.124]
        set d [InfluenceEval 0.124 LE 0.123]
        set e [InfluenceEval 0.123 GE 0.124]

        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {0 1 1 1 1}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







