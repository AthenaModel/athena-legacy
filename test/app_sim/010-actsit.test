# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-actsit.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    actsit(sim) tests.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for a test
    proc setup {} {
        ted create JOE NB1 SHIA BLUE
        
        # Turn off auto-demobilization, as it makes setting up 
        # tests difficult.
        parm set strategy.autoDemob no

        # Disable MOOD, so that it doesn't generate drivers.
        parm set dam.MOOD.active no
    }

    # Deploy troops into a neighborhood.
    proc deploy {n g personnel} {
        ted order TACTIC:DEPLOY:CREATE \
            owner JOE g $g text1 SOME int1 $personnel nlist $n on_lock YES once NO
    }

    proc redeploy {n g personnel} {
        rdb eval {
            SELECT tactic_id
            FROM tactics_DEPLOY
            WHERE nlist=$n
            AND   g=$g
        } {}

        ted order TACTIC:DEPLOY:UPDATE \
            tactic_id $tactic_id int1 $personnel on_lock YES once NO
    }

    proc undeploy {n g} {
        rdb eval {
            SELECT tactic_id
            FROM tactics_DEPLOY
            WHERE nlist=$n
            AND   g=$g
        } {}

        ted order TACTIC:DELETE \
            tactic_id $tactic_id
    }

    # Clean up after a test
    proc cleanup {} {
        ted cleanup
    }

    ted cleanup

    #-------------------------------------------------------------------
    # table
  
    test table-1.1 {Check return value} -body {
        actsit table
    } -result {actsits_t}

    #-------------------------------------------------------------------
    # analyze

    test analyze-1.1 {Create a situation} -setup {
        setup
        deploy NB1 BLUE 15
    } -body {
        ted order SIM:LOCK

        ted querylist {SELECT * FROM actsits}
    } -cleanup {
        cleanup
    } -result {
s          1
kind       ::actsit
stype      PRESENCE
driver_id  1000
n          NB1
coverage   0.4827181420282134
state      ACTIVE
ts         0
tc         0
change     NEW
flist      ALL
g          BLUE
a          PRESENCE
    }


    test analyze-1.2 {Change marks are erased on next run} -setup {
        setup
        deploy NB1 BLUE 15
    } -body {
        ted order SIM:LOCK
        ted order SIM:RUN weeks 1 block yes

        ted query {SELECT s,change FROM actsits}
    } -cleanup {
        cleanup
    } -result {
s change 
- ------ 
1        
    }

    test analyze-1.3 {Change in coverage updates} -setup {
        setup
        deploy NB1 BLUE 15
    } -body {
        ted order SIM:LOCK

        # Deploy 15 more
        redeploy NB1 BLUE 30
        ted order SIM:RUN weeks 1 block yes

        ted querylist {SELECT * FROM actsits}
    } -cleanup {
        cleanup
    } -result {
s          1
kind       ::actsit
stype      PRESENCE
driver_id  1000
n          NB1
coverage   0.7324194794132565
state      ACTIVE
ts         0
tc         1
change     UPDATED
flist      ALL
g          BLUE
a          PRESENCE
    }


    test analyze-1.4 {Nominal personnel = 0 terminates} -setup {
        setup
        deploy NB1 BLUE 15
    } -body {
        ted order SIM:LOCK
        undeploy NB1 BLUE
        ted order SIM:RUN weeks 1 block yes

        ted querylist {SELECT * FROM actsits}
    } -cleanup {
        cleanup
    } -result {
s          1
kind       ::actsit
stype      PRESENCE
driver_id  1000
n          NB1
coverage   0.0
state      ENDED
ts         0
tc         1
change     ENDED
flist      ALL
g          BLUE
a          PRESENCE
    }


    test analyze-1.5 {Can have multiple} -setup {
        setup
        deploy NB1 BLUE 30
        ted order TACTIC:ASSIGN:CREATE owner JOE g BLUE n NB1 text1 PATROL \
            int1 15 priority bottom on_lock YES once NO
        ted order TACTIC:ASSIGN:CREATE owner JOE g BLUE n NB1 text1 GUARD \
            int1 15 priority bottom on_lock YES once NO
    } -body {
        ted order SIM:LOCK
        set out [ted query {SELECT * FROM actsits}]

        ted order SIM:RUN weeks 1 block yes
        append out [ted query {SELECT * FROM actsits}]

        undeploy NB1 BLUE
        ted order SIM:RUN weeks 1 block yes
        append out [ted query {SELECT * FROM actsits}]

        set out
    } -cleanup {
        cleanup
    } -result {
s kind     stype    driver_id n   coverage           state  ts tc change flist g    a        
- -------- -------- --------- --- ------------------ ------ -- -- ------ ----- ---- -------- 
1 ::actsit GUARD    1000      NB1 0.4827181420282134 ACTIVE 0  0  NEW    ALL   BLUE GUARD    
2 ::actsit PATROL   1001      NB1 0.4827181420282134 ACTIVE 0  0  NEW    ALL   BLUE PATROL   
3 ::actsit PRESENCE 1002      NB1 0.7324194794132565 ACTIVE 0  0  NEW    ALL   BLUE PRESENCE 
    
s kind     stype    driver_id n   coverage           state  ts tc change flist g    a        
- -------- -------- --------- --- ------------------ ------ -- -- ------ ----- ---- -------- 
1 ::actsit GUARD    1000      NB1 0.4827181420282134 ACTIVE 0  0         ALL   BLUE GUARD    
2 ::actsit PATROL   1001      NB1 0.4827181420282134 ACTIVE 0  0         ALL   BLUE PATROL   
3 ::actsit PRESENCE 1002      NB1 0.7324194794132565 ACTIVE 0  0         ALL   BLUE PRESENCE 
    
s kind     stype    driver_id n   coverage state ts tc change flist g    a        
- -------- -------- --------- --- -------- ----- -- -- ------ ----- ---- -------- 
1 ::actsit GUARD    1000      NB1 0.0      ENDED 0  2  ENDED  ALL   BLUE GUARD    
2 ::actsit PATROL   1001      NB1 0.0      ENDED 0  2  ENDED  ALL   BLUE PATROL   
3 ::actsit PRESENCE 1002      NB1 0.0      ENDED 0  2  ENDED  ALL   BLUE PRESENCE 
    }

    #-------------------------------------------------------------------
    # get

    test get-1.1 {get -all} -setup {
        setup
        deploy NB1 BLUE 30
    } -body {
        ted order SIM:LOCK
        ted order SIM:RUN weeks 1 block yes
        
        set sit [actsit get 1]
        $sit oneliner
    } -cleanup {
        cleanup
    } -result {BLUE PRESENCE in NB1}


    test get-1.2 {get -live} -setup {
        setup
        deploy NB1 BLUE 30
        ted order SIM:LOCK
        ted order SIM:RUN weeks 1 block yes
        undeploy NB1 BLUE
        ted order SIM:RUN weeks 7 block yes
    } -body {
        set sit [actsit get 1 -live]
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {no such live situation: "1"}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







