# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-CONDITION-UNMET.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) CONDITION:UNMET:* order tests.
#
#    This test suite tests the CONDITION:UNMET:* orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE BOB NB1 NB2 BLUE BRIT ALQ

        # goal_ids: 1, 2, 3
        ted order GOAL:CREATE owner JOE narrative "Joe's Goal 1"
        ted order GOAL:CREATE owner JOE narrative "Joe's Goal 2"
        ted order GOAL:CREATE owner BOB narrative "Bob's Goal 3"

        # tactic_id: 4, 5
        ted order TACTIC:SAVE:CREATE owner JOE int1 10
        ted order TACTIC:SAVE:CREATE owner BOB int1 10

    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Standard items

    set C1 {
        cc_id  4
        list1  {1}
    }

    set C2 {
        cc_id  4
        list1  {1 2}
    }

    #-------------------------------------------------------------------
    # CONDITION:UNMET:CREATE

    test UNMET:CREATE-1.1 {required parms} -body {
        ted order -reject CONDITION:UNMET:CREATE {}
    } -result {
        cc_id {required value}
        list1 {required value}
    }

    
    test UNMET:CREATE-1.2 {tactic is unknown} -setup {
        setup
    } -body {
        ted order -reject CONDITION:UNMET:CREATE \
            [dict merge $C1 [list cc_id NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        cc_id {Invalid tactic ID: "NONESUCH"}
    }

    test UNMET:CREATE-1.3 {list1 contains non-goal} -setup {
        setup
    } -body {
        ted order -reject CONDITION:UNMET:CREATE \
            [dict merge $C1 [list list1 NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        list1 {Invalid goal ID: "NONESUCH"}
    }

    test UNMET:CREATE-1.4 {goal belongs to different agent} -setup {
        setup
    } -body {
        ted order -reject CONDITION:UNMET:CREATE \
            [dict merge $C1 [list list1 3]]
    } -cleanup {
        cleanup
    } -result {
        list1 {Goal 3 does not belong to the condition's owning agent}
    }

    test UNMET:CREATE-2.1 {condition is created} -setup {
        setup
    } -body {
        ted order CONDITION:UNMET:CREATE $C1

        ted querylist {SELECT * FROM conditions_UNMET}
    } -cleanup {
        cleanup
    } -result {
condition_id    1
condition_type  UNMET
cc_id           4
narrative       Goal is unmet:
                    (1) Joe's Goal 1
state           normal
flag            
list1           1
    }


    test UNMET:CREATE-2.2 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <conditions>
        ted order CONDITION:UNMET:CREATE $C1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
    }


    test UNMET:CREATE-3.1 {undo effects} -setup {
        setup
        ted order CONDITION:UNMET:CREATE $C1
    } -body {
        ted notifier bind ::rdb <conditions>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> delete 1}
    }


    #-------------------------------------------------------------------
    # CONDITION:UNMET:UPDATE

    test UNMET:UPDATE-1.1 {required parms} -body {
        ted order -reject CONDITION:UNMET:UPDATE {}
    } -result {
        condition_id {required value}
    }

    
    test UNMET:UPDATE-1.2 {condition_id is unknown} -setup {
        setup
        ted order CONDITION:UNMET:CREATE $C1
    } -body {
        ted order -reject CONDITION:UNMET:UPDATE condition_id NONESUCH
    } -cleanup {
        cleanup
    } -result {
        condition_id {Invalid condition ID: "NONESUCH"}
    }

    test UNMET:UPDATE-1.3 {list1 is invalid} -setup {
        setup
        ted order CONDITION:UNMET:CREATE $C1
    } -body {
        ted order -reject CONDITION:UNMET:UPDATE condition_id 1 list1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        list1 {Invalid goal ID: "NONESUCH"}
    }

    test UNMET:UPDATE-1.4 {has goals owned by another agent} -setup {
        setup
        ted order CONDITION:UNMET:CREATE $C1
    } -body {
        ted order -reject CONDITION:UNMET:UPDATE condition_id 1 list1 3
    } -cleanup {
        cleanup
    } -result {
        list1 {Goal 3 does not belong to the condition's owning agent}
    }

    test UNMET:UPDATE-2.1 {conditions are updated} -setup {
        setup
        ted order CONDITION:UNMET:CREATE $C1
    } -body {
        ted order CONDITION:UNMET:UPDATE condition_id 1 list1 {1 2}

        ted querylist {SELECT * FROM conditions_UNMET}
    } -cleanup {
        cleanup
    } -result {
condition_id    1
condition_type  UNMET
cc_id           4
narrative       Any of these goals are unmet:
                    (1) Joe's Goal 1
                    (2) Joe's Goal 2
state           normal
flag            
list1           1 2
    }


    test UNMET:UPDATE-2.2 {Effects} -setup {
        setup
        ted order CONDITION:UNMET:CREATE $C1
    } -body {
        ted notifier bind ::rdb <conditions>
        ted order CONDITION:UNMET:UPDATE condition_id 1 list1 {1 2}
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
        {::rdb <conditions> update 1}
    }


    test UNMET:UPDATE-3.1 {undo effects} -setup {
        setup
        ted order CONDITION:UNMET:CREATE $C1
        ted order CONDITION:UNMET:UPDATE condition_id 1 list1 {1 2}
    } -body {
        ted notifier bind ::rdb <conditions>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <conditions> update 1}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







