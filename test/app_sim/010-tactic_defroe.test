# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-tactic_defroe.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    tactic_defroe(sim) tests.
#
#    This test suite tests the tactic_defroe(sim) class.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        variable T1
        variable coffer
        ted create JOE BOB NB1 NB2 BLUE BRIT SHIA SUNN KURD
        personnel start
        personnel load
        set coffer [coffer new JOE]


        set B1 [ted addblock JOE]
        set T1 [ted addtactic $B1 DEFROE]
    }

    # Clean up after a test

    proc cleanup {} {
        variable coffer
        $coffer destroy
        ted cleanup
    }

    #-------------------------------------------------------------------
    # Constructor

    test constructor-1.1 {default state} -setup {
        setup
    } -body {
        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        execstatus NONE
        faildict   {}
        g          {}
        id         *
        n          {}
        parent     ::bean::block*
        roe        FIRE_BACK_IF_PRESSED
        state      invalid
    }

    test constructor-1.2 {can set options} -setup {
        setup
    } -body {
        set T1 [tactic::DEFROE new -parent DUMMY]
        $T1 get parent
    } -cleanup {
        cleanup
    } -result {DUMMY}
    

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative, default state} -setup {
        setup
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Group ??? defends in ??? with ROE FIRE_BACK_IF_PRESSED}

    test narrative-1.2 {narrative, with valid fields} -setup {
        setup
        $T1 configure -g BLUE -n NB1
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Group {group:BLUE} defends in {nbhood:NB1} with ROE FIRE_BACK_IF_PRESSED}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {Initial state fails} -setup {
        setup
    } -body {
        ted pdicts [$T1 check]
    } -cleanup {
        cleanup
    } -match dict -result {
        g {No group selected.}
        n {No neighborhood selected.}
    }

    test check-1.2 {g not owned by actor} -setup {
        setup
    } -body {
        $T1 configure -g NONESUCH -n NB1
        $T1 check
    } -cleanup {
        cleanup
    } -result {g {JOE does not own a force group called "NONESUCH".}}

    test check-1.3 {g not uniformed} -setup {
        setup
        $T1 configure -g BLUE -n NB1
        rdb eval {UPDATE frcgroups SET uniformed = 0}
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {g {Force group "BLUE" is not a uniformed force group.}}

    test check-1.4 {n does not exist} -setup {
        setup
        $T1 configure -g BLUE -n NONESUCH
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {n {No such neighborhood: "NONESUCH".}}


    test check-2.1 {Success} -setup {
        setup
        $T1 configure -g BLUE -n NB1
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # obligate

    test obligate-1.1 {always succeeds.} -setup {
        setup
    } -body {
        $T1 obligate $coffer
    } -cleanup {
        cleanup
    } -result {1}

    #-------------------------------------------------------------------
    # execute

    test execute-1.1 {always succeeds} -setup {
        setup
        $T1 configure -g BLUE -n NB1 -roe HOLD_FIRE
    } -body {
        $T1 execute
        ted query {SELECT * FROM defroe_ng}
    } -cleanup {
        cleanup
    } -result {
n   g    roe       
--- ---- --------- 
NB1 BLUE HOLD_FIRE 
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::








