# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-unit.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    unit(sim) tests.
#
#    This test suite tests the unit(sim) mutators and queries
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        array unset parms
        ted cleanup
    }

    set u1 {
        cid       991
        n         NB1 
        g         BLUE  
        tn        NB1    
        a         PATROL    
        personnel 1
    }

    set u2 {
        cid       0
        n         NB2 
        g         USAID 
        tn        NB2    
        a         NONE
        personnel 2        
    }

    set u3 {
        cid       992
        n         NB1 
        g         SHIA  
        tn        NB2    
        a         DISPLACED 
        personnel 3
    }

    #-------------------------------------------------------------------
    # create

    test create-1.1 {units are created} -setup {
        ted create NB1 NB2 BLUE USAID SHIA 
    } -body {
        unit create $u1
        unit create $u2
        unit create $u3

        ted query {SELECT u,n,g,gtype,origin,a,personnel,active FROM units}
    } -cleanup {
        cleanup
    } -result {
u              n   g     gtype origin a         personnel active 
-------------- --- ----- ----- ------ --------- --------- ------ 
BLUE-NB1/0991  NB1 BLUE  FRC   NB1    PATROL    1         1      
USAID-NB2/0000 NB2 USAID ORG   NB2    NONE      2         1      
SHIA-NB1/0992  NB2 SHIA  CIV   NB1    DISPLACED 3         1      
    }

    #-------------------------------------------------------------------
    # deactivate

    test deactivate-1.1 {units are created} -setup {
        ted create NB1 NB2 BLUE USAID SHIA 
        unit create $u1
    } -body {
        unit deactivate BLUE-NB1/0991
        ted query {SELECT u,personnel,active FROM units}
    } -cleanup {
        cleanup
    } -result {
u             personnel active 
------------- --------- ------ 
BLUE-NB1/0991 0         0      
    }


    #-------------------------------------------------------------------
    # mutate delete

    test delete-1.1 {Unit is deleted} -setup {
        ted create NB1 NB2 BLUE USAID
        unit create $u1
        unit create $u2
    } -body {
        unit mutate delete BLUE-NB1/0991

        # Is BLUE-NB1/0991 gone?
        rdb eval {SELECT u FROM units}
    } -cleanup {
        cleanup
    } -result {USAID-NB2/0000}


    test delete-1.2 {<Entity> delete} -setup {
        ted create NB1 BLUE
        unit create $u1
    } -body {
        ted notifier bind ::unit <Entity>
        unit mutate delete BLUE-NB1/0991
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::unit <Entity> delete BLUE-NB1/0991}
    }


    test delete-2.1 {Undo restores unit} -setup {
        ted create NB1 BLUE
        unit create $u1
    } -body {
        set a [unit get BLUE-NB1/0991]
        set undo [unit mutate delete BLUE-NB1/0991]
        {*}$undo
        set b [unit get BLUE-NB1/0991]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}

    test delete-2.2 {On undo, <Entity> create} -setup {
        ted create NB1 BLUE
        unit create $u1
        set undo [unit mutate delete BLUE-NB1/0991]
    } -body {
        ted notifier bind ::unit <Entity>
        {*}$undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::unit <Entity> create BLUE-NB1/0991}
    }

    #-------------------------------------------------------------------
    # mutate move

    test move-1.1 {unit is moved} -setup {
        ted create NB1 BLUE
        unit create $u1
    } -body {
        unit mutate move BLUE-NB1/0991 {2 2}

        ted query {SELECT u, location FROM units}
    } -cleanup {
        cleanup
    } -result {
u             location 
------------- -------- 
BLUE-NB1/0991 2 2      
    }


    test move-1.2 {<Entity> update} -setup {
        ted create NB1 BLUE
        unit create $u1
    } -body {
        ted notifier bind ::unit <Entity>
        unit mutate move BLUE-NB1/0991 {3 3}
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::unit <Entity> update BLUE-NB1/0991}
    }


    test move-2.1 {undo undoes the change} -setup {
        ted create NB1 BLUE
        unit create $u1
    } -body {

        set a [unit get BLUE-NB1/0991 location]
        set undo [unit mutate move BLUE-NB1/0991 {3 3}]
        namespace eval :: $undo
        set b [unit get BLUE-NB1/0991 location]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test move-2.2 {undo sends <Entity> update} -setup {
        ted create NB1 BLUE
        unit create $u1
    } -body {
        set undo [unit mutate move BLUE-NB1/0991 {3 3}]

        ted notifier bind ::unit <Entity>
        namespace eval :: $undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::unit <Entity> update BLUE-NB1/0991}
    }


    #-------------------------------------------------------------------
    # mutate personnel


    test personnel-1.1 {unit is updated} -setup {
        ted create NB1 BLUE
        unit create $u1
    } -body {
        unit mutate personnel BLUE-NB1/0991 3


        ted query {SELECT u,personnel FROM units}
    } -cleanup {
        cleanup
    } -result {
u             personnel 
------------- --------- 
BLUE-NB1/0991 3         
    }


    test personnel-1.2 {<Entity> update} -setup {
        ted create NB1 BLUE
        unit create $u1
    } -body {
        ted notifier bind ::unit <Entity>
        unit mutate personnel  BLUE-NB1/0991 25
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::unit <Entity> update BLUE-NB1/0991}
    }


    test personnel-1.3 {updated unit is active} -setup {
        ted create NB1 BLUE
        unit create $u1
    } -body {
        unit deactivate BLUE-NB1/0991
        unit mutate personnel BLUE-NB1/0991 3

        ted query {SELECT u,personnel,active FROM units}
    } -cleanup {
        cleanup
    } -result {
u             personnel active 
------------- --------- ------ 
BLUE-NB1/0991 3         1      
    }

    test personnel-2.1 {undo undoes the change} -setup {
        ted create NB1 BLUE
        unit create $u1
    } -body {

        set a [unit get BLUE-NB1/0991 personnel]

        set undo [unit mutate personnel BLUE-NB1/0991 25]

        namespace eval :: $undo

        set b [unit get BLUE-NB1/0991 personnel]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}

    test personnel-2.2 {undo sends <Entity> update} -setup {
        ted create NB1 BLUE
        unit create $u1
    } -body {
        set undo [unit mutate personnel BLUE-NB1/0991 25]

        ted notifier bind ::unit <Entity>
        namespace eval :: $undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::unit <Entity> update BLUE-NB1/0991}
    }


    #-------------------------------------------------------------------
    # names

    test names-1.1 {Returns names: none defined} -body {
        unit names
    } -cleanup {
        cleanup
    } -result {}


    test names-1.2 {Returns names} -setup {
        ted create NB1 NB2 BLUE USAID
        unit create $u1
        unit create $u2
    } -body {
        unit names
    } -cleanup {
        cleanup
    } -result {BLUE-NB1/0991 USAID-NB2/0000}


    #-------------------------------------------------------------------
    # validate

    test validate-1.1 {Invalid name} -body {
        unit validate NONESUCH
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid unit name: "NONESUCH"}


    test validate-2.1 {Valid name} -setup {
        ted create NB1 BLUE
        unit create $u1
    } -body {
        unit validate BLUE-NB1/0991
    } -cleanup {
        cleanup
    } -result {BLUE-NB1/0991}


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





