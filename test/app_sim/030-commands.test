# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    030-commands.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    executive(sim) tests: commands
#
#    This test suite tests the executive(sim) executive commands.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    proc setup {} {
        ted create NB1 JOE
    }

    # Clean up after a test
    proc cleanup {} {
        executive reset
        ted cleanup
    }

    #-------------------------------------------------------------------
    # block add

    test block_add-1.1 {unknown agent} -setup {
        setup
    } -body {
        ted sendex -error block add NONESUCH
    } -cleanup {
        cleanup
    } -match glob -result {*Invalid agent,*}

    test block_add-1.2 {returns block_id} -setup {
        setup
    } -body {
        set id [ted sendex block add JOE]
        expr {$id == [ted sendex last block]}
    } -cleanup {
        cleanup
    } -result {1}
    
    test block_add-1.3 {creates default block} -setup {
        setup
    } -body {
        set id [ted sendex block add JOE]
        [block get $id] get intent
    } -cleanup {
        cleanup
    } -result {}

    test block_add-1.4 {can use options} -setup {
        setup
    } -body {
        set id [ted sendex block add JOE -intent "New Block"]
        [block get $id] get intent
    } -cleanup {
        cleanup
    } -result {New Block}

    test block_add-1.5 {can set state} -setup {
        setup
    } -body {
        set id [ted sendex block add JOE -state disabled]
        [block get $id] get state
    } -cleanup {
        cleanup
    } -result {disabled}

    #-------------------------------------------------------------------
    # block cget

    test block_cget-1.1 {unknown block id} -setup {
        setup
    } -body {
        ted sendex -error block cget NONESUCH
    } -cleanup {
        cleanup
    } -result {Invalid block ID: "NONESUCH"}

    test block_cget-1.2 {retrieve data for specific block} -setup {
        setup
    } -body {
        set B [ted addblock JOE intent "block_cget-1.2"]
        ted sendex block cget [$B id] -intent
    } -cleanup {
        cleanup
    } -result {block_cget-1.2}

    test block_cget-1.3 {can retrieve state} -setup {
        setup
    } -body {
        set B [ted addblock JOE intent "block_cget-1.3"]
        $B configure -state disabled
        ted sendex block cget [$B id] -state
    } -cleanup {
        cleanup
    } -result {disabled}

    test block_cget-1.4 {can retrieve data for last block} -setup {
        setup
    } -body {
        ted addblock JOE intent "A"
        ted addblock JOE intent "B"
        ted sendex block cget - -intent
    } -cleanup {
        cleanup
    } -result {B}

    test block_cget-1.5 {can retrieve all data} -setup {
        setup
    } -body {
        ted addblock JOE intent "A"
        ted pdicts [ted sendex block cget -] 
    } -cleanup {
        cleanup
    } -match dictglob -result {
        -agent      JOE
        -block_id   3
        -cmode      ALL
        -conditions {}
        -emode      ALL
        -intent     A
        -once       0
        -onlock     0
        -state      normal
        -t1         {}
        -t2         {}
        -tactics    {}
        -tmode      ALWAYS
    }

    #-------------------------------------------------------------------
    # block configure

    test block_configure-1.1 {unknown block id} -setup {
        setup
    } -body {
        ted sendex -error block configure NONESUCH -intent "My block"
    } -cleanup {
        cleanup
    } -match glob -result {*Invalid block ID: "NONESUCH"*}

    test block_configure-1.2 {set data for specific block} -setup {
        setup
    } -body {
        set B1 [ted addblock JOE]
        set B2 [ted addblock JOE]

        ted sendex block configure [$B1 id] -intent "New intent"
        $B1 get intent
    } -cleanup {
        cleanup
    } -result {New intent}

    test block_configure-1.3 {can set state} -setup {
        setup
    } -body {
        set B [ted addblock JOE]
        ted sendex block configure [$B id] -state disabled
        $B get state
    } -cleanup {
        cleanup
    } -result {disabled}

    test block_configure-1.4 {can set data for last block} -setup {
        setup
    } -body {
        set B1 [ted addblock JOE]
        set B2 [ted addblock JOE]
        ted sendex block configure - -intent "New intent"
        $B2 get intent
    } -cleanup {
        cleanup
    } -result {New intent}

    #-------------------------------------------------------------------
    # condition add

    test condition_add-1.1 {unknown block id} -setup {
        setup
    } -body {
        ted sendex -error condition add NONESUCH EXPR
    } -cleanup {
        cleanup
    } -match glob -result {*Invalid block ID*}

    test condition_add-1.2 {returns condition_id} -setup {
        setup
        set B1 [ted addblock JOE]
    } -body {
        set id [ted sendex condition add [$B1 id] EXPR]
        expr {$id == [ted sendex last condition]}
    } -cleanup {
        cleanup
    } -result {1}
    
    test condition_add-1.3 {creates default condition} -setup {
        setup
        set B1 [ted addblock JOE]
    } -body {
        set id [ted sendex condition add [$B1 id] EXPR]
        [condition get $id] get metflag
    } -cleanup {
        cleanup
    } -result {}

    test condition_add-1.4 {can use options} -setup {
        setup
        set B1 [ted addblock JOE]
    } -body {
        set id [ted sendex condition add [$B1 id] EXPR -expression "1 + 1 == 2"]
        [condition get $id] get expression
    } -cleanup {
        cleanup
    } -result {1 + 1 == 2}

    test condition_add-1.5 {can set state} -setup {
        setup
        set B1 [ted addblock JOE]
    } -body {
        set id [ted sendex condition add [$B1 id] EXPR -state disabled]
        [condition get $id] get state
    } -cleanup {
        cleanup
    } -result {disabled}


    test condition_add-1.5 {can add to last block} -setup {
        setup
        set B1 [ted addblock JOE]
        set B2 [ted addblock JOE]
    } -body {
        set id [ted sendex condition add - EXPR -expression {1 == 1}]
        [$B2 conditions end] get expression        
    } -cleanup {
        cleanup
    } -result {1 == 1}

    #-------------------------------------------------------------------
    # condition cget

    test condition_cget-1.1 {unknown condition id} -setup {
        setup
    } -body {
        ted sendex -error condition cget NONESUCH
    } -cleanup {
        cleanup
    } -result {Invalid condition ID: "NONESUCH"}

    test condition_cget-1.2 {retrieve data for specific condition} -setup {
        setup
        set B1 [ted addblock JOE]
        set C1 [ted addcondition $B1 EXPR expression "1 + 1 == 2"]
    } -body {
        ted sendex condition cget [$C1 id] -expression
    } -cleanup {
        cleanup
    } -result {1 + 1 == 2}

    test condition_cget-1.3 {can retrieve state} -setup {
        setup
        set B1 [ted addblock JOE]
        set C1 [ted addcondition $B1 EXPR]
        $C1 configure -state disabled
    } -body {
        ted sendex condition cget [$C1 id] -state
    } -cleanup {
        cleanup
    } -result {disabled}

    test condition_cget-1.4 {can retrieve data for last condition} -setup {
        setup
        set B1 [ted addblock JOE]
        set C1 [ted addcondition $B1 EXPR]
        set C2 [ted addcondition $B1 EXPR]
        $C2 configure -expression {1 == 1}
    } -body {
        ted sendex condition cget - -expression
    } -cleanup {
        cleanup
    } -result {1 == 1}

    test condition_cget-1.5 {can retrieve all data} -setup {
        setup
        set B1 [ted addblock JOE]
        set C1 [ted addcondition $B1 EXPR expression "1 + 1 == 2"]
    } -body {
        ted pdicts [ted sendex condition cget [$C1 id]]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        -agent        JOE
        -condition_id 4
        -expression   {1 + 1 == 2}
        -narrative    {Expression: 1 + 1 == 2}
        -parent       3
        -state        normal
        -typename     EXPR
    }

    #-------------------------------------------------------------------
    # condition configure

    test condition_configure-1.1 {unknown condition id} -setup {
        setup
    } -body {
        ted sendex -error condition configure NONESUCH -expression "My condition"
    } -cleanup {
        cleanup
    } -match glob -result {*Invalid condition ID: "NONESUCH"*}

    test condition_configure-1.2 {set data for specific condition} -setup {
        setup
        set B1 [ted addblock JOE]
        set C1 [ted addcondition $B1 EXPR]
        set C2 [ted addcondition $B1 EXPR]
    } -body {
        ted sendex condition configure [$C1 id] -expression "1 == 2"
        $C1 get expression
    } -cleanup {
        cleanup
    } -result {1 == 2}

    test condition_configure-1.3 {can set state} -setup {
        setup
        set B1 [ted addblock JOE]
        set C1 [ted addcondition $B1 EXPR]
        set C2 [ted addcondition $B1 EXPR]
    } -body {
        ted sendex condition configure [$C1 id] -state disabled
        $C1 get state
    } -cleanup {
        cleanup
    } -result {disabled}

    test condition_configure-1.4 {can set data for last condition} -setup {
        setup
        set B1 [ted addblock JOE]
        set C1 [ted addcondition $B1 EXPR]
        set C2 [ted addcondition $B1 EXPR]
    } -body {
        ted sendex condition configure - -expression {2 + 2 == 4}
        $C2 get expression
    } -cleanup {
        cleanup
    } -result {2 + 2 == 4}

    #-------------------------------------------------------------------
    # last *

    test last-1.1 {last block: none} -setup {
        setup
    } -body {
        ted sendex -error last block
    } -cleanup {
        cleanup
    } -result {last block: no blocks have been created.}

    test last-1.2 {last block: some} -setup {
        setup
        ted addblock JOE
        set B [ted addblock JOE]
    } -body {
        set last [ted sendex last block]
        expr {[$B id] == $last}
    } -cleanup {
        cleanup
    } -result {1}
 
    test last-2.1 {last condition: none} -setup {
        setup
    } -body {
        ted sendex -error last condition
    } -cleanup {
        cleanup
    } -result {last condition: no conditions have been created.}

    test last-2.2 {last condition: some} -setup {
        setup
        set B [ted addblock JOE]

        ted addcondition $B EXPR
        set C [ted addcondition $B EXPR]
    } -body {
        set last [ted sendex last condition]
        expr {[$C id] == $last}
    } -cleanup {
        cleanup
    } -result {1}

    # TBD: last-3.* is for [last ensit]

    # TBD: last-4.* is for [last mad]

    test last-5.1 {last tactic: none} -setup {
        setup
    } -body {
        ted sendex -error last tactic
    } -cleanup {
        cleanup
    } -result {last tactic: no tactics have been created.}

    test last-5.2 {last tactic: some} -setup {
        setup
        set B [ted addblock JOE]

        ted addtactic $B SIGEVENT
        set T [ted addtactic $B SIGEVENT]
    } -body {
        set last [ted sendex last tactic]
        expr {[$T id] == $last}
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # tactic add

    test tactic_add-1.1 {unknown block id} -setup {
        setup
    } -body {
        ted sendex -error tactic add NONESUCH SIGEVENT
    } -cleanup {
        cleanup
    } -match glob -result {*Invalid block ID*}

    test tactic_add-1.2 {returns tactic_id} -setup {
        setup
        set B1 [ted addblock JOE]
    } -body {
        set id [ted sendex tactic add [$B1 id] SIGEVENT]
        expr {$id == [ted sendex last tactic]}
    } -cleanup {
        cleanup
    } -result {1}
    
    test tactic_add-1.3 {creates default tactic} -setup {
        setup
        set B1 [ted addblock JOE]
    } -body {
        set id [ted sendex tactic add [$B1 id] SIGEVENT]
        [tactic get $id] get msg
    } -cleanup {
        cleanup
    } -result {}

    test tactic_add-1.4 {can use options} -setup {
        setup
        set B1 [ted addblock JOE]
    } -body {
        set id [ted sendex tactic add [$B1 id] SIGEVENT -msg "1 + 1 == 2"]
        [tactic get $id] get msg
    } -cleanup {
        cleanup
    } -result {1 + 1 == 2}

    test tactic_add-1.5 {can set state} -setup {
        setup
        set B1 [ted addblock JOE]
    } -body {
        set id [ted sendex tactic add [$B1 id] SIGEVENT -state disabled]
        [tactic get $id] get state
    } -cleanup {
        cleanup
    } -result {disabled}


    test tactic_add-1.5 {can add to last block} -setup {
        setup
        set B1 [ted addblock JOE]
        set B2 [ted addblock JOE]
    } -body {
        set id [ted sendex tactic add - SIGEVENT -msg {1 == 1}]
        [$B2 tactics end] get msg        
    } -cleanup {
        cleanup
    } -result {1 == 1}

    #-------------------------------------------------------------------
    # tactic cget

    test tactic_cget-1.1 {unknown tactic id} -setup {
        setup
    } -body {
        ted sendex -error tactic cget NONESUCH
    } -cleanup {
        cleanup
    } -result {Invalid tactic ID: "NONESUCH"}

    test tactic_cget-1.2 {retrieve data for specific tactic} -setup {
        setup
        set B1 [ted addblock JOE]
        set T1 [ted addtactic $B1 SIGEVENT msg "1 + 1 == 2"]
    } -body {
        ted sendex tactic cget [$T1 id] -msg
    } -cleanup {
        cleanup
    } -result {1 + 1 == 2}

    test tactic_cget-1.3 {can retrieve state} -setup {
        setup
        set B1 [ted addblock JOE]
        set T1 [ted addtactic $B1 SIGEVENT]
        $T1 configure -state disabled
    } -body {
        ted sendex tactic cget [$T1 id] -state
    } -cleanup {
        cleanup
    } -result {disabled}

    test tactic_cget-1.4 {can retrieve data for last tactic} -setup {
        setup
        set B1 [ted addblock JOE]
        set T1 [ted addtactic $B1 SIGEVENT]
        set T2 [ted addtactic $B1 SIGEVENT]
        $T2 configure -msg {1 == 1}
    } -body {
        ted sendex tactic cget - -msg
    } -cleanup {
        cleanup
    } -result {1 == 1}

    test tactic_cget-1.5 {can retrieve all data} -setup {
        setup
        set B1 [ted addblock JOE]
        set T1 [ted addtactic $B1 SIGEVENT msg "1 + 1 == 2"]
    } -body {
        ted pdicts [ted sendex tactic cget [$T1 id]]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        -agent     JOE
        -msg       {1 + 1 == 2}
        -narrative {Logs "1 + 1 == 2" to the sigevents log}
        -parent    3
        -state     normal
        -tactic_id 4
        -typename  SIGEVENT
    }

    #-------------------------------------------------------------------
    # tactic configure

    test tactic_configure-1.1 {unknown tactic id} -setup {
        setup
    } -body {
        ted sendex -error tactic configure NONESUCH -msg "My tactic"
    } -cleanup {
        cleanup
    } -match glob -result {*Invalid tactic ID: "NONESUCH"*}

    test tactic_configure-1.2 {set data for specific tactic} -setup {
        setup
        set B1 [ted addblock JOE]
        set T1 [ted addtactic $B1 SIGEVENT]
        set T2 [ted addtactic $B1 SIGEVENT]
    } -body {
        ted sendex tactic configure [$T1 id] -msg "1 == 2"
        $T1 get msg
    } -cleanup {
        cleanup
    } -result {1 == 2}

    test tactic_configure-1.3 {can set state} -setup {
        setup
        set B1 [ted addblock JOE]
        set T1 [ted addtactic $B1 SIGEVENT]
        set T2 [ted addtactic $B1 SIGEVENT]
    } -body {
        ted sendex tactic configure [$T1 id] -state disabled
        $T1 get state
    } -cleanup {
        cleanup
    } -result {disabled}

    test tactic_configure-1.4 {can set data for last tactic} -setup {
        setup
        set B1 [ted addblock JOE]
        set T1 [ted addtactic $B1 SIGEVENT]
        set T2 [ted addtactic $B1 SIGEVENT]
    } -body {
        ted sendex tactic configure - -msg {2 + 2 == 4}
        $T2 get msg
    } -cleanup {
        cleanup
    } -result {2 + 2 == 4}

    cleanupTests
}

namespace delete ::athena_test::tests::







