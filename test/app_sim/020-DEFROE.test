# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-DEFROE.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) DEFROE:* order tests.
#
#    This test suite tests the Defending ROE-related orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    proc setup {} {
        ted create NB1 NB2 BLUE BRIT ALQ
    }


    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }


    #-------------------------------------------------------------------
    # DEFROE:UPDATE

    test UPDATE-1.1 {required parms} -body {
        ted order -reject DEFROE:UPDATE {}
    } -result {
        id {required value}
    }
    

    test UPDATE-1.2 {invalid n, g} -setup {
        setup
    } -body {
        ted order -reject DEFROE:UPDATE id {NONESUCH NONESUCH}
    } -cleanup {
        cleanup
    } -result {
        id {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test UPDATE-1.3 {invalid roe} -setup {
        setup
    } -body {
        ted order -reject DEFROE:UPDATE id {NB1 BLUE} roe NONESUCH
    } -cleanup {
        cleanup
    } -result {
        roe {invalid value "NONESUCH", should be one of: HOLD_FIRE, FIRE_BACK_IF_PRESSED, FIRE_BACK_IMMEDIATELY}
    }


    test UPDATE-2.1 {roe is updated} -setup {
        setup
    } -body {
        ted order DEFROE:UPDATE {
            id    {NB1 BLUE}
            roe   HOLD_FIRE
        }

        ted query {SELECT * FROM defroe_ng ORDER BY n,g}
    } -cleanup {
        cleanup
    } -result {
n   g    roe                  
--- ---- -------------------- 
NB1 BLUE HOLD_FIRE            
NB1 BRIT FIRE_BACK_IF_PRESSED 
NB2 BLUE FIRE_BACK_IF_PRESSED 
NB2 BRIT FIRE_BACK_IF_PRESSED 
    }


    test UPDATE-2.2 {table monitor event} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <defroe_ng>
        ted order DEFROE:UPDATE id {NB1 BLUE} roe HOLD_FIRE
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <defroe_ng> update {NB1 BLUE}}
    }


    test UPDATE-3.1 {undo undoes the change} -setup {
        setup

        ted order DEFROE:UPDATE {
            id    {NB1 BLUE}
            roe   HOLD_FIRE
        }
    } -body {
        ted notifier bind ::rdb <defroe_ng>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <defroe_ng> update {NB1 BLUE}}
    }

    #-------------------------------------------------------------------
    # DEFROE:UPDATE:MULTI

    test UPDATE:MULTI-1.1 {required parms} -setup {
        setup
    } -body {
        ted order -reject DEFROE:UPDATE:MULTI {}
    } -cleanup {
        cleanup
    } -result {
        ids {required value}
    }
    

    test UPDATE:MULTI-1.2 {invalid n in ids} -setup {
        setup
    } -body {
        ted order -reject DEFROE:UPDATE:MULTI \
            ids {{NONESUCH BLUE}}
    } -cleanup {
        cleanup
    } -result {
        ids {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test UPDATE:MULTI-1.3 {invalid g in ids} -setup {
        setup
    } -body {
        ted order -reject DEFROE:UPDATE:MULTI \
            ids {{NB1 NONESUCH}}
    } -cleanup {
        cleanup
    } -result {
        ids {Invalid uniformed force group, should be one of: BLUE, BRIT}
    }


    test UPDATE:MULTI-1.4 {invalid roe} -setup {
        setup
    } -body {
        ted order -reject DEFROE:UPDATE:MULTI \
            ids {{NB1 BLUE}} roe NONESUCH
    } -cleanup {
        cleanup
    } -result {
        roe {invalid value "NONESUCH", should be one of: HOLD_FIRE, FIRE_BACK_IF_PRESSED, FIRE_BACK_IMMEDIATELY}
    }


    test UPDATE:MULTI-2.1 {one ROE of several is updated} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <defroe_ng>

        ted order DEFROE:UPDATE:MULTI {
            ids       {{NB1 BLUE}}
            roe       HOLD_FIRE
        }

        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <defroe_ng> update {NB1 BLUE}}
    }


    test UPDATE:MULTI-2.2 {several ROEs are updated} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <defroe_ng>
        ted order DEFROE:UPDATE:MULTI {
            ids   {{NB1 BLUE} {NB1 BRIT}} 
            roe   HOLD_FIRE
        }
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <defroe_ng> update {NB1 BLUE}}
        {::rdb <defroe_ng> update {NB1 BRIT}}
    }


    test UPDATE:MULTI-3.1 {undo undoes the change} -setup {
        setup

        ted order DEFROE:UPDATE:MULTI {
            ids        {{NB1 BLUE} {NB1 BRIT}}
            roe        HOLD_FIRE
        }
    } -body {
        ted notifier bind ::rdb <defroe_ng>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <defroe_ng> update {NB1 BLUE}}
        {::rdb <defroe_ng> update {NB1 BRIT}}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::








