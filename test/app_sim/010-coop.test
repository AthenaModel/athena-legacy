# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-coop.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    coop(sim) tests.
#
#    This test suite tests the coop(sim) mutators and queries
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    #-------------------------------------------------------------------
    # mutate update


    test update-1.1 {coop is updated} -setup {
        ted create NB1 BLUE SHIA
    } -body {
        coop mutate update {
            id      {SHIA BLUE}
            coop0   40.0
            atrend  5.0
            athresh 40
            dtrend  -5.0
            dthresh 60
        }

        ted query {SELECT * FROM coop_fg}
    } -cleanup {
        cleanup
    } -result {
f    g    coop0 atrend athresh dtrend dthresh 
---- ---- ----- ------ ------- ------ ------- 
SHIA BLUE 40.0  5.0    40.0    -5.0   60.0    
    }


    test update-1.2 {identical values are OK} -setup {
        ted create NB1 BLUE SHIA
        set parmdict {
            id      {SHIA BLUE}
            coop0   40.0
            atrend  5.0
            athresh 40
            dtrend  -5.0
            dthresh 60
        }

        coop mutate update $parmdict
    } -body {
        set a [ted query {SELECT * FROM coop_fg}]
        
        coop mutate update $parmdict

        set b [ted query {SELECT * FROM coop_fg}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-1.3 {empty values are OK} -setup {
        ted create NB1 BLUE SHIA
    } -body {
        set a [ted query {SELECT * FROM coop_fg}]

        coop mutate update  {
            id      {SHIA BLUE}
            coop0   ""
            atrend  ""
            athresh ""
            dtrend  ""
            dthresh ""
        }

        set b [ted query {SELECT * FROM coop_fg}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-2.1 {undo undoes the change} -setup {
        ted create NB1 BLUE SHIA
    } -body {

        set a [ted query {SELECT * FROM coop_fg}]

        set undo [coop mutate update {
            id      {SHIA BLUE}
            coop0   40.0
            atrend  5.0
            athresh 40
            dtrend  -5.0
            dthresh 60
        }]

        eval $undo

        set b [ted query {SELECT * FROM coop_fg}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # exists

    test exists-1.1 {coop does not exist} -body {
        coop exists NONESUCH NONESUCH
    } -cleanup {
        cleanup
    } -result {0}


    test exists-1.2 {coop exists} -setup {
        ted create NB1 BLUE SHIA
    } -body {
        coop exists SHIA BLUE
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # validate

    test validate-1.1 {invalid group f} -setup {
        ted create NB1 BLUE SHIA
    } -body {
        coop validate {NONESUCH NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid civilian group, should be one of: SHIA}


    test validate-1.2 {Invalid group g} -setup {
        ted create NB1 BLUE SHIA
    } -body {
        coop validate {SHIA NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid force group, should be one of: BLUE}


    test validate-2.1 {Valid group} -setup {
        ted create NB1 BLUE SHIA
    } -body {
        coop validate {SHIA BLUE}
    } -cleanup {
        cleanup
    } -result {SHIA BLUE}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





