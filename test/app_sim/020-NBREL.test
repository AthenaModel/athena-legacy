# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-NBHOOD-RELATIONSHIP.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) NBREL:* order tests.
#
#    This test suite tests the neighborhood relationship orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    proc setup {} {
        ted create NB1 NB2
        nbrel mutate reconcile
    }


    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }


    #-------------------------------------------------------------------
    # NBREL:UPDATE

    test UPDATE-1.1 {required parms} -body {
        ted order -reject NBREL:UPDATE {}
    } -result {
        id {required value}
    }
    

    test UPDATE-1.2 {invalid m, n} -setup {
        setup
    } -body {
        ted order -reject NBREL:UPDATE \
            id {NONESUCH NONESUCH}
    } -cleanup {
        cleanup
    } -result {
        id {Invalid neighborhood, should be one of: NB1, NB2}
    }

    test UPDATE-1.3 {m eq n} -setup {
        setup
    } -body {
        ted order -reject NBREL:UPDATE \
            id {NB1 NB1}
    } -cleanup {
        cleanup
    } -result {
        id {Cannot change the relationship of a neighborhood to itself.}
    }

    test UPDATE-1.4 {invalid proximity: unknown symbol} -setup {
        setup
    } -body {
        ted order -reject NBREL:UPDATE \
            id {NB1 NB2} proximity NONESUCH
    } -cleanup {
        cleanup
    } -result {
        proximity {Invalid proximity "NONESUCH", should be one of: NEAR, FAR, REMOTE}
    }


    test UPDATE-1.5 {invalid effects_delay: not a number} -setup {
        setup
    } -body {
        ted order -reject NBREL:UPDATE \
            id {NB1 NB2} effects_delay NONESUCH
    } -cleanup {
        cleanup
    } -result {
        effects_delay {invalid value "NONESUCH", should be a real number no less than 0.0}
    }


    test UPDATE-1.6 {invalid effects_delay: negative} -setup {
        setup
    } -body {
        ted order -reject NBREL:UPDATE \
            id {NB1 NB2} effects_delay -0.1
    } -cleanup {
        cleanup
    } -result {
        effects_delay {invalid value "-0.1", should be a real number no less than 0.0}
    }

    test UPDATE-2.1 {values are updated} -setup {
        setup
    } -body {
        ted order NBREL:UPDATE {
            id            {NB1 NB2}
            proximity     NEAR
            effects_delay 1.0
        }

        ted query {SELECT * FROM nbrel_mn}
    } -cleanup {
        cleanup
    } -result {
m   n   proximity effects_delay 
--- --- --------- ------------- 
NB1 NB1 HERE      0.0           
NB1 NB2 NEAR      1.0           
NB2 NB1 REMOTE    0.0           
NB2 NB2 HERE      0.0           
    }


    test UPDATE-2.2 {<Entity> update} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <nbrel_mn>
        ted order NBREL:UPDATE id {NB1 NB2}
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <nbrel_mn> update {NB1 NB2}}
    }


    test UPDATE-3.1 {undo undoes the change} -setup {
        setup

        ted order NBREL:UPDATE {
            id            {NB1 NB2}
            proximity     NEAR
            effects_delay 1.0
        }
    } -body {
        ted notifier bind ::rdb <nbrel_mn>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <nbrel_mn> update {NB1 NB2}}
    }

    #-------------------------------------------------------------------
    # NBREL:UPDATE:MULTI

    test UPDATE:MULTI-1.1 {required parms} -setup {
        setup
    } -body {
        ted order -reject NBREL:UPDATE:MULTI {}
    } -cleanup {
        cleanup
    } -result {
        ids {required value}
    }
    

    test UPDATE:MULTI-1.2 {invalid m in ids} -setup {
        setup
    } -body {
        ted order -reject NBREL:UPDATE:MULTI \
            ids {{NONESUCH NONESUCH}}
    } -cleanup {
        cleanup
    } -result {
        ids {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test UPDATE:MULTI-1.3 {invalid n in ids} -setup {
        setup
    } -body {
        ted order -reject NBREL:UPDATE:MULTI \
            ids {{NB1 NONESUCH}}
    } -cleanup {
        cleanup
    } -result {
        ids {Invalid neighborhood, should be one of: NB1, NB2}
    }


    test UPDATE:MULTI-1.4 {m eq n in ids} -setup {
        setup
    } -body {
        ted order -reject NBREL:UPDATE:MULTI \
            ids {{NB1 NB1}}
    } -cleanup {
        cleanup
    } -result {
        ids {Cannot change the relationship of a neighborhood to itself.}
    }


    test UPDATE:MULTI-1.5 {invalid proximity: unknown symbol} -setup {
        setup
    } -body {
        ted order -reject NBREL:UPDATE:MULTI \
            ids {{NB1 NB2}} proximity NONESUCH
    } -cleanup {
        cleanup
    } -result {
        proximity {Invalid proximity "NONESUCH", should be one of: NEAR, FAR, REMOTE}
    }


    test UPDATE:MULTI-1.6 {invalid effects_delay: not a number} -setup {
        setup
    } -body {
        ted order -reject NBREL:UPDATE:MULTI \
            ids {{NB1 NB2}} effects_delay NONESUCH
    } -cleanup {
        cleanup
    } -result {
        effects_delay {invalid value "NONESUCH", should be a real number no less than 0.0}
    }


    test UPDATE:MULTI-1.7 {invalid effects_delay: negative} -setup {
        setup
    } -body {
        ted order -reject NBREL:UPDATE:MULTI \
            ids {{NB1 NB2}} effects_delay -0.1
    } -cleanup {
        cleanup
    } -result {
        effects_delay {invalid value "-0.1", should be a real number no less than 0.0}
    }


    test UPDATE:MULTI-2.1 {one nbrel of several is updated} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <nbrel_mn>

        ted order NBREL:UPDATE:MULTI {
            ids           {{NB1 NB2}}
            proximity     NEAR
            effects_delay 1.0
        }

        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <nbrel_mn> update {NB1 NB2}}
    }


    test UPDATE:MULTI-2.2 {several are updated} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <nbrel_mn>

        ted order NBREL:UPDATE:MULTI {
            ids           {{NB1 NB2} {NB2 NB1}}
            proximity     NEAR
            effects_delay 1.0
        }

        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <nbrel_mn> update {NB1 NB2}}
        {::rdb <nbrel_mn> update {NB2 NB1}}
    }


    test UPDATE:MULTI-3.1 {undo undoes the change} -setup {
        setup

        ted order NBREL:UPDATE:MULTI {
            ids           {{NB1 NB2} {NB2 NB1}}
            proximity     NEAR
            effects_delay 1.0
        }
    } -body {
        ted notifier bind ::rdb <nbrel_mn>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <nbrel_mn> update {NB1 NB2}}
        {::rdb <nbrel_mn> update {NB2 NB1}}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







