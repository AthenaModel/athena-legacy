# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-tactic_fund.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    tactic_fund(sim) tests.
#
#    This test suite tests the tactic_fund(sim) class.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        variable T1
        variable coffer
        ted create JOE BOB

        cash load
        set coffer [coffer new JOE]

        set B1 [ted addblock JOE]
        set T1 [ted addtactic $B1 FUND a BOB]
    }

    proc execute_setup {} {
        setup
        cash load
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        variable coffer
        $coffer destroy
        ted cleanup
    }

    #-------------------------------------------------------------------
    # Constructor

    test constructor-1.1 {default state} -setup {
        setup
    } -body {
        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match glob -result {
        a          BOB
        amount     0.0
        execstatus NONE
        id         *
        mode       ALL
        parent     ::bean::block*
        percent    0.0
        state      normal
    }

    test constructor-1.2 {can set options} -setup {
        setup
    } -body {
        set T1 [tactic::FUND new -a DUMMY]
        $T1 get a
    } -cleanup {
        cleanup
    } -match glob -result {DUMMY}

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative, default state} -setup {
        setup
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Fund actor BOB with all remaining cash-on-hand every week.}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {check: a no longer exists} -setup {
        setup
        rdb eval {DELETE FROM actors WHERE a='BOB'}
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {a {Actor BOB does not exist.}}

    test check-1.2 {check: OK} -setup {
        setup
    } -body {
        $T1 check 
    } -cleanup {
        cleanup
    } -result {}


    #-------------------------------------------------------------------
    # obligate

    test obligate-1.1 {ALL} -setup {
        setup
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer cash]
        $T1 execute
        set c [rdb onecolumn {SELECT gifts FROM working_cash WHERE a='BOB'}]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 0.0 10000.0}

    test obligate-1.2 {EXACT, enough cash} -setup {
        setup
        $T1 set mode EXACT
        $T1 set amount 1000.0
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer cash]
        $T1 execute
        set c [rdb onecolumn {SELECT gifts FROM working_cash WHERE a='BOB'}]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 9000.0 1000.0}

    test obligate-1.3 {EXACT, not enough cash} -setup {
        setup
        $T1 set mode EXACT
        $T1 set amount 10001.0
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer cash]
        $T1 execute
        set c [rdb onecolumn {SELECT gifts FROM working_cash WHERE a='BOB'}]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {0 10000.0 0.0}

    test obligate-1.4 {UPTO, under cash-on-hand} -setup {
        setup
        $T1 set mode UPTO
        $T1 set amount 9999.0
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer cash]
        $T1 execute
        set c [rdb onecolumn {SELECT gifts FROM working_cash WHERE a='BOB'}]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 1.0 9999.0}

    test obligate-1.5 {UPTO, over cash-on-hand} -setup {
        setup
        $T1 set mode UPTO
        $T1 set amount 10001.0
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer cash]
        $T1 execute
        set c [rdb onecolumn {SELECT gifts FROM working_cash WHERE a='BOB'}]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 0.0 10000.0}

    test obligate-1.6 {PERCENT} -setup {
        setup
        $T1 set mode PERCENT
        $T1 set percent 25.0
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer cash]
        $T1 execute
        set c [rdb onecolumn {SELECT gifts FROM working_cash WHERE a='BOB'}]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 7500.0 2500.0}

    test obligate-1.7 {EXCESS, under cash-on-hand} -setup {
        setup
        $T1 set mode EXCESS
        $T1 set amount 9999.0
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer cash]
        $T1 execute
        set c [rdb onecolumn {SELECT gifts FROM working_cash WHERE a='BOB'}]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 9999.0 1.0}

    test obligate-1.8 {EXCESS, over cash-on-hand} -setup {
        setup
        $T1 set mode EXCESS
        $T1 set amount 10001.0
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer cash]
        $T1 execute
        set c [rdb onecolumn {SELECT gifts FROM working_cash WHERE a='BOB'}]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 10000.0 0.0}

    #-------------------------------------------------------------------
    # execute

    test execute-1.1 {default always succeeds} -setup {
        setup
        $T1 obligate $coffer
    } -body {
        $T1 execute
        ted query {SELECT * FROM working_cash}
    } -cleanup {
        cleanup
    } -result {
a   cash_reserve income  cash_on_hand gifts   
--- ------------ ------- ------------ ------- 
JOE 200000.0     10000.0 0.0          0.0     
BOB 150000.0     5000.0  5000.0       10000.0 
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





