# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-FUNDENI.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) TACTIC:FUNDENI:* order tests.
#
#    This test suite tests the FUNDENI tactic's orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE BOB NB1 NB2 SHIA SUNN KURD
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Standard items

    set T1 {
        owner       JOE
        priority    bottom
        x1          2000.0
        glist       SHIA
        once        NO
        on_lock     NO
    }

    set T2 {
        owner       JOE
        priority    bottom
        x1          7000.0
        glist       {SHIA SUNN KURD}
        once        NO
        on_lock     NO
    }

    #-------------------------------------------------------------------
    # TACTIC:FUNDENI:CREATE

    test FUNDENI:CREATE-1.1 {required parms} -body {
        ted order -reject TACTIC:FUNDENI:CREATE {}
    } -result {
        owner {required value}
        glist {required value}
        x1 {required value}
    }

    test FUNDENI:CREATE-1.2 {owner is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUNDENI:CREATE \
            [dict merge $T1 [list owner NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        owner {Invalid actor, should be one of: BOB, JOE}
    }

    test FUNDENI:CREATE-1.3 {glist contains unknown group} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUNDENI:CREATE \
            [dict merge $T1 [list glist NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        glist {Invalid civilian group, should be one of: SHIA, SUNN, KURD}
    }

    test FUNDENI:CREATE-1.4 {x1 is non-numeric} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUNDENI:CREATE \
            [dict merge $T1 [list x1 NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        x1 {invalid money value "NONESUCH", expected positive numeric value with optional K, M, or B suffix}
    }

    test FUNDENI:CREATE-1.5 {x1 is negative} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUNDENI:CREATE \
            [dict merge $T1 [list x1 -1]]
    } -cleanup {
        cleanup
    } -result {
        x1 {invalid money value "-1", expected positive numeric value with optional K, M, or B suffix}
    }

    test FUNDENI:CREATE-1.6 {priority is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUNDENI:CREATE [dict merge $T1 {
            priority NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        priority {invalid value "nonesuch", should be one of: top, bottom}
    }

    test FUNDENI:CREATE-2.1 {tactic is created} -setup {
        setup
    } -body {
        ted order TACTIC:FUNDENI:CREATE $T2

        ted querylist {SELECT * FROM tactics_FUNDENI}
    } -cleanup {
        cleanup
    } -result {
tactic_id    1
tactic_type  FUNDENI
owner        JOE
narrative    Fund $7,000.00 worth of Essential Non-Infrastructure services for these groups (SHIA, SUNN, KURD).
priority     1
x1           7000.0
glist        _rule by_value raw_value {SHIA SUNN KURD}
once         0
on_lock      0
state        normal
exec_ts      
exec_flag    0
    }


    test FUNDENI:CREATE-2.2 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:FUNDENI:CREATE $T1
        ted notifier received

        # NOTE: Two updates, because of priority setting.
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
        {::rdb <tactics> update 1}
    }


    test FUNDENI:CREATE-3.1 {undo effects} -setup {
        setup
        ted order TACTIC:FUNDENI:CREATE $T1
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> delete 1}
    }

    #-------------------------------------------------------------------
    # TACTIC:FUNDENI:UPDATE

    proc setup_update_deploy {} {
        variable T2
        setup
        ted order TACTIC:FUNDENI:CREATE $T2
    }

    test FUNDENI:UPDATE-1.1 {required parms} -body {
        ted order -reject TACTIC:FUNDENI:UPDATE {}
    } -result {
        tactic_id {required value}
    }

    
    test FUNDENI:UPDATE-1.2 {tactic_id is unknown} -setup {
        setup_update_deploy
    } -body {
        ted order -reject TACTIC:FUNDENI:UPDATE \
            tactic_id NONESUCH
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Invalid tactic ID: "NONESUCH"}
    }

    test FUNDENI:UPDATE-1.3 {glist is unknown} -setup {
        setup_update_deploy
    } -body {
        ted order -reject TACTIC:FUNDENI:UPDATE tactic_id 1 glist NONESUCH
    } -cleanup {
        cleanup
    } -result {
        glist {Invalid civilian group, should be one of: SHIA, SUNN, KURD}
    }

    test FUNDENI:UPDATE-1.4 {x1 is non-integer} -setup {
        setup_update_deploy
    } -body {
        ted order -reject TACTIC:FUNDENI:UPDATE tactic_id 1 x1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        x1 {invalid money value "NONESUCH", expected positive numeric value with optional K, M, or B suffix}
    }

    test FUNDENI:UPDATE-1.5 {x1 is negative} -setup {
        setup_update_deploy
    } -body {
        ted order -reject TACTIC:FUNDENI:UPDATE tactic_id 1 x1 -1
    } -cleanup {
        cleanup
    } -result {
        x1 {invalid money value "-1", expected positive numeric value with optional K, M, or B suffix}
    }

    test FUNDENI:UPDATE-1.9 {wrong flavor of tactic} -setup {
        setup_update_deploy
        rdb eval {UPDATE tactics SET tactic_type='BOGUS'}
    } -body {
        ted order -reject TACTIC:FUNDENI:UPDATE tactic_id 1
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Tactic 1 is not a FUNDENI tactic}
    }

    test FUNDENI:UPDATE-2.1 {tactic is updated} -setup {
        setup_update_deploy
    } -body {
        ted order TACTIC:FUNDENI:UPDATE \
            tactic_id 1 x1 5000.0 glist {SHIA SUNN}

        ted querylist {SELECT * FROM tactics_FUNDENI}
    } -cleanup {
        cleanup
    } -result {
tactic_id    1
tactic_type  FUNDENI
owner        JOE
narrative    Fund $5,000.00 worth of Essential Non-Infrastructure services for these groups (SHIA, SUNN).
priority     1
x1           5000.0
glist        _rule by_value raw_value {SHIA SUNN}
once         0
on_lock      0
state        normal
exec_ts      
exec_flag    0
    }

    test FUNDENI:UPDATE-2.2 {Effects} -setup {
        setup
        ted order TACTIC:FUNDENI:CREATE $T2
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:FUNDENI:UPDATE tactic_id 1 x1 5000.0
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
    }


    test FUNDENI:UPDATE-3.1 {undo effects} -setup {
        setup_update_deploy
        ted order TACTIC:FUNDENI:UPDATE tactic_id 1 x1 5000.0
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





