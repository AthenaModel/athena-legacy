# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-GROUP-FORCE.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) GROUP:FORCE:* order tests.
#
#    This test suite tests the frcgroup-related orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Standard groups

    set blue {
        g         BLUE
        longname  "US Army"
        color     #0000ff
        forcetype REGULAR
        local     no
        coalition yes
    }

    set brit {
        g         BRIT
        longname  "British Forces"
        color     #00ffff
        forcetype REGULAR
        local     no
        coalition yes
    }

    # Other entities

    set shia {
        g         SHIA
        longname  "Shia Locals"
        color     #ffff00
    }

    set nb1 {
        n            NB1
        longname     "Here"
        urbanization URBAN
        refpoint     B00B00
        polygon      {A80A80 B20A80 B00B20}
    }

    set nb1shia {
        n              NB1
        g              SHIA
        local_name     "NB1 Shia"
        demeanor       AGGRESSIVE
        rollup_weight  1.0
        effects_factor 1.0
    }

    set usaid {
        g              USAID
        longname       "US Aid"
        color          #00ff00
        orgtype        NGO
        medical        no
        engineer       no
        support        yes
        rollup_weight  1.0
        effects_factor 1.1
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        array unset parms
        ted notifier forget

        # Delete all force groups and reinitialize the module
        rdb eval {
            DELETE FROM groups;
            DELETE FROM frcgroups;
            DELETE FROM orggroups;
            DELETE FROM nbhoods;
            DELETE FROM nbgroups;
            DELETE FROM sat_ngc;
            DELETE FROM rel_nfg;
        }

        frcgroup reconfigure
        civgroup reconfigure
        orggroup reconfigure
        nbgroup  reconfigure
        nbhood   reconfigure
        sat      reconfigure
        rel      reconfigure
    }

    #-------------------------------------------------------------------
    # GROUP:FORCE:CREATE

    test CREATE-1.1 {required parms} -body {
        ted order -reject GROUP:FORCE:CREATE {}
    } -result {
        g {required value}
        longname {required value}
        color {required value}
        forcetype {required value}
        local {required value}
        coalition {required value}
    }
    
    test CREATE-1.2 {Duplicate g, longname} -setup {
        ted order GROUP:FORCE:CREATE $blue
    } -body {
        ted order -reject GROUP:FORCE:CREATE $blue
    } -cleanup {
        cleanup
    } -result {
        g {An entity with this ID already exists}
        longname {An entity with this name already exists}
    }

    test CREATE-1.3 {longname duplicates n} -body {
        ted order -reject GROUP:FORCE:CREATE [dict merge $blue {
            longname BLUE
        }]
    } -cleanup {
        cleanup
    } -result {
        longname {longname must not be identical to ID}
    }

    test CREATE-1.4 {g is not an ident} -body {
        ted order -reject GROUP:FORCE:CREATE [dict merge $blue {
            g "BL&E"
        }]
    } -cleanup {
        cleanup
    } -result {
        g {Identifiers should begin with a letter and contain only letters or digits}
    }

    test CREATE-1.5 {invalid color} -body {
        ted order -reject GROUP:FORCE:CREATE [dict merge $blue {
            color NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        color {Invalid hexadecimal color specifier, should be "#RRGGBB"}
    }

    test CREATE-1.6 {invalid forcetype} -body {
        ted order -reject GROUP:FORCE:CREATE [dict merge $blue {
            forcetype NONESUCH
        }]
    } -result {
        forcetype {invalid value, "NONESUCH"}
    }

    test CREATE-1.7 {invalid local} -body {
        ted order -reject GROUP:FORCE:CREATE [dict merge $blue {
            local NONESUCH
        }]
    } -result {
        local {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }

    test CREATE-1.8 {invalid coalition} -body {
        ted order -reject GROUP:FORCE:CREATE [dict merge $blue {
            coalition NONESUCH
        }]
    } -result {
        coalition {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }

    test CREATE-2.1 {frcgroup is created} -body {
        ted order GROUP:FORCE:CREATE $blue
        set parms [join [dict keys $blue] ","]
        ted query "SELECT $parms FROM frcgroups_view"
    } -cleanup {
        cleanup
    } -result {
g    longname color   forcetype local coalition 
---- -------- ------- --------- ----- --------- 
BLUE US Army  #0000ff REGULAR   0     1         
    }

    test CREATE-2.2 {<Entity> create} -body {
        ted notifier bind ::frcgroup <Entity>
        ted order GROUP:FORCE:CREATE $blue
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::frcgroup <Entity> create BLUE}
    }

    test CREATE-2.3 {Relationships are created} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order GROUP:CIVILIAN:CREATE $shia
        ted order GROUP:NBHOOD:CREATE $nb1shia
        ted order GROUP:ORGANIZATION:CREATE $usaid
    } -body {
        ted notifier bind ::rel <Entity>
        ted order GROUP:FORCE:CREATE $blue
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rel <Entity> create {NB1 BLUE SHIA}}
        {::rel <Entity> create {NB1 SHIA BLUE}}
        {::rel <Entity> create {PLAYBOX BLUE BLUE}}
        {::rel <Entity> create {PLAYBOX BLUE USAID}}
        {::rel <Entity> create {PLAYBOX USAID BLUE}}
    }

    test CREATE-3.1 {undo deletes the frcgroup} -setup {
        ted order GROUP:FORCE:CREATE $blue
        ted order GROUP:FORCE:CREATE $brit
    } -body {
        cif undo
        ted query "SELECT g,longname FROM frcgroups_view"
    } -cleanup {
        cleanup
    } -result {
g    longname 
---- -------- 
BLUE US Army  
    }

    test CREATE-2.4 {Relationships are undone} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order GROUP:CIVILIAN:CREATE $shia
        ted order GROUP:NBHOOD:CREATE $nb1shia
        ted order GROUP:ORGANIZATION:CREATE $usaid
        ted order GROUP:FORCE:CREATE $blue
    } -body {
        ted notifier bind ::rel <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rel <Entity> delete {NB1 BLUE SHIA}}
        {::rel <Entity> delete {NB1 SHIA BLUE}}
        {::rel <Entity> delete {PLAYBOX BLUE BLUE}}
        {::rel <Entity> delete {PLAYBOX BLUE USAID}}
        {::rel <Entity> delete {PLAYBOX USAID BLUE}}
    }


    #-------------------------------------------------------------------
    # GROUP:FORCE:DELETE

    test DELETE-1.1 {required parms} -body {
        ted order -reject GROUP:FORCE:DELETE {}
    } -result {
        g {required value}
    }
    
    test DELETE-1.2 {unknown g} -body {
        ted order -reject GROUP:FORCE:DELETE g NONESUCH
    } -result {
        g {Invalid force group, none are defined}
    }

    test DELETE-2.1 {Group is deleted} -setup {
        ted order GROUP:FORCE:CREATE $blue
    } -body {
        ted order GROUP:FORCE:DELETE g BLUE
        frcgroup names
    } -cleanup {
        cleanup
    } -result {}

    test DELETE-2.2 {<Entity> delete} -setup {
        ted order GROUP:FORCE:CREATE $blue
    } -body {
        ted notifier bind ::frcgroup <Entity>
        ted order GROUP:FORCE:DELETE g BLUE
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::frcgroup <Entity> delete BLUE}
    }

    test DELETE-2.3 {Relationships are deleted} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order GROUP:CIVILIAN:CREATE $shia
        ted order GROUP:NBHOOD:CREATE $nb1shia
        ted order GROUP:ORGANIZATION:CREATE $usaid
        ted order GROUP:FORCE:CREATE $blue
    } -body {
        ted notifier bind ::rel <Entity>
        ted order GROUP:FORCE:DELETE g BLUE
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rel <Entity> delete {NB1 BLUE SHIA}}
        {::rel <Entity> delete {NB1 SHIA BLUE}}
        {::rel <Entity> delete {PLAYBOX BLUE BLUE}}
        {::rel <Entity> delete {PLAYBOX BLUE USAID}}
        {::rel <Entity> delete {PLAYBOX USAID BLUE}}
    }



    test DELETE-3.1 {Undo recreates group} -setup {
        ted order GROUP:FORCE:CREATE $blue
        ted order GROUP:FORCE:DELETE g BLUE
    } -body {
        cif undo
        set parms [join [dict keys $blue] ","]
        ted query "SELECT $parms FROM frcgroups_view"
    } -cleanup {
        cleanup
    } -result {
g    longname color   forcetype local coalition 
---- -------- ------- --------- ----- --------- 
BLUE US Army  #0000ff REGULAR   0     1         
    }


    test DELETE-3.2 {Relationships are restored} -setup {
        ted order NBHOOD:CREATE $nb1
        ted order GROUP:CIVILIAN:CREATE $shia
        ted order GROUP:NBHOOD:CREATE $nb1shia
        ted order GROUP:ORGANIZATION:CREATE $usaid
        ted order GROUP:FORCE:CREATE $blue
        ted order GROUP:FORCE:DELETE g BLUE
    } -body {
        ted notifier bind ::rel <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rel <Entity> create {NB1 BLUE SHIA}}
        {::rel <Entity> create {NB1 SHIA BLUE}}
        {::rel <Entity> create {PLAYBOX BLUE BLUE}}
        {::rel <Entity> create {PLAYBOX BLUE USAID}}
        {::rel <Entity> create {PLAYBOX USAID BLUE}}
        {::rel <Entity> update {NB1 BLUE SHIA}}
        {::rel <Entity> update {NB1 SHIA BLUE}}
        {::rel <Entity> update {PLAYBOX BLUE BLUE}}
        {::rel <Entity> update {PLAYBOX BLUE USAID}}
        {::rel <Entity> update {PLAYBOX USAID BLUE}}
    }


    #-------------------------------------------------------------------
    # GROUP:FORCE:UPDATE

    test UPDATE-1.1 {required parms} -body {
        ted order -reject GROUP:FORCE:UPDATE {}
    } -result {
        g {required value}
    }
    
    test UPDATE-1.2 {Duplicate longname} -setup {
        ted order GROUP:FORCE:CREATE $blue
        ted order GROUP:FORCE:CREATE $brit
    } -body {
        ted order -reject GROUP:FORCE:UPDATE g BLUE longname "British Forces"
    } -cleanup {
        cleanup
    } -result {
        longname {An entity with this name already exists}
    }

    test UPDATE-1.3 {longname duplicates some g} -setup {
        ted order GROUP:FORCE:CREATE $blue
        ted order GROUP:FORCE:CREATE $brit
    } -body {
        ted order -reject GROUP:FORCE:UPDATE g BLUE longname BRIT
    } -cleanup {
        cleanup
    } -result {
        longname {An entity with this ID already exists}
    }

    test UPDATE-1.4 {invalid color} -setup {
        ted order GROUP:FORCE:CREATE $blue
    } -body {
        ted order -reject GROUP:FORCE:UPDATE g BLUE color NONESUCH
    } -cleanup {
        cleanup
    } -result {
        color {Invalid hexadecimal color specifier, should be "#RRGGBB"}
    }

    test UPDATE-1.5 {invalid forcetype} -setup {
        ted order GROUP:FORCE:CREATE $blue
    } -body {
        ted order -reject GROUP:FORCE:UPDATE g BLUE forcetype NONESUCH
    } -cleanup {
        cleanup
    } -result {
        forcetype {invalid value, "NONESUCH"}
    }

    test UPDATE-1.6 {invalid local} -setup {
        ted order GROUP:FORCE:CREATE $blue
    } -body {
        ted order -reject GROUP:FORCE:UPDATE g BLUE local NONESUCH
    } -cleanup {
        cleanup
    } -result {
        local {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }

    test UPDATE-1.7 {invalid coalition} -setup {
        ted order GROUP:FORCE:CREATE $blue
    } -body {
        ted order -reject GROUP:FORCE:UPDATE g BLUE coalition NONESUCH
    } -cleanup {
        cleanup
    } -result {
        coalition {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }


    test UPDATE-2.1 {frcgroup is updated} -setup {
        ted order GROUP:FORCE:CREATE $blue
    } -body {
        ted order GROUP:FORCE:UPDATE {
            g            BLUE
            longname     "Blue Angels"
            color        "#ff0000"
            forcetype    POLICE
            local        yes
            coalition    no
        }

        set parms [join [dict keys $blue] ","]
        ted query "SELECT $parms FROM frcgroups_view"
    } -cleanup {
        cleanup
    } -result {
g    longname    color   forcetype local coalition 
---- ----------- ------- --------- ----- --------- 
BLUE Blue Angels #ff0000 POLICE    1     0         
    }

    test UPDATE-2.2 {<Entity> update} -setup {
        ted order GROUP:FORCE:CREATE $blue
    } -body {
        ted notifier bind ::frcgroup <Entity>
        ted order GROUP:FORCE:UPDATE g BLUE longname "Blue Angels"
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::frcgroup <Entity> update BLUE}
    }

    test UPDATE-2.3 {identical values are OK} -setup {
        ted order GROUP:FORCE:CREATE $blue
    } -body {
        ted order GROUP:FORCE:UPDATE $blue 

        set parms [join [dict keys $blue] ","]
        ted query "SELECT $parms FROM frcgroups_view"
    } -cleanup {
        cleanup
    } -result {
g    longname color   forcetype local coalition 
---- -------- ------- --------- ----- --------- 
BLUE US Army  #0000ff REGULAR   0     1         
    }

    test UPDATE-3.1 {undo undoes the change} -setup {
        ted order GROUP:FORCE:CREATE $blue
        ted order GROUP:FORCE:UPDATE {
            g            BLUE
            longname     "Blue Angels"
            color        "#ff0000"
            forcetype    POLICE
            local        yes
            coalition    no
        }
    } -body {
        cif undo
        set parms [join [dict keys $blue] ","]
        ted query "SELECT $parms FROM frcgroups_view"
    } -cleanup {
        cleanup
    } -result {
g    longname color   forcetype local coalition 
---- -------- ------- --------- ----- --------- 
BLUE US Army  #0000ff REGULAR   0     1         
    }

    #-------------------------------------------------------------------
    # GROUP:FORCE:UPDATE:MULTI

    test UPDATE:MULTI-1.1 {required parms} -body {
        ted order -reject GROUP:FORCE:UPDATE:MULTI {}
    } -result {
        ids {required value}
    }
    

    test UPDATE:MULTI-1.2 {invalid ids, no groups} -body {
        ted order -reject GROUP:FORCE:UPDATE:MULTI ids NONESUCH
    } -result {
        ids {Invalid force group, none are defined}
    }


    test UPDATE:MULTI-1.3 {invalid ids, groups} -setup {
        ted order GROUP:FORCE:CREATE $blue
    } -body {
        ted order -reject GROUP:FORCE:UPDATE:MULTI ids NONESUCH
    } -cleanup {
        cleanup
    } -result {
        ids {Invalid force group, should be one of: BLUE}
    }


    test UPDATE:MULTI-1.4 {invalid color} -setup {
        ted order GROUP:FORCE:CREATE $blue
    } -body {
        ted order -reject GROUP:FORCE:UPDATE:MULTI ids BLUE color NONESUCH
    } -cleanup {
        cleanup
    } -result {
        color {Invalid hexadecimal color specifier, should be "#RRGGBB"}
    }


    test UPDATE:MULTI-1.5 {invalid forcetype} -setup {
        ted order GROUP:FORCE:CREATE $blue
    } -body {
        ted order -reject GROUP:FORCE:UPDATE:MULTI ids BLUE forcetype NONESUCH
    } -cleanup {
        cleanup
    } -result {
        forcetype {invalid value, "NONESUCH"}
    }


    test UPDATE:MULTI-1.6 {invalid local} -setup {
        ted order GROUP:FORCE:CREATE $blue
    } -body {
        ted order -reject GROUP:FORCE:UPDATE:MULTI ids BLUE local NONESUCH
    } -cleanup {
        cleanup
    } -result {
        local {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }

    test UPDATE:MULTI-1.7 {invalid coalition} -setup {
        ted order GROUP:FORCE:CREATE $blue
    } -body {
        ted order -reject GROUP:FORCE:UPDATE:MULTI ids BLUE coalition NONESUCH
    } -cleanup {
        cleanup
    } -result {
        coalition {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }


    test UPDATE:MULTI-2.1 {one group of several is updated} -setup {
        ted order GROUP:FORCE:CREATE $blue
        ted order GROUP:FORCE:CREATE $brit
    } -body {
        ted order GROUP:FORCE:UPDATE:MULTI {
            ids       BLUE 
            color     "#ff0000"
            forcetype POLICE
            local     yes
            coalition no
        }

        ted query "SELECT * FROM frcgroups_view"
    } -cleanup {
        cleanup
    } -result {
g    longname       color   gtype forcetype local coalition 
---- -------------- ------- ----- --------- ----- --------- 
BLUE US Army        #ff0000 FRC   POLICE    1     0         
BRIT British Forces #00ffff FRC   REGULAR   0     1         
    }


    test UPDATE:MULTI-2.2 {several groups are updated} -setup {
        ted order GROUP:FORCE:CREATE $blue
        ted order GROUP:FORCE:CREATE $brit
    } -body {
        ted order GROUP:FORCE:UPDATE:MULTI {
            ids       {BLUE BRIT}
            color     "#ff0000"
            forcetype POLICE
            local     yes
            coalition no
        }

        ted query "SELECT * FROM frcgroups_view"
    } -cleanup {
        cleanup
    } -result {
g    longname       color   gtype forcetype local coalition 
---- -------------- ------- ----- --------- ----- --------- 
BLUE US Army        #ff0000 FRC   POLICE    1     0         
BRIT British Forces #ff0000 FRC   POLICE    1     0         
    }


    test UPDATE:MULTI-2.3 {<Entity> update} -setup {
        ted order GROUP:FORCE:CREATE $blue
        ted order GROUP:FORCE:CREATE $brit
    } -body {
        ted notifier bind ::frcgroup <Entity>
        ted order GROUP:FORCE:UPDATE:MULTI ids {BLUE BRIT} color "#ff0000"
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::frcgroup <Entity> update BLUE}
        {::frcgroup <Entity> update BRIT}
    }


    test UPDATE:MULTI-3.1 {undo undoes the change} -setup {
        ted order GROUP:FORCE:CREATE $blue
        ted order GROUP:FORCE:CREATE $brit
        ted order GROUP:FORCE:UPDATE:MULTI {
            ids       {BLUE BRIT}
            color     "#ff0000"
            forcetype POLICE
            local     yes
            coalition no
        }
    } -body {
        cif undo -test
        ted query "SELECT * FROM frcgroups_view"
    } -cleanup {
        cleanup
    } -result {
g    longname       color   gtype forcetype local coalition 
---- -------------- ------- ----- --------- ----- --------- 
BLUE US Army        #0000ff FRC   REGULAR   0     1         
BRIT British Forces #00ffff FRC   REGULAR   0     1         
    }

    test UPDATE:MULTI-3.2 {undo sends update} -setup {
        ted order GROUP:FORCE:CREATE $blue
        ted order GROUP:FORCE:CREATE $brit
        ted order GROUP:FORCE:UPDATE:MULTI {
            ids       {BLUE BRIT}
            color     "#ff0000"
        }
    } -body {
        ted notifier bind ::frcgroup <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::frcgroup <Entity> update BLUE}
        {::frcgroup <Entity> update BRIT}
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





