# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-tactic_maintain.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    tactic_maintain(sim) tests.
#
#    This test suite tests the tactic::MAINTAIN ensemble.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        variable T1
        variable coffer
        ted create JOE BOB NB1 NB2 SHIA SUNN KURD BLUE

        rdb eval {
            INSERT INTO plants_shares(n, a, num, rho)
            VALUES('NB1', 'JOE', 1, 0.9);
        }

        plant start
        cash load

        set coffer [coffer new JOE]

        set B1 [ted addblock JOE]
        set T1 [ted addtactic $B1 MAINTAIN]
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        variable coffer
        $coffer destroy
        ted cleanup
    }

       


    #-------------------------------------------------------------------
    # constructor
    
    test constructor-1.1 {default state} -setup {
        setup
    } -body {
        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        amount     0.0
        execstatus NONE
        faildict   {}
        id         *
        level      100.0
        mode       ALL
        nlist      {_type NBHOODS _rule {}}
        parent     ::bean::block*
        percent    0.0
        state      normal
    }

    test constructor-1.2 {can set options} -setup {
        setup
    } -body {
        set T1 [tactic::MAINTAIN new -parent DUMMY]
        $T1 get parent
    } -cleanup {
        cleanup
    } -result {DUMMY}

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative, default state} -setup {
        setup
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Spend all remaining cash-on-hand to maintain at least 100.0% of the total production capacity of the infrastructure owned in nbhood ???.}

    test narrative-1.2 {narrative, three groups} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Spend all remaining cash-on-hand to maintain at least 100.0% of the total production capacity of the infrastructure owned in these neighborhoods (NB1, NB2).}

    test narrative-1.3 {narrative, mode EXACT} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set mode EXACT
        $T1 set amount 10000
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Spend exactly $10,000 of cash-on-hand, but not more than is required to maintain at least 100.0% of the total production capacity of the infrastructure owned in these neighborhoods (NB1, NB2).}

    test narrative-1.4 {narrative, mode PERCENT} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set mode PERCENT
        $T1 set percent 10
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Spend 10.0% of cash-on-hand, but not more than is required to maintain at least 100.0% of the total production capacity of the infrastructure owned in these neighborhoods (NB1, NB2).}

    test narrative-1.5 {narrative, mode UPTO} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set mode UPTO
        $T1 set amount 20000
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Spend up to $20,000 of cash-on-hand, but not more than is required to maintain at least 100.0% of the total production capacity of the infrastructure owned in these neighborhoods (NB1, NB2).}

    test narrative-1.6 {narrative, mode EXCESS} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set mode EXCESS
        $T1 set amount 50000
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Spend anything in excess of $50,000 of cash-on-hand, but not more than is required to maintain at least 100.0% of the total production capacity of the infrastructure owned in these neighborhoods (NB1, NB2).}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {Initial state fails}  -setup {
        setup
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {nlist {No rule specified}}

    test check-1.2 {check: n in nlist no longer exist} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        rdb eval {DELETE FROM nbhoods WHERE n='NB2'}
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {nlist {Invalid neighborhood, should be one of: NB1}}

    #-------------------------------------------------------------------
    # obligate

    test obligate-1.1 {mode ALL} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 0.0}

    test obligate-1.2 {mode EXACT, enough money} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set mode EXACT
        $T1 set amount 5000.0
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 5000.0}

    test obligate-1.3 {mode EXACT, not enough money} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set mode EXACT
        $T1 set amount 50000.0
    } -body {
        $T1 obligate $coffer
        $T1 faildict
    } -cleanup {
        cleanup
    } -result {CASH {Required $50,000, but had only $10,000.}}

    test obligate-1.4 {mode PERCENT} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set mode PERCENT
        $T1 set percent 10
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 9000.0}

    test obligate-1.5 {mode UPTO, under cash on hand} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set mode UPTO
        $T1 set amount 1000.0
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 9000.0}

    test obligate-1.6 {mode UPTO, over cash on hand} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set mode UPTO
        $T1 set amount 50000.0
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 0.0}

    test obligate-1.7 {mode EXCESS, under cash on hand} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set mode EXCESS
        $T1 set amount 1000.0
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 1000.0}

    test obligate-1.8 {mode EXCESS, over cash on hand} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set mode EXCESS
        $T1 set amount 50000.0
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 10000.0}

    #-------------------------------------------------------------------
    # execute

    test execute-1.1 {execute: succeeds} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 obligate $coffer
    } -body {
        $T1 execute
        ted query {SELECT * FROM working_cash}
    } -cleanup {
        cleanup
    } -result {
a   cash_reserve income  cash_on_hand gifts 
--- ------------ ------- ------------ ----- 
JOE 200000.0     10000.0 0.0          0.0   
BOB 150000.0     5000.0  5000.0       0.0   
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





