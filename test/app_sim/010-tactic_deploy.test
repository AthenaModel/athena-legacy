# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-tactic_deploy.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    tactic_deploy(sim) tests.
#
#    This test suite tests the tactic_deploy(sim) class.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        variable T1
        variable coffer
        ted create JOE BOB NB1 NB2 BLUE BRIT SHIA SUNN KURD
        cash load
        personnel start
        personnel load
        set coffer [coffer new JOE]


        set B1 [ted addblock JOE]
        set T1 [ted addtactic $B1 DEPLOY]
    }

    # Clean up after a test

    proc cleanup {} {
        variable coffer
        $coffer destroy
        ted cleanup
    }

    #-------------------------------------------------------------------
    # Constructor

    test constructor-1.1 {default state} -setup {
        setup
    } -body {
        ted pdict [$T1 getdict]
    } -cleanup {
        cleanup
    } -match glob -result {
        id         *
        execstatus NONE
        state      invalid
        reinforce  0
        mode       ALL
        last_tick  {}
        nlist      {}
        personnel  0
        block      ::bean::block*
        g          {}
    }

    

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative, default state} -setup {
        setup
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Deploy all of group ???'s remaining personnel into neighborhood ???.}

    test narrative-1.2 {all, one nbhood} -setup {
        setup
        $T1 set g BLUE
        $T1 set nlist NB1
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Deploy all of group BLUE's remaining personnel into neighborhood NB1.}

    test narrative-1.3 {all, two nbhoods} -setup {
        setup
        $T1 set g BLUE
        $T1 set nlist {NB1 NB2}
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Deploy all of group BLUE's remaining personnel into neighborhoods NB1, NB2.}

    test narrative-1.4 {some, no reinforcements} -setup {
        setup
        $T1 set g BLUE
        $T1 set nlist NB1
        $T1 set mode SOME
        $T1 set personnel 100
        $T1 set reinforce 0
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Deploy 100 of group BLUE's remaining personnel into neighborhood NB1 without reinforcement.}

    test narrative-1.5 {some, reinforcements} -setup {
        setup
        $T1 set g BLUE
        $T1 set nlist NB1
        $T1 set mode SOME
        $T1 set personnel 100
        $T1 set reinforce 1
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Deploy 100 of group BLUE's remaining personnel into neighborhood NB1 with reinforcement.}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {Initial state fails} -setup {
        setup
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {g {No group selected.} nlist {No neighborhood(s) specified.}}

    test check-1.2 {g doesn't exist or is owned by another actor} -setup {
        setup
    } -body {
        $T1 set g NONESUCH
        $T1 set nlist NB1
        $T1 check
    } -cleanup {
        cleanup
    } -result {g {Force/organization group "NONESUCH" is not owned by JOE.}}

    test check-1.3 {unknown neighborhoods} -setup {
        setup
    } -body {
        $T1 set g BLUE
        $T1 set nlist {NONESUCH NONESUCH2}
        $T1 check
    } -cleanup {
        cleanup
    } -result {nlist {Non-existent neighborhood(s): NONESUCH, NONESUCH2}}

    test check-1.4 {Success} -setup {
        setup
    } -body {
        $T1 set g BLUE
        $T1 set personnel 100
        $T1 set nlist NB1
        $T1 check
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # obligate

    # obligate-1.*: Failures

    test obligate-1.1 {mode ALL, no troops available} -setup {
        setup
        $T1 set g BLUE
        $T1 set nlist NB1
        $T1 set mode ALL
        $coffer demobilize BLUE [$coffer troops BLUE undeployed]
    } -body {
        set before [$coffer getdict]
        set flag [$T1 obligate $coffer]
        set after [$coffer getdict]

        list $flag [expr {$before eq $after}]
    } -cleanup {
        cleanup
    } -result {0 1}

    test obligate-1.2 {mode ALL, no cash to pay troops} -setup {
        setup
        ted order FRCGROUP:UPDATE g BLUE cost 100
        $T1 set g BLUE
        $T1 set nlist NB1
        $T1 set mode ALL
        $coffer spend [$coffer cash]
    } -body {
        set before [$coffer getdict]
        set flag [$T1 obligate $coffer]
        set after [$coffer getdict]

        list $flag [expr {$before eq $after}]
    } -cleanup {
        cleanup
    } -result {0 1}

    test obligate-1.3 {mode SOME, insufficient troops} -setup {
        setup
        set available [$coffer troops BLUE undeployed]
        $T1 set g BLUE
        $T1 set nlist NB1
        $T1 set mode SOME
        $T1 set personnel [expr {$available + 10}]
        $T1 set reinforce 1
    } -body {
        set before [$coffer getdict]
        set flag [$T1 obligate $coffer]
        set after [$coffer getdict]

        list $flag [expr {$before eq $after}]
    } -cleanup {
        cleanup
    } -result {0 1}

    test obligate-1.4 {mode SOME, insufficient cash} -setup {
        setup
        ted order FRCGROUP:UPDATE g BLUE cost 1
        $coffer spend [$coffer cash]
        $coffer withdraw 99

        $T1 set g BLUE
        $T1 set nlist NB1
        $T1 set mode SOME
        $T1 set personnel 100
        $T1 set reinforce 1
    } -body {
        # Has $99, needs $100
        set before [$coffer getdict]
        set flag [$T1 obligate $coffer]
        set after [$coffer getdict]

        list $flag [expr {$before eq $after}]
    } -cleanup {
        cleanup
    } -result {0 1}


    # obligate-2.*: success

    test obligate-2.1 {mode ALL, cost is 0} -setup {
        setup
        $T1 set g BLUE
        $T1 set nlist NB1
        $T1 set mode ALL
    } -body {
        set a [$coffer troops BLUE undeployed]
        set b [$coffer troops BLUE NB1]
        set c [$T1 obligate $coffer]
        set d [$coffer troops BLUE undeployed]
        set e [$coffer troops BLUE NB1]

        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {5000 0 1 0 5000}

    test obligate-2.2 {mode ALL, can afford all troops} -setup {
        setup
        ted order FRCGROUP:UPDATE g BLUE cost 1
        $T1 set g BLUE
        $T1 set nlist NB1
        $T1 set mode ALL
    } -body {
        set a [$coffer cash]
        set b [$coffer troops BLUE undeployed]
        set c [$coffer troops BLUE NB1]
        set d [$T1 obligate $coffer]
        set e [$coffer troops BLUE undeployed]
        set f [$coffer troops BLUE NB1]
        set g [$coffer cash]

        list $a $b $c $d $e $f $g
    } -cleanup {
        cleanup
    } -result {10000.0 5000 0 1 0 5000 5000.0}

    test obligate-2.3 {mode ALL, can afford some troops} -setup {
        setup
        ted order FRCGROUP:UPDATE g BLUE cost 4
        $T1 set g BLUE
        $T1 set nlist NB1
        $T1 set mode ALL
    } -body {
        set a [$coffer cash]
        set b [$coffer troops BLUE undeployed]
        set c [$coffer troops BLUE NB1]
        set d [$T1 obligate $coffer]
        set e [$coffer troops BLUE undeployed]
        set f [$coffer troops BLUE NB1]
        set g [$coffer cash]

        list $a $b $c $d $e $f $g
    } -cleanup {
        cleanup
    } -result {10000.0 5000 0 1 2500 2500 0.0}

    test obligate-2.4 {mode ALL, deploy to multiple nbhoods} -setup {
        setup
        $T1 set g BLUE
        $T1 set nlist {NB1 NB2}
        $T1 set mode ALL
    } -body {
        set a [$coffer troops BLUE undeployed]
        set b [$T1 obligate $coffer]
        set c [$coffer troops BLUE undeployed]
        set d [$coffer troops BLUE NB1]
        set e [$coffer troops BLUE NB2]

        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {5000 1 0 2500 2500}


    test obligate-2.5 {mode SOME, reinforcing, new deployment} -setup {
        setup
        $T1 set g BLUE
        $T1 set nlist NB1
        $T1 set mode SOME
        $T1 set personnel 100
        $T1 set reinforce 1
    } -body {
        set a [$coffer troops BLUE undeployed]
        set b [$coffer troops BLUE NB1]
        set c [$T1 obligate $coffer]
        set d [$coffer troops BLUE undeployed]
        set e [$coffer troops BLUE NB1]

        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {5000 0 1 4900 100}

    test obligate-2.6 {mode SOME, reinforcing, old deployment} -setup {
        setup
        $T1 set g BLUE
        $T1 set nlist NB1
        $T1 set mode SOME
        $T1 set personnel 100
        $T1 set reinforce 1
        $T1 set last_tick [simclock now -1]

        set id [$T1 id]
        rdb eval { 
            INSERT INTO working_deploy_tng(tactic_id, g, n, personnel)
            VALUES($id, 'BLUE', 'NB1', 50)
        }
    } -body {
        set a [$coffer troops BLUE undeployed]
        set b [$coffer troops BLUE NB1]
        set c [$T1 obligate $coffer]
        set d [$coffer troops BLUE undeployed]
        set e [$coffer troops BLUE NB1]

        # Old deployment is ignored
        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {5000 0 1 4900 100}

    test obligate-2.7 {mode SOME, reinforcing, multiple nbhoods} -setup {
        setup
        $T1 set g BLUE
        $T1 set nlist {NB1 NB2}
        $T1 set mode SOME
        $T1 set personnel 100
        $T1 set reinforce 1
    } -body {
        set a [$coffer troops BLUE undeployed]
        set b [$T1 obligate $coffer]
        set c [$coffer troops BLUE undeployed]
        set d [$coffer troops BLUE NB1]
        set e [$coffer troops BLUE NB2]

        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {5000 1 4900 50 50}

    test obligate-2.8 {mode SOME, not reinforcing, new deployment} -setup {
        setup
        $T1 set g BLUE
        $T1 set nlist {NB1 NB2}
        $T1 set mode SOME
        $T1 set personnel 100
        $T1 set reinforce 0
    } -body {
        set a [$coffer troops BLUE undeployed]
        set b [$T1 obligate $coffer]
        set c [$coffer troops BLUE undeployed]
        set d [$coffer troops BLUE NB1]
        set e [$coffer troops BLUE NB2]

        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {5000 1 4900 50 50}

    test obligate-2.9 {mode SOME, not reinforcing, old deployment} -setup {
        setup
        $T1 set g BLUE
        $T1 set nlist {NB1 NB2}
        $T1 set mode SOME
        $T1 set personnel 100
        $T1 set reinforce 0
        $T1 set last_tick [simclock now -1]

        set id [$T1 id]
        rdb eval { 
            INSERT INTO working_deploy_tng(tactic_id, g, n, personnel)
            VALUES($id, 'BLUE', 'NB1', 40);
            INSERT INTO working_deploy_tng(tactic_id, g, n, personnel)
            VALUES($id, 'BLUE', 'NB2', 30)
        }
    } -body {
        set a [$coffer troops BLUE undeployed]
        set b [$T1 obligate $coffer]
        set c [$coffer troops BLUE undeployed]
        set d [$coffer troops BLUE NB1]
        set e [$coffer troops BLUE NB2]

        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {5000 1 4930 40 30}

    test obligate-3.1 {on lock: mode ALL, insufficient cash} -setup {
        setup
        $T1 set g BLUE
        $T1 set nlist NB1
        $T1 set mode ALL

        ted order FRCGROUP:UPDATE g BLUE cost 1
        $coffer spend [$coffer cash]
        $coffer withdraw 99

        strategy locking 1
    } -body {
        set a [$coffer troops BLUE undeployed]
        set b [$T1 obligate $coffer]
        set c [$coffer troops BLUE undeployed]
        set d [$coffer troops BLUE NB1]
        set e [$coffer cash]

        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {5000 1 0 5000 0.0}

    test obligate-3.2 {on lock: mode ALL, no personnel} -setup {
        setup
        $T1 set g BLUE
        $T1 set nlist NB1
        $T1 set mode ALL

        $coffer demobilize BLUE [$coffer troops BLUE undeployed]

        strategy locking 1
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer troops BLUE undeployed]

        list $a $b
    } -cleanup {
        cleanup
    } -result {1 0}

    test obligate-3.3 {on lock: mode SOME, insufficient cash} -setup {
        setup
        $T1 set g BLUE
        $T1 set nlist NB1
        $T1 set mode SOME
        $T1 set personnel 100
        $T1 set reinforce 0

        ted order FRCGROUP:UPDATE g BLUE cost 1
        $coffer spend [$coffer cash]
        $coffer withdraw 99

        strategy locking 1
    } -body {
        set a [$coffer troops BLUE undeployed]
        set b [$T1 obligate $coffer]
        set c [$coffer troops BLUE undeployed]
        set d [$coffer troops BLUE NB1]
        set e [$coffer cash]

        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {5000 1 4900 100 0.0}

    test obligate-3.3 {on lock: mode SOME, insufficient personnel} -setup {
        setup
        $T1 set g BLUE
        $T1 set nlist NB1
        $T1 set mode SOME
        $T1 set personnel 5001
        $T1 set reinforce 0

        strategy locking 1
    } -body {
        set a [$coffer troops BLUE undeployed]
        set b [$T1 obligate $coffer]
        set c [$coffer troops BLUE undeployed]
        set d [$coffer troops BLUE NB1]

        list $a $b $c $d
    } -cleanup {
        cleanup
    } -result {5000 1 0 5001}



    #-------------------------------------------------------------------
    # execute

    test execute-1.1 {deploys troops} -setup {
        setup
        $T1 set g BLUE
        $T1 set mode ALL
        $T1 set nlist {NB1 NB2}
        $T1 obligate $coffer
    } -body {
        $T1 execute
        ted query {SELECT * FROM deploy_tng}
    } -cleanup {
        cleanup
    } -match glob -result {
tactic_id n   g    personnel 
--------- --- ---- --------- 
*         NB1 BLUE 2500      
*         NB2 BLUE 2500      
    }

    test execute-1.2 {expends cash} -setup {
        setup
        ted order FRCGROUP:UPDATE g BLUE cost 1
        $T1 set g BLUE
        $T1 set mode ALL
        $T1 set nlist {NB1 NB2}
        $T1 obligate $coffer
    } -body {
        $T1 execute
        rdb onecolumn {SELECT cash_on_hand FROM working_cash WHERE a='JOE'}
    } -cleanup {
        cleanup
    } -result {5000.0}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::









