# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-tactic_deploy.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    tactic_deploy(sim) tests.
#
#    This test suite tests the tactic::DEPLOY ensemble.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        ted create JOE BOB NB1 NB2 BLUE BRIT

        # Verify that unused columns contain NULL
        rdb nullvalue "@"
    }

    proc execute_setup {} {
        setup
        personnel start
        personnel load
        cash load
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        rdb nullvalue ""
        array unset parms
        ted cleanup
    }

    set T1 {
        tactic_type DEPLOY
        owner       JOE
        priority    top
        nlist       NB1
        g           BLUE
        text1       SOME
        int1        100
        reinforce   1
        on_lock     NO
    }

    set T2 {
        tactic_type DEPLOY
        owner       JOE
        priority    top
        nlist       {NB1 NB2}
        g           BLUE
        text1       SOME
        int1        101
        reinforce   0
        on_lock     NO
    }

    set T3 {
        tactic_type DEPLOY
        owner       JOE
        priority    top
        nlist       NB1
        g           BLUE
        text1       ALL
        int1        ""
        reinforce   1
        on_lock     NO
    }

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative: one nbhood, SOME} -setup {
        setup
        tactic mutate create $T1
    } -body {
        tactic::DEPLOY narrative [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Deploy 100 of group BLUE's personnel into neighborhood NB1 with reinforcement.}

    test narrative-1.2 {narrative: two nbhoods, SOME} -setup {
        setup
        tactic mutate create $T2
    } -body {
        tactic::DEPLOY narrative [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Deploy 101 of group BLUE's personnel into neighborhoods NB1, NB2 without reinforcement.}

    test narrative-1.3 {narrative: one nbhood, ALL} -setup {
        setup
        tactic mutate create $T3
    } -body {
        tactic::DEPLOY narrative [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Deploy all of group BLUE's remaining personnel into neighborhood NB1.}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {check: n in nlist no longer exists} -setup {
        setup
        tactic mutate create $T2
        rdb eval {DELETE FROM nbhoods WHERE n='NB2'}
    } -body {
        tactic::DEPLOY check [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Neighborhood NB2 no longer exists.}

    test check-1.2 {check: g no longer exists} -setup {
        setup
        tactic mutate create $T1
        rdb eval {DELETE FROM frcgroups WHERE g='BLUE'}
    } -body {
        tactic::DEPLOY check [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Force/organization group BLUE no longer exists.}

    test check-1.3 {check: g no longer owned by owner} -setup {
        setup
        tactic mutate create $T1
        rdb eval {UPDATE frcgroups SET a=NULL}
    } -body {
        tactic::DEPLOY check [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Force/organization group BLUE is no longer owned by actor JOE.}

    test check-1.4 {check: multiple failures} -setup {
        setup
        tactic mutate create $T2
        rdb eval {UPDATE frcgroups SET a=NULL}
        rdb eval {DELETE FROM nbhoods WHERE n='NB2'}
    } -body {
        tactic::DEPLOY check [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Neighborhood NB2 no longer exists.  Force/organization group BLUE is no longer owned by actor JOE.}

    #-------------------------------------------------------------------
    # dollars

    test dollars-1.1 {dollars, cost=0, SOME} -setup {
        setup
        tactic mutate create $T1
    } -body {
        tactic::DEPLOY dollars [tactic get 1]
    } -cleanup {
        cleanup
    } -result {0.00}

    test dollars-1.2 {dollars, cost=1, SOME} -setup {
        setup
        tactic mutate create $T1
        rdb eval {
            UPDATE groups SET cost=1.0;
        }
    } -body {
        tactic::DEPLOY dollars [tactic get 1]
    } -cleanup {
        cleanup
    } -result {100.00}

    test dollars-1.3 {dollars, cost=0, ALL} -setup {
        setup
        tactic mutate create $T3
    } -body {
        tactic::DEPLOY dollars [tactic get 1]
    } -cleanup {
        cleanup
    } -result {0.00}

    test dollars-1.4 {dollars, cost=1, ALL} -setup {
        setup
        tactic mutate create $T3
        rdb eval {
            UPDATE groups SET cost=1.0;
        }
    } -body {
        tactic::DEPLOY dollars [tactic get 1]
    } -cleanup {
        cleanup
    } -result {?}

    #-------------------------------------------------------------------
    # execute

    test execute-1.1 {execute: SOME, insufficient troops, no exec} -setup {
        execute_setup
        rdb eval {UPDATE working_personnel SET available=0}
        tactic mutate create $T1
    } -body {
        tactic::DEPLOY execute [tactic get 1]
    } -cleanup {
        cleanup
    } -result {0}

    test execute-1.2 {execute: SOME, insufficent troops, no change} -setup {
        execute_setup
        rdb eval {UPDATE working_personnel SET available=0}
        tactic mutate create $T1
    } -body {
        tactic::DEPLOY execute [tactic get 1]
        ted query {SELECT * FROM working_deployment}
    } -cleanup {
        cleanup
    } -result {
n   g    personnel unassigned 
--- ---- --------- ---------- 
NB1 BLUE 0         0          
NB1 BRIT 0         0          
NB2 BLUE 0         0          
NB2 BRIT 0         0          
    }

    test execute-1.3 {execute: SOME, insufficent funds} -setup {
        execute_setup
        rdb eval {UPDATE groups SET cost=1000000.0}
        tactic mutate create $T1
    } -body {
        tactic::DEPLOY execute [tactic get 1]
    } -cleanup {
        cleanup
    } -result {0}

    test execute-1.4 {execute: 1 on success} -setup {
        execute_setup
        tactic mutate create $T1
    } -body {
        tactic::DEPLOY execute [tactic get 1]
    } -cleanup {
        cleanup
    } -result {1}

    test execute-1.5 {execute: SOME, 1 nbhood} -setup {
        execute_setup
        tactic mutate create $T1
    } -body {
        tactic::DEPLOY execute [tactic get 1]
        ted query {SELECT * FROM working_deployment}
    } -cleanup {
        cleanup
    } -result {
n   g    personnel unassigned 
--- ---- --------- ---------- 
NB1 BLUE 100       100        
NB1 BRIT 0         0          
NB2 BLUE 0         0          
NB2 BRIT 0         0          
    }

    test execute-1.6 {execute: SOME, 2 nbhoods} -setup {
        execute_setup
        tactic mutate create $T2
    } -body {
        tactic::DEPLOY execute [tactic get 1]
        ted query {SELECT * FROM working_deployment}
    } -cleanup {
        cleanup
    } -result {
n   g    personnel unassigned 
--- ---- --------- ---------- 
NB1 BLUE 51        51         
NB1 BRIT 0         0          
NB2 BLUE 50        50         
NB2 BRIT 0         0          
    }

    test execute-1.7 {execute: deduct cost from cash_on_hand} -setup {
        execute_setup
        tactic mutate create $T1
        rdb eval {
            UPDATE groups SET cost=1.0;
            UPDATE working_cash SET cash_on_hand=1000.0;
        }

    } -body {
        tactic::DEPLOY execute [tactic get 1]
        cash get JOE cash_on_hand
    } -cleanup {
        cleanup
    } -result {900.0}

    test execute-1.8 {execute: ALL, available = 0} -setup {
        execute_setup
        tactic mutate create $T3
        rdb eval { UPDATE working_personnel SET available=0 }
    } -body {
        tactic::DEPLOY execute [tactic get 1]
    } -cleanup {
        cleanup
    } -result {0}

    test execute-1.9 {execute: ALL, cost = 0} -setup {
        execute_setup
        tactic mutate create $T3
    } -body {
        tactic::DEPLOY execute [tactic get 1]
        ted query {SELECT * FROM working_deployment}
    } -cleanup {
        cleanup
    } -result {
n   g    personnel unassigned 
--- ---- --------- ---------- 
NB1 BLUE 5000      5000       
NB1 BRIT 0         0          
NB2 BLUE 0         0          
NB2 BRIT 0         0          
    }

    test execute-1.10 {execute: ALL, cost = 1, sufficient cash} -setup {
        execute_setup
        tactic mutate create $T3
        rdb eval {
            UPDATE groups SET cost=1.0;
            UPDATE working_cash SET cash_on_hand=6000.0;
        }
    } -body {
        tactic::DEPLOY execute [tactic get 1]
        ted query {SELECT * FROM working_deployment}
    } -cleanup {
        cleanup
    } -result {
n   g    personnel unassigned 
--- ---- --------- ---------- 
NB1 BLUE 5000      5000       
NB1 BRIT 0         0          
NB2 BLUE 0         0          
NB2 BRIT 0         0          
    }

    test execute-1.11 {execute: ALL, cost = 1, insufficient cash} -setup {
        execute_setup
        tactic mutate create $T3
        rdb eval {
            UPDATE groups SET cost=1.0;
            UPDATE working_cash SET cash_on_hand=2500.0;
        }
    } -body {
        tactic::DEPLOY execute [tactic get 1]
        ted query {SELECT * FROM working_deployment}
    } -cleanup {
        cleanup
    } -result {
n   g    personnel unassigned 
--- ---- --------- ---------- 
NB1 BLUE 2500      2500       
NB1 BRIT 0         0          
NB2 BLUE 0         0          
NB2 BRIT 0         0          
    }

    test execute-1.12 {execute: populate deploy_tng} -setup {
        execute_setup
        tactic mutate create $T2
    } -body {
        tactic::DEPLOY execute [tactic get 1]
        ted query {SELECT * FROM deploy_tng}
    } -cleanup {
        cleanup
    } -result {
tactic_id n   g    personnel 
--------- --- ---- --------- 
1         NB1 BLUE 51        
1         NB2 BLUE 50        
    }

    test execute-1.13 {execute: retain previous when not reinforcing} -setup {
        rdb eval {
            INSERT INTO deploy_tng(tactic_id, n, g, personnel)
            VALUES(1, 'NB1', 'BLUE', 25);

            INSERT INTO deploy_tng(tactic_id, n, g, personnel)
            VALUES(1, 'NB2', 'BLUE', 20);
        }
        execute_setup
        tactic mutate create $T2
    } -body {
        tactic::DEPLOY execute [tactic get 1]
        ted query {SELECT * FROM deploy_tng}
    } -cleanup {
        cleanup
    } -result {
tactic_id n   g    personnel 
--------- --- ---- --------- 
1         NB1 BLUE 25        
1         NB2 BLUE 20        
    }

    test execute-1.14 {execute: ignore previous when reinforcing} -setup {
        rdb eval {
            INSERT INTO deploy_tng(tactic_id, n, g, personnel)
            VALUES(1, 'NB1', 'BLUE', 25);

            INSERT INTO deploy_tng(tactic_id, n, g, personnel)
            VALUES(1, 'NB2', 'BLUE', 20);
        }
        execute_setup
        tactic mutate create [dict merge $T2 {reinforce 1}]
    } -body {
        tactic::DEPLOY execute [tactic get 1]
        ted query {SELECT * FROM deploy_tng}
    } -cleanup {
        cleanup
    } -result {
tactic_id n   g    personnel 
--------- --- ---- --------- 
1         NB1 BLUE 51        
1         NB2 BLUE 50        
    }



    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





