# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-GOAL.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) GOAL:* order tests.
#
#    This test suite tests the GOAL:* orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE BOB NB1 NB2 BLUE BRIT ALQ
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Standard items

    set J1 {
        owner       JOE
        narrative   "Joe's First Goal"
    }

    set B1 {
        owner       BOB
        narrative   "Bob's First Goal"
    }

    #-------------------------------------------------------------------
    # GOAL:CREATE

    test CREATE-1.1 {required parms} -body {
        ted order -reject GOAL:CREATE {}
    } -result {
        owner {required value}
        narrative {required value}
    }

    
    test CREATE-1.2 {owner is unknown} -setup {
        setup
    } -body {
        ted order -reject GOAL:CREATE \
            [dict merge $J1 [list owner NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        owner {Invalid actor, should be one of: JOE, BOB}
    }

    test CREATE-1.3 {narrative is empty} -setup {
        setup
    } -body {
        ted order -reject GOAL:CREATE \
            [dict merge $J1 [list narrative ""]]
    } -cleanup {
        cleanup
    } -result {
        narrative {required value}
    }

    test CREATE-2.1 {goal is created} -setup {
        setup
    } -body {
        ted order GOAL:CREATE $J1

        ted query {SELECT * FROM goals}
    } -cleanup {
        cleanup
    } -result {
goal_id owner narrative        state  flag 
------- ----- ---------------- ------ ---- 
1       JOE   Joe's First Goal normal      
    }


    test CREATE-2.2 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <goals>
        ted order GOAL:CREATE $J1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <goals> update 1}
    }


    test CREATE-3.1 {undo effects} -setup {
        setup
        ted order GOAL:CREATE $J1
    } -body {
        ted notifier bind ::rdb <goals>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <goals> delete 1}
    }


    #-------------------------------------------------------------------
    # GOAL:DELETE

    test DELETE-1.1 {required parms} -body {
        ted order -reject GOAL:DELETE {}
    } -result {
        goal_id {required value}
    }

    
    test DELETE-1.2 {unknown goal_id} -body {
        ted order -reject GOAL:DELETE goal_id NONESUCH
    } -result {
        goal_id {Invalid goal ID: "NONESUCH"}
    }


    test DELETE-2.1 {Effects} -setup {
        setup
        ted order GOAL:CREATE $J1
    } -body {
        ted notifier bind ::rdb <goals>
        ted order GOAL:DELETE goal_id 1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <goals> delete 1}
    }


    test DELETE-3.1 {Undo effects} -setup {
        setup
        ted order GOAL:CREATE $J1
        ted order GOAL:DELETE goal_id 1
    } -body {
        ted notifier bind ::rdb <goals>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <goals> update 1}
    }


    #-------------------------------------------------------------------
    # GOAL:UPDATE

    test UPDATE-1.1 {required parms} -body {
        ted order -reject GOAL:UPDATE {}
    } -result {
        goal_id {required value}
        narrative {required value}
    }

    
    test UPDATE-1.2 {goal_id is unknown} -setup {
        setup
        ted order GOAL:CREATE $J1
    } -body {
        ted order -reject GOAL:UPDATE goal_id NONESUCH narrative FOO
    } -cleanup {
        cleanup
    } -result {
        goal_id {Invalid goal ID: "NONESUCH"}
    }

    test UPDATE-1.3 {narrative is missing} -setup {
        setup
        ted order GOAL:CREATE $J1
    } -body {
        ted order -reject GOAL:UPDATE goal_id 1 narrative ""
    } -cleanup {
        cleanup
    } -result {
        narrative {required value}
    }

    test UPDATE-2.1 {goal is updated} -setup {
        setup
        ted order GOAL:CREATE $J1
    } -body {
        ted order GOAL:UPDATE goal_id 1 narrative "New Narrative"

        ted query {SELECT * FROM goals}
    } -cleanup {
        cleanup
    } -result {
goal_id owner narrative     state  flag 
------- ----- ------------- ------ ---- 
1       JOE   New Narrative normal      
    }


    test UPDATE-2.2 {Effects} -setup {
        setup
        ted order GOAL:CREATE $J1
    } -body {
        ted notifier bind ::rdb <goals>
        ted order GOAL:UPDATE goal_id 1 narrative "New Narrative"
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <goals> update 1}
    }


    test UPDATE-3.1 {undo effects} -setup {
        setup
        ted order GOAL:CREATE $J1
        ted order GOAL:UPDATE goal_id 1 narrative "New Narrative"
    } -body {
        ted notifier bind ::rdb <goals>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <goals> update 1}
    }

    #-------------------------------------------------------------------
    # GOAL:STATE

    test STATE-1.1 {required parms} -body {
        ted order -reject GOAL:STATE {}
    } -result {
        goal_id {required value}
        state {required value}
    }

    
    test STATE-1.2 {unknown goal_id} -body {
        ted order -reject GOAL:STATE goal_id NONESUCH state disabled
    } -result {
        goal_id {Invalid goal ID: "NONESUCH"}
    }


    test STATE-2.1 {Effects} -setup {
        setup
        ted order GOAL:CREATE $J1
    } -body {
        ted notifier bind ::rdb <goals>
        ted order GOAL:STATE goal_id 1 state disabled
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <goals> update 1}
    }


    test STATE-3.1 {Undo effects} -setup {
        setup
        ted order GOAL:CREATE $J1
        ted order GOAL:STATE goal_id 1 state disabled
    } -body {
        ted notifier bind ::rdb <goals>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <goals> update 1}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





