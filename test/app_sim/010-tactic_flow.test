# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-tactic_flow.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    tactic_flow(sim) tests.
#
#    This test suite tests the tactic::FLOW ensemble.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        ted create JOE BOB NB1 NB2 SHIA SUNN KURD BLUE

        # Verify that unused columns contain NULL
        rdb nullvalue "@"
    }

    proc execute_setup {} {
        setup
        # TBD
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        rdb nullvalue ""
        array unset parms
        ted cleanup
    }

    set T1 {
        tactic_type FLOW
        owner       SYSTEM
        priority    top
        f           SHIA
        g           KURD
        text1       ALL
        int1        ""
        x1          ""
        once        YES
    }

    set T2 {
        tactic_type FLOW
        owner       SYSTEM
        priority    top
        f           SHIA
        g           KURD
        text1       NUMBER
        int1        500
        x1          ""
        once        YES
    }

    set T3 {
        tactic_type FLOW
        owner       SYSTEM
        priority    top
        f           SHIA
        g           KURD
        text1       RATE
        int1        ""
        x1          5.0
        once        NO
    }

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative: ALL} -setup {
        setup
        tactic mutate create $T1
    } -body {
        tactic::FLOW narrative [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Flow all remaining members of SHIA into KURD.}

    test narrative-1.2 {narrative: By NUMBER} -setup {
        setup
        tactic mutate create $T2
    } -body {
        tactic::FLOW narrative [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Flow 500 members of SHIA into KURD.}

    test narrative-1.3 {narrative: By RATE} -setup {
        setup
        tactic mutate create $T3
    } -body {
        tactic::FLOW narrative [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Flow population from SHIA to KURD at a rate of 5.0%/year.}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {check: f no longer exists} -setup {
        setup
        tactic mutate create $T1
        rdb eval {DELETE FROM civgroups WHERE g='SHIA'}
    } -body {
        tactic::FLOW check [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Civilian group SHIA no longer exists.}

    test check-1.2 {check: g no longer exists} -setup {
        setup
        tactic mutate create $T1
        rdb eval {DELETE FROM civgroups WHERE g='KURD'}
    } -body {
        tactic::FLOW check [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Civilian group KURD no longer exists.}

    test check-1.3 {check: multiple failures} -setup {
        setup
        tactic mutate create $T1
        rdb eval {DELETE FROM civgroups}
    } -body {
        tactic::FLOW check [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Civilian group SHIA no longer exists.  Civilian group KURD no longer exists.}

    #-------------------------------------------------------------------
    # dollars

    test dollars-1.1 {dollars is n/a} -setup {
        setup
        tactic mutate create $T1
    } -body {
        tactic::FLOW dollars [tactic get 1]
    } -cleanup {
        cleanup
    } -result {n/a}

    #-------------------------------------------------------------------
    # execute

    test execute-1.1 {execute: SOME, insufficient troops, no exec} -setup {
        execute_setup
        rdb eval {UPDATE working_personnel SET available=0}
        tactic mutate create $T1
    } -body {
        tactic::FLOW execute [tactic get 1]
    } -cleanup {
        cleanup
    } -result {0} -constraints tbd


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





