# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-tactic_flow.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    tactic_flow(sim) tests.
#
#    This test suite tests the tactic_flow(sim) class.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        variable T1
        variable coffer
        ted create JOE BOB NB1 NB2 BLUE TAL SHIA SUNN KURD
        set B1 [ted addblock SYSTEM]
        set T1 [ted addtactic $B1 FLOW]

        set coffer [coffer new SYSTEM]
    }

    # Clean up after a test

    proc cleanup {} {
        variable coffer
        $coffer destroy
        ted cleanup
    }

    #-------------------------------------------------------------------
    # Constructor

    test constructor-1.1 {default state} -setup {
        setup
    } -body {
        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match glob -result {
        execstatus NONE
        f          {}
        g          {}
        id         *
        mode       ALL
        parent     ::bean::block*
        percent    0
        personnel  0
        state      invalid
    }

    test constructor-1.2 {can set options} -setup {
        setup
    } -body {
        set T1 [tactic::FLOW new -parent DUMMY]
        $T1 get parent
    } -cleanup {
        cleanup
    } -result {DUMMY}
    

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative, default state} -setup {
        setup
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Flow all remaining members of ??? into ???.}

    test narrative-1.2 {mode is ALL} -setup {
        setup
        $T1 configure -f SHIA -g KURD -mode ALL
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Flow all remaining members of SHIA into KURD.}

    test narrative-1.3 {mode is RATE} -setup {
        setup
        $T1 configure -f SHIA -g KURD -mode RATE -percent 5
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Flow population from SHIA to KURD at a rate of 5.0%/year.}

    test narrative-1.4 {mode is UPTO} -setup {
        setup
        $T1 configure -f SHIA -g KURD -mode UPTO -personnel 1000
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Flow up to 1000 members of SHIA into KURD.}

    test narrative-1.5 {mode is ALLBUT} -setup {
        setup
        $T1 configure -f SHIA -g KURD -mode ALLBUT -personnel 1000
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Flow all but 1000 members of SHIA into KURD.}


    #-------------------------------------------------------------------
    # check

    test check-1.1 {Initial state fails} -setup {
        setup
    } -body {
        ted pdicts [$T1 check]
    } -cleanup {
        cleanup
    } -match dict -result {
        f {No group selected.}
        g {No group selected.}
    }

    test check-1.2 {f not a civilian group} -setup {
        setup
    } -body {
        $T1 configure -f NONESUCH -g KURD
        ted pdicts [$T1 check]
    } -cleanup {
        cleanup
    } -match dict -result {
        f {No civilian group named "NONESUCH".}
    }

    test check-1.3 {g not a civilian group} -setup {
        setup
    } -body {
        $T1 configure -f SHIA -g NONESUCH
        ted pdicts [$T1 check]
    } -cleanup {
        cleanup
    } -result {
        g {No civilian group named "NONESUCH".}
    }

    test check-2.1 {Success} -setup {
        setup
    } -body {
        $T1 configure -f SHIA -g KURD
        $T1 check
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # obligate

    test obligate-1.1 {always succeeds} -setup {
        setup
    } -body {
        $T1 configure -f SHIA -g KURD -mode ALL
        $T1 obligate $coffer
    } -cleanup {
        cleanup
    } -result {1}

    #-------------------------------------------------------------------
    # execute
    #
    # Because this tactic never fails due to insufficient resources,
    # we determine the number of civilians to move in execute.  Thus,
    # we need to test each of the modes.

    test execute-1.1 {ALL} -setup {
        setup
        $T1 configure -f SHIA -g KURD -mode ALL
        $T1 check
        ted lock
    } -body {
        $T1 execute

        tactic::FLOW pending
    } -cleanup {
        cleanup
    } -result {SHIA KURD 1000}

    test execute-2.1 {RATE} -setup {
        setup
        $T1 configure -f SHIA -g KURD -mode RATE -percent 100.0
        $T1 check
        ted lock
    } -body {
        $T1 execute

        tactic::FLOW pending
    } -cleanup {
        cleanup
    } -result {SHIA KURD 19.230769230769234}

    test execute-3.1 {UPTO, personnel available} -setup {
        setup
        $T1 configure -f SHIA -g KURD -mode UPTO -personnel 400
        $T1 check
        ted lock
    } -body {
        $T1 execute

        tactic::FLOW pending
    } -cleanup {
        cleanup
    } -result {SHIA KURD 400}

    test execute-3.2 {UPTO, not enough personnel available} -setup {
        setup
        $T1 configure -f SHIA -g KURD -mode UPTO -personnel 1400
        $T1 check
        ted lock
    } -body {
        $T1 execute

        tactic::FLOW pending
    } -cleanup {
        cleanup
    } -result {SHIA KURD 1000}

    test execute-4.1 {ALLBUT, personnel available} -setup {
        setup
        $T1 configure -f SHIA -g KURD -mode ALLBUT -personnel 400
        $T1 check
        ted lock
    } -body {
        $T1 execute

        tactic::FLOW pending
    } -cleanup {
        cleanup
    } -result {SHIA KURD 600}

    test execute-4.2 {ALLBUT, no personnel available} -setup {
        setup
        $T1 configure -f SHIA -g KURD -mode ALLBUT -personnel 1400
        $T1 check
        ted lock
    } -body {
        $T1 execute

        tactic::FLOW pending
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # TBD: should really test [tactic::FLOW save] and [tactic::FLOW reset]
    

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::








