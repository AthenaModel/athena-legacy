# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-conditionx_mood.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    conditionx_mood(sim) tests.
#
#    This test suite tests the conditionx_mood(sim) class.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        variable C1
        ted create JOE BOB NB1 NB2 BLUE BRIT SHIA SUNN KURD
        set C1 [conditionx::MOOD new]
    }

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative, initial state} -setup {
        setup
    } -body {
        $C1 narrative
    } -cleanup {
        cleanup
    } -result {Group ???'s mood is equal to 0.00}

    test narrative-1.2 {narrative, with group} -setup {
        setup
        $C1 set g SHIA
    } -body {
        $C1 narrative
    } -cleanup {
        cleanup
    } -result {Group SHIA's mood is equal to 0.00}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {check: no group} -setup {
        setup
    } -body {
        $C1 check
    } -cleanup {
        cleanup
    } -result {g {Group "" does not exist}}

    test check-1.2 {check: successful} -setup {
        setup
        $C1 set g SHIA
    } -body {
        $C1 check
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # eval

    proc EvalCase {cond comp limit} {
        $cond set comp $comp
        $cond set limit $limit
        return [$cond eval]
    }

    test eval-1.1 {Test eval} -setup {
        setup
        $C1 set g SHIA
        aram init
    } -body {
        # SHIA's mood is initially 0.0
        set a [EvalCase $C1 EQ 0.0]
        set b [EvalCase $C1 LT 0.0]
        set c [EvalCase $C1 LE 0.0]
        set d [EvalCase $C1 GT 0.0]
        set e [EvalCase $C1 GE 0.0]

        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {1 0 1 0 1}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







