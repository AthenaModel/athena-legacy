# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-DEFROE.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) TACTIC:DEFROE:* order tests.
#
#    This test suite tests the DEFROE tactic's orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE BOB NB1 NB2 BLUE BRIT ALQ
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Standard items

    set D1 {
        owner       JOE
        priority    bottom
        n           NB1
        g           BLUE
        text1       HOLD_FIRE
        on_lock     NO
    }

    #-------------------------------------------------------------------
    # TACTIC:DEFROE:CREATE

    test DEFROE:CREATE-1.1 {required parms} -body {
        ted order -reject TACTIC:DEFROE:CREATE {}
    } -result {
        owner {required value}
        g {required value}
        n {required value}
        text1 {required value}
        on_lock {required value}
    }

    
    test DEFROE:CREATE-1.2 {owner is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEFROE:CREATE \
            [dict merge $D1 [list owner NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        owner {Invalid actor, should be one of: JOE, BOB}
    }

    test DEFROE:CREATE-1.3 {g is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEFROE:CREATE \
            [dict merge $D1 [list g NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        g {Invalid force group, should be one of: BLUE, BRIT, ALQ}
    }

    test DEFROE:CREATE-1.4 {g is not owned by owner} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEFROE:CREATE \
            [dict merge $D1 [list g ALQ]]
    } -cleanup {
        cleanup
    } -result {
        g {Group ALQ is not owned by actor JOE.}
    }

    test DEFROE:CREATE-1.5 {g is not a uniformed group} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEFROE:CREATE \
            [dict merge $D1 [list owner BOB g ALQ]]
    } -cleanup {
        cleanup
    } -result {
        g {Group ALQ is not a uniformed force group.}
    }

    test DEFROE:CREATE-1.6 {n is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEFROE:CREATE \
            [dict merge $D1 [list n NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        n {Invalid neighborhood, should be one of: NB1, NB2}
    }

    test DEFROE:CREATE-1.7 {text1 is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEFROE:CREATE \
            [dict merge $D1 [list text1 NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        text1 {invalid value "NONESUCH", should be one of: HOLD_FIRE, FIRE_BACK_IF_PRESSED, FIRE_BACK_IMMEDIATELY}
    }

    test DEFROE:CREATE-1.8 {priority is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEFROE:CREATE [dict merge $D1 {
            priority NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        priority {invalid value "nonesuch", should be one of: top, bottom}
    }

    test DEFROE:CREATE-2.1 {tactic is created} -setup {
        setup
    } -body {
        ted order TACTIC:DEFROE:CREATE $D1

        ted query {SELECT * FROM tactics_DEFROE}
    } -cleanup {
        cleanup
    } -result {
tactic_id tactic_type owner narrative                                    priority state  exec_ts exec_flag n   g    text1     on_lock 
--------- ----------- ----- -------------------------------------------- -------- ------ ------- --------- --- ---- --------- ------- 
1         DEFROE      JOE   Group BLUE defends in NB1 with ROE HOLD_FIRE 1        normal         0         NB1 BLUE HOLD_FIRE NO      
    }


    test DEFROE:CREATE-2.2 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:DEFROE:CREATE $D1
        ted notifier received

        # NOTE: Two updates, because of priority setting.
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
        {::rdb <tactics> update 1}
    }


    test DEFROE:CREATE-3.1 {undo effects} -setup {
        setup
        ted order TACTIC:DEFROE:CREATE $D1
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> delete 1}
    }

    #-------------------------------------------------------------------
    # TACTIC:DEFROE:UPDATE

    proc setup_update_defend {} {
        variable D1
        setup
        ted order TACTIC:DEFROE:CREATE $D1
    }

    test DEFROE:UPDATE-1.1 {required parms} -body {
        ted order -reject TACTIC:DEFROE:UPDATE {}
    } -result {
        tactic_id {required value}
        text1 {required value}
    }

    
    test DEFROE:UPDATE-1.2 {tactic_id is unknown} -setup {
        setup_update_defend
    } -body {
        ted order -reject TACTIC:DEFROE:UPDATE \
            tactic_id NONESUCH text1 HOLD_FIRE
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Invalid tactic ID: "NONESUCH"}
    }

    test DEFROE:UPDATE-1.3 {text1 is invalid} -setup {
        setup_update_defend
    } -body {
        ted order -reject TACTIC:DEFROE:UPDATE tactic_id 1 text1 NONESUCH
    } -cleanup {
        cleanup
    } -result {
        text1 {invalid value "NONESUCH", should be one of: HOLD_FIRE, FIRE_BACK_IF_PRESSED, FIRE_BACK_IMMEDIATELY}
    }

    test DEFROE:UPDATE-1.4 {wrong flavor of tactic} -setup {
        setup_update_defend
        rdb eval {UPDATE tactics SET tactic_type='BOGUS'}
    } -body {
        ted order -reject TACTIC:DEFROE:UPDATE tactic_id 1 text1 HOLD_FIRE
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Tactic 1 is not a DEFROE tactic}
    }

    test DEFROE:UPDATE-2.1 {activities are updated} -setup {
        setup_update_defend
    } -body {
        ted order TACTIC:DEFROE:UPDATE \
            tactic_id 1 text1 FIRE_BACK_IMMEDIATELY

        ted query {SELECT * FROM tactics_DEFROE}
    } -cleanup {
        cleanup
    } -result {
tactic_id tactic_type owner narrative                                                priority state  exec_ts exec_flag n   g    text1                 on_lock 
--------- ----------- ----- -------------------------------------------------------- -------- ------ ------- --------- --- ---- --------------------- ------- 
1         DEFROE      JOE   Group BLUE defends in NB1 with ROE FIRE_BACK_IMMEDIATELY 1        normal         0         NB1 BLUE FIRE_BACK_IMMEDIATELY NO      
    }


    test DEFROE:UPDATE-2.2 {Effects} -setup {
        setup_update_defend
    } -body {
        ted notifier bind ::rdb <tactics>
        ted order TACTIC:DEFROE:UPDATE tactic_id 1 text1 FIRE_BACK_IMMEDIATELY
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
        {::rdb <tactics> update 1}
    }


    test DEFROE:UPDATE-3.1 {undo effects} -setup {
        setup_update_defend
        ted order TACTIC:DEFROE:UPDATE tactic_id 1 text1 FIRE_BACK_IMMEDIATELY
    } -body {
        ted notifier bind ::rdb <tactics>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <tactics> update 1}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





