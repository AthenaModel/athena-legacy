# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-DEFROE.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    TACTIC:DEFROE:* Orders tests
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        ted create NB1 JOE BLUE ALQ SHIA
        variable S1
        variable B1
        variable T1
        set S1 [strategy getname JOE]
        ted order STRATEGY:BLOCK:ADD agent JOE
        lassign [$S1 blocks] B1
        ted order BLOCK:TACTIC:ADD block_id [$B1 id] typename DEFROE
        lassign [$B1 tactics] T1
    }

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # TACTIC:DEFROE

    test TACTIC:DEFROE-1.1 {required parameters} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEFROE
    } -cleanup {
        cleanup
    } -result {
        tactic_id {required value}
    }

    test TACTIC:DEFROE-1.2 {unknown tactic_id} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEFROE tactic_id NONESUCH
    } -cleanup {
        cleanup
    } -match glob -result {
        tactic_id {Invalid DEFROE ID: "NONESUCH"}
    }

    test TACTIC:DEFROE-1.3 {invalid g} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEFROE tactic_id [$T1 id] g "NONE SUCH"
    } -cleanup {
        cleanup
    } -result {
        g {Identifiers begin with a letter and contain only letters and digits.}
    }

    test TACTIC:DEFROE-1.4 {invalid n} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEFROE tactic_id [$T1 id] n "NONE SUCH"
    } -cleanup {
        cleanup
    } -result {
        n {Identifiers begin with a letter and contain only letters and digits.}
    }

    test TACTIC:DEFROE-1.4 {invalid roe} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEFROE tactic_id [$T1 id] roe NONESUCH
    } -cleanup {
        cleanup
    } -result {
        roe {invalid value "NONESUCH", should be one of: HOLD_FIRE, FIRE_BACK_IF_PRESSED, FIRE_BACK_IMMEDIATELY}
    }

    test TACTIC:DEFROE-2.1 {tactic updated} -setup {
        setup
    } -body {
        ted order TACTIC:DEFROE \
            tactic_id [$T1 id]         \
            g         BLUE             \
            n         NB1              \
            roe       HOLD_FIRE

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        execstatus NONE
        g          BLUE
        id         *
        n          NB1
        parent     ::bean::block*
        roe        HOLD_FIRE
        state      normal
    }

    test TACTIC:DEFROE-2.2 {notifier event} -setup {
        setup
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        ted order TACTIC:DEFROE tactic_id [$T1 id] g BLUE
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}

    test TACTIC:DEFROE-2.3 {undo notifier event} -setup {
        setup
        ted order TACTIC:DEFROE tactic_id [$T1 id] g BLUE
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}
 

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







