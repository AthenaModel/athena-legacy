# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-tactic_GRANT.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    tactic_GRANT(sim) tests.
#
#    This test suite tests the tactic::GRANT ensemble.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        ted create JOE BOB DAVE BRIAN CBS NBC ABC CNN FOX PBS

        # Verify that unused columns contain NULL
        rdb nullvalue "@"
    }

    proc execute_setup {} {
        setup
        cap access load
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        rdb nullvalue ""
        array unset cap::access
        ted cleanup
    }

    set T1 {
        tactic_type GRANT
        owner       JOE
        priority    top
        klist       CBS
        alist       DAVE
        on_lock     NO
    }

    set T2 {
        tactic_type GRANT
        owner       BOB
        priority    top
        klist       CNN
        alist       {DAVE BRIAN}
        on_lock     NO
    }

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative, one CAP, one Actor} -setup {
        setup
        tactic mutate create $T1
    } -body {
        tactic::GRANT narrative [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Grant actor DAVE access to CAP CBS.}

    test narrative-1.2 {narrative, two CAPs, one Actor} -setup {
        setup
        tactic mutate create [dict merge $T1 {klist {CBS NBC}}]
    } -body {
        tactic::GRANT narrative [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Grant actor DAVE access to CAPs CBS and NBC.}

    test narrative-1.3 {narrative, three CAPs, one Actor} -setup {
        setup
        tactic mutate create [dict merge $T1 {klist {CBS NBC ABC}}]
    } -body {
        tactic::GRANT narrative [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Grant actor DAVE access to CAPs CBS, NBC and ABC.}

    test narrative-1.4 {narrative, one CAP, two Actors} -setup {
        setup
        tactic mutate create [dict merge $T1 {alist {DAVE BRIAN}}]
    } -body {
        tactic::GRANT narrative [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Grant actors DAVE and BRIAN access to CAP CBS.}

    test narrative-1.5 {narrative, one CAP, three Actors} -setup {
        setup
        tactic mutate create [dict merge $T1 {alist {DAVE BRIAN BOB}}]
    } -body {
        tactic::GRANT narrative [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Grant actors DAVE, BRIAN and BOB access to CAP CBS.}


    #-------------------------------------------------------------------
    # check

    test check-1.1 {check: cap no longer exists} -setup {
        setup
        tactic mutate create $T1
        rdb eval {DELETE FROM caps}
    } -body {
        tactic::GRANT check [tactic get 1]
    } -cleanup {
        cleanup
    } -result {CAP CBS no longer exists.}

    test check-1.2 {check: a no longer exists} -setup {
        setup
        # Cannot just delete actors; too much stuff goes with them.
        tactic mutate create [dict merge $T1 {alist NONESUCH}]
    } -body {
        tactic::GRANT check [tactic get 1]
    } -cleanup {
        cleanup
    } -result {Actor NONESUCH no longer exists.}

    test check-1.3 {check: multiple failures} -setup {
        setup
        tactic mutate create [dict merge $T1 {alist NONESUCH}]
        rdb eval {DELETE FROM caps}
    } -body {
        tactic::GRANT check [tactic get 1]
    } -cleanup {
        cleanup
    } -result {CAP CBS no longer exists.  Actor NONESUCH no longer exists.}

    #-------------------------------------------------------------------
    # dollars

    test dollars-1.1 {dollars} -setup {
        setup
        tactic mutate create $T1
    } -body {
        tactic::GRANT dollars [tactic get 1]
    } -cleanup {
        cleanup
    } -result {n/a}

    #-------------------------------------------------------------------
    # execute

    test execute-1.1 {execute: 1 on success} -setup {
        execute_setup
        tactic mutate create $T2
    } -body {
        tactic::GRANT execute [tactic get 1]
    } -cleanup {
        cleanup
    } -result {1}

    test execute-1.2 {execute: GRANT pending} -setup {
        execute_setup
        tactic mutate create $T2
    } -body {
        tactic::GRANT execute [tactic get 1]
        cap access save
        rdb eval {SELECT a FROM cap_access WHERE k='CNN'}
    } -cleanup {
        cleanup
    } -result {BOB BRIAN DAVE}


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





