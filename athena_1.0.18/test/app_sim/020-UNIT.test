# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-UNIT.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) UNIT:* order tests.
#
#    This test suite tests the unit-related orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Standard units

    set u1 {
        u         U1 
        g         BLUE 
        origin    NONE
        location  A01A01
        personnel 1 
        a         NONE
    }

    set u2 {
        u         U2 
        g         USAID
        origin    NONE
        location  K99K99
        personnel 1 
        a         NONE
    }

    set u3 {
        u         U3 
        g         SHIA
        origin    NB1
        location  K99K99
        personnel 1 
        a         NONE
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    #-------------------------------------------------------------------
    # UNIT:CREATE

    test CREATE-1.1 {required parms} -body {
        ted order -reject UNIT:CREATE {}
    } -result {
        g {required value}
        origin {required value}
        u {required value}
        personnel {required value}
        location {required value}
        a {required value}
    }

    
    test CREATE-1.2 {g is unknown} -body {
        ted order -reject UNIT:CREATE \
            [dict merge $u1 [list g NONESUCH]]
    } -cleanup {
        cleanup
    } -result {
        g {Invalid group, none are defined}
    }


    test CREATE-1.3 {u duplicates existing ID} -setup {
        ted create BLUE
    } -body {
        ted order -reject UNIT:CREATE [dict merge $u1 {
            u BLUE
        }]
    } -cleanup {
        cleanup
    } -result {
        u {An entity with this ID already exists}
    }


    test CREATE-1.4 {u is not an ident} -setup {
        ted create BLUE
    } -body {
        ted order -reject UNIT:CREATE [dict merge $u1 {
            u "*ME*"
        }]
    } -cleanup {
        cleanup
    } -result {
        u {Unit names begin with a letter and contain only letters, digits, - and /.}
    }


    test CREATE-1.5 {personnel is invalid} -setup {
        ted create BLUE
    } -body {
        ted order -reject UNIT:CREATE [dict merge $u1 {
            personnel -5
        }]
    } -cleanup {
        cleanup
    } -result {
        personnel {invalid value "-5", expected integer no less than 0}
    }


    test CREATE-1.6 {location is invalid} -setup {
        ted create BLUE
    } -body {
        ted order -reject UNIT:CREATE [dict merge $u1 {
            location Z99Z99
        }]
    } -cleanup {
        cleanup
    } -result {
        location {not a map reference string}
    }


    test CREATE-1.7 {a is unknown} -setup {
        ted create BLUE
    } -body {
        ted order -reject UNIT:CREATE [dict merge $u1 {
            a NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        a {Invalid activity, should be one of: NONE, CHECKPOINT, CMO_CONSTRUCTION, CMO_DEVELOPMENT, CMO_EDUCATION, CMO_EMPLOYMENT, CMO_HEALTHCARE, CMO_INDUSTRY, CMO_INFRASTRUCTURE, CMO_LAW_ENFORCEMENT, CMO_OTHER, COERCION, CRIMINAL_ACTIVITIES, CURFEW, GUARD, PATROL, PRESENCE, PSYOP, DISPLACED, IN_CAMP}
    }


    test CREATE-1.8 {a is invalid for this group type} -setup {
        ted create USAID
    } -body {
        ted order -reject UNIT:CREATE [dict merge $u2 {
            a PATROL
        }]
    } -cleanup {
        cleanup
    } -result {
        a {Invalid activity, should be one of: NONE, CMO_CONSTRUCTION, CMO_EDUCATION, CMO_EMPLOYMENT, CMO_HEALTHCARE, CMO_INDUSTRY, CMO_INFRASTRUCTURE, CMO_OTHER}
    }


    test CREATE-1.9 {origin is unknown} -setup {
        ted create NB1 BLUE
    } -body {
        ted order -reject UNIT:CREATE [dict merge $u1 {
            origin NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        origin {Invalid unit origin, should be one of: NONE, NB1}
    }


    test CREATE-1.10 {origin is invalid for FRC} -setup {
        ted create NB1 BLUE
    } -body {
        ted order -reject UNIT:CREATE [dict merge $u1 {
            origin NB1
        }]
    } -cleanup {
        cleanup
    } -result {
        origin {Only civilian units have a neighborhood of origin}
    }


    test CREATE-1.11 {origin is invalid for ORG} -setup {
        ted create NB1 USAID
    } -body {
        ted order -reject UNIT:CREATE [dict merge $u2 {
            origin NB1
        }]
    } -cleanup {
        cleanup
    } -result {
        origin {Only civilian units have a neighborhood of origin}
    }


    test CREATE-1.12 {origin is invalid for CIV} -setup {
        ted create NB1 SHIA
    } -body {
        ted order -reject UNIT:CREATE $u3
    } -cleanup {
        cleanup
    } -result {
        origin {Group SHIA does not reside in neighborhood NB1}
    }


    test CREATE-1.13 {Insufficient population for personnel} -setup {
        ted create NB1 SHIA NB1SHIA
    } -body {
        ted order -reject UNIT:CREATE [dict merge $u3 {
            personnel 5000
        }]
    } -cleanup {
        cleanup
    } -result {
        personnel {Insufficient implicit population; check demographics.}
    }


    test CREATE-2.1 {unit is created} -setup {
        ted create NB1 BLUE USAID SHIA NB1SHIA
    } -body {
        ted order UNIT:CREATE $u1
        ted order UNIT:CREATE $u2
        ted order UNIT:CREATE $u3

        ted query {SELECT * FROM units}
    } -cleanup {
        cleanup
    } -result {
u  g     origin personnel location a    gtype n a_effective 
-- ----- ------ --------- -------- ---- ----- - ----------- 
U1 BLUE  NONE   1         1 1      NONE FRC     0           
U2 USAID NONE   1         999 999  NONE ORG     0           
U3 SHIA  NB1    1         999 999  NONE CIV     0           
    }


    test CREATE-2.2 {Effects} -setup {
        ted create BLUE
    } -body {
        ted notifier bind ::unit <Entity>
        ted order UNIT:CREATE $u1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::unit <Entity> create U1}
    }


    test CREATE-3.1 {undo effects} -setup {
        ted create BLUE
        ted order UNIT:CREATE $u1
    } -body {
        ted notifier bind ::unit <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::unit <Entity> delete U1}
    }


    #-------------------------------------------------------------------
    # UNIT:DELETE

    test DELETE-1.1 {required parms} -body {
        ted order -reject UNIT:DELETE {}
    } -result {
        u {required value}
    }

    
    test DELETE-1.2 {unknown u} -body {
        ted order -reject UNIT:DELETE u NONESUCH
    } -result {
        u {Invalid unit name: "NONESUCH"}
    }


    test DELETE-2.1 {Effects} -setup {
        ted create BLUE
        ted order UNIT:CREATE $u1
    } -body {
        ted notifier bind ::unit <Entity>
        ted order UNIT:DELETE u U1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::unit <Entity> delete U1}
    }


    test DELETE-3.1 {Undo effects} -setup {
        ted create BLUE
        ted order UNIT:CREATE $u1
        ted order UNIT:DELETE u U1
    } -body {
        ted notifier bind ::unit <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::unit <Entity> create U1}
    }


    #-------------------------------------------------------------------
    # UNIT:MOVE

    test MOVE-1.1 {required parms} -body {
        ted order -reject UNIT:MOVE {}
    } -result {
        u {required value}
        location {required value}
    }
    
    test MOVE-1.2 {invalid unit} -body {
        ted order -reject UNIT:MOVE u U1 location A00A00
    } -cleanup {
        cleanup
    } -result {
        u {Invalid unit name: "U1"}
    }


    test MOVE-1.3 {invalid location} -setup {
        ted create BLUE
        ted order UNIT:CREATE $u1
    } -body {
        ted order -reject UNIT:MOVE u U1 location NONESUCH
    } -cleanup {
        cleanup
    } -result {
        location {not a map reference string}
    }


    test MOVE-2.1 {unit is moved} -setup {
        ted create NB1 BLUE
        ted order UNIT:CREATE $u1
    } -body {
        ted order UNIT:MOVE u U1 location B01B01

        ted query {SELECT * FROM units}
    } -cleanup {
        cleanup
    } -result {
u  g    origin personnel location a    gtype n   a_effective 
-- ---- ------ --------- -------- ---- ----- --- ----------- 
U1 BLUE NONE   1         101 101  NONE FRC   NB1 0           
    }


    test MOVE-2.2 {<Entity> update} -setup {
        ted create BLUE
        ted order UNIT:CREATE $u1
    } -body {
        ted notifier bind ::unit <Entity>
        ted order UNIT:MOVE u U1 location B01B01
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::unit <Entity> update U1}
    }


    test MOVE-3.1 {undo undoes the change} -setup {
        ted create BLUE
        ted order UNIT:CREATE $u1
        ted order UNIT:MOVE u U1 location B01B01
    } -body {
        ted notifier bind ::unit <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::unit <Entity> update U1}
    }


    #-------------------------------------------------------------------
    # UNIT:ACTIVITY

    test ACTIVITY-1.1 {required parms} -body {
        ted order -reject UNIT:ACTIVITY {}
    } -result {
        u {required value}
        a {required value}
    }
    

    test ACTIVITY-1.2 {invalid unit} -body {
        ted order -reject UNIT:ACTIVITY u U1 a PATROL
    } -cleanup {
        cleanup
    } -result {
        u {Invalid unit name: "U1"}
    }


    test ACTIVITY-1.3 {invalid a} -setup {
        ted create BLUE
        ted order UNIT:CREATE $u1
    } -body {
        ted order -reject UNIT:ACTIVITY u U1 a NONESUCH
    } -cleanup {
        cleanup
    } -result {
        a {Invalid activity, should be one of: NONE, CHECKPOINT, CMO_CONSTRUCTION, CMO_DEVELOPMENT, CMO_EDUCATION, CMO_EMPLOYMENT, CMO_HEALTHCARE, CMO_INDUSTRY, CMO_INFRASTRUCTURE, CMO_LAW_ENFORCEMENT, CMO_OTHER, COERCION, CRIMINAL_ACTIVITIES, CURFEW, GUARD, PATROL, PRESENCE, PSYOP, DISPLACED, IN_CAMP}
    }


    test ACTIVITY-1.4 {invalid a for this group type} -setup {
        ted create USAID
        ted order UNIT:CREATE $u2
    } -body {
        ted order -reject UNIT:ACTIVITY u U2 a PATROL
    } -cleanup {
        cleanup
    } -result {
        a {Invalid activity, should be one of: NONE, CMO_CONSTRUCTION, CMO_EDUCATION, CMO_EMPLOYMENT, CMO_HEALTHCARE, CMO_INDUSTRY, CMO_INFRASTRUCTURE, CMO_OTHER}
    }


    test ACTIVITY-2.1 {unit is updated} -setup {
        ted create NB1 BLUE USAID
        ted order UNIT:CREATE $u1
    } -body {
        ted order UNIT:ACTIVITY u U1 a CMO_CONSTRUCTION

        ted query {SELECT * FROM units}
    } -cleanup {
        cleanup
    } -result {
u  g    origin personnel location a                gtype n a_effective 
-- ---- ------ --------- -------- ---------------- ----- - ----------- 
U1 BLUE NONE   1         1 1      CMO_CONSTRUCTION FRC     0           
    }


    test ACTIVITY-2.2 {<Entity> update} -setup {
        ted create BLUE
        ted order UNIT:CREATE $u1
    } -body {
        ted notifier bind ::unit <Entity>
        ted order UNIT:ACTIVITY u U1 a PATROL
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::unit <Entity> update U1}
    }


    test ACTIVITY-3.1 {undo undoes the change} -setup {
        ted create BLUE USAID
        ted order UNIT:CREATE $u1
        ted order UNIT:ACTIVITY u U1 a PATROL
    } -body {
        ted notifier bind ::unit <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::unit <Entity> update U1}
    }


    #-------------------------------------------------------------------
    # UNIT:PERSONNEL

    test PERSONNEL-1.1 {required parms} -body {
        ted order -reject UNIT:PERSONNEL {}
    } -result {
        u {required value}
        personnel {required value}
    }
    

    test PERSONNEL-1.2 {invalid unit} -body {
        ted order -reject UNIT:PERSONNEL u U1 personnel 25
    } -cleanup {
        cleanup
    } -result {
        u {Invalid unit name: "U1"}
    }


    test PERSONNEL-1.3 {invalid personnel} -setup {
        ted create BLUE
        ted order UNIT:CREATE $u1
    } -body {
        ted order -reject UNIT:PERSONNEL u U1 personnel NONESUCH
    } -cleanup {
        cleanup
    } -result {
        personnel {invalid value "NONESUCH", expected integer}
    }


    test PERSONNEL-1.4 {insufficient personnel} -setup {
        ted create NB1 SHIA NB1SHIA
        ted order UNIT:CREATE $u3
    } -body {
        ted order -reject UNIT:PERSONNEL u U3 personnel 1000
    } -cleanup {
        cleanup
    } -result {
        personnel {Insufficient implicit population; check demographics.}
    }


    test PERSONNEL-2.1 {unit is updated} -setup {
        ted create BLUE
        ted order UNIT:CREATE $u1
    } -body {
        ted order UNIT:PERSONNEL {
            u         U1 
            personnel 60
        }

        ted query {SELECT u, personnel FROM units}
    } -cleanup {
        cleanup
    } -result {
u  personnel 
-- --------- 
U1 60        
    }


    test PERSONNEL-2.2 {<Entity> update} -setup {
        ted create BLUE
        ted order UNIT:CREATE $u1
    } -body {
        ted notifier bind ::unit <Entity>
        ted order UNIT:PERSONNEL u U1 personnel 60
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::unit <Entity> update U1}
    }


    test PERSONNEL-3.1 {undo undoes the change} -setup {
        ted create BLUE USAID
        ted order UNIT:CREATE $u1
        ted order UNIT:PERSONNEL {
            u         U1 
            personnel 60
        }
    } -body {
        ted notifier bind ::unit <Entity>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::unit <Entity> update U1}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





