<<manpage {mingui(n) mapcanvas(n)} "Map Canvas Widget">>

<<section SYNOPSIS>>

<pre>
package require mingui 1.0
namespace import ::mingui::*
</pre>

<<itemlist>>

<<section DESCRIPTION>>

The mapcanvas(n) widget is a Tk <<xref tk:canvas(n)>> widget adapted
for the display of asset and neighborhood polygons on top of a
map background.  In addition, all standard <<xref tk:canvas(n)>>
features are supported.<p>

<<subsection "The Map">>

The map is a single image file, defining the map background for the
entire playbox at 100% zoom.  The mapcanvas(n) has the ability to zoom
in and out on this background.<p>

<<subsection "Coordinate Systems">>

The mapcanvas(n) widget uses the following coordinate systems, and
provides numerous subcommands that convert between them.<p>

<dl>
  <dt> Window Coordinates
  <dd> Tk event bindings receive the (<i>wx,wy</i>) pixel coordinates of the
       event location within the visible area of the canvas.  The
       origin is at the upper-left corner of the canvas; values
       increase to the left and down.<p>

       The map location referenced by window coordinates varies as the
       map is panned and zoomed.<p>

  <dt> Canvas Coordinates
  <dd> The underlying Tk canvas represents locations using
       (<i>cx,cy</i>) canvas coordinates, which are measured in
       floating-point pixels.  The origin is at the upper-left corner
       of the map image; values increase to the left and down.<p>

       Note that the map location referenced by canvas coordinates
       varies as the map is zoomed in and out.<p>

  <dt> Map Coordinates
  <dd> The mapcanvas(n)-specific code represents locations using
       (<i>mx,my</i>) map coordinates.  The units and meaning of these
       coordinates depend on the map <<xref projection(i)>> in use.
       See <<xref Projections>>, below, for more details.<p>

  <dt> Map Reference Strings
  <dd> A map reference string, or "ref", is a short string that is
       equivalent to some pair of (<i>mx,my</i>) map coordinates.  Map
       refs are generally more user-friendly than numeric map
       coordinates.  See <<xref Projections>>, elow, for more details.<p>
</dl>

<<subsection "Projections">>

The mapping from map coordinates to canvas coordinates is determined
by the map projection in use.  By default mapcanvas(n) uses a
pseudo-projection called <<xref mapref(n)>>.  This projection provides
resolution-independent map coordinates and reference strings for any
map image; however, the coordinates do not carry over from one map to
another.<p>

If a properly geo-referenced map and an appropriate
map <<xref projection(i)>> are available, geographic coordinates
(e.g., lat/lon and MGRS) may be used instead.<p>

<<subsection "Neighborhoods">>

A neighborhood consists of a polygon and a reference point within it.
The mapcanvas(n) draws neighborhoods and allows their display to be
adjusted using the <<iref nbhood>> command.  In particular, Each
neighborhood's background color can be changed.<p>

Neighborhoods are drawn using standard <<xref tk:canvas(n)>> items;
however, the <<iref nbhood create>>, <<iref nbhood cget>>, and
<<iref nbhood configure>> subcommands should be used to manipulate them.<p>

<<subsection "Icons">>

Icons are graphics symbols drawn on the map which represent assets,
infrastructure, and so forth, positioned using the chosen map
coordinates.  The application defines icon types using the
<<xref mapicon(i)>> interface, and registers them with the
mapcanvas(n); then, the application can create icons of all registered
types.<p>

Icons are drawn using standard <<xref tk:canvas(n)>> items; however,
the <<iref icon create>>, <<iref icon cget>>, and <<iref icon configure>>
subcommands should be used to manipulate them.<p>

<<subsection "Interaction Modes">>

The mapcanvas(n) defines a number of user interaction modes:<p>

<dl>
  <dt> <b>null</b>
  <dd> In this mode, no interaction is possible.  This is the mode
       when no map is displayed.<p>

  <dt> <b>browse</b>
  <dd> In this mode, the user can point at icons, neighborhoods, and
       so forth, generating events to be processed by the
       application.  This is the default mode when a map is
       displayed.<p>

  <dt> <b>point</b>
  <dd> In this mode, the user can puck points, which are reported to
       the application via the <b>&lt;&lt;Point-1&gt;&gt;</b> event.<p>

  <dt> <b>poly</b>
  <dd> In this mode, the user can draw polygons on the map.  Completed
       polygons are reported to the application via the
       <b>&lt;&lt;PolyComplete&gt;&gt;</b> virtual event.  It is up to
       the application to make the new polygon permanent in some way,
       e.g., by creating a neighborhood.<p>

  <dt> <b>pan</b>
  <dd> In this mode, the user can click-and-drag to pan the map from
       side-to-side and up-and-down.<p>
</dl>

Other modes are TBD.<p>

<<section OPTIONS>>

The mapcanvas(n) widget provides the following options in addition to
the standard <<xref tk:canvas(n)>> options:<p>

<<deflist options>>

<<defopt {-map <i>image</i>}>>

Specifies the map image to display, a standard Tk <<xref tk:photo(n)>>
image.  If the map image is changed after the widget is created, the
<<iref clear>> method must be called before the change will be visible.<p>

<<defopt {-modevariable <i>varname</i>}>>

A variable name.  The mapcanvas(n) will set this variable to the name
of the current interaction mode.<p>

<<defopt {-projection <i>proj</i>}>>

Name of a <<xref projection(i)>> object.  If no projection is
specified, the mapcanvas(n) will use the <<xref mapref(n)>>
pseudo-projection.  If the projection is changed after the widget is
created, the <<iref clear>> method must be called before the change
will be visible.<p>

<<defopt {-refvariable <i>varname</i>}>>

A variable name.  As the mouse pointer moves over the mapcanvas(n),
the mapcanvas(n) will set this variable (if specified) to the map
references string of the current location.<p>

<<defopt {-snapmode <i>boolean</i>}>>

If true, then mapcanvas(n) will snap to existing points when drawing
polygons.  If false, it won't.  Defaults to true.<p>

<<defopt {-snapradius <i>radius</i>}>>

Specifies the distance in pixels within which mapcanvas(n) will snap
to existing points when drawing polygons.  Defaults to 5 pixels.<p>

<</deflist options>>

<<section COMMANDS>>

This module defines the following commands.<p>

<<deflist commands>>

<<defitem mapcanvas {mapcanvas <i>pathName ?options...?</i>}>>

Creates a new <<iref mapcanvas>> widget named <i>pathName</i>.<p>

<<defitem "mapcanvas icon" {mapcanvas icon <i>subcommand</i> ?<i>args...</i>?}>>

This subcommand is used to manage the icon types available to the mapcanvas(n).<p>

<<deflist icon commands>>

<<defitem "mapcanvas icon register" {mapcanvas icon register <i>iconType</i>}>>

Registers a <<xref mapicon(i)>> icon type for use with instances of
mapcanvas(n).<p>

<<defitem "mapcanvas icon types" {mapcanvas icon types}>>

Returns the list of registered icon type names.  Note that these are
the names used with <<iref icon create>>, <i>not</i> the
<<xref mapicon(i)>> command names.<p>

<</deflist icon commands>>

<</deflist commands>>

<<section "INSTANCE COMMAND">>

mapcanvas(n) widgets have the following subcommands, in addition to
all of the standard canvas(n) subcommands.<p>

<<deflist instance>>

<<defitem cget {<i>win</i> cget <i>option</i>}>>

Returns the value of the specified <i>option</i>.<p>

<<defitem configure {<i>win</i> configure <i>option value...</i>}>>

Sets the value of one or more of the object's options.<p>

<<defitem clear {<i>win</i> clear}>>

Deletes all icons and neighborhoods from the mapcanvas(n), and
displays the current <code>-map</code> using the current
<code>-projection</code> at 100% zoom.  If no <code>-map</code> has
been specified, the canvas will be blank and most features will be
disabled.<p>

Otherwise, if no <code>-projection</code> has been selected, a
<<xref mapref(n)>> will be used.  Finally, the interaction mode is set to
<b>browse</b>.<p>

<<defitem icon {<i>win</i> icon <i>subcommand</i> ?<i>args...</i>?}>>

This subcommand is used to create and manage icons on the map.<p>

<<deflist icon>>

<<defitem "icon create" {<i>win</i> icon create <i>icontype mappoint</i> ?<i>option value...</i>?}>>

Creates an icon of type <i>icontype</i> at point <i>mappoint</i>.  The
valid options vary by icon type.<p>

The <i>mappoint</i> may be expressed as a map reference string, or as a
pair of map coordinates.  In the latter case, the pair of coordinates can
be passed as either two separate arguments, or as a single argument, a
list of two coordinates.<p>

Returns the new icon's ID.<p>

<<defitem "icon cget" {<i>win</i> icon cget <i>id option</i>}>>

<b>Not Yet Implemented.</b>  Returns the value of the specified
<i>option</i> for the icon with ID <i>id</i>.<p>

<<defitem "icon configure" {<i>win</i> icon configure <i>id option value</i> ?<i>option value...</i>?}>>

<b>Not Yet Implemented.</b>  Sets the value of one or more of the
icon's options.<p>

<<defitem "icon moveto" {<i>win</i> icon moveto <i>id mappoint</i>}>>

Moves the icon with ID <i>id</i> to the location specified as
<i>mappoint</i>.  As with <<iref icon create>>, the <i>mappoint</i>
may be expressed as a map reference string, or as a pair of map
coordinates.  In the latter case, the pair of coordinates can 
be passed as either two separate arguments, or as a single argument, a
list of two coordinates.<p>

Note that no <b>&lt;&lt;IconMoved&gt;&gt;</b> event is generated by
this call.<p>

<<defitem "icon ref" {<i>win</i> icon ref <i>id</i>}>>

Returns a map reference string representing the location of the icon
with ID <i>id</i>.<p>

<</deflist>>

<<defitem mode {<i>win</i> mode ?<i>mode</i>?}>>

If <i>mode</i> is specified, sets the current interaction mode to
<i>mode</i>; see <<xref "Interaction Modes">>, above.  Returns the
current interaction mode.<p>

<<defitem mapbox {<i>win</i> mapbox}>>

Returns the bounding box of the map in map units.<p>

<<defitem mapdim {<i>win</i> mapdim}>>

Returns the dimensions of the map in map units.<p>

<<defitem nbhood {<i>win</i> nbhood <i>subcommand</i> ?<i>args...</i>?}>>

This subcommand is used to create and manage icons on the map.<p>

<<deflist nbhood>>

<<defitem "nbhood create" {<i>win</i> nbhood create <i>refpoint polygon</i> ?<i>option value...</i>?}>>

Creates a neighborhood with the specified <i>refpoint</i>, a map
location, and <i>polygon</i>, a list of map locations.<p>

The <i>refpoint</i> may be expressed as a map reference string, or as a
pair of map coordinates, as either one argument or two separate
arguments.  The <i>polygon</i> may be expressed as a list of map
reference strings or map coordinates, and as one argument or as
multiple arguments.<p>

Returns the new nbhood's ID.<p>

<<defitem "nbhood cget" {<i>win</i> nbhood cget <i>id option</i>}>>

<b>Not Yet Implemented.</b>  Returns the value of the specified
<i>option</i> for the neighborhood with ID <i>id</i>.<p>

<<defitem "nbhood configure" {<i>win</i> nbhood configure <i>id option value</i> ?<i>option value...</i>?}>>

<b>Not Yet Implemented.</b>  Sets the value of one or more of the
neighborhood options.<p>

<</deflist>>

<<defitem refresh {<i>win</i> refresh}>>

Completely redraws the display at the current zoom level.<p>

<<defitem see {<i>win</i> see <i>mappoint</i>}>>

Scrolls the map so that the specified location is as close to the
center as possible.  The <i>mappoint</i> may be expressed as a map
reference string, or as a pair of map coordinates.  In the latter
case, the pair of coordinates can be passed as either two separate
arguments, or as a single argument, a list of two coordinates.<p>

<<defitem zoom {<i>win</i> zoom ?<i>factor</i>?}>>

Called with no argument, queries the current zoom factor.  Otherwise,
the <i>factor</i> must be a valid zoom factor, an integer percentage,
e.g., 100 indicates a 100% zoom, i.e., full-size.<p>

If the zoom <i>factor</i> is changed, mapcanvas(n) scales the
<code>-map</code> and caches and displays the result.<p>

<<defitem c2m {<i>win</i> c2m <i>cx cy</i>}>>

Given a canvas coordinate pair <i>cx</i> and <i>cy</i>, returns a map
coordinate pair as a list of two coordinates <i>mx</i> and <i>my</i>.<p>

<<defitem c2ref {<i>win</i> c2ref <i>cx cy</i>}>>

Given a canvas coordinate pair <i>cx</i> and <i>cy</i>, returns a map
reference string.<p>

<<defitem m2c {<i>win</i> m2c <i>mx my</i>}>>

Given a map coordinate pair <i>mx</i> and <i>my</i>, returns a canvas
coordinate pair as a list of two coordinates <i>cx</i> and <i>cy</i>.<p>

<<defitem m2ref {<i>win</i> m2ref <i>mx my</i>}>>

Given a map coordinate pair <i>mx</i> and <i>my</i>, returns a
map reference string.<p>

<<defitem ref2c {<i>win</i> ref2c <i>ref</i>}>>

Given a map reference string, returns a canvas
coordinate pair as a list of two coordinates <i>cx</i> and <i>cy</i>.<p>

<<defitem ref2m {<i>win</i> ref2m <i>ref</i>}>>

Given a map reference string, returns a map
coordinate pair as a list of two coordinates <i>mx</i> and
<i>my</i>.<p>

<<defitem w2c {<i>win</i> w2c <i>wx wy</i>}>>

Given a windows coordinate pair <i>wx</i> and <i>wy</i>, returns a canvas
coordinate pair as a list of two coordinates <i>cx</i> and <i>cy</i>.<p>

<<defitem w2m {<i>win</i> w2m <i>wx wy</i>}>>

Given a window coordinate pair <i>wx</i> and <i>wy</i>, returns a map
coordinate pair as a list of two coordinates <i>mx</i> and <i>my</i>.<p>

<<defitem w2ref {<i>win</i> w2ref <i>wx wy</i>}>>

Given a window coordinate pair <i>wx</i> and <i>wy</i>, returns a map
reference string.<p>

<</deflist instance>>

<<section EVENTS>>

The mapcanvas(n) defines the following virtual events.<p>

<<deflist virtual>>

<<defitem Icon-1 {&lt;&lt;Icon-1&gt;&gt;}>>

Sent when the user clicks button-1 on an icon in <b>browse</b> mode.
The <b>%x</b> and <b>%y</b> conversions are the window coordinates of
the event, as usual, and <b>%d</b> is the ID of the icon.<p>

<<defitem IconMoved {&lt;&lt;IconMoved&gt;&gt;}>>

Sent when the user drags an icon to a new location in <b>browse</b> mode.
The <b>%x</b> and <b>%y</b> conversions are the window coordinates of
the event, as usual, and <b>%d</b> is the ID of the icon.<p>

<<defitem Nbhood-1 {&lt;&lt;Nbhood-1&gt;&gt;}>>

Sent when the user clicks button-1 on a neighborhood in <b>browse</b> mode.
The <b>%x</b> and <b>%y</b> conversions are the window coordinates of
the event, as usual, and <b>%d</b> is the ID of the neighborhood.<p>

<<defitem Point-1 {&lt;&lt;Point-1&gt;&gt;}>>

Sent when the user clicks button-1 <b>point</b> mode.
The <b>%x</b> and <b>%y</b> conversions are the window coordinates of
the event, as usual, and <b>%d</b> is the corresponding map reference.<p>


<<defitem PolyComplete {&lt;&lt;PolyComplete&gt;&gt;}>>

Sent when the user has completed a new polygon in <b>poly</b> mode.
The <b>%d</b> conversion is replaced with the list of the new
polygon's vertices as map reference strings.  The mapcanvas(n) does
not automatically save the new polygon; it is up to the application to
do that, e.g., by creating a neighborhood.<p>

<</deflist virtual>>

<<section BINDINGS>>

TBD.<p>

<<section ENVIRONMENT>>

mingui(n) requires Tcl 8.5 or later.

To use mingui(n) in a Tcl script, the environment variable
<code>TCLLIBPATH</code> must include the parent of the package
directory.

<<section AUTHOR>>

Will Duquette<p>

<<section HISTORY>>

Original package.

<</manpage>>



