<<manpage orderdialog(sim) "Order Dialog Manager">>

<<section SYNOPSIS>>

<pre>
package require app_sim 1.0
</pre>

<<itemlist>>

<<section DESCRIPTION>>

orderdialog(sim) is responsible for managing the application's "Send
Order" dialog.  This dialog is designed to allow entry of the data for
any order supported by <<xref order(sim)>>.<p>

<<section "COMMANDS">>

orderdialog(sim) provides the following commands for use by the application.<p>

<<deflist commands>>

<<defitem cancel {orderdialog cancel}>>

Pops down the order dialog.<p>

<<defitem enter {orderdialog enter <i>order parent</i>}>>

Pops up the order dialog for the named <i>order</i>, which must be
defined by <<xref order(sim)>>, over window <i>parent</i>.  The order
dialog is now active until the dialog is popped down, other
programmatically or by the user.<p>

<<defitem entrytype {orderdialog entrytype <i>etype ptype</i> ?<i>options...</i>?}>>

Defines a new entry type for the specified parameter type,
<i>ptype</i>.  Note that if a parameter's type has no related entry
type, the default <b>text</b> entry is used.<p>

The new entry type may be a <b>text</b> or <b>enum</b>, as indicated
by <i>etype</i>.  A <b>text</b> is a simple text entry field, and an
<b>enum</b> is a dropdown menu.   The valid <i>options</i> depend on
the <i>etype</i>:<p>

<<deflist options>>

<<defopt {-width <i>chars</i>}>>

Specifies the width of the entry, in characters; defaults to 20.<p>

<<defopt {-values <i>list</i>}>>

<b>enum only:</b> Specifies the list of valid values for <b>enum</b>
entry types.<p>

<<defopt {-valuescmd <i>cmd</i>}>>

<b>enum only:</b> Specifies a command that will return the list of
valid values for <b>enum</b> entry types.  It will be called just
before the drop down list of choices is displayed, and thus can change
the available choices dynamically.<p>

If <code>-valuescmd</code> is specified, <code>-values</code> is ignored.<p>

<</deflist options>>

<<defitem init {orderdialog init}>>

Initialize the dialog.  Call this once, at application initialization.<p>

<<defitem isactive {orderdialog isactive}>>

Returns 1 if the order dialog is visible and in use, and 0 otherwise.<p>

<<defitem parm {orderdialog parm <i>subcommand</i> ?<i>args...</i>?}>>

This subcommand is used to interact with the parameter entries in an
active order dialog.<p>

<<deflist parm>>

<<defitem "parm type" {orderdialog parm type <i>parm</i>}>>

Returns the type of the named parameter; if <i>parm</i> is <b>current</b>, it
returns the type of the parameter associated with the currently active
entry.<p>

<<defitem "parm set" {orderdialog parm set <i>parm value</i>}>>

Sets the value shown in the entry for the named parameter; if
<i>parm</i> is <b>current</b>, it sets the value shown in currently
active entry.<p>

<</deflist parm>>

<</deflist commands>>

<<section "NOTIFIER EVENTS">>

orderdialog(sim) sends the following events.<p>

<<deflist events>>

<<defitem OrderEntry {&lt;OrderEntry&gt; <i>ptype</i>}>>

The order dialog contains entries for each order parameter.  When a
given entry becomes the current entry, this event is sent with
<i>ptype</i> set to the corresponding parameter type.  When the order
dialog is popped down, this event is sent with <i>ptype</i> set to the
empty string.<p>

The intent is to allow the <<xref mapviewer(sim)>> to set itself so
that map locations, etc., can be entered into the order dialog by
clicking on the map.<p>

<</deflist events>>

<<section ENVIRONMENT>>

Requires Tcl 8.5 or later.<p>

<<section AUTHOR>>

Will Duquette<p>

<<section HISTORY>>

Original package.

<</manpage>>




