<<manpage orderdialog(sim) "Order Dialog Manager">>

<<section SYNOPSIS>>

<pre>
package require app_sim 1.0
</pre>

<<itemlist>>

<<section DESCRIPTION>>

orderdialog(sim) is responsible for managing the application's "Send
Order" dialogs.  Each order supported by <<xref order(sim)>> has such
a dialog.<p>

<b>NOTE:</b> orderdialog(sim) is a primarily a submodule of
<<xref order(sim)>>.  It sends <<xref mars:notifier(n)>> events as
<code>::order</code>, and calls required by other modules are provided
by <<xref order(sim)>> and delegated to <<xref orderdialog(sim)>>.<p>


<<section "COMMANDS">>

orderdialog(sim) provides the following commands:<p>

<<deflist commands>>

<<defitem create {orderdialog $win <i>option value...</i>}>>

Creates a new order dialog.  <b>NOTE:</b> the application should never
call this directly; it is used only by <<iref enter>>.<p>

The widget has one option in addition to those provided by
<<xref tk:toplevel(n)>>:<p>

<<deflist options>>

<<defopt {-order <i>order</i>}>>

This option, which must be set at creation time, specifies the name of
the order for the which the dialog is being created.<p>

<</deflist options>>


<<defitem enter {orderdialog enter <i>order</i> ?<i>parmdict</i>?}>>
<<defitem enter {orderdialog enter <i>order</i> ?<i>parm value...</i>?}>>

Pops up the order dialog for the named <i>order</i>, which must be
defined by <<xref order(sim)>>, and initializes it from the specified
parameter dictionary (if any).  Any number of order dialogs may be
active at a time, but only one dialog per <i>order</i>.<p>

The application will usually call <<xref order(sim)>>
<<xref order(sim) enter>>, which is delegated to this routine.<p>


<<defitem init {orderdialog init}>>

Initialize the module.  Call this once, at application initialization.<p>

<<defitem isactive {orderdialog isactive <i>order</i>}>>

Returns 1 if <i>order</i>'s dialog is visible and in use, and 0
otherwise.<p>

<<defitem topwin {orderdialog topwin}>>

Returns the window path of the topmost order dialog, or "" if none.<p>

<<defitem refreshForKey {orderdialog refreshForKey <i>key fields dlg changedFields fdict</i>}>>

The command is intended to be used as an <<xref order(sim)>>
<code>-refreshcmd</code> callback; it simply calls
<<iref loadForKey>> for the specified <i>key</i> and <i>fields</i>,
provided that the <i>key</i> is one of the <i>changedFields</i>.<p>

In other words, use this callback to populate an order dialog when a key
field changes.<p>

<<defitem refreshForMulti {orderdialog refreshForMulti <i>multi fields dlg changedFields fdict</i>}>>

The command is intended to be used as an <<xref order(sim)>>
<code>-refreshcmd</code> callback; it simply calls
<<iref loadForMulti>> for the specified <i>multi</i> and <i>fields</i>,
provided that the <i>multi</i> is one of the <i>changedFields</i>.<p>

In other words, use this callback to populate an order dialog when a multi
field changes.<p>

<</deflist commands>>

<<section "INSTANCE COMMAND">>

Each instance of orderdialog(sim) provides the following public
methods; however, there should rarely be any need for other modules to
use them.<p>

<<deflist instance>>

<<defitem configure {<i>pathName</i> configure <i>option value...</i>}>>

Sets the value of the specified options.<p>

<<defitem cget {<i>pathName</i> cget <i>option</i>}>>

Returns the value of the specified <i>option</i>.<p>

<<defitem disabled {<i>pathName</i> disabled ?<i>args...</i>?}>>

Allows the caller to enable and disable particular fields.  The
command is delegated to the <<xref mars:form(n)>> widget.<p>

<<defitem field {<i>pathName</i> field <i>subcommand</i> ?<i>args...</i>?}>>

Allows access to the dialog's fields.  The command is delegated to the
<<xref mars:form(n)>> widget.<p>

<<defitem get {<i>pathName</i> get}>>

Returns a dictionary of the values of the dialog's fields, by
parameter name.<p>

<<defitem set {<i>pathName</i> set <i>parmdict</i>}>>
<<defitem set {<i>pathName</i> set <i>parm value...</i>}>>

Sets the values of one or more of the dialog's fields given a
dictionary of the parameter names and values.  Downstream fields are
refreshed as appropriate.<p>

<<defitem loadForKey {<i>pathName</i> loadForKey <i>key</i> ?<i>fields</i>?}>>

Given the name of a <i>key</i> field, loads the values of the named
<i>fields</i> from the matching row in the <i>key</i> field's database
table.  The <i>fields</i> argument defaults to "<b>*</b>", meaning
that all fields should be loaded from the table.<p>

This command is intended for use in order <code>-refreshcmd</code>
callbacks.  Unless there is additional logic for the callback to
perform, one can use <<iref refreshForKey>> instead.<p>

<<defitem loadForMulti {<i>pathName</i> loadForMulti <i>multi</i> ?<i>fields</i>?}>>

Given the name of a <i>multi</i> field, loads the values of the named
<i>fields</i> from the matching rows in the <i>key</i> field's database
table.  The <i>fields</i> argument defaults to "<b>*</b>", meaning
that all fields should be loaded from the table.<p>

Fields will contain the loaded value if all matched rows contain the
same value, and will be blank otherwise.<p>

This command is intended for use in order <code>-refreshcmd</code>
callbacks.  Unless there is additional logic for the callback to
perform, one can use <<iref refreshForMulti>> instead.<p>

<</deflist instance>>

<<section "NOTIFIER EVENTS">>

orderdialog(sim) sends the following events as <code>::order</code>:<p>

<<deflist events>>

<<defitem OrderEntry {&lt;OrderEntry&gt; <i>tags</i>}>>

An order dialog contains a field for each order parameter.  When a
given field receives the focus, this event is sent with
<i>tags</i> set to the parameter <code>-tags</code> specified in the
order's metadata, or "" if none.  When no field has the focus, or the
dialog is closed, this event is sent with <i>tags</i> set to the
empty string.<p>

This allows GUI components, notably the <<xref mapviewer(sim)>>
to set configure themselves so that the appropriate kind of object
can be selected by clicking on the component, e.g., a neighborhood can
be selected by clicking on the map.<p>

<</deflist events>>

<<section ENVIRONMENT>>

Requires Tcl 8.5 or later.<p>

<<section AUTHOR>>

Will Duquette<p>

<<section HISTORY>>

Original package.

<</manpage>>





