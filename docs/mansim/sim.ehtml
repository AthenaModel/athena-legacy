<<manpage sim(sim) "Main Simulation Module">>

<<section SYNOPSIS>>

<pre>
package require app_sim 1.0
</pre>

<<itemlist>>

<<section DESCRIPTION>>

sim(sim) is the main simulation module for <<xref athena_sim(1)>>.  It
controls simulation time, the discrete event queue, and the
initialization and restart of the various models (e.g., GRAM).  In
addition, it implements the SIM:* orders, which are documented in
<<xref orders(sim)>>.<p>

<<subsection "Simulation State">>

The simulation has three states, <b>PREP</b>, <b>RUNNING</b>, and
<b>PAUSED</b>.<p>

The state is <b>PREP</b> at time 0, before simulation time has
advanced.  Orders used to define the initial conditions of the
simulation are generally valid only in this state.<p>

When time is advancing, the state is <b>RUNNING</b>.  When time is
then paused, the state is <b>PAUSED</b>.  Most of the simulation
models are initialized when the simulation first transitions from
<b>PREP</b> to <b>RUNNING</b>; therefore, orders which require that
all of the simulation models are initialized and working are generally
valid only in these states.  Note that the undo stack is cleared at
each tick while the simulation is <b>RUNNING</b>; hence, it's usually
best to pause before entering a large number of orders.<p>

<<subsection "Tick Activities">>

Athena is a time-step simulation discrete event capabilities.  The
tick size is one simulated day.  In other words, all simulation
activity takes place during each 1-day time tick; however, events can
be scheduled to happen in future ticks and will execute at that time.<p>

The following activities take place during a time tick:<p>

<ul>
  <li> Time is advanced one tick (one day)
  <li> The <b>&lt;Time&gt;</b> event is sent.
  <li> GRAM is advanced accordingly (TBD: Not yet implemented)
  <li> Scheduled events are executed
  <li> Reactive decision conditions (RDCs) are checked, and take
       effect if the conditions are right.
       <ul>
         <li> TBD: Not yet implemented.
         <li> RDCs will be similar to rules in an e-mail application.
              If a set of conditions are met, a desired activity will
              take place.
         <li> For example, if the economy crashes, the simulation should
              be paused.
       </ul>
  <li> If a stop time was specified, and has been reached, the
       simulation is paused.
  <li> The <b>&lt;Tick&gt;</b> event is sent.
</ul>

As other models are added to the simulation, they will respond to time
advances as well, either as explicit steps during the tick, or in
discrete events managed by the event queue.<p>

<<section "COMMANDS">>

sim(sim) provides the following commands for use by the application.<p>

<<deflist commands>>

<<defitem "sim check" {sim check ?-log?}>>

Performs a scenario sanity check, returning 1 if the scenario contains
the data required to initialize all of the simulation models and 0
otherwise.  The simulation can only advance from the PREP state to the
RUNNING state if the sanity check succeeds.<p>

If the <code>-log</code> option is included, then the results of the
sanity check are logged in detail.<p>

<<defitem "sim init" {sim init}>>

Initializes the module.  This should be called once, at application
start-up.<p>

<<defitem "sim new" {sim new}>>

Re-initializes the simulation when a new scenario is created, erasing
the details of the old scenario.<p>

<<defitem "sim now" {sim now}>>

Returns the current simulation time in ticks.<p>

<<defitem "sim reconfigure" {sim reconfigure}>>

The simulation is reconfigured when a new scenario is created or
loaded, or any other time when the simulation's "in-memory" data needs
to be resynced with the contents of the RDB.  As a side-effect, the
GUI is completely refreshed.<p>

Most scenario and simulation modules have a <code>reconfigure</code>
method which is called by this one, to allow them to resync if need be.<p>

<<defitem "sim restart" {sim restart ?-noconfirm?}>>

If the simulation is in the PAUSED state, this command returns it to
the PREP state, reloading the snapshot taking just before it
first transitioned to RUNNING.  By default, the user is prompted to
confirm the operation; if the <code>-noconfirm</code> option is given,
the operation proceeds without confirmation.<p>

<<defitem "sim speed" {sim speed ?<i>speed</i>?}>>

This command queries and sets the simulation <i>speed</i>, which is an
integer number from 1 to 10, with 1 being slowests and 10 being
fastest.<p>

In Athena, all simulation activity takes place during each time tick.
The simulation speed determines the delay, in milliseconds, between
ticks, with faster speeds leading to shorter delays.  The main purpose
of the delay is to allow the GUI to remain responsive while time is
advancing, but varying it also allows the user to watch the progress
of the simulation at a comfortable speed.<p>

<<defitem "sim state" {sim state}>>

Returns the current <<xref "Simulation State">>.<p>

<<defitem "sim stoptime" {sim stoptime}>>

While the simulation is in the <b>RUNNING</b> state, this command
returns the time, in ticks, at which the simulation will automatically
stop running and enter the <b>PAUSED</b> state (assuming it isn't
stopped by something else first).  If no such stop time was specified,
or if the state is something other than <b>RUNNING</b>,
this command will return 0.<p>



<</deflist commands>>

<<section "NOTIFIER EVENTS">>

<<deflist events>>

<<defitem Reconfigure {&lt;Reconfigure&gt;}>>

Sent by <<iref sim reconfigure>>.  Usually indicates that the scenario has
changed completely, as when a new scenario is created or opened.
Directs the user interface to refresh itself completely.<p>

<<defitem Speed {&lt;Speed&gt;}>>

This event is sent when the <<iref sim speed>> changes.<p>

<<defitem State {&lt;State&gt;}>>

This event is sent when <<iref sim state>> changes.<p>

<<defitem Time {&lt;Time&gt;}>>

This event is sent when the display of simulated time has changed,
either because time has advanced, or because the startdate has been
changed, or because of a reconfigure.  Code that displays the
Zulu-time should bind to this event.<p>


<<defitem Tick {&lt;Tick&gt;}>>

This event is sent when simulation time has advanced by one tick.<p>

<</deflist events>>


<<section ENVIRONMENT>>

Requires Tcl 8.5 or later.<p>

<<section AUTHOR>>

Will Duquette<p>

<<section HISTORY>>

Original package.

<</manpage>>





