<<manpage orders(sim) "Athena Orders">>

<<swallow {
    package require simlib
    package require projectlib

    # <<parmlist>>
    # <<parm name>> Description <</parm>>
    #    ...
    # <</parmlist>>

    template parmlist {} {
        |<--
        <table border="0" cellspacing="0" cellpadding="5"> 
    }

    template parm {name} {
        |<--
        <tr valign="baseline"><td width="95"><b><tt>$name</tt></b></td>
        <td>
    }

    template /parm {} {
        </td>
        </tr>
    }

    template /parmlist {} {
        |<--
        </table>
    }
}>>

<<section SYNOPSIS>>

<<itemlist>>

<<section DESCRIPTION>>

All user inputs to the athena_sim(1) simulation come in as simulation
orders, which are defined by the various simulation modules.  This man
page documents the orders and their parameters.<p>

<<section "COOPERATION:*">>

The <code>COOPERATION:*</code> orders are used to modify and
manipulate cooperation levels.<p>

<<deflist cooperation>>

<<defitem COOPERATION:UPDATE {COOPERATION:UPDATE}>>

Updates an existing cooperation level.  Note that cooperation levels
come and go automatically as neighborhood groups and force groups come
and go.  The parameters are as follows:

<<parmlist>>

<<parm n>> <b>Required.</b>  The neighborhood of a neighborhood group.<</parm>>
<<parm f>> <b>Required.</b>  The group name of a neighborhood group.<</parm>>
<<parm g>> <b>Required.</b>  The group name of a force group.<</parm>>

<<parm coop0>> The new initial level of cooperation for group
<i>nf</i> with group <i>g</i>, a numeric
<<xref projtypes(n) qcooperation>> value.<</parm>>

<</parmlist>>

<<defitem COOPERATION:UPDATE:MULTI {COOPERATION:UPDATE:MULTI}>>

Updates multiple cooperation levels.  The parameters are as follows:

<<parmlist>>

<<parm ids>> <b>Required.</b>  A list of <b>{n f g}</b> triples.<</parm>>

<<parm coop0>> The new initial level of cooperation for specified
cooperation curves, a numeric <<xref projtypes(n) qcooperation>>
value.<</parm>>

<</parmlist>>

<</deflist cooperation>>

<<section "GROUP:*">>

The <code>GROUP:*</code> orders are used to create, modify, and
manipulate various kinds of groups.<p>

<<subsection "GROUP:CIVILIAN:*">>

These orders relate to top-level civilian groups, groups of the
civilian population which can exist across multiple neighborhoods.<p>

<<deflist group civilian>>

<<defitem GROUP:CIVILIAN:CREATE {GROUP:CIVILIAN:CREATE}>>

Creates a new civilian group.  The parameters are as
follows:<p>

<<parmlist>>

<<parm g>> <b>Required.</b> A brief <<xref ident(n) identifier>> which
uniquely identifies this group.<</parm>>

<<parm longname>> <b>Required.</b> A short human-readable name for the
group, e.g., "Pashtuns".<</parm>>

<<parm color>> <b>Required.</b>  A color, specified as a hexadecimal
RGB string, "<code>#<i>rrggbb</i></code>" or
"<code>#<i>rrrrggggbbbb</i></code>". This color is used to color code
the group's icons.<</parm>>

<</parmlist>>

<<defitem GROUP:CIVILIAN:DELETE {GROUP:CIVILIAN:DELETE}>>

Deletes a civilian group, cleaning up dependencies.  In particular,
it:<p>

<ul>
  <li> Deletes all neighborhood groups which belong to this civilian
       group.<p>
</ul>

The parameters are as follows:<p>

<<parmlist>>

<<parm g>> <b>Required.</b> The group's ID.<</parm>>

<</parmlist>>


<<defitem GROUP:CIVILIAN:UPDATE {GROUP:CIVILIAN:UPDATE}>>

Updates an existing civilian group.  The parameters are as
defined for <<iref GROUP:CIVILIAN:CREATE>>; <b>g</b> is required, and
specifies the group to update, while the remainder are optional.<p>


<<defitem GROUP:CIVILIAN:UPDATE:MULTI {GROUP:CIVILIAN:UPDATE:MULTI}>>

Updates multiple civilian groups.  The parameters are as
follows:<p>

<<parmlist>>

<<parm ids>> <b>Required.</b>  A list of one or more group
IDs.<</parm>>

<<parm color>> As for <<iref GROUP:CIVILIAN:CREATE>>. <</parm>>

<</parmlist>>



<</deflist group civilian>>


<<subsection "GROUP:FORCE:*">>

These orders relate to force groups, groups which exist to project force.<p>

<<deflist group force>>

<<defitem GROUP:FORCE:CREATE {GROUP:FORCE:CREATE}>>

Creates a new force group.  The parameters are as
follows:<p>

<<parmlist>>

<<parm g>> <b>Required.</b> A brief <<xref ident(n) identifier>> which
uniquely identifies this group.<</parm>>

<<parm longname>> <b>Required.</b> A short human-readable name for the
group, e.g., "U.S. Army".<</parm>>

<<parm color>> <b>Required.</b>  A color, specified as a hexadecimal
RGB string, "<code>#<i>rrggbb</i></code>" or
"<code>#<i>rrrrggggbbbb</i></code>". This color is used to color code
the group's icons.<</parm>>

<<parm forcetype>> <b>Required.</b> The force type, as follows:<p>

<<::projectlib::eforcetype html>>
<</parm>>

<<parm demeanor>> <b>Required.</b> The demeanor, as follows:<p>
<<::projectlib::edemeanor html>>
<</parm>>

<<parm local>> <b>Required.</b> The local flag, expressed as a boolean
value (e.g., "Yes" or "No"). Indicates whether the group is perceived
as being local to the playbox, or as a foreign force.<</parm>>

<<parm coalition>> <b>Required.</b> The coalition flag, expressed as a
boolean value (e.g., "Yes" or "No").  Indicates whether or not the
group is a member of the U.S.-led coalition.<</parm>>

<</parmlist>>

<<defitem GROUP:FORCE:DELETE {GROUP:FORCE:DELETE}>>

Deletes a force group, cleaning up dependencies.  In particular,
it:<p>

<ul>
  <li> TBD
</ul>

The parameters are as follows:<p>

<<parmlist>>

<<parm g>> <b>Required.</b> The group's ID.<</parm>>

<</parmlist>>

<<defitem GROUP:FORCE:UPDATE {GROUP:FORCE:UPDATE}>>

Updates an existing force group.  The parameters are as
defined for <<iref GROUP:FORCE:CREATE>>; <b>g</b> is required, and
specifies the group to update, while the remainder are optional.<p>

<<defitem GROUP:FORCE:UPDATE:MULTI {GROUP:FORCE:UPDATE:MULTI}>>

Updates multiple force groups.  The parameters are as
follows:<p>

<<parmlist>>

<<parm ids>> <b>Required.</b>  A list of one or more group
IDs.<</parm>>

<<parm color>>     As for <<iref GROUP:FORCE:CREATE>>. <</parm>>
<<parm forcetype>> As for <<iref GROUP:FORCE:CREATE>>. <</parm>>
<<parm demeanor>>  As for <<iref GROUP:FORCE:CREATE>>. <</parm>>
<<parm local>>     As for <<iref GROUP:FORCE:CREATE>>. <</parm>>
<<parm coalition>> As for <<iref GROUP:FORCE:CREATE>>. <</parm>>

<</parmlist>>


<</deflist group force>>

<<subsection "GROUP:NBHOOD:*">>

These orders relate to neighborhood civilian groups, subgroups of the
civilian groups which reside in particular neighborhoods.<p>

<<deflist group nbhood>>

<<defitem GROUP:NBHOOD:CREATE {GROUP:NBHOOD:CREATE}>>

Creates a new neighborhood group.  The parameters are as
follows:<p>

<<parmlist>>

<<parm n>> <b>Required.</b>  The identifier of the neighborhood in
which the group resides.<</parm>>

<<parm g>> <b>Required.</b>  The identifier of the civilian group to
which this group belongs.<</parm>>

<<parm local_name>> <b>Required.</b> A short human-readable name for the
group, e.g., a tribal name.<</parm>>

<<parm population>> <b>Required.</b> The group's population in the
neighborhood.<</parm>>

<<parm demeanor>> <b>Required.</b>  The demeanor of the civilian
group, e.g., its propensity to violence:<p>

<<projectlib::edemeanor html>><</parm>>

<<parm rollup_weight>> <b>Required.</b> The rollup weight, used when
rolling up the group's satisfaction levels to the playbox level.  A
non-negative floating point value, nominally 1.0.<</parm>>

<<parm effects_factor>> <b>Required.</b> The indirect effects factor,
which scales indirect effects on other groups of satisfaction effects
on this group.  A non-negative floating point value, nominally 1.0.<</parm>>


<</parmlist>>

<<defitem GROUP:NBHOOD:DELETE {GROUP:NBHOOD:DELETE}>>

Deletes a neighborhood group, cleaning up dependencies.  In particular,
it:<p>

<ul>
  <li> TBD<p>
</ul>

The parameters are as follows:<p>

<<parmlist>>

<<parm n>> <b>Required.</b> The neighborhood in which the group
resides.<</parm>>

<<parm g>> <b>Required.</b> The civilian group to which this group
belongs.<</parm>>

<</parmlist>>

<<defitem GROUP:NBHOOD:UPDATE {GROUP:NBHOOD:UPDATE}>>

Updates an existing civilian group.  The parameters are as
defined for <<iref GROUP:NBHOOD:CREATE>>; <b>n</b> and <b>g</b> are
required, and specifies the group to update, while the remainder are
optional.<p>


<<defitem GROUP:NBHOOD:UPDATE:MULTI {GROUP:NBHOOD:UPDATE:MULTI}>>

Updates multiple neighborhood groups.  The parameters are as
follows:<p>

<<parmlist>>

<<parm ids>> <b>Required.</b>  A list of one or more neighborhood group
IDs.  A neighborhood group ID is a Tcl list containing the group's a
neighborhood ID and civilian group ID.  If group A lives in
neighborhood N1, and group B lives in neighborhood N2, and both are to
be updated, the value of <b>ids</b> would be as follows:

<pre>    {N1 A} {N2 B}</pre>

<</parm>>

<<parm local_name>>     As for <<iref GROUP:NBHOOD:CREATE>>. <</parm>>
<<parm population>>     As for <<iref GROUP:NBHOOD:CREATE>>. <</parm>>
<<parm demeanor>>       As for <<iref GROUP:NBHOOD:CREATE>>. <</parm>>
<<parm rollup_weight>>  As for <<iref GROUP:NBHOOD:CREATE>>. <</parm>>
<<parm effects_factor>> As for <<iref GROUP:NBHOOD:CREATE>>. <</parm>>

<</parmlist>>


<</deflist group nbhood>>

<<subsection "GROUP:ORGANIZATION:*">>

These orders relate to organization groups, i.e., NGOs, IGOs, and
Contractors, working in the playbox.<p>

<<deflist group organization>>

<<defitem GROUP:ORGANIZATION:CREATE {GROUP:ORGANIZATION:CREATE}>>

Creates a new organization group.  The parameters are as
follows:<p>

<<parmlist>>

<<parm g>>  <b>Required.</b> A brief <<xref ident(n) identifier>>
which uniquely identifies this group.<</parm>>

<<parm longname>> <b>Required.</b> A short human-readable name for the
group, e.g., "Red Cross".<</parm>>

<<parm color>> <b>Required.</b>  A color, specified as a hexadecimal
RGB string, "<code>#<i>rrggbb</i></code>" or
"<code>#<i>rrrrggggbbbb</i></code>". This color is used to color code
the group's icons.<</parm>>

<<parm orgtype>> <b>Required.</b> The organization type, as follows:<p>

<<::projectlib::eorgtype html>><</parm>>

<<parm demeanor>> <b>Required.</b> The demeanor, as follows:<p>
<<::projectlib::edemeanor html>>
<</parm>>

<<parm rollup_weight>> <b>Required.</b> The rollup weight, used when
rolling up the group's satisfaction levels to the playbox level.  A
non-negative floating point value, nominally 1.0.<</parm>>

<<parm effects_factor>> <b>Required.</b> The indirect effects factor,
which scales indirect effects on other groups of satisfaction effects
on this group.  A non-negative floating point value, nominally 1.0.<</parm>>

<</parmlist>>


<<defitem GROUP:ORGANIZATION:DELETE {GROUP:ORGANIZATION:DELETE}>>

Deletes a organization group, cleaning up dependencies.  In
particular, it:<p>

<ul>
  <li> TBD
</ul><p>

The parameters are as follows:<p>

<<parmlist>>

<<parm g>> <b>Required.</b> The group's ID.<</parm>>

<</parmlist>>

<<defitem GROUP:ORGANIZATION:UPDATE {GROUP:ORGANIZATION:UPDATE}>>

Updates an existing organization group.  The parameters are as
defined for <<iref GROUP:ORGANIZATION:CREATE>>; <b>g</b> is required, and
specifies the group to update, while the remainder are optional.<p>

<<defitem GROUP:ORGANIZATION:UPDATE:MULTI {GROUP:ORGANIZATION:UPDATE:MULTI}>>

Updates multiple organization groups.  The parameters are as
follows:<p>

<<parmlist>>

<<parm ids>> <b>Required.</b>  A list of one or more group
IDs.<</parm>>

<<parm color>>          As for <<iref GROUP:ORGANIZATION:CREATE>>. <</parm>>
<<parm orgtype>>        As for <<iref GROUP:ORGANIZATION:CREATE>>. <</parm>>
<<parm demeanor>>       As for <<iref GROUP:ORGANIZATION:CREATE>>. <</parm>>
<<parm rollup_weight>>  As for <<iref GROUP:ORGANIZATION:CREATE>>. <</parm>>
<<parm effects_factor>> As for <<iref GROUP:ORGANIZATION:CREATE>>. <</parm>>

<</parmlist>>


<</deflist group organization>>


<<section "MAP:*">>

The <code>MAP:*</code> orders relate to the map display, and are implemented
by the <<xref map(sim)>> module.<p>

<<deflist map>>

<<defitem MAP:IMPORT {MAP:IMPORT}>>

Imports a map image file into the scenario.  The parameters are as
follows:<p>

<<parmlist>>

<<parm filename>> <b>Required.</b> The name of the image file to
import and use as a map.<</parm>>

<</parmlist>>

<</deflist map>>


<<section "NBHOOD:*">>

The <code>NBHOOD:*</code> orders are used to create and manipulate map
regions called neighborhoods.  They are implemented
by the <<xref nbhood(sim)>> module.<p>

<<deflist nbhood>>

<<defitem NBHOOD:CREATE {NBHOOD:CREATE}>>

Creates a new neighborhood.  The parameters are as
follows:<p>

<<parmlist>>

<<parm n>> <b>Required.</b>  A brief <<xref ident(n) identifier>>
which uniquely identifies this neighborhood.<</parm>>

<<parm longname>> <b>Required.</b> A short human-readable name for the
neighborhood, e.g., "Los Angeles".<</parm>>

<<parm urbanization>> <b>Required.</b> The neighborhood's urbanization
level:<p>

<<::projectlib::eurbanization html>><</parm>>

<<parm vtygain>> <b>Required.</b> The neighborhood's volatility gain,
a floating-point value no less than zero.  This parameter is nominally
1.0; it is used to dial up and down the effect of neighborhood volatility on
neighborhood security.<</parm>>

<<parm refpoint>> <b>Required.</b> The neighborhood's reference point,
expressed as a <<xref mapref(n)>> mapref string.  This is a location
within the neighborhood's polygon.<</parm>>

<<parm polygon>> <b>Required.</b> The neighborhood's boundary polygon,
expressed as a list of <<xref mapref(n)>> mapref strings.<</parm>>

<</parmlist>>

<<defitem NBHOOD:DELETE {NBHOOD:DELETE}>>

Deletes a neighborhood, cleaning up dependencies.  In particular it:<p>

<ul>
  <li> Deletes all neighborhood groups in this neighborhood.<p>
</ul>

The parameters are as follows:<p>

<<parmlist>>

<<parm n>> <b>Required.</b> The neighborhood's ID.<</parm>>

<</parmlist>>

<<defitem NBHOOD:LOWER {NBHOOD:LOWER}>>

Lowers a neighborhood to the bottom of the stacking order, below
any neighborhoods which overlap it.  The parameters are as follows:<p>

<<parmlist>>

<<parm n>> <b>Required.</b> The neighborhood's ID.<</parm>>

<</parmlist>>

<<defitem NBHOOD:RAISE {NBHOOD:RAISE}>>

Raises a neighborhood to the top of the stacking order, over
any neighborhoods which it overlaps.  The parameters are as follows:<p>

<<parmlist>>

<<parm n>> <b>Required.</b> The neighborhood's ID.<</parm>>

<</parmlist>>

<<defitem NBHOOD:UPDATE {NBHOOD:UPDATE}>>

Updates a neighborhood's data.  The parameters are as
for <<iref NBHOOD:CREATE>>; <b>n</b>, is
required, and species the neighborhood to update; the remainder are
optional.<p>

<<defitem NBHOOD:UPDATE:MULTI {NBHOOD:UPDATE:MULTI}>>

Updates multiple neighborhoods.  The parameters are as
follows:<p>

<<parmlist>>

<<parm ids>> <b>Required.</b>  A list of one or more neighborhood
IDs.<</parm>>

<<parm urbanization>> As for <<iref NBHOOD:CREATE>>. <</parm>>
<<parm vtygain>>      As for <<iref NBHOOD:CREATE>>. <</parm>>

<</parmlist>>


<</deflist nbhood>>

<<section "NBHOOD:RELATIONSHIP:*">>

The <code>NBHOOD:RELATIONSHIP:*</code> orders are used to modify and
manipulate the relationships between pairs of neighborhoods.<p>

<<deflist nbrel>>

<<defitem NBHOOD:RELATIONSHIP:UPDATE {NBHOOD:RELATIONSHIP:UPDATE}>>

Updates the relationships between a pair of neighborhoods.  Note that
neighborhood relationships come and go automatically as neighborhoods come
and go.  The parameters are as follows:

<<parmlist>>

<<parm m>> <b>Required.</b>  A neighborhood name.<</parm>>
<<parm n>> <b>Required.</b>  Another neighborhood name.<</parm>>

<<parm proximity>>  The proximity between the two neighborhoods, from
<i>m</i>'s point of view, an 
<<xref mars:simtypes(n) eproximity>> value:<p>

<<::simlib::eproximity html>>

Note that a neighborhood's proximity with itself is always
<b>HERE</b>; the proximity between two distinct neighborhoods can
never be <b>HERE</b>.<</parm>>


<<parm effects_delay>> The delay between a direct effect in
neighborhood <i>n</i> and the resulting indirect effect in
neighborhood <i>m</i>, in decimal days.<</parm>>
<</parm>>

<</parmlist>>

<<defitem NBHOOD:RELATIONSHIP:UPDATE:MULTI {NBHOOD:RELATIONSHIP:UPDATE:MULTI}>>

Updates neighborhood relationships for multiple pairs of
neighborhoods.  The parameters are as follows:

<<parmlist>>

<<parm ids>> <b>Required.</b>  A list of <b>{m n}</b> pairs.<</parm>>

<<parm proximity>> As for <<iref NBHOOD:RELATIONSHIP:UPDATE>>.<</parm>>
<<parm effects_delay>> As for <<iref NBHOOD:RELATIONSHIP:UPDATE>>.<</parm>>

<</parmlist>>

<</deflist nbrel>>


<<section "PARM:*">>

The <code>PARM:*</code> orders relate to the model parameter database
(<<xref parmdb(5)>>, which is used to tune Athena's models.  The model
parameters are saved with the scenario, and hence are modified using
orders.  The orders are implemented by the <<xref parm(sim)>> module.<p>

<<deflist parm>>

<<defitem PARM:IMPORT {PARM:IMPORT}>>

Imports the set of model parameters from a <<xref parmdb(5)>>
parameter file.  The order parameters are as follows:<p>

<<parmlist>>

<<parm filename>> <b>Required.</b> The name of the parameter file to
import.<</parm>>

<</parmlist>>

<<defitem PARM:RESET {PARM:RESET}>>

Resets all model parameter values back to their default settings.
If the user has saved a set of user defaults, they are used.<p>

This order takes no parameters.<p>


<<defitem PARM:SET {PARM:SET}>>

Assigns a new value to a model parameter.  The order parameters are as
follows:<p>

<<parmlist>>

<<parm parm>> <b>Required.</b> The name of the parameter to be set.<</parm>>
<<parm value>> <b>Required.</b> The new value.<</parm>>

<</parmlist>>

<</deflist parm>>



<<section "RELATIONSHIP:*">>

The <code>RELATIONSHIP:*</code> orders are used to modify and
manipulate the relationships between pairs of groups. Relationships
exist at the <b>PLAYBOX</b> level between force and organization
groups, and at the neighborhood level between neighborhood groups and
other groups.<p>

<<deflist rel>>

<<defitem RELATIONSHIP:UPDATE {RELATIONSHIP:UPDATE}>>

Updates the relationships between a pair of groups, in a neighborhood
or at the playbox level.  Note that relationship entities come and go
automatically as groups come and go.  The parameters are as follows:

<<parmlist>>

<<parm n>> <b>Required.</b>  A neighborhood name, or <b>PLAYBOX</b>.<</parm>>
<<parm f>> <b>Required.</b>  A group name.<</parm>>
<<parm g>> <b>Required.</b>  A group name.<</parm>>

<<parm rel>>  The relationship between the two groups in the
neighborhood, a decimal number between -1.0 and 1.0.  The relationship
of a group with itself defaults to 1.0 and should generally not be
changed.  Typical relationship values range from -0.5 to +0.8.<</parm>>

<</parmlist>>

<<defitem RELATIONSHIP:UPDATE:MULTI {RELATIONSHIP:UPDATE:MULTI}>>

Updates neighborhood relationships for multiple pairs of
groups.  The parameters are as follows:

<<parmlist>>

<<parm ids>> <b>Required.</b>  A list of <b>{n f g}</b> pairs, where
<b>n</b> can be <b>PLAYBOX</b>.<</parm>>

<<parm rel>> As for <<iref RELATIONSHIP:UPDATE>>.<</parm>>

<</parmlist>>

<</deflist rel>>

<<section "SAT:*">>

The <code>SAT:*</code> orders are used to modify, and
manipulate satisfaction curves.<p>

<<deflist sat>>

<<defitem SAT:UPDATE {SAT:UPDATE}>>

Updates a satisfaction curve.  The parameters are as follows:<p>

<<parmlist>>

<<parm n>> <b>Required.</b> The curve's neighborhood ID.<</parm>>

<<parm g>> <b>Required.</b> The curve's group ID.<</parm>>

<<parm c>> <b>Required.</b> The curve's concern ID.<</parm>>

<<parm sat0>>
The initial value for this satisfaction curve, in either symbolic or
numeric form; numeric values must be in the range -100.0 to +100.0:<p>

<<::simlib::qsat html>>
<</parm>>

<<parm trend0>>
The long-term trend for this satisfaction curve, in either symbolic or
numeric form:<p>

<<::simlib::qtrend html>>
<</parm>>

<<parm saliency>>
The saliency of this concern to this group in this neighborhood, in
either symbolic or numeric form; numeric values must be in the range
0.0 to 1.0:<p>

<<::simlib::qsaliency html>>
<</parm>>

<</parmlist>>


<<defitem SAT:UPDATE:MULTI {SAT:UPDATE:MULTI}>>

Updates multiple satisfaction curves.  The parameters are as
follows:<p>

<<parmlist>>

<<parm ids>> <b>Required.</b>  A list of one or more satisfaction
curve IDs.  A satisfaction curve ID is a Tcl list of IDs of the
curve's neighborhood, group, and concern.  To update the AUT curve for
group A in neighborhood N1 and group B in neighborhood N2,
the value of <b>ids</b> would be as follows:

<pre>    {N1 A AUT} {N2 B AUT}</pre>

<</parm>>

<<parm sat0>>     As for <<iref SAT:UPDATE>>. <</parm>>
<<parm trend0>>   As for <<iref SAT:UPDATE>>. <</parm>>
<<parm saliency>> As for <<iref SAT:UPDATE>>. <</parm>>

<</parmlist>>

<</deflist sat>>

<<section "SIM:*">>

The <code>SIM:*</code> orders are used to control the behavior of the
simulation as a whole.<p>

<<deflist sim>>

<<defitem SIM:PAUSE {SIM:PAUSE}>>

Pauses the simulation when it is running.  This order has no effect if
the simulation is not running.  This order has no parameters.<p>

<<defitem SIM:RUN {SIM:RUN}>>

Starts simulation time advancing.  If the simulation is in
the <b>PREP</b> state, at time 0, then Athena must do a sanity check
on the scenario data and initialize all simulation models before time
can start advancing.  The order will have no effect if the sanity
check fails.<p>

The parameters are as follows:

<<parmlist>>

<<parm days>> <b>Optional.</b>  By default, the simulation will run
until paused by the user.  If <b>days</b> is given, then the
simulation will pause automatically after that many <b>days</b>.<</parm>>

<</parmlist>>


<<defitem SIM:STARTDATE {SIM:STARTDATE}>>

Sets the start date, i.e., the calendar date associated with
simulation time 0.  Specifying the start date allows Athena to display
appropriate zulu-time strings.<p>

The parameters are as follows:

<<parmlist>>

<<parm startdate>> <b>Required.</b>  The calendar start date,
specified as a <<xref mars::zulu(n)>> time string.<</parm>>

<</parmlist>>


<</deflist sim>>


<<section "UNIT:*">>

These orders relate to force and organization units, entities that
represent the allocation of force and organization personnel to
activities in neighborhoods.<p>

<<deflist unit>>

<<defitem UNIT:CREATE {UNIT:CREATE}>>

Creates a new unit.  The parameters are as
follows:<p>

<<parmlist>>

<<parm g>> <b>Required.</b>  The name of a force or organization
group.<</parm>>

<<parm u>> <b>Required.</b>  The name of the unit, a
<<xref projtypes(n) unitname>> value.<</parm>>

<<parm personnel>> <b>Required.</b>  The number of personnel in the
unit, an <<xref projtypes(n) iquantity>> value.<</parm>>

<<parm location>> <b>Required.</b>  The location of the unit as
a map reference.<</parm>>

<<parm activity>> <b>Required.</b>  The unit's initial activity,
an <<xref projtypes(n) eactivity>> value.  Note that organization
units can perform only a subset of these activities.<</parm>>

<</parmlist>>

<<defitem UNIT:DELETE {UNIT:DELETE}>>

Deletes a unit.<p>

The parameters are as follows:<p>

<<parmlist>>

<<parm u>> <b>Required.</b> The unit's name.<</parm>>

<</parmlist>>


<<defitem UNIT:UPDATE {UNIT:UPDATE}>>

Updates an existing unit.  The parameters are as
defined for <<iref UNIT:CREATE>>; <b>u</b> is required, and
specifies the unit to update, while the remainder are optional.<p>


<<defitem UNIT:UPDATE:MULTI {UNIT:UPDATE:MULTI}>>

Updates multiple units.  The parameters are as
follows:<p>

<<parmlist>>

<<parm ids>> <b>Required.</b>  A list of one or more unit
IDs.<</parm>>

<<parm g>>As for <<iref UNIT:CREATE>>. <</parm>>

<<parm personnel>>As for <<iref UNIT:CREATE>>. <</parm>>

<<parm location>>As for <<iref UNIT:CREATE>>. <</parm>>

<<parm activity>>As for <<iref UNIT:CREATE>>. <</parm>>

<</parmlist>>

<</deflist unit>>

<<section AUTHOR>>

Will Duquette<p>

<</manpage>>

