<<manpage orders(sim) "Athena Orders">>

<<swallow {
    package require athlib

    # <<parmlist>>
    # <<parm name>> Description <</parm>>
    #    ...
    # <</parmlist>>

    template parmlist {} {
        |<--
        <table border="0" cellspacing="0" cellpadding="5"> 
    }

    template parm {name} {
        |<--
        <tr valign="baseline"><td width="95"><b><tt>$name</tt></b></td>
        <td>
    }

    template /parm {} {
        </td>
        </tr>
    }

    template /parmlist {} {
        |<--
        </table>
    }
}>>

<<section SYNOPSIS>>

<<itemlist>>

<<section DESCRIPTION>>

All user inputs to the athena_sim(1) simulation come in as simulation
orders, which are defined by the various simulation modules.  This man
page documents the orders and their parameters.<p>

<<section "GROUP:*">>

The <code>GROUP:*</code> orders are used to create, modify, and
manipulate various kinds of groups.<p>

<<subsection "GROUP:CIVILIAN:*">>

These orders relate to top-level civilian groups, groups of the
civilian population which can exist across multiple neighborhoods.<p>

<<deflist group civilian>>

<<defitem GROUP:CIVILIAN:CREATE {GROUP:CIVILIAN:CREATE}>>

Creates a new civilian group.  The parameters are as
follows:<p>

<<parmlist>>

<<parm g>> <b>Required.</b> A brief <<xref ident(n) identifier>> which
uniquely identifies this group.<</parm>>

<<parm longname>> <b>Required.</b> A short human-readable name for the
group, e.g., "Pashtuns".<</parm>>

<<parm color>> <b>Required.</b>  A color, specified as a hexadecimal
RGB string, "<code>#<i>rrggbb</i></code>" or
"<code>#<i>rrrrggggbbbb</i></code>". This color is used to color code
the group's icons.<</parm>>

<</parmlist>>

<<defitem GROUP:CIVILIAN:DELETE {GROUP:CIVILIAN:DELETE}>>

Deletes a civilian group, cleaning up dependencies.  In particular,
it:<p>

<ul>
  <li> Deletes all neighborhood groups which belong to this civilian
       group.<p>
</ul>

The parameters are as follows:<p>

<<parmlist>>

<<parm g>> <b>Required.</b> The group's ID.<</parm>>

<</parmlist>>

<<defitem GROUP:CIVILIAN:UPDATE {GROUP:CIVILIAN:UPDATE}>>

Updates an existing civilian group.  The parameters are as
defined for <<iref GROUP:CIVILIAN:CREATE>>; <b>g</b> is required, and
specifies the group to update, while the remainder are optional.<p>

<</deflist group civilian>>


<<subsection "GROUP:FORCE:*">>

These orders relate to force groups, groups which exist to project force.<p>

<<deflist group force>>

<<defitem GROUP:FORCE:CREATE {GROUP:FORCE:CREATE}>>

Creates a new force group.  The parameters are as
follows:<p>

<<parmlist>>

<<parm g>> <b>Required.</b> A brief <<xref ident(n) identifier>> which
uniquely identifies this group.<</parm>>

<<parm longname>> <b>Required.</b> A short human-readable name for the
group, e.g., "U.S. Army".<</parm>>

<<parm color>> <b>Required.</b>  A color, specified as a hexadecimal
RGB string, "<code>#<i>rrggbb</i></code>" or
"<code>#<i>rrrrggggbbbb</i></code>". This color is used to color code
the group's icons.<</parm>>

<<parm forcetype>> <b>Required.</b> The force type, as follows:<p>

<<::athlib::eforcetype html>>
<</parm>>

<<parm local>> <b>Required.</b> The local flag, expressed as a boolean
value (e.g., "Yes" or "No"). Indicates whether the group is perceived
as being local to the playbox, or as a foreign force.<</parm>>

<<parm coalition>> <b>Required.</b> The coalition flag, expressed as a
boolean value (e.g., "Yes" or "No").  Indicates whether or not the
group is a member of the U.S.-led coalition.<</parm>>

<</parmlist>>

<<defitem GROUP:FORCE:DELETE {GROUP:FORCE:DELETE}>>

Deletes a force group, cleaning up dependencies.  In particular,
it:<p>

<ul>
  <li> TBD
</ul>

The parameters are as follows:<p>

<<parmlist>>

<<parm g>> <b>Required.</b> The group's ID.<</parm>>

<</parmlist>>

<<defitem GROUP:FORCE:UPDATE {GROUP:FORCE:UPDATE}>>

Updates an existing force group.  The parameters are as
defined for <<iref GROUP:FORCE:CREATE>>; <b>g</b> is required, and
specifies the group to update, while the remainder are optional.<p>

<</deflist group force>>

<<subsection "GROUP:NBHOOD:*">>

These orders relate to neighborhood civilian groups, subgroups of the
civilian groups which reside in particular neighborhoods.<p>

<<deflist group nbhood>>

<<defitem GROUP:NBHOOD:CREATE {GROUP:NBHOOD:CREATE}>>

Creates a new neighborhood group.  The parameters are as
follows:<p>

<<parmlist>>

<<parm n>> <b>Required.</b>  The identifier of the neighborhood in
which the group resides.<</parm>>

<<parm g>> <b>Required.</b>  The identifier of the civilian group to
which this group belongs.<</parm>>

<<parm local_name>> <b>Required.</b> A short human-readable name for the
group, e.g., a tribal name.<</parm>>

<<parm demeanor>> <b>Required.</b>  The demeanor of the civilian
group, e.g., its propensity to violence:<p>

<<athlib::edemeanor html>><</parm>>

<<parm rollup_weight>> <b>Required.</b> The rollup weight, used when
rolling up the group's satisfaction levels to the playbox level.  A
non-negative floating point value, nominally 1.0.<</parm>>

<<parm effects_factor>> <b>Required.</b> The indirect effects factor,
which scales indirect effects on other groups of satisfaction effects
on this group.  A non-negative floating point value, nominally 1.0.<</parm>>


<</parmlist>>

<<defitem GROUP:NBHOOD:DELETE {GROUP:NBHOOD:DELETE}>>

Deletes a neighborhood group, cleaning up dependencies.  In particular,
it:<p>

<ul>
  <li> TBD<p>
</ul>

The parameters are as follows:<p>

<<parmlist>>

<<parm n>> <b>Required.</b> The neighborhood in which the group
resides.<</parm>>

<<parm g>> <b>Required.</b> The civilian group to which this group
belongs.<</parm>>

<</parmlist>>

<<defitem GROUP:NBHOOD:UPDATE {GROUP:NBHOOD:UPDATE}>>

Updates an existing civilian group.  The parameters are as
defined for <<iref GROUP:NBHOOD:CREATE>>; <b>n</b> and <b>g</b> are
required, and specifies the group to update, while the remainder are
optional.<p>

<</deflist group nbhood>>

<<subsection "GROUP:ORGANIZATION:*">>

These orders relate to organization groups, i.e., NGOs, IGOs, and
Contractors, working in the playbox.<p>

<<deflist group organization>>

<<defitem GROUP:ORGANIZATION:CREATE {GROUP:ORGANIZATION:CREATE}>>

Creates a new organization group.  The parameters are as
follows:<p>

<<parmlist>>

<<parm g>>  <b>Required.</b> A brief <<xref ident(n) identifier>>
which uniquely identifies this group.<</parm>>

<<parm longname>> <b>Required.</b> A short human-readable name for the
group, e.g., "Red Cross".<</parm>>

<<parm color>> <b>Required.</b>  A color, specified as a hexadecimal
RGB string, "<code>#<i>rrggbb</i></code>" or
"<code>#<i>rrrrggggbbbb</i></code>". This color is used to color code
the group's icons.<</parm>>

<<parm orgtype>> <b>Required.</b> The organization type, as follows:<p>

<<::athlib::eorgtype html>><</parm>>

<<parm medical>> <b>Required.</b> The medical capability flag,
expressed as a boolean value (e.g., "Yes" or "No"). Indicates whether
the group can provide healthcare to local civilians.<</parm>>

<<parm engineer>> <b>Required.</b> The engineering capability flag,
expressed as a boolean value (e.g., "Yes" or "No").  Indicates whether
or not the group can provide engineering services to the local
civilians.<</parm>>

<<parm support>> <b>Required.</b> The support capability flag,
expressed as a boolean value (e.g., "Yes" or "No").  Indicates whether
or not the group provides support (food, water, education, etc.) to
the local civilians.<</parm>>

<<parm rollup_weight>> <b>Required.</b> The rollup weight, used when
rolling up the group's satisfaction levels to the playbox level.  A
non-negative floating point value, nominally 1.0.<</parm>>

<<parm effects_factor>> <b>Required.</b> The indirect effects factor,
which scales indirect effects on other groups of satisfaction effects
on this group.  A non-negative floating point value, nominally 1.0.<</parm>>

<</parmlist>>


<<defitem GROUP:ORGANIZATION:DELETE {GROUP:ORGANIZATION:DELETE}>>

Deletes a organization group, cleaning up dependencies.  In
particular, it:<p>

<ul>
  <li> TBD
</ul><p>

The parameters are as follows:<p>

<<parmlist>>

<<parm g>> <b>Required.</b> The group's ID.<</parm>>

<</parmlist>>

<<defitem GROUP:ORGANIZATION:UPDATE {GROUP:ORGANIZATION:UPDATE}>>

Updates an existing organization group.  The parameters are as
defined for <<iref GROUP:ORGANIZATION:CREATE>>; <b>g</b> is required, and
specifies the group to update, while the remainder are optional.<p>

<</deflist group organization>>


<<section "MAP:*">>

The <code>MAP:*</code> orders relate to the map display, and are implemented
by the <<xref map(sim)>> module.<p>

<<deflist map>>

<<defitem MAP:IMPORT {MAP:IMPORT}>>

Imports a map image file into the scenario.  The parameters are as
follows:<p>

<<parmlist>>

<<parm filename>> <b>Required.</b> The name of the image file to
import and use as a map.<</parm>>

<</parmlist>>

<</deflist map>>


<<section "NBHOOD:*">>

The <code>NBHOOD:*</code> orders are used to create and manipulate map
regions called neighborhoods.  They are implemented
by the <<xref nbhood(sim)>> module.<p>

<<deflist nbhood>>

<<defitem NBHOOD:CREATE {NBHOOD:CREATE}>>

Creates a new neighborhood.  The parameters are as
follows:<p>

<<parmlist>>

<<parm n>> <b>Required.</b>  A brief <<xref ident(n) identifier>>
which uniquely identifies this neighborhood.<</parm>>

<<parm longname>> <b>Required.</b> A short human-readable name for the
neighborhood, e.g., "Los Angeles".<</parm>>

<<parm urbanization>> <b>Required.</b> The neighborhood's urbanization
level:<p>

<<::athlib::eurbanization html>><</parm>>

<<parm refpoint>> <b>Required.</b> The neighborhood's reference point,
expressed as a <<xref mapref(n)>> mapref string.  This is a location
within the neighborhood's polygon.<</parm>>

<<parm polygon>> <b>Required.</b> The neighborhood's boundary polygon,
expressed as a list of <<xref mapref(n)>> mapref strings.<</parm>>

<</parmlist>>

<<defitem NBHOOD:DELETE {NBHOOD:DELETE}>>

Deletes a neighborhood, cleaning up dependencies.  In particular it:<p>

<ul>
  <li> Deletes all neighborhood groups in this neighborhood.<p>
</ul>

The parameters are as follows:<p>

<<parmlist>>

<<parm n>> <b>Required.</b> The neighborhood's ID.<</parm>>

<</parmlist>>

<<defitem NBHOOD:LOWER {NBHOOD:LOWER}>>

Lowers a neighborhood to the bottom of the stacking order, below
any neighborhoods which overlap it.  The parameters are as follows:<p>

<<parmlist>>

<<parm n>> <b>Required.</b> The neighborhood's ID.<</parm>>

<</parmlist>>

<<defitem NBHOOD:RAISE {NBHOOD:RAISE}>>

Raises a neighborhood to the top of the stacking order, over
any neighborhoods which it overlaps.  The parameters are as follows:<p>

<<parmlist>>

<<parm n>> <b>Required.</b> The neighborhood's ID.<</parm>>

<</parmlist>>

<<defitem NBHOOD:UPDATE {NBHOOD:UPDATE}>>

Updates a neighborhood's data.  The parameters are as
for <<iref NBHOOD:CREATE>>; <b>n</b>, is
required, and species the neighborhood to update; the remainder are
optional.<p>

<</deflist nbhood>>


<<section "SAT:*">>

The <code>SAT:*</code> orders are used to modify, and
manipulate satisfaction curves.<p>

<<deflist sat>>

<<defitem SAT:UPDATE {SAT:UPDATE}>>

Updates a satisfaction curve.  The parameters are as follows:<p>

<<parmlist>>

<<parm n>> <b>Required.</b> The curve's neighborhood ID.<</parm>>

<<parm g>> <b>Required.</b> The curve's group ID.<</parm>>

<<parm c>> <b>Required.</b> The curve's concern ID.<</parm>>

<<parm sat0>>
The initial value for this satisfaction curve, in either symbolic or
numeric form; numeric values must be in the range -100.0 to +100.0:<p>

<<::athlib::qsat html>>
<</parm>>

<<parm trend0>>
The long-term trend for this satisfaction curve, in either symbolic or
numeric form:<p>

<<::athlib::qtrend html>>
<</parm>>

<<parm saliency>>
The saliency of this concern to this group in this neighborhood, in
either symbolic or numeric form; numeric values must be in the range
0.0 to 1.0:<p>

<<::athlib::qsaliency html>>
<</parm>>

<</parmlist>>


<</deflist sat>>



<<section AUTHOR>>

Will Duquette<p>

<</manpage>>
