<<manpage appwin(sim) "Application Window Widget">>

<<section SYNOPSIS>>

<pre>
package require app_sim 1.0
</pre>

<<itemlist>>

<<section DESCRIPTION>>

appwin(sim) is a snit::widget implementing the application
windows.  There are two flavors: the main window, and browser
windows.  The main window provides a command-line interface (CLI); in
addition, closing it terminates the application.  The application
creates a single main window and as many browsers as the user likes.<p>

<<section OPTIONS>>

The appwin(sim) widget has the same options as the
<<xref tk:toplevel(n)>> widget, in addition to the following:<p>

<<deflist options>>

<<defopt {-main <i>flag</i>}>>

If <i>flag</i> is <b>yes</b>, then the new window will be a "main"
window, i.e., closing it will exit the application.  Otherwise, it
will just another browser window.  Defaults to <b>no</b>.  This option
can only be set when the widget is created.<p>

<</deflist>>

<<section COMMANDS>>

appwin(sim) defines the following commands:<p>

<<deflist commands>>

<<defitem "appwin" {appwin <i>pathName</i> ?<i>option value...</i>?}>>

Creates a appwin(sim) widget called <i>pathName</i>, given the
<<xref OPTIONS options>>.  Returns <i>pathName</i>.<p>

<<defitem "appwin error" {appwin error <i>text</i>}>>

Displays an error message dialog containing the
<<xref template(n) tsubst>>'d <i>text</i>.<p>

<<defitem "appwin new" {appwin new ?<i>option value...</i>?}>>

Creates a new appwin(sim) widget given the
<<xref OPTIONS options>>, generating the window name automatically.
Returns the new window's name.<p>


<<defitem "appwin puts" {appwin puts <i>text</i>}>>

Writes the text to the window's message line.<p>


<<defitem "appwin savehistory" {appwin savehistory}>>

Saves the window's CLI widget's command history to
<code>~/.athena/history.cli</code>.  It's an error to call this for
anything but the <code>-main</code> appwin(sim) window.

<</deflist commands>>

<<section "INSTANCE COMMAND">>

Each instance of appwin(sim) has the following subcommands:<p>

<<deflist instance>>

<<defitem ask {<i>pathName</i> ask <i>mode text</i>}>>

Displays <i>text</i> in a question dialog centered on the window.
Variables and commands in <i>text</i> are interpolated using
<<xref template(n) tsubst>> from <<xref template(n)>>.<p>

The <i>mode</i> may be <b>yesno</b> or <b>yesnocancel</b>; this
determines whether the dialog shows two buttons or three.  Returns the
symbolic name of the selected button, e.g., <b>yes</b>, <b>no</b>, or
<b>cancel</b>.<p>

<<defitem configure {<i>pathName</i> configure <i>option value...</i>}>>

Sets the value of the specified options.<p>

<<defitem cget {<i>pathName</i> cget <i>option</i>}>>

Returns the value of the specified <i>option</i>.<p>

<<defitem error {<i>pathName</i> error <i>text</i>}>>

Displays <i>text</i> in an error dialog centered on the window.
Variables and commands in <i>text</i> are interpolated using
<<xref template(n) tsubst>> from <<xref template(n)>>.<p>

<<defitem puts {<i>pathName</i> puts <i>text</i>}>>

Writes <i>text</i> to the window's message line.<p>

<</deflist instance>>


<<section ENVIRONMENT>>

Requires Tcl 8.5 or later.<p>

<<section AUTHOR>>

Will Duquette<p>

<<section HISTORY>>

Original package.

<</manpage>>





