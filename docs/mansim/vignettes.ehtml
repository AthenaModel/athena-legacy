<<manpage vignettes(sim) "Vignettes">>

<<section DESCRIPTION>>

The modules in minerva_sim(1) make great use of event notification to
trigger application behavior.  For example, GUI updates are generally
triggered by <<xref notifier(n)>> events sent by the simulation; and a
variety of application behavior is triggered by GUI events.  This man
page describes the most important vignettes using sequence
diagrams.<p>

<<subsection "Conventions">>

The names of most actors are simply the names the man pages for the
relevant modules.  For modules within minerva_sim(1), the "(sim)"
suffix is omitted from the man page name.  Names in ALL CAPS represent
other entities; for example, the name "GUI" refers to user
interactions with the GUI.<p>

<<section "SCENARIO MANAGEMENT">>

The vignettes in this section involve the management of scenario
files, i.e., opening, saving, and so forth.<p>

<<subsection "New Scenario">>

The user wishes to begin work on a new scenario.<p>

<<sequence -narration {
actor GUI
actor mainwin
actor scenario
actor mapviewer
actor SIM

message GUI mainwin "File/New Scenario"

action mainwin "Allow user to save unsaved data."

message mainwin scenario "scenario new"

action scenario "Clears the scenario data."

message scenario SIM "SIM reconfigure" {
    All relevant simulation modules are reconfigured in appropriate sequence.
}

message scenario {mainwin mapviewer} <Reconfigure>

}>>

<<subsection "Open Scenario">>

The user wishes to open an existing scenario.<p>

<<sequence -narration {
actor GUI
actor mainwin
actor scenario
actor mapviewer
actor SIM

message GUI mainwin "File/Open Scenario"

action mainwin "Allow user to save unsaved data."

message mainwin scenario "scenario open \$filename"

action scenario "Loads the scenario data."

message scenario SIM "SIM reconfigure" {
    All relevant simulation modules are reconfigured in appropriate sequence.
}

message scenario {mainwin mapviewer} <Reconfigure>

}>>

<<subsection "Save Scenario">>

The user wishes to save the current scenario.<p>

<<sequence -narration {
actor GUI
actor mainwin
actor scenario

message GUI mainwin "File/Save Scenario"

action mainwin "Allow user to select the file name, if need be."

message mainwin scenario "scenario save \$filename"

action scenario "Saves the scenario data to disk."
}>>

<<subsection "Exit Application">>

The user wishes to exit the application.<p>

<<sequence -narration {
actor GUI
actor mainwin
actor app

message GUI mainwin "File/Exit"

action mainwin "Allow user to save unsaved data."

message mainwin app "app exit"

action app "Shut down the application."
}>>

<<section "ORDER PROCESSING">>

<<subsection "Order Sent by Dialog">>

The following vignette describes the mechanism by which
orders are entered using an order dialog.<p>

<<sequence -narration {
actor GUI
actor ordergui
actor order
actor SIM

message GUI ordergui "ordergui enter \$order"

action ordergui "The user enters order parameter values"

message ordergui order "order send \$order \$parmdict"

action order "The order is validated."

message order SIM ...

action SIM "The order takes effect in the simulation."
}>>

<<subsection "Order Sent Directly">>

Of course, the GUI can also send orders directly.<p>

<<sequence -narration {
actor GUI
actor order
actor SIM

message GUI order "order send \$order \$parmdict"

action order "The order is validated."

message order SIM ...

action SIM "The order takes effect in the simulation."
}>>

<<section "NEIGHBORHOOD ORDERS">>

<<subsection "NBHOOD:CREATE">>

<<sequence -narration {
actor GUI
actor order
actor nbhood
actor mapviewer

message GUI    order     "NBHOOD:CREATE \$parms"
message order  nbhood    "nbhood create \$parms"
message nbhood mapviewer "<NbhoodCreated> \$n"
}>>

<<subsection "NBHOOD:LOWER">>

<<sequence -narration {
actor GUI
actor order
actor nbhood
actor mapviewer

message GUI    order     "NBHOOD:LOWER \$parms"
message order  nbhood    "nbhood lower \$parms"
message nbhood mapviewer "<NbhoodLowered> \$n"
}>>

<<subsection "NBHOOD:RAISE">>

<<sequence -narration {
actor GUI
actor order
actor nbhood
actor mapviewer

message GUI    order     "NBHOOD:RAISE \$parms"
message order  nbhood    "nbhood raise \$parms"
message nbhood mapviewer "<NbhoodRaised> \$n"
}>>

<<section "MISCELLANEOUS ACTIONS">>

<<subsection "Import Map">>

The user wishes to import a new map into the current scenario.<p>

<<sequence -narration {
actor GUI
actor mainwin
actor map
actor mapviewer

message GUI mainwin "File/Import Map"

message mainwin map "map import \$filename"

action map "Imports the map into the RDB, and loads it."

message map mapviewer <MapChanged>

action mapviewer "Displays the map."

}>>

<<section AUTHOR>>

Will Duquette<p>

<</manpage>>





