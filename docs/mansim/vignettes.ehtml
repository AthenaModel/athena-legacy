<<manpage vignettes(sim) "Vignettes">>

<<section DESCRIPTION>>

The modules in minerva_sim(1) make great use of event notification to
trigger application behavior.  For example, GUI updates are generally
triggered by <<xref notifier(n)>> events sent by the simulation; and a
variety of application behavior is triggered by GUI events.  This man
page describes the most important vignettes using sequence
diagrams.<p>

<<subsection "Actors">>

The names of most actors are simply the names the man pages for the
relevant modules.  For modules within minerva_sim(1), the "(sim)"
suffix is omitted from the man page name.

Names in ALL CAPS represent notional entities:

<ul>
  <li> <b>GUI</b>: The GUI in general.
  <li> <b>SIM</b>: The simulation in general.  In specific cases,
       might refer to some arbitrary module, or to any number of modules.
</ul>

<<subsection "Messages">>

Message text follows one of the following patterns:<p>

<b>Menu Items:</b> e.g., "File/Save Scenario".  Submenus are indicated
by slashes, as shown.<p>

<b>Simulation Orders:</b> E.g., NBHOOD:CREATE.  Orders are shown
without parameters, unless it's significant for the control flow,
since orders typicall have too many parameters to list.<p>

<b>Tk and Notifier Events:</b> E.g., &lt;&lt;Nbhood-1&gt;&gt;,
&lt;Reconfigure&gt;.  These are shown in angle brackets, as they
appear in the code.  Parameters are shown as appropriate.  Implies
that the receiving actor has a binding for the event.  These messages
can be received by multiple actors.<p> 

<b>Object Invocation:</b> Invocation of object methods, and indeed any
other command, is indicated by writing the actual command, e.g.,
"scenario open $filename".  Parameters are shown as appropriate.<p>

<b>Generic Method Dispatch:</b> Some diagrams, e.g.,
<<xref "Open Scenario">>, will indicate that the same method is called
on multiple objects by using a generic object/actor name, e.g., "SIM
reconfigure" indicates that the sending actor explicitly calls the
"reconfigure" method for every simulation module that cares about it.<p>

<<section "SCENARIO MANAGEMENT">>

The vignettes in this section involve the management of scenario
files, i.e., opening, saving, and so forth.<p>

<<subsection "New Scenario">>

The user wishes to begin work on a new scenario.<p>

<<sequence -narration {
actor GUI
actor appwin
actor scenario
actor mapviewer
actor SIM

message GUI appwin "File/New Scenario"

action appwin "Allow user to save unsaved data."

message appwin scenario "scenario new"

action scenario "Clears the scenario data."

message scenario SIM "SIM reconfigure" {
    All relevant simulation modules are reconfigured in appropriate sequence.
}

message scenario {appwin mapviewer} <Reconfigure>

}>>

<<subsection "Open Scenario">>

The user wishes to open an existing scenario.<p>

<<sequence -narration {
actor GUI
actor appwin
actor scenario
actor mapviewer
actor SIM

message GUI appwin "File/Open Scenario"

action appwin "Allow user to save unsaved data."

message appwin scenario "scenario open \$filename"

action scenario "Loads the scenario data."

message scenario SIM "SIM reconfigure" {
    All relevant simulation modules are reconfigured in appropriate sequence.
}

message scenario {appwin mapviewer} <Reconfigure>

}>>

<<subsection "Save Scenario">>

The user wishes to save the current scenario.<p>

<<sequence -narration {
actor GUI
actor appwin
actor scenario
actor saveable(i)
actor SIM

message GUI appwin "File/Save Scenario"

action appwin "Allow user to select the file name, if need be."

message appwin scenario "scenario save \$filename"

message scenario saveable(i) "checkpoint" {
    Acquires the checkpoint data for each saveable(i) module.
}

message scenario SIM "<Saving>" {
    Directs simulation modules to prepare for the save.
}

action scenario "Saves the scenario data to disk."

message scenario appwin <ScenarioSaved>

action appwin "Updates file name in window title."
}>>

<<subsection "Exit Application">>

The user wishes to exit the application.<p>

<<sequence -narration {
actor GUI
actor appwin
actor app

message GUI appwin "File/Exit"

action appwin "Allow user to save unsaved data."

message appwin app "app exit"

action app "Shut down the application."
}>>

<<section "ORDER PROCESSING">>

<<subsection "Order Sent by Dialog">>

The following vignette describes the mechanism by which
orders are entered using an order dialog.<p>

<<sequence -narration {
actor GUI
actor ordergui
actor order
actor SIM

message GUI ordergui "ordergui enter \$order"

action ordergui "The user enters order parameter values"

message ordergui order "order send \$order \$parmdict"

action order "The order is validated."

message order SIM ...

action SIM "The order takes effect in the simulation."
}>>

<<subsection "Order Sent Directly">>

Of course, the GUI can also send orders directly.<p>

<<sequence -narration {
actor GUI
actor order
actor SIM

message GUI order "order send \$order \$parmdict"

action order "The order is validated."

message order SIM ...

action SIM "The order takes effect in the simulation."
}>>

<<section "MAP ORDERS">>

<<subsection "MAP:IMPORT">>

The user wishes to import a new map into the current scenario.<p>

<<sequence -narration {
actor GUI
actor order
actor map
actor mapviewer

message GUI   order MAP:IMPORT
message order map   "map import \$filename"

action map "Imports the map into the RDB, and loads it."

message map mapviewer <MapChanged>

action mapviewer "Displays the map."

}>>


<<section "NEIGHBORHOOD ORDERS">>

<<subsection "NBHOOD:CREATE">>

<<sequence -narration {
actor GUI
actor order
actor nbhood
actor mapviewer
actor nbhoodbrowser

message GUI    order                     NBHOOD:CREATE
message order  nbhood                    "nbhood create \$parms"
message nbhood {mapviewer nbhoodbrowser} "<Entity> create \$n"
}>>

<<subsection "NBHOOD:DELETE">>

<<sequence -narration {
actor GUI
actor order
actor nbhood
actor mapviewer
actor nbhoodbrowser

message GUI    order                     NBHOOD:DELETE
message order  nbhood                    "nbhood delete \$n \$parms"
message nbhood {mapviewer nbhoodbrowser} "<Entity> delete \$n"
}>>


<<subsection "NBHOOD:UPDATE">>

<<sequence -narration {
actor GUI
actor order
actor nbhood
actor mapviewer
actor nbhoodbrowser

message GUI    order                     NBHOOD:UPDATE
message order  nbhood                    "nbhood update \$n \$parms"
message nbhood {mapviewer nbhoodbrowser} "<Entity> update \$n"
}>>

<<subsection "NBHOOD:LOWER">>

<<sequence -narration {
actor GUI
actor order
actor nbhood
actor mapviewer
actor nbhoodbrowser

message GUI    order                     NBHOOD:LOWER
message order  nbhood                    "nbhood lower \$n \$parms"
message nbhood {mapviewer nbhoodbrowser} "<Entity> lower \$n"
}>>

<<subsection "NBHOOD:RAISE">>

<<sequence -narration {
actor GUI
actor order
actor nbhood
actor mapviewer
actor nbhoodbrowser

message GUI    order                     NBHOOD:RAISE
message order  nbhood                    "nbhood raise \$n \$parms"
message nbhood {mapviewer nbhoodbrowser} "<Entity> raise \$n"
}>>


<<section AUTHOR>>

Will Duquette<p>

<</manpage>>






