<<manpage nbhood(sim) "Neighborhood Manager">>

<<swallow {package require minlib}>>

<<section SYNOPSIS>>

<pre>
package require app_sim 1.0
</pre>

<<itemlist>>

<<section DESCRIPTION>>

nbhood(sim) is the module responsible for creating and manipulating
neighborhoods for <<xref minerva_sim(1)>>.  It implements the
various NBHOOD:* orders, and provides support for order-processing.<p>

Every neighborhood has a long human-readable name; but neighborhoods
are usually identified by their short name, a unique ID.<p>

The module provides two kinds of command: mutators and queries.
Mutator commands affect the state of the simulation; each will either set
<<iref lastundo>> to a command that will undo the change, or will
clear it indicating that no undo is possible.<p>

<<section "COMMANDS">>

nbhood(sim) provides the following commands for use by the application.<p>

<<deflist commands>>

<<defitem find {nbhood find <i>mx my</i>}>>

Given a point <i>mx,my</i> in map coordinates, returns the short name of the
containing neighborhood, or "" if none.<p>

<<defitem names {nbhood names}>>

Returns a list of the neighborhood short names, in order of definition.<p>

<<defitem reconfigure {nbhood reconfigure}>>

Updates the nbhood(sim) module when the scenario has changed.  It
should rarely be necessary to call this directly.<p>

<<defitem validate {nbhood validate <i>n</i>}>>

Validates and returns <i>name</i> as a neighborhood short
name.  If the name is invalid, throws an error with
<code>-errorcode</code> <b>INVALID</b>.<p>

<</deflist commands>>

<<section "NOTIFIER EVENTS">>

nbhood(sim) sends the following events, primarily to notify the GUI of
significant changes to the nbhood data. In each case, <i>n</i> is the
neighborhood's short name.<p>

<<deflist events>>

<<defitem Entity {&lt;Entity&gt; <i>operation n</i>}>>

Sent on change to some neighborhood <i>n</i>.  The <i>operation</i>
indicates the kind of change; there are the following possibilities:<p>

<<deflist entity>>

<<defitem "Entity create" {&lt;Entity&gt; create <i>n</i>}>>

The neighborhood has just been created.<p>

<<defitem "Entity delete" {&lt;Entity&gt; delete <i>n</i>}>>

The neighborhood has been deleted.

<<defitem "Entity update" {&lt;Entity&gt; update <i>n</i>}>>

One or more of the neighborhood's data items has been updated.<p>

<<defitem "Entity stack" {&lt;Entity&gt;}>>

The neighborhood stacking order has changed for some reason.<p>

<</deflist entity>>

<</deflist events>>

<<section ENVIRONMENT>>

Requires Tcl 8.5 or later.<p>

<<section AUTHOR>>

Will Duquette<p>

<<section HISTORY>>

Original package.

<</manpage>>




