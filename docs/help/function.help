# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    function.help
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    Athena Help Documentation: Executive Functions
#
#    This file is included into athena.help.
#
#    Function pages have paths like /function/{name}.
#
#-----------------------------------------------------------------------

page / function "Executive Functions" {
    <<title>>
    Athena provides a number of functions that can be used in math
    expressions in Athena <<cref /command executive>> scripts, at the
    Athena command-line interface (CLI), and in 
    <<cref /object/condition/expr>>s.  For example, the 
    <<cref /function/mood>> function retrieves a group's mood given
    its name:<p>

    <pre>
    if {mood("G1") > 20.0} {
        ...
    }
    </pre>

    Note that string literals need to be enclosed in double-quotes
    when used in Tcl expressions.<p>

    All executive functions can also be used as commands:<p>

    <<cli {
        set m [mood G1]
    }>>

    Most functions depend on data that is only available when the
    simulation is locked.  During scenario prep, these functions will
    return some default value, as described on their help pages.<p>

    This page lists the available functions.<p>

    <<childlinks>>
}

# function name text
#
# name     The name of the function, e.g., "mood"
#
# Defines a function page, defining the parent/child links properly.

proc function {name text} {
    set ndx [string first "(" $name]
    set slug [string range $name 0 $ndx-1]

    page /function $slug $name "<<function_syntax>>\n$text"
}

macro function_syntax {} {
    set fullname [pageinfo title]
    set toplink "<a href=\"/function\">Executive Function</a>"
} {
    |<--
    [mktitle small $toplink $fullname ""]
}

#=======================================================================
# affinity

function "affinity(x,y)" {
    Returns the affinity of <<term group>> or <<term actor>> <i>x</i> with 
    <<term group>> or <<term actor>> <i>y</i> as a number between -1.0 and 1.0.<p>

    This function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/affinity>> rule.
}

#=======================================================================
# assigned

function "assigned(g,activity,n)" {
    Returns the number of personnel of <<term frcgroup>> or 
    <<term orggroup>> <i>g</i> assigned to do the explicit 
    <<term activity>> in <<term nbhood>> <i>n</i><p>

    Returns 0 when the scenario is unlocked.<p>

    This function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/assigned>> rule.
}

#=======================================================================
# consumers

function "consumers(g,?g...?)" {
    Given the names of one or more <<term civgroup>>s, returns the 
    number of <<term consumer>>s belonging to those civgroups.<p>

    Returns 0 when the scenario is unlocked.<p>

    This function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/group_consumers>> rule.
}

#=======================================================================
# controls

function "controls(a,n,?n...?)" {
    Returns 1 if <<term actor>> <i>a</i> controls the listed 
    <<term nbhood>>s,
    and 0 otherwise.  At least one neighborhood must be specified.<p>

    Neighborhood control is not computed until the scenario is locked; the
    function will throw an error if the data is unavailable.
}

#=======================================================================
# coop

function "coop(f,g)" {
    Returns the cooperation of <<term civgroup>> <i>f</i> with 
    <<term frcgroup>> <i>g</i> as a number between 0.0 and 100.0.<p>

    Returns 50.0 when the scenario is unlocked.<p>

    This function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/coop>> rule.
}

#=======================================================================
# coverage

function "coverage(g,activity,n)" {
    Returns the coverage fraction for <<term frcgroup>> or 
    <<term orggroup>> <i>g</i> assigned to implicit or explicit
    <<term activity>> in <<term nbhood>> <i>n</i>
    as a number between 0.0 and 1.0.<p>

    Returns 0.0 when the scenario is unlocked.<p>

    This function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/coverage>> rule.
}

#=======================================================================
# deployed

function "deployed(g,n,?n...?)" {
    Returns the personnel of <<term frcgroup>> or <<term orggroup>> 
    deployed in the <<term nbhood>>s n. <p>

    Returns 0 when the scenario is unlocked.<p>

    This function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/deployed>> rule.
}

#=======================================================================
# gdp

function "gdp()" {
    Returns the Gross Domestic Product of the regional economy in
    base-year dollars.<p>

    Returns 0.00 when the scenario is unlocked.<p>

    It will return 0.00 if the economic model is
    disabled see <<cref /parmdb/econ/disable>>.<p>

    This function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/gdp>> rule.
}

#=======================================================================
# hrel

function "hrel(f,g)" {
    Returns the horizontal relationship of <<term group>> <i>f</i> with 
    <<term group>> <i>g</i> as a number between -1.0 and 1.0.<p>

    Returns 0.0 when the scenario is unlocked.<p>

    This function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/hrel>> rule.
}

#=======================================================================
# influence

function "influence(a,n)" {
    Returns the influence of <<term actor>> <i>a</i> in 
    <<term nbhood>> <i>n</i>
    as a number between 0.0 and 1.0.<p>

    Returns 0.0 when the scenario is unlocked.<p>

    This function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/influence>> rule.
}

#=======================================================================
# local_consumers

function "local_consumers()" {
    Returns the number of <<term consumer>>s residing in local 
    <<term nbhood>>s.<p>

    Returns 0 when the scenario is unlocked.<p>

    This function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/local_consumers>> rule.
}

#=======================================================================
# local_pop

function "local_pop()" {
    Returns the population of civilian groups in the local <<term nbhood>>s.<p>

    Returns 0 when the scenario is unlocked.<p>

    This function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/local_population>> rule.
}

#=======================================================================
# mobilized

function "mobilized(g,?g...?)" {
    Returns the personnel of <<term frcgroup>> or <<term orggroup>> 
    mobilized in the playbox. <p>

    Returns 0 when the scenario is unlocked.<p>

    This function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/mobilized>> rule.
}

#=======================================================================
# mood

function "mood(g)" {
    Returns the <<term mood>> of <<term civgroup>> <i>g</i> as a 
    number between -100.0 and 100.0.<p>

    Returns 0.0 when the scenario is unlocked.<p>

    This function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/mood>> rule.

}

#=======================================================================
# nbconsumers

function "nbconsumers(n,?n...?)" {
    Given the names of one or more <<term nbhood>>s, returns the 
    number of <<term consumer>>s residing in those nbhoods.<p>

    Returns 0 when the scenario is unlocked.<p>

    This function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/nbconsumers>> rule.
}

#=======================================================================
# nbcoop

function "nbcoop(n,g)" {
    Returns the <<term cooperation>> of <<term nbhood>> <i>n</i> with
    <<term frcgroup>> <i>g</i>.<p>

    Neighborhood cooperation is the
    average of the cooperations of the <<term civgroup>>s living in
    the neighborhood with the given force group.<p>

    Returns 50.0 when the scenario is unlocked.<p>

    This function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/nbcoop>> rule.
}

#=======================================================================
# nbmood

function "nbmood(n)" {
    Returns the <<term mood>> of <<term nbhood>> <i>n</i> as a 
    number between -100.0 and 100.0.<p>

    Returns 0.0 when the scenario is unlocked.<p>

    This function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/nbmood>> rule.

}

#=======================================================================
# nbpop

function "nbpop(n,?n...?)" {
    Returns the civilian population in the <<term nbhood>>s given.<p>

    Returns 0 when the scenario is unlocked.<p>

    This function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/nbpopulation>> rule.
}

#=======================================================================
# nbsupport

function "nbsupport(a,n)" {
    Returns the support for <<term actor>> <i>a</i>  in 
    <<term nbhood>> <i>n</i> as a number between 
    0.0 and 1.0.<p>

    Returns 0.0 when the scenario is unlocked.<p>

    This function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/nbsupport>> rule.
}

#=======================================================================
# now

function "now()" {
    Returns the current simulation time in integer weeks.<p>

    Returns 0 when the scenario is unlocked.
}

#=======================================================================
# parm

function "parm(parm)" {
    Returns the value of <<cref /parmdb "model parameter">> <i>parm</i>.
}

#=======================================================================
# pbconsumers

function "pbconsumers()" {
    Returns the number of <<term consumer>>s residing in the playbox.<p>

    Returns 0 when the scenario is unlocked.<p>

    This function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/playbox_consumers>> rule.
}

#=======================================================================
# pctcontrol

function "pctcontrol(a,?a...?)" {
    Given the names of one or more <<term actor>>s, returns the 
    percentage of <<term nbhood>>s controlled by those actors as a 
    number from 0.0 to 100.0.

    Returns 0.0 when the scenario is unlocked.<p>

    This function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/pctcontrol>> rule.


}

#=======================================================================
# pop

function "pop(g,?g...?)" {
    Returns the Population of the <<term civgroup>>s in the playbox.<p>

    Returns 0 when the scenario is unlocked.<p>

    This function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/group_population>> rule.
}

#=======================================================================
# sat

function sat(g,c) {
    Returns the <<term satisfaction>> of 
    <<term civgroup>> <i>g</i> with respect to <<term concern>>
    <i>c</i> as a number between -100.0 and 100.0.<p>

    Returns 0.0 when the scenario is unlocked.<p>

    This function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/sat>> rule.

}

#=======================================================================
# security

function security(g,n) {
    Returns the <<term security>> of <<term group>> <i>g</i> in 
    <<term nbhood>> <i>n</i> as a number between -100 and 100.<p>

    If n is not given, then it returns the <<term security>> of 
    <<term civgroup>> <i>g</i> as a number between -100 and 100.<p>

    Returns 0 when the scenario is unlocked.<p>

    If n is given, this function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/security>> rule.<p>

    If n is NOT given, this function is equivalent to the 
    <<cref /gofer/number>>'s <<cref /gofer/number/security_civ>> rule.
}

#=====================================================================
# support

function support(a,g,?n?) {
    Returns the support for <<term actor>> <i>a</i>  by
    <<term group>> <i>g</i> in <<term nbhood>> <i>n</i> 
    as a number between 0.0 and 1.0.  <p>
    
    If n is not entered, then it assumes the group is
    a civilian group.<p>
    
    Returns 0 when the scenario is unlocked.<p>
    
    If a nbhood is entered, then this function is 
    equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/support>> rule.
    
    If a nbhood is not entered, then this function is
    equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/support_civ>> rule.
}

#=======================================================================
# supports

function supports(a,b,?n...?) {
    Returns 1 if <<term actor>> <i>a</i> supports actor <i>b</i> 
    politically, and 0 otherwise.<p>

    If no <<term nbhood>> is given, the function returns 1 if actor
    <i>a</i> usually supports actor <i>b</i>, as indicated in the
    definition of actor <i>a</i>.  If one or more neighborhoods are
    listed, the function returns 1 if <i>a</i> supports <i>b</i> in
    all of them.<p>

    For one actor to support another actor politically means that the
    first actor directs his supporters to support the second actor.
    These supporters (i.e., group members) contribute to the second
    actor's influence rather than to the first actor's influence.  See
    also the <<term actor>> object, and the 
    <<cref /object/tactic/support>>.<p>
}

#=======================================================================
# troops

function troops(g,?n...?) {
    Returns the number of personnel in the playbox that belong to
    <<term frcgroup>> or <<term orggroup>> <i>g</i>.  If one or more
    <<term nbhood>>s are given, returns the number of personnel
    just in those neighborhoods.<p>

    Force levels are not computed until the scenario is locked; the
    function return 0 until then.
}

#=======================================================================
# unemp

function "unemp()" {
    Returns the playbox-wide unemployment rate as a number between
    0.0 and 100.0.  It is an error if the economic model is
    disabled; see <<cref /parmdb/econ/disable>>.<p>

    The unemployment rate is assumed to be the same in all
    neighborhoods; hence, there is no function that returns 
    neighborhood unemployment rates.<p>

    <b>Warning:</b> This function will return 0.0 before the 
    scenario is locked, and in <<cref /object/condition/expr>>s when
    strategies are executed at time 0.<p>
}

#=======================================================================
# volatility

function volatility(n) {
    Returns the <<term volatility>> of 
    <<term nbhood>> <i>n</i> as a number
    from 0 to 100.<p>

    Volatility is not computed until the scenario is locked; the
    function will throw an error if the data is unavailable.<p>
}

#=======================================================================
# vrel

function "vrel(g,a)" {
    Returns the vertical relationship of <<term group>> <i>g</i> with 
    <<term actor>> <i>a</i> as a number between -1.0 and 1.0.<p>

    Returns 0.0 when the scenario is unlocked.<p>

    This function is equivalent to the <<cref /gofer/number>>'s
    <<cref /gofer/number/vrel>> rule.
}