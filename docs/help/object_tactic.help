# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    object_tactic.help
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    Athena Help Documentation: Tactic Simulation Objects
#
#    This file is included into object.help.
#
#-----------------------------------------------------------------------

# This object defines attributes shared across all tactic types.

object tactic_ {
    noun "tactic"
    overview {
        Tactics are the <<cref /object>> by which an
        <<term agent>> implements his <<term strategy>>.  For
        example, an <<term actor>> may use the 
        <<cref /object/tactic/deploy>>
        to position troops in a neighborhood, and then use the
        <<cref /object/tactic/attroe>> to call for attacks on another
        group.  Tactics may have <<term condition>>s attached
        to them.  Tactics are browsed and 
        edited on the <<tab Strategy>>.
    }

    # The tactic ID for the object page
    attribute id "Tactic ID" {
        The tactic ID, an integer number that uniquely
        identifies the tactic.  In orders, the parameter name is
        <i>tactic_id</i>.
    } -tags {object}

    # The tactic ID for the order pages
    attribute tactic_id "Tactic ID" {
        The tactic ID, an integer number that uniquely
        identifies the tactic.
    }

    attribute agent "Agent" {
        The ID of the <<term agent>> to whose strategy this
        tactic belongs.
    } -tags {object}

    attribute typename "Tactic Type" {
        The tactic's type, e.g., 
        <b><<cref /object/tactic/deploy DEPLOY>></b>.
    } -tags {object}

    attribute state "State" {
        The tactic's state, one of <b>normal</b>, <b>disabled</b>, or 
        <b>invalid</b>.  Both <b>disabled</b> and <b>invalid</b> tactics
        are ignored when the owner's strategy is executed; the
        difference is that <b>disabled</b> tactics are explicitly
        disabled by the user, while <b>invalid</b> tactics are disabled
        due to failing a sanity check.
    } -tags {object state}
}

page /object tactic "Tactic" {
    <<sotitle>>

    <<tactic_ overview>><p>

    There are many different kinds of tactic; all share the following
    parameters:<p>

    <<tactic_ parmlist -tags object>>

    The full set of tactics is as follows:<p>

    <<childlinks>>
}

#-----------------------------------------------------------------------
# ASSIGN Tactic

object tactic_assign {
    noun "ASSIGN tactic"
    overview {
        This <<term tactic>> assigns an 
        abstract <<term activity>> to an <<term actor>>'s
        <<term frcgroup>> or <<term orggroup>> personnel
        in a particular <<term nbhood>>.  The personnel must already
        be <<cref /object/tactic/deploy deployed>> in the
        neighborhood.  Athena will create a <<term unit>> containing
        the assigned personnel; the unit will be visible on the
        <<tab Map>>.<p>

        The number of troops to assign is determined by the personnel
        mode (<i>pmode</i>); see the table below.<p>

        The cost in dollars/person/week of assigning troops to do
        activities is defined for each activity using 
        <<cref /parmdb>>.  Look under <<cref /parmdb/activity/frc>> and
        <<cref /parmdb/activity/org>> for the cost parameters, e.g.,
        <<parmdb activity.FRC.PATROL.cost>>.  By
        default, all activity costs are set to zero.<p>

        Multiple ASSIGN tactics are cumulative.  The assignment lasts
        until the next strategy tock.
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute g "Group" {
        The ID of a <<term frcgroup>> or 
        <<term orggroup>> belonging to the tactic's owning <i>agent</i>.
    } -tags {update}

    attribute n "Neighborhood" {
        A <<term nbhood>> ID.  The personnel to be assigned will be 
        drawn from those deployed into this neighborhood.
    } -tags {create update}

    attribute activity "Activity" {
        The <<term activity>> to be assigned.  The valid
        abstract activities are different for different group types;
        see <i>Athena Rules Document</i>, delivered with the software,
        for the full set.
    } -tags {update}

    attribute pmode "Personnel Mode" {
        The personnel mode, which has one of the following values.<p>

        <b>ALL</b>: Athena will assign
        as many of the group's unassigned personnel as the actor 
        can afford.  If no unassigned personnel are available, the
        tactic succeeds trivially.  If personnel are available but
        there's not enough cash to assign any, the tactic fails due
        to insufficient cash.<p>

        <b>SOME</b>: Athena will assign
        the specified number of <i>personnel</i>.  The tactic fails
        if there are insufficient troops available to assign, or if
        the actor cannot afford to assign the requested number.<p>

        <b>UPTO</b>: Athena will assign
        as many troops as the actor can afford, from at least 
        the <i>min</i> number of personnel up to the
        given <i>max</i> number.  The tactic fails if there are fewer
        than <i>min</i> personnel available for assignment, or if
        the actor cannot afford at least <i>min</i> personnel.<p>

        <b>ALLBUT</b>: Athena will assign
        all but the specified number of <i>personnel</i>, leaving 
        <i>personnel</i> available for additional assignments.  The
        tactic operates on a best-efforts basis with respect to personnel;
        if there are only <i>personnel</i> or fewer troops available,
        the tactic will succeed trivially with an empty assignment.<p>

        <b>PERCENT</b>: Athena will assign a given <i>percent</i>
        of the group's unassigned personnel, rounding up (so that it always
        assigns at least one person).  If no personnel are available,
        succeeds trivially.  Fails if the actor cannot afford to 
        assign the requested percentage.
    } -tags {update}

    attribute personnel "Personnel" {
        When the <i>pmode</i> is <b>SOME</b>, the 
        number of unassigned personnel to be assigned.<p>

        When the <i>pmode</i> is <b>ALLBUT</b>, the number of unassigned
        personnel to retain; any excess will be be assigned.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute min "Min Personnel" {
        When the <i>pmode</i> is <b>UPTO</b>, the 
        minimum number of unassigned personnel to be assigned.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute max "Max Personnel" {
        When the <i>pmode</i> is <b>UPTO</b>, the 
        maximum number of unassigned personnel to be assigned.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute percent "Percentage" {
        When the <i>pmode</i> is <b>PERCENT</b>, the percentage of 
        unassigned troops to deploy, expressed as a real number, i.e.,
        a value of 3.5 will assign 3.5% of the unassigned troops.<p>

        This parameter is ignored for other modes.
    } -tags {update}
}

page /object/tactic assign "ASSIGN tactic" {
    <<sotitle>>

    <<tactic_assign overview>><p>

    Assign Troops tactics have the following attributes:<p>

    <<tactic_assign parmlist>>
}


#-----------------------------------------------------------------------
# ATTROE Tactic

object tactic_attroe {
    noun "ATTROE tactic"
    overview {
        This <<term tactic>> sets the attacking <<term roe>> for 
        force groups belonging to an <<term actor>>.<p>

        Attacking ROEs determine whether a
        <<term frcgroup>> will seek out and
        attack other force groups.  In Athena, force groups are either
        uniformed or non-uniformed.  (Non-uniformed forces are those that
        hide among the local population and use terrorist and other
        unconventional tactics.)<p>

        Athena's attrition model currently
        only supports attacks by uniformed force groups on non-uniformed
        force groups, and <i>vice versa</i>.  ROEs are set 
        <<term nbhood>> by neighborhood; thus, group A can be 
        directed to attack group B in neighborhood N1 but not in 
        neighborhood N2.<p>

        No force group will attack any other force group unless it is
        explicitly given an ROE to do so.<p>

        The new ROE applies only for the current week; to retain the
        new ROE over a period of weeks, execute the tactic each week.<p>

        Every force group has an attack cost, which defaults to $0/attack.
        If the attack cost is positive, then it will be expended for each
        of the requested attacks.  Unspent money will be returned at the
        end of the attrition assessment.<p>

        Attrition is not assessed on scenario
        lock, and so this tactic does not execute on lock.<p>
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute f "Attacking Group" {
        The attacking <<term frcgroup>>.  This group must
        belong to the owning <i>agent</i>, and may be uniformed or 
        non-uniformed.
    } -tags {update}

    attribute g "Defending Group" {
        The defending <<term frcgroup>>.  If the attacker
        is uniformed, this group must be non-uniformed, and 
        <i>vice versa</i>.
    } -tags {update}

    attribute n "In Neighborhood" {
        The <<term nbhood>> in which the attack(s) may take
        place.  Note that
        both groups must have personnel present in this neighborhood, 
        for any attacks to occur.
    } -tags {update}

    attribute roe "ROE" {
        The ROE proper.  The set of valid ROEs depends on whether
        attacking group <i>f</i> is uniformed or non-uniformed.<p>

        <b>Uniformed:</b>  The ROE must be one of the following values:<p>

        <<enumdoc ::projectlib::eattroeuf>>

        If the ROE is <b>ATTACK</b>, then group <i>f</i> will attempt to
        hunt down and destroy units of group <i>g</i> in neighborhood
        <i>n</i>; and if not, not.  Note that there is no difference
        between having an ROE of <b>DO_NOT_ATTACK</b> and not
        having an ROE at all.<p>

        <b>Non-Uniformed:</b>  The ROE must be one of the following
        values:<p>

        <<enumdoc ::projectlib::eattroenf>>

        If the ROE is <b>HIT_AND_RUN</b>, then group <i>f</i> will use
        hit-and-run tactics against group <i>g</i>, trying on each attack
        to nibble away at the uniformed force while taking minimal
        losses.<p>

        If the ROE is <b>STAND_AND_FIGHT</b>, then group <i>f</i> will
        expend a pre-determined number of troops in order to kill as many
        personnel of group <i>g</i> as possible.<p>

        Otherwise, group <i>f</i> will not attempt to attack.  Again, 
        there is no difference between having an ROE of
        <b>DO_NOT_ATTACK</b> and not having an ROE at all.
    } -tags {update}

    attribute attacks "Max Attacks" {
        The maximum number of attacks the attacker will conduct
        against the defender over the
        following week.  Note that the actual number of attacks is
        constrained by the presence of both attacker and defender, by the
        cooperation of the neighborhood with both groups, and by other
        factors.<p>

        During strategy execution, this tactic will consume the
        <i>agent</i>'s cash-on-hand for the the maximum number of attacks 
        provided for; if fewer
        attacks are actually conducted (which is extremely likely), the
        unused cash will be returned to the <i>agent</i> at the
        beginning of the next strategy tock.<p>
    } -tags {update}


}

page /object/tactic attroe "ATTROE tactic" {
    <<sotitle>>

    <<tactic_attroe overview>><p>

    Attacking ROE tactics have the following attributes:<p>

    <<tactic_attroe parmlist>>
}
#-----------------------------------------------------------------------
# BROADCAST

object tactic_broadcast {
    noun "BROADCAST tactic"
    overview {
        This <<term tactic>> broadcasts an <<term iom>> via a
        <<term cap>>.  The message may be attributed to a particular 
        actor, including the owner, or may be anonymous.  The message
        will have a particular preparation cost, in addition to the
        cost of transmission by the chosen <<term cap>>.<p>

        Note that the tactic owner might or might not have access to
        his chosen <<term cap>>, due to the decisions of the other
        actors.  This cannot be known until all strategies have been
        executed.  At that time, all pending broadcasts will occur;
        and if the tactic owner has no access to the chosen 
        <<term cap>>, the broadcast will be cancelled, and the cost 
        will be refunded.<p>
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute cap "CAP" {
        The ID of a <<term cap>> by which the <<term iom>> will be 
        sent.  For a successful broadcast, the <i>owner</i> must have 
        access to the <<term cap>>.
    } -tags {update}

    attribute a "Attr. Source" {
        The attributed source: the name of an <<term actor>>, 
        <b>SELF</b> if the message is to be attributed to the 
        <i>owner</i>, or <b>NONE</b> if the message is to be anonymous.
    } -tags {update}

    attribute iom "Message ID" {
        The <<term iom>> to be broadcast.
    } -tags {update}

    attribute cost "Prep. Cost" {
        The preparation cost for the message, as distinct from the 
        <<term cap>>'s broadcast cost.
    } -tags {update}
}

page /object/tactic broadcast "BROADCAST tactic" {
    <<sotitle>>

    <<tactic_broadcast overview>><p>

    BROADCAST tactics have the following attributes:<p>

    <<tactic_broadcast parmlist>>
}

#-----------------------------------------------------------------------
# CURSE Tactic
object tactic_curse {
    noun "CURSE tactic"
    overview {
        This SYSTEM <<term tactic>> causes a Complex User-defined
        Role-based Situation and Event (or CURSE) to be executed with
        all of it's injects.  Injects associated with a CURSE cause
        changes to one or more of: Horizontal relationships, Vertical
        relationships, Satisfaction and Cooperation.  Injects are similar
        to <<term mad>>s in that the changes to attitude are identical to 
        magic changes.  CURSEs are meant to be used when the effects of 
        something not already explictly modeled in Athena needs to be 
        injected into the simulation.
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute curse "CURSE ID" {
        The ID of the <<term curse>> to be executed.
    } -tags {update}

    attribute roles "Role Mapping" {
        The mapping of <<term role>>s to particular <<term group>>s and
        <<term actor>>s.  The mapping of roles completely depends on the
        types of injects defined for the <<term curse>>.
    } -tags {update}

}

page /object/tactic curse "CURSE tactic" {
    <<sotitle>>

    <<tactic_curse overview>><p>

    CURSE tactics have the following attributes:<p>

    <<tactic_curse parmlist>>
}

#-----------------------------------------------------------------------
# DEFROE Tactic

object tactic_defroe {
    noun "DEFROE tactic"
    overview {
        This <<term tactic>> sets the defensive <<term roe>> for 
        uniformed <<term frcgroup>>s belonging to an <<term actor>>.<p>

        Defending ROEs determine how a uniformed force group
        responds to attack by a non-uniformed force group: do they 
        shoot back, and if so under what conditions.  As such, it has 
        no direct costs, either in dollars or personnel.<p>

        Every uniformed force group has an automatically-created Defending
        ROE in every <<term nbhood>>; the ROE defaults to
        <b>FIRE_BACK_IF_PRESSED</b>.  This tactic adjusts the ROE
        as the actor desires.<p>

        The new ROE applies only for the current week; to retain the
        new ROE over a period of weeks, execute the tactic each week.<p>

        This tactic consumes no resources, and consequently never fails
        due to lack of resources.  Attrition is not assessed on scenario
        lock, and so this tactic does not execute on lock.<p>
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute g "Group" {
        The ID of a uniformed <<term frcgroup>>
        belonging to the tactic's owning <i>agent</i>.
    } -tags {update}

    attribute n "In Neighborhood" {
        The <<term nbhood>> for which the ROE will be set.
    } -tags {update}

    attribute roe "Defending ROE" {
        The ROE proper, one of the following values:<p>

        <<enumdoc ::projectlib::edefroeuf>>

        If the ROE is <b>HOLD_FIRE</b>, then the group will never fire
        back at attackers.  If the ROE is <b>FIRE_BACK_IF_PRESSED</b>,
        then the group will fire back only if the attacker continues to
        press the attack after the initial engagement.  That is, the group
        will <i>not</i> fire back if the attacker does a hit-and-run.  If
        the ROE is <b>FIRE_BACK_IMMEDIATELY</b>, the group will always
        fire back at its attackers.<p>

        Note that the number of civilian casualties depends on whether or
        not the group fires back at its attackers.
    } -tags {update}

}

page /object/tactic defroe "DEFROE tactic" {
    <<sotitle>>

    <<tactic_defroe overview>><p>

    Defensive ROE tactics have the following attributes:<p>

    <<tactic_defroe parmlist>>
}


#-----------------------------------------------------------------------
# DEMOB Tactic

object tactic_demob {
    noun "DEMOB tactic"
    overview {
        This tactic demobilizes 
        <<term frcgroup>> or 
        <<term orggroup>> personnel,
        i.e., it removes them from the playbox.  Only personnel available
        for deployment can be demobilized.<p>

        There are several ways to select the number of troops to demobilize;
        see the "Mode" parameter, below.<p>

        Multiple DEMOB tactics executed during a single
        week are cumulative.<p>

        The tactic only fails when the <i>mode</i> is <b>SOME</b> and 
        insufficient troops are available.  For all other modes, the 
        tactic operates on a best-efforts basis and is considered to 
        succeed even if no troops could be demobilized.
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute g "Group" {
        The ID of a <<term frcgroup>> or 
        <<term orggroup>> belonging to the tactic's owning <i>agent</i>.
    } -tags {update}

    attribute mode "Mode" {
        The demobilization mode, which has one of the following values.<p>

        <b>ALL</b>: Demobilize all undeployed personnel belonging to group
        <i>g</i>.<p>

        <b>SOME</b>: Demobilize the specified number of undeployed
        <i>personnel</i>, if available.  Fails if there are insufficient
        personnel.<p>

        <b>PERCENT</b>: Demobilize the specified <i>percent</i> of 
        undeployed personnel.<p>

        <b>EXCESS</b>: Demobilize all undeployed personnel in 
        excess of the specified number of <i>personnel</i>. 
    } -tags {update}

    attribute personnel "Personnel" {
        When the <i>mode</i> is <b>SOME</b>, the 
        number of undeployed personnel to be demobilized.<p>

        When the <i>mode</i> is <b>EXCESS</b>, the number of undeployed
        personnel to retain; any excess will be be demobilized.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute percent "Percentage" {
        When the <i>mode</i> is <b>PERCENT</b>, the percentage of 
        undeployed troops to demobilized, expressed as a real number, i.e.,
        a value of 3.5 will demobilize 3.5% of the undeployed troops.<p>

        This parameter is ignored for other modes.
    } -tags {update}
}

page /object/tactic demob "DEMOB tactic" {
    <<sotitle>>

    <<tactic_demob overview>><p>

    Demobilization tactics have the following attributes:<p>

    <<tactic_demob parmlist>>
}

#-----------------------------------------------------------------------
# DEPLOY Tactic

object tactic_deploy {
    noun "DEPLOY tactic"
    overview {
        This <<term tactic>> deploys an <<term actor>>'s
        <<term frcgroup>> or <<term orggroup>> personnel
        into particular <<term nbhood>>s.  The personnel must already
        be present in the <<term playbox>>.  The group's maintenance
        cost is paid for each person deployed.  Once deployed, the
        personnel may then be assigned to particular tasks.<p>

        The number of troops to deploy is determined by the personnel
        mode (<i>pmode</i>); see the table below.<p>

        The chosen troops are deployed into the neighborhoods
        indicated by the neighborhood list, a 
        <<cref /gofer/nbhoods>> value, according to the
        neighborhood mode (<i>nmode</i>):<p>

        <b>Redeployment and Existing Deployments</b>

        The neighborhood and personnel modes control new deployments only.
        If the tactic executed the previous week, then by default the
        remaining personnel will remain in place when the tactic executes
        this week.<p>

        If the redeploy flag is set (<i>redeploy</i>), then every deployment
        is a new deployment.  In addition, any changes to the tactic
        are tantamount to creating a new tactic; it will create a new
        deployment when it next executes.<p>

        Multiple DEPLOY tactics are cumulative.  The deployment lasts
        until the next week, when troops are automatically withdrawn in
        preparation for that week's deployment.
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute g "Group" {
        The ID of a <<term frcgroup>> or 
        <<term orggroup>> belonging to the tactic's owning <i>agent</i>.
    } -tags {update}

    attribute pmode "Personnel Mode" {
        The personnel mode, which has one of the following values.<p>

        <b>ALL</b>: Athena will deploy
        as many of the group's undeployed personnel as the actor 
        can afford.  If no undeployed personnel are available, the
        tactic succeeds trivially.  If personnel are available but
        there's not enough cash to deploy any, the tactic fails due
        to insufficient cash.<p>

        <b>SOME</b>: Athena will deploy
        the specified number of <i>personnel</i>.  The tactic fails
        if there are insufficient troops available to deploy, or if
        the actor cannot afford to deploy the requested number.<p>

        <b>UPTO</b>: Athena will deploy
        as many troops as the actor can afford, from at least 
        the <i>min</i> number of personnel up to the
        given <i>max</i> number.  The tactic fails if there are fewer
        than <i>min</i> personnel available for deployment, or if
        the actor cannot afford at least <i>min</i> personnel.<p>

        <b>ALLBUT</b>: Athena will deploy
        all but the specified number of <i>personnel</i>, leaving 
        <i>personnel</i> available for additional deployments.  The
        tactic operates on a best-efforts basis with respect to personnel;
        if there are only <i>personnel</i> or fewer troops available,
        the tactic will succeed trivially with an empty deployment.<p>

        <b>PERCENT</b>: Athena will deploy a given <i>percent</i>
        of the group's undeployed personnel, rounding up (so that it always
        deploys at least one person).  If no personnel are available,
        succeeds trivially.  Fails if the actor cannot afford to 
        deploy the requested percentage.
    } -tags {update}

    attribute personnel "Personnel" {
        When the <i>pmode</i> is <b>SOME</b>, the 
        number of undeployed personnel to be deployed.<p>

        When the <i>pmode</i> is <b>ALLBUT</b>, the number of undeployed
        personnel to retain; any excess will be be deployed.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute min "Min Personnel" {
        When the <i>pmode</i> is <b>UPTO</b>, the 
        minimum number of undeployed personnel to be deployed.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute max "Max Personnel" {
        When the <i>pmode</i> is <b>UPTO</b>, the 
        maximum number of undeployed personnel to be deployed.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute percent "Percentage" {
        When the <i>pmode</i> is <b>PERCENT</b>, the percentage of 
        undeployed troops to deploy, expressed as a real number, i.e.,
        a value of 3.5 will deploy 3.5% of the undeployed troops.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute nlist "In Neighborhoods" {
        A <<cref /gofer/nbhoods>> value, which will be evaluated to determine
        the list of <<term nbhood>> IDs when the tactic is executed.
    } -tags {create update}

    attribute nmode "Neighborhood Mode" {
        The neighborhood mode, which has one of the following values.<p>

        <b>BY_POP</b>: The chosen troops
        are deployed into the neighborhoods in proportion with the
        neighborhood population.  If neighborhood A has twice the population
        of neighborhood B, it will receive twice the troops.  This is
        the default.<p>

        <b>EQUAL</b>: Every neighborhood
        will get the same number of troops, give or take one.  This
        was the only choice in Athena 5.1 and prior.<p>
    } -tags {update}

    attribute redeploy "Redeploy?" {
        If false (the default), then any existing deployment will be retained
        when this tactic executes in subsequent weeks.  If true, then 
        the tactic will do a new deployment every week.<p>
    } -tags {create update}

}

page /object/tactic deploy "DEPLOY tactic" {
    <<sotitle>>

    <<tactic_deploy overview>><p>

    Deploy Troops tactics have the following attributes:<p>

    <<tactic_deploy parmlist>>
}

#-----------------------------------------------------------------------
# DEPOSIT Tactic

object tactic_deposit {
    noun "DEPOSIT tactic"

    overview {
        This <<term tactic>> allows the <<term actor>> to deposit
        a sum of money from his cash-on-hand into his cash reserve.
        The funds can then be withdrawn for spending using the
        <<cref /object/tactic/withdraw>>.

        There are several ways to select how much money should be 
        deposited to cash-on-hand; see the "Mode" parameter below.

        The tactic only fails when an exact amount of money is slated
        to be deposited and it is greater than cash-on-hand.
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute mode "Mode" {
        The deposit amount mode, which has one of the following values.<p>

        <b>ALL</b>: Deposit all remaining cash-on-hand. The tactic will
        still execute if cash-on-hand is zero or negative, just no cash
        will be deposited.<p>

        <b>EXACT</b>: Deposit the exact amount of money from cash-on-hand. 
        The tactic will fail to execute if there is not at least this amount
        of money in cash-on-hand.<p>

        <b>UPTO</b>: Deposit any amount of money up to the given amount from
        available cash-on-hand.  The tactic will still execute if there is
        not enough cash, just less cash will be deposited.<p>

        <b>PERCENT</b>: Deposit the specified percent of 
        cash-on-hand.  The tactic will still execute if cash-on-hand is 
        zero or negative, just no cash will be deposited.<p>

        <b>EXCESS</b>: Deposit any cash-on-hand that is in
        excess of the specified amount.  The tactic will still execute
        if there is not enough cash, just no cash will be deposited.<p> 
    } -tags {update}

    attribute amount "Amount" {
        When the <i>mode</i> is EXACT, the exact amount of money to
        be deposited.<p>

        When the <i>mode</i> is UPTO, the maximum amount of money that 
        should be deposited.<p>

        When the <i>mode</i> is EXCESS, the amount of money over which
        any excess should be deposited.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute percent "Percent" {
        When the <i>mode</i> is PERCENT, the percentage of cash-on-hand
        that should be deposited.<p>

        This parameter is ignored for other modes.
    } -tags {update}
}

page /object/tactic deposit "DEPOSIT tactic" {
    <<sotitle>>

    <<tactic_deposit overview>><p>

    Deposit tactics have the following attributes:<p>

    <<tactic_deposit parmlist>>
}

#-----------------------------------------------------------------------
# EXECUTIVE Tactic

object tactic_executive {
    noun "EXECUTIVE tactic"
    overview {
        This <<term tactic>> executes an Athena 
        <<cref /command "executive command">>, possibly affecting the 
        state of the simulation.
        The tactic succeeds if the command returns normally, and fails
        if the command throws an error.  In the latter case, any
        database changes made by the command are rolled back, and a
        stack trace is written to the debugging log.<p>
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute command "Command" {
        The <<cref /command command>> to execute, often a 
        <<cref /command/call>> or a user-defined command defined
        in the <<tab "Scripts">>.
    } -tags {update}
}

page /object/tactic executive "EXECUTIVE tactic" {
    <<sotitle>>

    <<tactic_executive overview>><p>

    EXECUTIVE tactics have the following attributes:<p>

    <<tactic_executive parmlist>>
}

#-----------------------------------------------------------------------
# FLOW Tactic

object tactic_flow {
    noun "FLOW tactic"

    overview {
        This SYSTEM <<term tactic>> causes population to flow from
        one civilian group to another.  There are several ways to specify
        the number of people to transfer between the groups.  
        The transfer is permanent, unless reversed explicitly by 
        another FLOW tactic.<p>

        This tactic never executes on lock, and never fails due to
        insufficient resources.
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute f "Source Group" {
        The ID of the <<term civgroup>> from which the population
        will flow.
    } -tags {update}

    attribute g "Destination Group" {
        The ID of the <<term civgroup>> to which the population will
        flow.
    } -tags {update}

    attribute mode "Mode" {
        The mode, which has one of the following values.<p>

        <b>ALL</b>: Flow all remaining people from group <i>f</i> to
        group <i>g</i>.<p>

        <b>RATE</b>: Flow people from <i>f</i> to <i>g</i> at the given
        rate, expressed as a <i>percent</i> per year.  If the 
        <i>percent</i> is 5, then over the course of a year this tactic
        would flow about 5% of the population.<p>

        <b>UPTO</b>: Flow available personnel up to a maximum of
        <i>personnel</i> people from 
        <i>f</i> to <i>g</i>, but no more.<p>

        <b>ALLBUT</b>: Flow all but <i>personnel</i> of the available
        personnel from <i>f</i> to <i>g</i>.<p>

    } -tags {update}

    attribute personnel "Personnel" {
        When the <i>mode</i> is <b>UPTO</b>, the maximum number of 
        personnel to be transferred.  If
        there are insufficient personnel available, then
        all remaining personnel are transferred.<p>

        When the <i>mode</i> is <b>ALLBUT</b>, the number of personnel
        to leave in the source group.<p>
        
        This parameter is ignored for other modes.
    } -tags {update}

    attribute percent "Rate" {
        The rate at which personnel are to be transferred when the
        <i>mode</i> is <b>RATE</b>, expressed as a yearly percentage,
        e.g., 5%/year.<p>
        
        This parameter is ignored for other modes.
    } -tags {update}

}

page /object/tactic flow "FLOW tactic" {
    <<sotitle>>

    <<tactic_flow overview>><p>

    Flow Personnel tactics have the following attributes:<p>

    <<tactic_flow parmlist>>
}



#-----------------------------------------------------------------------
# FUND Tactic

object tactic_fund {
    noun "FUND tactic"

    overview {
        This <<term tactic>> allows an <<term actor>> to give
        a sum of money from his cash-on-hand to another <<term actor>>. 

        There are several ways to select how much money should be 
        taken from cash-on-hand for funding; see the "Mode" parameter below.

        The tactic only fails when an exact amount of money is slated
        to be used and it is greater than cash-on-hand.
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute a "Actor" {
        The ID of an <<term actor>> to receive the cash.
    } -tags {update}

    attribute mode "Mode" {
        The funding amount mode, which has one of the following values.<p>

        <b>ALL</b>: Fund with all remaining cash-on-hand. The tactic will
        still execute if cash-on-hand is zero or negative, just no cash
        will be transferred.<p>

        <b>EXACT</b>: Fund with the exact amount of money from cash-on-hand. 
        The tactic will fail to execute if there is not at least this amount
        of money in cash-on-hand.<p>

        <b>UPTO</b>: Fund with any amount of money up to the given amount from
        available cash-on-hand.  The tactic will still execute if there is
        not enough cash, just less cash will be transferred.<p>

        <b>PERCENT</b>: Fund with the specified percent of 
        cash-on-hand.  The tactic will still execute if cash-on-hand is 
        zero or negative, just no cash will be transferred.<p>

        <b>EXCESS</b>: Fund with any cash-on-hand that is in
        excess of the specified amount.  The tactic will still execute
        if there is not enough cash, just no cash will be transferred.<p> 
    } -tags {update}

    attribute amount "Amount" {
        When the <i>mode</i> is EXACT, the exact amount of money to
        be used for funding.<p>

        When the <i>mode</i> is UPTO, the maximum amount of money that 
        should be used for funding.<p>

        When the <i>mode</i> is EXCESS, the amount of money over which
        any excess should be used for funding.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute percent "Percent" {
        When the <i>mode</i> is PERCENT, the percentage of cash-on-hand
        that should be used for funding.<p>

        This parameter is ignored for other modes.
    } -tags {update}
}

page /object/tactic fund "FUND tactic" {
    <<sotitle>>

    <<tactic_fund overview>><p>

    Fund tactics have the following attributes:<p>

    <<tactic_fund parmlist>>
}

#-----------------------------------------------------------------------
# FUNDENI Tactic

object tactic_fundeni {
    noun "FUNDENI tactic"

    overview {
        This <<term tactic>> funds Essential Non-Infrastructure (ENI) 
        services for one or more <<term civgroup>>s.  The <<term actor>>
        may specify any amount of money, which will come out of the 
        actor's cash-on-hand.  If the cash is unavailable, the groups
        will not be funded.<p>

        There are several ways to select how much money should be 
        taken from cash-on-hand for funding; see the "Mode" parameter below.<p>

        Civilian groups require a minimum amount of ENI services, and 
        may expect a much higher amount.  When a group's requirements and
        expectations are not met, the group's mood will fall, and the
        group's vertical relationships with the actors may also fall.
        If the group's requirements and expectations are exceeded, the
        group's mood and vertical relationships may rise.<p>

        The maximum amount of funding is capped as a function of saturation
        level of service.  By default this level is set to 100% of SLOS but
        can be dialed down; see the "LOS" parameter below.<p>

        When executed, the FUNDENI tactic funds provision of the
        service until the next strategy tock (one week).  Multiple
        FUNDENI tactics are cumulative.
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute mode "Mode" {
        The funding amount mode, which has one of the following values. In
        all cases, the amount of money is capped by default to the amount of
        money it would take to fund at 100% of the saturation level of 
        service assuming the actor that owns this tactic is the only one
        funding ENI.  It's possible to cap at a lower percentage of SLOS;
        see the "LOS" parameter.<p>

        <b>ALL</b>: Fund with all remaining cash-on-hand. The tactic will
        still execute if cash-on-hand is zero or negative, just no cash
        will be spent.<p>

        <b>EXACT</b>: Fund with the exact amount of money from cash-on-hand. 
        The tactic will fail to execute if there is not at least this amount
        of money in cash-on-hand.<p>

        <b>UPTO</b>: Fund with any amount of money up to the given amount from
        available cash-on-hand.  The tactic will still execute if there is
        not enough cash, just less cash will be spent.<p>

        <b>PERCENT</b>: Fund with the specified percent of 
        cash-on-hand.  The tactic will still execute if cash-on-hand is 
        zero or negative, just no cash will be spent.<p>

        <b>EXCESS</b>: Fund with any cash-on-hand that is in
        excess of the specified amount.  The tactic will still execute
        if there is not enough cash, just no cash will be spent.<p> 
    } -tags {update}

    attribute glist "Groups"  {
        The IDs of one or more civilian groups, or
        a <<cref /gofer/civgroups>> value.
    } -tags {update}

    attribute amount "Amount" {
        When the <i>mode</i> is EXACT, the exact amount of money to
        be used for funding.<p>

        When the <i>mode</i> is UPTO, the maximum amount of money that 
        should be used for funding.<p>

        When the <i>mode</i> is EXCESS, the amount of money over which
        any excess should be used for funding.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute percent "Percent" {
        When the <i>mode</i> is PERCENT, the percentage of cash-on-hand
        that should be used for funding.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute los "LOS" {
        This parameter is used to cap the amount an actor spends on ENI as
        a percentage of the saturation level of service.  For instance, if 
        this parameter is set to 50, Athena will compute the amount of money
        it would take to fund ENI for the groups in "Groups" to meet 
        the 50 percent of the saturation level of service and ensure that the
        owning actor does not spend any more than that amount on ENI.
    } -tags {update}
}

page /object/tactic fundeni "FUNDENI tactic" {
    <<sotitle>>

    <<tactic_fundeni overview>><p>

    Fund ENI tactics have the following attributes:<p>

    <<tactic_fundeni parmlist>>
}

#-----------------------------------------------------------------------
# GRANT Tactic

object tactic_grant {
    noun "GRANT tactic"
    overview {
        This <<term tactic>> grants one or more <<term actor>>s access to
        one or more of the tactic owner's <<term cap>>s.  The actors 
        granted access can then 
        <<cref /object/tactic/broadcast broadcast>> 
        <<term iom>>s via any of the listed <<term cap>>s.<p>

        This tactic can execute on lock.  It never fails due to lack of 
        resources.
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute klist "CAP List" {
        A list of one or more <<term cap>>s belonging to the 
        <i>agent</i>.
    } -tags {update}

    attribute alist "Actor List" {
        An <<cref /gofer/actors>> value specifying a list of one or 
        more <<term actor>>s.
    } -tags {update}

}

page /object/tactic grant "GRANT tactic" {
    <<sotitle>>

    <<tactic_grant overview>><p>

    Grant Access tactics have the following attributes:<p>

    <<tactic_grant parmlist>>
}

#-----------------------------------------------------------------------
# MAINTAIN Tactic

object tactic_maintain {
    noun "MAINTAIN tactic"

    overview {
        This <<term tactic>> spends money to maintain the manufacturing
        infrastructure owned by an <<term actor>> in the
        neighborhoods specified.  The <<term actor>>
        may specify any amount of money, which will come out of the 
        actor's cash-on-hand.  If the cash is unavailable, the maintenance
        will not be funded and the production capacity of his manufacturing
        infrastructure will degrade.<p>

        There are several ways to select how much money should be 
        taken from cash-on-hand for funding; see the "Mode" parameter below.<p>

        Manufacturing plants produce goods depending on their level of
        repair (or disrepair).  If an actor does not spend money to maintain
        a certain his infrastructure it will degrade the
        production capacity of his <<term plant>>s and thus negatively impact
        the the economic model potentially leading to shortages of
        goods and higher unemployment.

        The maximum amount of spending is capped as a function of the requested
        level of repair, or the maximum amount of repair that can be
        performed in a single week, whichever is less.  If an actor desires
        to maintain his infrastructure at a repair level that is something
        less than the current repair level, the tactic will execute but no
        money will be spent until the repair level degrades below the desired
        repair level. By default the repair level is set to 100% of total 
        capacity but can be dialed down; see the "level" parameter below.<p>

        When executed, the MAINTAIN tactic spends money to repair the
        infrastructure owned by the actor.  The most the repair level
        can move up in one week is controlled by a parameter.
        Multiple MAINTAIN tactics are cumulative.
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute mode "Mode" {
        The spending mode, which has one of the following values. In
        all cases, the amount of money is capped by default to the amount of
        money it would take to bring up the repair level by one weeks worth
        of repairs.

        <b>ALL</b>: Spend all remaining cash-on-hand. The tactic will
        still execute if cash-on-hand is zero or negative, just no cash
        will be spent.<p>

        <b>EXACT</b>: Spend the exact amount of money from cash-on-hand. 
        The tactic will fail to execute if there is not at least this amount
        of money in cash-on-hand.<p>

        <b>UPTO</b>: Spend any amount of money up to the given amount from
        available cash-on-hand.  The tactic will still execute if there is
        not enough cash, just less cash will be spent.<p>

        <b>PERCENT</b>: Spend the specified percent of 
        cash-on-hand.  The tactic will still execute if cash-on-hand is 
        zero or negative, just no cash will be spent.<p>

        <b>EXCESS</b>: Spend any cash-on-hand that is in
        excess of the specified amount.  The tactic will still execute
        if there is not enough cash, just no cash will be spent.<p> 
    } -tags {update}

    attribute nlist "Nbhoods"  {
        The IDs of one or more neighborhoods, or
        a <<cref /gofer/nbhoods>> value.
    } -tags {update}

    attribute amount "Amount" {
        When the <i>mode</i> is EXACT, the exact amount of money to
        be used for maintenance.<p>

        When the <i>mode</i> is UPTO, the maximum amount of money that 
        should be used for maintenance.<p>

        When the <i>mode</i> is EXCESS, the amount of money over which
        any excess should be used for maintenance.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute percent "Percent" {
        When the <i>mode</i> is PERCENT, the percentage of cash-on-hand
        that should be used for maintenance.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute level "Maximum" {
        This parameter is used to cap the amount an actor spends on 
        maintenance expressed as a maximum level of repair.  For instance,
        if this parameter is set to 80, Athena will only spend enough of
        this actor's money to bring his infrastructure up to 80% of maximum
        production capacity in the neighborhoods specified.  It may take more
        than one week of maintenance to get the infrastructure to this level 
        if it has fallen into disrepair, but once it is there, only the 
        amount of money needed to keep it there is allocated.
    } -tags {update}
}

page /object/tactic maintain "MAINTAIN tactic" {
    <<sotitle>>

    <<tactic_maintain overview>><p>

    Maintain tactics have the following attributes:<p>

    <<tactic_maintain parmlist>>
}

#-----------------------------------------------------------------------
# MOBILIZE Tactic

object tactic_mobilize {
    noun "MOBILIZE tactic"
    overview {
        This tactic mobilizes 
        <<term frcgroup>> or 
        <<term orggroup>> personnel,
        i.e., it brings new personnel into the playbox.  There is no
        direct cost to mobilization; however, a maintenance cost will be
        paid when the troops are deployed (and if they are not
        deployed, they will be automatically demobilized again.)<p>

        There are several ways to select the number of troops to mobilize;
        see the "Mode" parameter, below.<p>

        Multiple MOBILIZE tactics executed during a single
        week are cumulative.<p>

        This tactic never fails to execute.  However, for several of the 
        modes the selected number of troops might be zero (e.g., when the
        <i>mode</i> is <b>UPTO</b> and the number of group <i>g</i>'s 
        troops in the playbox exceeds the desired quantity).
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute g "Group" {
        The ID of a <<term frcgroup>> or 
        <<term orggroup>> belonging to the tactic's owning <i>agent</i>.
    } -tags {update}

    attribute mode "Mode" {
        The mobilization mode, which has one of the following values.<p>

        <b>ADD</b>: Mobilizes a specific number of new <i>personnel</i> for group
        <i>g</i>.<p>

        <b>PERCENT</b>: Increases the number of mobilized troops by a
        specific percentage, <i>percent</i>.  If no troops are currently
        mobilized, none will be added.<p>

        <b>UPTO</b>: Increases the number of mobilized troops up to a
        some maximum number of <i>personnel</i>.  If the current number of 
        mobilized troops exceeds that number, none will be added.<p>

        <b>ENSURE</b>: Increases the number of mobilized troops so as to
        ensure that least the specified number of <i>personnel</i> are 
        available for deployment.  If the current number of 
        undeployed troops exceeds that number, none will be added.<p>
    } -tags {update}

    attribute personnel "Personnel" {
        When the <i>mode</i> is <b>ADD</b>, the 
        number of personnel to mobilize.<p>

        When the <i>mode</i> is <b>UPTO</b>, mobilizes troops up to the
        specified maximum number of <i>personnel</i>.<p>

        When the <i>mode</i> is <b>ENSURE</b>, ensures that at least
        <i>personnel</i> troops are available for deployment, mobilizing
        troops if necessary.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute percent "Percentage" {
        When the <i>mode</i> is <b>PERCENT</b>, increases the number
        of mobilized troops by the given percentage, <i>percent</i>, i.e.,
        a value of 3.5 will mobilize 3.5% more troops.<p>

        This parameter is ignored for other modes.
    } -tags {update}
}

page /object/tactic mobilize "MOBILIZE tactic" {
    <<sotitle>>

    <<tactic_mobilize overview>><p>

    Mobilize tactics have the following attributes:<p>

    <<tactic_mobilize parmlist>>
}

#-----------------------------------------------------------------------
# SIGEVENT Tactic

object tactic_sigevent {
    noun "SIGEVENT tactic"
    overview {
        This tactic logs a message to the significant events log.
        The message will have a log level of 1 (highest priority) and
        a component field of "tactic".<p>

        This tactic is never insane, and never fails to execute.<p>
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute msg "Message" {
        The message text to log when the tactic executes.
    } -tags {update}
}

page /object/tactic sigevent "SIGEVENT tactic" {
    <<sotitle>>

    <<tactic_sigevent overview>><p>

    SIGEVENT tactics have the following attributes:<p>

    <<tactic_sigevent parmlist>>
}

#-----------------------------------------------------------------------
# SPEND Tactic

object tactic_spend {
    noun "SPEND tactic"

    overview {
        This <<term tactic>> allows the <<term actor>> to spend
        a sum of money from his cash-on-hand to the various 
        sectors in the economy according to some amount of shares
        per sector.

        There are several ways to select how much money should be 
        spent from cash-on-hand; see the "Mode" parameter below.

        The tactic only fails when an exact amount of money is slated
        to be spent and it is greater than cash-on-hand.
        
        <b>Note:</b> This tactic will always execute on lock even if
        the amount to spend is greater than cash-on-hand.
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute mode "Mode" {
        The spend mode, which has one of the following values.<p>

        <b>ALL</b>: Spend all remaining cash-on-hand. The tactic will
        still execute if cash-on-hand is zero or negative, just no cash
        will be spent.<p>

        <b>EXACT</b>: Spend the exact amount of money from cash-on-hand. 
        The tactic will fail to execute if there is not at least this amount
        of money in cash-on-hand and the Athena scenario is not locking.<p>

        <b>UPTO</b>: Spend any amount of money up to the given amount from
        available cash-on-hand.  The tactic will still execute if there is
        not enough cash, just less cash will be spent.<p>

        <b>PERCENT</b>: Spend the specified percentage of 
        cash-on-hand.  The tactic will still execute if cash-on-hand is 
        zero or negative, just no cash will be spent.<p>

        <b>EXCESS</b>: Spend any cash-on-hand that is in
        excess of the specified amount.  The tactic will still execute
        if there is not enough cash, just no cash will be spent.<p> 
    } -tags {update}

    attribute amount "Amount" {
        When the <i>mode</i> is EXACT, the exact amount of money to
        be spent.<p>

        When the <i>mode</i> is UPTO, the maximum amount of money that 
        should be spent.<p>

        When the <i>mode</i> is EXCESS, the amount of money over which
        any excess should be spent.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute percent "Percent" {
        When the <i>mode</i> is PERCENT, the percentage of cash-on-hand
        that should be spent.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute goods "Goods Shares" {
        The number of shares of the money allocated to the
        <b>goods</b> sector.
    } -tags {update}

    attribute black "Black Shares" {
        The number of shares of the money allocated to the
        <b>black</b> sector.
    } -tags {update}
    
    attribute pop "Pop Shares" {
        The number of shares of the money allocated to the
        <b>pop</b> sector.
    } -tags {update}
    
    attribute region "Region Shares" {
        The number of shares of the money allocated to the
        <b>region</b> sector.
    } -tags {update}
    
    attribute world "World Shares" {
        The number of shares of the money allocated to the
        <b>world</b> sector.
    } -tags {update}
}

page /object/tactic spend "SPEND tactic" {
    <<sotitle>>

    <<tactic_spend overview>><p>

    Spend tactics have the following attributes:<p>

    <<tactic_spend parmlist>>
}

#-----------------------------------------------------------------------
# STANCE

object tactic_stance {
    noun "STANCE tactic"
    overview {
        This <<term tactic>> allows an <<term actor>> to 
        tell his force groups to adopt a particular 
        <<term stance>> towards other groups.  This stance is a 
        relationship value that indicates how the force group is expected 
        to behave toward the designated groups.  How well the force group
        succeeds in this depends on the force group's training level,
        and on its actual relationships toward the designated groups.<p>

        An actor can execute multiple STANCE tactics during a single week.
        If two such tactics affect the same relationship, the higher priority 
        tactic determines the outcome.<p>
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute f "Force Group" {
        The force group whose stance is being set.
    } -tags {update}

    attribute mode "Mode" {
        This parameter determines how the designated groups are specified:
        as an explicit list of groups (<b>BY_GROUP</b>) or as all civilians
        living in a particular list of neighborhoods (<b>BY_NBHOOD</b>).
    }  -tags {update}

    attribute glist "Groups" {
        When the mode is <b>BY_GROUP</b>, a <<cref /gofer/groups>> value
        specifying a list of one or more groups for which force group 
        <i>f</i>'s relationship is being designated.
    } -tags {update}

    attribute nlist "Neighborhoods" {
        When the mode is <b>BY_NBHOOD</b>, a <<cref /gofer/nbhoods>> 
        value specifying a list of one or more  neighborhoods for which 
        force group <i>f</i>'s relationship is being designated.
    } -tags {update}

    attribute drel "Designated Rel." {
        The relationship which force group <i>f</i> is required to adopt
        toward the designated groups, expressed as a value from the following
        scaled:<p>

        <<::simlib::qaffinity html>>
    } -tags {update}
}

page /object/tactic stance "STANCE tactic" {
    <<sotitle>>

    <<tactic_stance overview>><p>

    STANCE tactics have the following attributes:<p>

    <<tactic_stance parmlist>>
}

#-----------------------------------------------------------------------
# SUPPORT Tactic

object tactic_support {
    noun "SUPPORT tactic"
    overview {
        This <<term tactic>> allows an <<term actor>> to determine who
        will receive his political support in one or more
        <<term nbhood>>s.  Each actor has an actor he usually
        supports, as given in his actor definition; using this tactic,
        he can support other actors (or no one at all) in any given
        neighborhood.<p>

        When an actor supports another, this means that whatever
        support the actor has from the groups in the neighborhood is
        given to the supported actor, thus possibly increasing that
        actor's influence and making it easier for that actor to gain
        or maintain control.<p>

        The support is given only until the next strategy execution,
        at which time it must be explicitly renewed.<p>

        This tactic never fails due to insufficient resources.  If
        the rule for selecting neighborhoods returns no neighborhoods,
        the tactic will succeed, but do nothing.
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute a "Supported Actor" {
        The ID of the <<term actor>> who will receive the
        owning actor's political support.
    } -tags {update}

    attribute nlist "In Neighborhoods" {
        A <<cref /gofer/nbhoods>> value specifying a list of one or 
        more <<term nbhood>>s.  Actor <i>a</i> will receive the
        owner's political support in these neighborhoods.
    } -tags {update}

}

page /object/tactic support "SUPPORT tactic" {
    <<sotitle>>

    <<tactic_support overview>><p>

    Support Actor tactics have the following attributes:<p>

    <<tactic_support parmlist>>
}



#-----------------------------------------------------------------------
# WITHDRAW Tactic

object tactic_withdraw {
    noun "WITHDRAW tactic"

    overview {
        This <<term tactic>> allows the <<term actor>> to withdraw
        a sum of money from his cash reserve into his cash-on-hand
        so that it can be spent on other tactics.  Funds are deposited
        into the cash reserve using the <<cref /object/tactic/deposit>>.<p>
        
        Actors are frequently in the position of borrowing money.  Athena
        does not explicitly model any kind of banking system; as a work
        around, however, the cash reserve is allowed to be negative,
        reflecting debt rather than savings.  In short, the actor
        may withdraw as much money as he likes.  It is up to the
        analyst to ensure that this doesn't get out of hand.<p>

        There are several ways to select how much money should be 
        withdrawn from cash reserve; see the "Mode" parameter below.
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute mode "Mode" {
        The withdrawal amount mode, which has one of the following values.<p>

        <b>ALL</b>: Withdraw all remaining cash reserve. The tactic will
        still execute if the cash reserve is zero or negative, just no cash
        will be withdrawn.<p>

        <b>EXACT</b>: Withdraw the exact amount of money from cash reserve. 
        The tactic will fail to execute if there is not at least this amount
        of money in cash reserve.<p>

        <b>UPTO</b>: Withdraw any amount of money up to the given amount from
        cash reserve.  The tactic will still execute if there is
        not enough cash, just less cash will be withdrawn.<p>

        <b>PERCENT</b>: Withdraw the specified percent of the
        cash reserve.  The tactic will still execute if the reserve is 
        zero or negative, just no cash will be withdrawn.<p>

        <b>BORROW</b>: Withdraw any amount from cash reserve, allowing
        the balance to go negative if need be. This is a workaround for 
        borrowing money in the absence of a model of a banking system. 
        The tactic will always execute.<p> 
    } -tags {update}

    attribute amount "Amount" {
        When the <i>mode</i> is EXACT, the exact amount of money to
        be withdrawn.<p>

        When the <i>mode</i> is UPTO, the maximum amount of money that 
        should be withdrawn.<p>

        When the <i>mode</i> is BORROW, the amount of money to be 
        withdrawn, allowing the reserve to go negative, if necessary.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute percent "Percent" {
        When the <i>mode</i> is PERCENT, the percentage of cash-on-hand
        that should be deposited.<p>

        This parameter is ignored for other modes.
    } -tags {update}
}

page /object/tactic withdraw "WITHDRAW tactic" {
    <<sotitle>>

    <<tactic_withdraw overview>><p>

    Withdraw tactics have the following attributes:<p>

    <<tactic_withdraw parmlist>>
}

