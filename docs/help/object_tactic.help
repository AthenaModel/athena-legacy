# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    object_tactic.help
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    Athena Help Documentation: Tactic Simulation Objects
#
#    This file is included into object.help.
#
#-----------------------------------------------------------------------

# This object defines attributes shared across all tactic types.

object tactic_ {
    noun "tactic"
    overview {
        Tactics are the <<cref /object>> by which an
        <<term agent>> implements his <<term strategy>>.  For
        example, an <<term actor>> may use the 
        <<cref /object/tactic/deploy>>
        to position troops in a neighborhood, and then use the
        <<cref /object/tactic/attroe>> to call for attacks on another
        group.  Tactics may have <<term condition>>s attached
        to them.  Tactics are browsed and 
        edited on the <<tab Strategy>>.
    }

    # The tactic ID for the object page
    attribute id "Tactic ID" {
        The tactic ID, an integer number that uniquely
        identifies the tactic.  In orders, the parameter name is
        <i>tactic_id</i>.
    } -tags {object}

    # The tactic ID for the order pages
    attribute tactic_id "Tactic ID" {
        The tactic ID, an integer number that uniquely
        identifies the tactic.
    }

    attribute agent "Agent" {
        The ID of the <<term agent>> to whose strategy this
        tactic belongs.
    } -tags {object}

    attribute typename "Tactic Type" {
        The tactic's type, e.g., 
        <b><<cref /object/tactic/deploy DEPLOY>></b>.
    } -tags {object}

    attribute state "State" {
        The tactic's state, one of <b>normal</b>, <b>disabled</b>, or 
        <b>invalid</b>.  Both <b>disabled</b> and <b>invalid</b> tactics
        are ignored when the owner's strategy is executed; the
        difference is that <b>disabled</b> tactics are explicitly
        disabled by the user, while <b>invalid</b> tactics are disabled
        due to failing a sanity check.
    } -tags {object state}
}

page /object tactic "Tactic" {
    <<sotitle>>

    <<tactic_ overview>><p>

    There are many different kinds of tactic; all share the following
    parameters:<p>

    <<tactic_ parmlist -tags object>>

    The full set of tactics is as follows:<p>

    <<childlinks>>
}

#-----------------------------------------------------------------------
# ATTROE Tactic

object tactic_attroe {
    noun "ATTROE tactic"
    overview {
        This <<term tactic>> sets the attacking <<term roe>> for 
        force groups belonging to an <<term actor>>.<p>

        Attacking ROEs determine whether a
        <<term frcgroup>> will seek out and
        attack other force groups.  In Athena, force groups are either
        uniformed or non-uniformed.  (Non-uniformed forces are those that
        hide among the local population and use terrorist and other
        unconventional tactics.)<p>

        Athena's attrition model currently
        only supports attacks by uniformed force groups on non-uniformed
        force groups, and <i>vice versa</i>.  ROEs are set 
        <<term nbhood>> by neighborhood; thus, group A can be 
        directed to attack group B in neighborhood N1 but not in 
        neighborhood N2.<p>

        No force group will attack any other force group unless it is
        explicitly given an ROE to do so.<p>

        The new ROE applies only for the current week; to retain the
        new ROE over a period of weeks, execute the tactic each week.<p>

        Every force group has an attack cost, which defaults to $0/attack.
        If the attack cost is positive, then it will be expended for each
        of the requested attacks.  Unspent money will be returned at the
        end of the attrition assessment.<p>

        Attrition is not assessed on scenario
        lock, and so this tactic does not execute on lock.<p>
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute f "Attacking Group" {
        The attacking <<term frcgroup>>.  This group must
        belong to the owning <i>agent</i>, and may be uniformed or 
        non-uniformed.
    } -tags {update}

    attribute g "Defending Group" {
        The defending <<term frcgroup>>.  If the attacker
        is uniformed, this group must be non-uniformed, and 
        <i>vice versa</i>.
    } -tags {update}

    attribute n "In Neighborhood" {
        The <<term nbhood>> in which the attack(s) may take
        place.  Note that
        both groups must have personnel present in this neighborhood, 
        for any attacks to occur.
    } -tags {update}

    attribute roe "ROE" {
        The ROE proper.  The set of valid ROEs depends on whether
        attacking group <i>f</i> is uniformed or non-uniformed.<p>

        <b>Uniformed:</b>  The ROE must be one of the following values:<p>

        <<enumdoc ::projectlib::eattroeuf>>

        If the ROE is <b>ATTACK</b>, then group <i>f</i> will attempt to
        hunt down and destroy units of group <i>g</i> in neighborhood
        <i>n</i>; and if not, not.  Note that there is no difference
        between having an ROE of <b>DO_NOT_ATTACK</b> and not
        having an ROE at all.<p>

        <b>Non-Uniformed:</b>  The ROE must be one of the following
        values:<p>

        <<enumdoc ::projectlib::eattroenf>>

        If the ROE is <b>HIT_AND_RUN</b>, then group <i>f</i> will use
        hit-and-run tactics against group <i>g</i>, trying on each attack
        to nibble away at the uniformed force while taking minimal
        losses.<p>

        If the ROE is <b>STAND_AND_FIGHT</b>, then group <i>f</i> will
        expend a pre-determined number of troops in order to kill as many
        personnel of group <i>g</i> as possible.<p>

        Otherwise, group <i>f</i> will not attempt to attack.  Again, 
        there is no difference between having an ROE of
        <b>DO_NOT_ATTACK</b> and not having an ROE at all.
    } -tags {update}

    attribute attacks "Max Attacks" {
        The maximum number of attacks the attacker will conduct
        against the defender over the
        following week.  Note that the actual number of attacks is
        constrained by the presence of both attacker and defender, by the
        cooperation of the neighborhood with both groups, and by other
        factors.<p>

        During strategy execution, this tactic will consume the
        <i>agent</i>'s cash-on-hand for the the maximum number of attacks 
        provided for; if fewer
        attacks are actually conducted (which is extremely likely), the
        unused cash will be returned to the <i>agent</i> at the
        beginning of the next strategy tock.<p>
    } -tags {update}


}

page /object/tactic attroe "ATTROE tactic" {
    <<sotitle>>

    <<tactic_attroe overview>><p>

    Attacking ROE tactics have the following attributes:<p>

    <<tactic_attroe parmlist>>
}

#-----------------------------------------------------------------------
# CURSE Tactic
object tactic_curse {
    noun "CURSE tactic"
    overview {
        This SYSTEM <<term tactic>> causes a Complex User-defined
        Role-based Situation and Event (or CURSE) to be executed with
        all of it's injects.  Injects associated with a CURSE cause
        changes to one or more of: Horizontal relationships, Vertical
        relationships, Satisfaction and Cooperation.  Injects are similar
        to <<term mad>>s in that the changes to attitude are identical to 
        magic changes.  CURSEs are meant to be used when the effects of 
        something not already explictly modeled in Athena needs to be 
        injected into the simulation.
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute curse "CURSE ID" {
        The ID of the <<term curse>> to be executed.
    } -tags {update}

    attribute roles "Role Mapping" {
        The mapping of <<term role>>s to particular <<term group>>s and
        <<term actor>>s.  The mapping of roles completely depends on the
        types of injects defined for the <<term curse>>.
    } -tags {update}

}

page /object/tactic curse "CURSE tactic" {
    <<sotitle>>

    <<tactic_curse overview>><p>

    CURSE tactics have the following attributes:<p>

    <<tactic_curse parmlist>>
}

#-----------------------------------------------------------------------
# DEFROE Tactic

object tactic_defroe {
    noun "DEFROE tactic"
    overview {
        This <<term tactic>> sets the defensive <<term roe>> for 
        uniformed <<term frcgroup>>s belonging to an <<term actor>>.<p>

        Defending ROEs determine how a uniformed force group
        responds to attack by a non-uniformed force group: do they 
        shoot back, and if so under what conditions.  As such, it has 
        no direct costs, either in dollars or personnel.<p>

        Every uniformed force group has an automatically-created Defending
        ROE in every <<term nbhood>>; the ROE defaults to
        <b>FIRE_BACK_IF_PRESSED</b>.  This tactic adjusts the ROE
        as the actor desires.<p>

        The new ROE applies only for the current week; to retain the
        new ROE over a period of weeks, execute the tactic each week.<p>

        This tactic consumes no resources, and consequently never fails
        due to lack of resources.  Attrition is not assessed on scenario
        lock, and so this tactic does not execute on lock.<p>
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute g "Group" {
        The ID of a uniformed <<term frcgroup>>
        belonging to the tactic's owning <i>agent</i>.
    } -tags {update}

    attribute n "In Neighborhood" {
        The <<term nbhood>> for which the ROE will be set.
    } -tags {update}

    attribute roe "Defending ROE" {
        The ROE proper, one of the following values:<p>

        <<enumdoc ::projectlib::edefroeuf>>

        If the ROE is <b>HOLD_FIRE</b>, then the group will never fire
        back at attackers.  If the ROE is <b>FIRE_BACK_IF_PRESSED</b>,
        then the group will fire back only if the attacker continues to
        press the attack after the initial engagement.  That is, the group
        will <i>not</i> fire back if the attacker does a hit-and-run.  If
        the ROE is <b>FIRE_BACK_IMMEDIATELY</b>, the group will always
        fire back at its attackers.<p>

        Note that the number of civilian casualties depends on whether or
        not the group fires back at its attackers.
    } -tags {update}

}

page /object/tactic defroe "DEFROE tactic" {
    <<sotitle>>

    <<tactic_defroe overview>><p>

    Defensive ROE tactics have the following attributes:<p>

    <<tactic_defroe parmlist>>
}


#-----------------------------------------------------------------------
# DEMOB Tactic

object tactic_demob {
    noun "DEMOB tactic"
    overview {
        This tactic demobilizes 
        <<term frcgroup>> or 
        <<term orggroup>> personnel,
        i.e., it removes them from the playbox.  Only personnel available
        for deployment can be demobilized.<p>

        There are several ways to select the number of troops to demobilize;
        see the "Mode" parameter, below.<p>

        Multiple DEMOB tactics executed during a single
        week are cumulative.<p>

        The tactic only fails when the <i>mode</i> is <b>SOME</b> and 
        insufficient troops are available.  For all other modes, the 
        tactic operates on a best-efforts basis and is considered to 
        succeed even if no troops could be demobilized.
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute g "Group" {
        The ID of a <<term frcgroup>> or 
        <<term orggroup>> belonging to the tactic's owning <i>agent</i>.
    } -tags {update}

    attribute mode "Mode" {
        The demobilization mode, which has one of the following values.<p>

        <b>ALL</b>: Demobilize all undeployed personnel belonging to group
        <i>g</i>.<p>

        <b>SOME</b>: Demobilize the specified number of undeployed
        <i>personnel</i>, if available.  Fails if there are insufficient
        personnel.<p>

        <b>PERCENT</b>: Demobilize the specified <i>percent</i> of 
        undeployed personnel.<p>

        <b>EXCESS</b>: Demobilize all undeployed personnel in 
        excess of the specified number of <i>personnel</i>. 
    } -tags {update}

    attribute personnel "Personnel" {
        When the <i>mode</i> is <b>SOME</b>, the 
        number of undeployed personnel to be demobilized.<p>

        When the <i>mode</i> is <b>EXCESS</b>, the number of undeployed
        personnel to retain; any excess will be be demobilized.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute percent "Percentage" {
        When the <i>mode</i> is <b>PERCENT</b>, the percentage of 
        undeployed troops to demobilized, expressed as a real number, i.e.,
        a value of 3.5 will demobilize 3.5% of the undeployed troops.<p>

        This parameter is ignored for other modes.
    } -tags {update}
}

page /object/tactic demob "DEMOB tactic" {
    <<sotitle>>

    <<tactic_demob overview>><p>

    Demobilization tactics have the following attributes:<p>

    <<tactic_demob parmlist>>
}

#-----------------------------------------------------------------------
# DEPOSIT Tactic

object tactic_deposit {
    noun "DEPOSIT tactic"

    overview {
        This <<term tactic>> allows the <<term actor>> to deposit
        a sum of money from his cash-on-hand into his cash reserve.
        The funds can then be withdrawn for spending using the
        <<cref /object/tactic/withdraw>>.

        There are several ways to select how much money should be 
        deposited to cash-on-hand; see the "Mode" parameter below.

        The tactic only fails when an exact amount of money is slated
        to be deposited and it is greater than cash-on-hand.
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute mode "Mode" {
        The deposit amount mode, which has one of the following values.<p>

        <b>ALL</b>: Deposit all remaining cash-on-hand. The tactic will
        still execute if cash-on-hand is zero or negative, just no cash
        will be deposited.<p>

        <b>EXACT</b>: Deposit the exact amount of money from cash-on-hand. 
        The tactic will fail to execute if there is not at least this amount
        of money in cash-on-hand.<p>

        <b>UPTO</b>: Deposit any amount of money up to the given amount from
        available cash-on-hand.  The tactic will still execute if there is
        not enough cash, just less cash will be deposited.<p>

        <b>PERCENT</b>: Deposit the specified percent of 
        cash-on-hand.  The tactic will still execute if cash-on-hand is 
        zero or negative, just no cash will be deposited.<p>

        <b>EXCESS</b>: Deposit any cash-on-hand that is in
        excess of the specified amount.  The tactic will still execute
        if there is not enough cash, just no cash will be deposited.<p> 
    } -tags {update}

    attribute amount "Amount" {
        When the <i>mode</i> is EXACT, the exact amount of money to
        be deposited.<p>

        When the <i>mode</i> is UPTO, the maximum amount of money that 
        should be deposited.<p>

        When the <i>mode</i> is EXCESS, the amount of money over which
        any excess should be deposited.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute percent "Percent" {
        When the <i>mode</i> is PERCENT, the percentage of cash-on-hand
        that should be deposited.<p>

        This parameter is ignored for other modes.
    } -tags {update}
}

page /object/tactic deposit "DEPOSIT tactic" {
    <<sotitle>>

    <<tactic_deposit overview>><p>

    Deposit tactics have the following attributes:<p>

    <<tactic_deposit parmlist>>
}

#-----------------------------------------------------------------------
# EXECUTIVE Tactic

object tactic_executive {
    noun "EXECUTIVE tactic"
    overview {
        This <<term tactic>> executes an Athena 
        <<cref /command "executive command">>, possibly affecting the 
        state of the simulation.
        The tactic succeeds if the command returns normally, and fails
        if the command throws an error.  In the latter case, any
        database changes made by the command are rolled back, and a
        stack trace is written to the debugging log.<p>
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute command "Command" {
        The <<cref /command command>> to execute, often a 
        <<cref /command/call>> or a user-defined command defined
        in the <<tab "Scripts">>.
    } -tags {update}
}

page /object/tactic executive "EXECUTIVE tactic" {
    <<sotitle>>

    <<tactic_executive overview>><p>

    EXECUTIVE tactics have the following attributes:<p>

    <<tactic_executive parmlist>>
}

#-----------------------------------------------------------------------
# FUND Tactic

object tactic_fund {
    noun "FUND tactic"

    overview {
        This <<term tactic>> allows an <<term actor>> to give
        a sum of money from his cash-on-hand to another <<term actor>>. 

        There are several ways to select how much money should be 
        taken from cash-on-hand for funding; see the "Mode" parameter below.

        The tactic only fails when an exact amount of money is slated
        to be used and it is greater than cash-on-hand.
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute mode "Mode" {
        The funding amount mode, which has one of the following values.<p>

        <b>ALL</b>: Fund with all remaining cash-on-hand. The tactic will
        still execute if cash-on-hand is zero or negative, just no cash
        will be transferred.<p>

        <b>EXACT</b>: Fund with the exact amount of money from cash-on-hand. 
        The tactic will fail to execute if there is not at least this amount
        of money in cash-on-hand.<p>

        <b>UPTO</b>: Fund with any amount of money up to the given amount from
        available cash-on-hand.  The tactic will still execute if there is
        not enough cash, just less cash will be transferred.<p>

        <b>PERCENT</b>: Fund with the specified percent of 
        cash-on-hand.  The tactic will still execute if cash-on-hand is 
        zero or negative, just no cash will be transferred.<p>

        <b>EXCESS</b>: Fund with any cash-on-hand that is in
        excess of the specified amount.  The tactic will still execute
        if there is not enough cash, just no cash will be transferred.<p> 
    } -tags {update}

    attribute amount "Amount" {
        When the <i>mode</i> is EXACT, the exact amount of money to
        be used for funding.<p>

        When the <i>mode</i> is UPTO, the maximum amount of money that 
        should be used for funding.<p>

        When the <i>mode</i> is EXCESS, the amount of money over which
        any excess should be used for funding.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute percent "Percent" {
        When the <i>mode</i> is PERCENT, the percentage of cash-on-hand
        that should be used for funding.<p>

        This parameter is ignored for other modes.
    } -tags {update}
}

page /object/tactic fund "FUND tactic" {
    <<sotitle>>

    <<tactic_fund overview>><p>

    Fund tactics have the following attributes:<p>

    <<tactic_fund parmlist>>
}

#-----------------------------------------------------------------------
# GRANT Tactic

object tactic_grant {
    noun "GRANT tactic"
    overview {
        This <<term tactic>> grants one or more <<term actor>>s access to
        one or more of the tactic owner's <<term cap>>s.  The actors 
        granted access can then 
        <<cref /object/tactic/broadcast broadcast>> 
        <<term iom>>s via any of the listed <<term cap>>s.<p>

        This tactic can execute on lock.  It never fails due to lack of 
        resources.
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute klist "CAP List" {
        A list of one or more <<term cap>>s belonging to the 
        <i>agent</i>.
    } -tags {update}

    attribute alist "Actor List" {
        An <<cref /gofer/actors>> value specifying a list of one or 
        more <<term actor>>s.
    } -tags {update}

}

page /object/tactic grant "GRANT tactic" {
    <<sotitle>>

    <<tactic_grant overview>><p>

    Grant Access tactics have the following attributes:<p>

    <<tactic_grant parmlist>>
}

#-----------------------------------------------------------------------
# MOBILIZE Tactic

object tactic_mobilize {
    noun "MOBILIZE tactic"
    overview {
        This tactic mobilizes 
        <<term frcgroup>> or 
        <<term orggroup>> personnel,
        i.e., it brings new personnel into the playbox.  There is no
        direct cost to mobilization; however, a maintenance cost will be
        paid when the troops are deployed (and if they are not
        deployed, they will be automatically demobilized again.)<p>

        There are several ways to select the number of troops to mobilize;
        see the "Mode" parameter, below.<p>

        Multiple MOBILIZE tactics executed during a single
        week are cumulative.<p>

        This tactic never fails to execute.  However, for several of the 
        modes the selected number of troops might be zero (e.g., when the
        <i>mode</i> is <b>UPTO</b> and the number of group <i>g</i>'s 
        troops in the playbox exceeds the desired quantity).
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute g "Group" {
        The ID of a <<term frcgroup>> or 
        <<term orggroup>> belonging to the tactic's owning <i>agent</i>.
    } -tags {update}

    attribute mode "Mode" {
        The mobilization mode, which has one of the following values.<p>

        <b>ADD</b>: Mobilizes a specific number of new <i>personnel</i> for group
        <i>g</i>.<p>

        <b>PERCENT</b>: Increases the number of mobilized troops by a
        specific percentage, <i>percent</i>.  If no troops are currently
        mobilized, none will be added.<p>

        <b>UPTO</b>: Increases the number of mobilized troops up to a
        some maximum number of <i>personnel</i>.  If the current number of 
        mobilized troops exceeds that number, none will be added.<p>

        <b>ENSURE</b>: Increases the number of mobilized troops so as to
        ensure that least the specified number of <i>personnel</i> are 
        available for deployment.  If the current number of 
        undeployed troops exceeds that number, none will be added.<p>
    } -tags {update}

    attribute personnel "Personnel" {
        When the <i>mode</i> is <b>ADD</b>, the 
        number of personnel to mobilize.<p>

        When the <i>mode</i> is <b>UPTO</b>, mobilizes troops up to the
        specified maximum number of <i>personnel</i>.<p>

        When the <i>mode</i> is <b>ENSURE</b>, ensures that at least
        <i>personnel</i> troops are available for deployment, mobilizing
        troops if necessary.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute percent "Percentage" {
        When the <i>mode</i> is <b>PERCENT</b>, increases the number
        of mobilized troops by the given percentage, <i>percent</i>, i.e.,
        a value of 3.5 will mobilize 3.5% more troops.<p>

        This parameter is ignored for other modes.
    } -tags {update}
}

page /object/tactic mobilize "MOBILIZE tactic" {
    <<sotitle>>

    <<tactic_mobilize overview>><p>

    Mobilize tactics have the following attributes:<p>

    <<tactic_mobilize parmlist>>
}

#-----------------------------------------------------------------------
# SIGEVENT Tactic

object tactic_sigevent {
    noun "SIGEVENT tactic"
    overview {
        This tactic logs a message to the significant events log.
        The message will have a log level of 1 (highest priority) and
        a component field of "tactic".<p>

        This tactic is never insane, and never fails to execute.<p>
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute msg "Message" {
        The message text to log when the tactic executes.
    } -tags {update}
}

page /object/tactic sigevent "SIGEVENT tactic" {
    <<sotitle>>

    <<tactic_sigevent overview>><p>

    SIGEVENT tactics have the following attributes:<p>

    <<tactic_sigevent parmlist>>
}

#-----------------------------------------------------------------------
# SPEND Tactic

object tactic_spend {
    noun "SPEND tactic"

    overview {
        This <<term tactic>> allows the <<term actor>> to spend
        a sum of money from his cash-on-hand to the various 
        sectors in the economy according to some amount of shares
        per sector.

        There are several ways to select how much money should be 
        spent from cash-on-hand; see the "Mode" parameter below.

        The tactic only fails when an exact amount of money is slated
        to be spent and it is greater than cash-on-hand.
        
        <b>Note:</b> This tactic will always execute on lock even if
        the amount to spend is greater than cash-on-hand.
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute mode "Mode" {
        The spend mode, which has one of the following values.<p>

        <b>ALL</b>: Spend all remaining cash-on-hand. The tactic will
        still execute if cash-on-hand is zero or negative, just no cash
        will be spent.<p>

        <b>EXACT</b>: Spend the exact amount of money from cash-on-hand. 
        The tactic will fail to execute if there is not at least this amount
        of money in cash-on-hand and the Athena scenario is not locking.<p>

        <b>UPTO</b>: Spend any amount of money up to the given amount from
        available cash-on-hand.  The tactic will still execute if there is
        not enough cash, just less cash will be spent.<p>

        <b>PERCENT</b>: Spend the specified percentage of 
        cash-on-hand.  The tactic will still execute if cash-on-hand is 
        zero or negative, just no cash will be spent.<p>

        <b>EXCESS</b>: Spend any cash-on-hand that is in
        excess of the specified amount.  The tactic will still execute
        if there is not enough cash, just no cash will be spent.<p> 
    } -tags {update}

    attribute amount "Amount" {
        When the <i>mode</i> is EXACT, the exact amount of money to
        be spent.<p>

        When the <i>mode</i> is UPTO, the maximum amount of money that 
        should be spent.<p>

        When the <i>mode</i> is EXCESS, the amount of money over which
        any excess should be spent.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute percent "Percent" {
        When the <i>mode</i> is PERCENT, the percentage of cash-on-hand
        that should be spent.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute goods "Goods Shares" {
        The number of shares of the money allocated to the
        <b>goods</b> sector.
    } -tags {create update}

    attribute black "Black Shares" {
        The number of shares of the money allocated to the
        <b>black</b> sector.
    } -tags {create update}
    
    attribute pop "Pop Shares" {
        The number of shares of the money allocated to the
        <b>pop</b> sector.
    } -tags {create update}
    
    attribute region "Region Shares" {
        The number of shares of the money allocated to the
        <b>region</b> sector.
    } -tags {create update}
    
    attribute world "World Shares" {
        The number of shares of the money allocated to the
        <b>world</b> sector.
    } -tags {create update}
}

page /object/tactic spend "SPEND tactic" {
    <<sotitle>>

    <<tactic_spend overview>><p>

    Spend tactics have the following attributes:<p>

    <<tactic_spend parmlist>>
}

#-----------------------------------------------------------------------
# WITHDRAW Tactic

object tactic_withdraw {
    noun "WITHDRAW tactic"

    overview {
        This <<term tactic>> allows the <<term actor>> to withdraw
        a sum of money from his cash reserve into his cash-on-hand
        so that it can be spent on other tactics.  Funds are deposited
        into the cash reserve using the <<cref /object/tactic/deposit>>.<p>
        
        Actors are frequently in the position of borrowing money.  Athena
        does not explicitly model any kind of banking system; as a work
        around, however, the cash reserve is allowed to be negative,
        reflecting debt rather than savings.  In short, the actor
        may withdraw as much money as he likes.  It is up to the
        analyst to ensure that this doesn't get out of hand.<p>

        There are several ways to select how much money should be 
        withdrawn from cash reserve; see the "Mode" parameter below.
    }

    include tactic_ -attrs id
    include tactic_ -attrs agent
    include tactic_ -attrs state

    attribute mode "Mode" {
        The withdrawal amount mode, which has one of the following values.<p>

        <b>ALL</b>: Withdraw all remaining cash reserve. The tactic will
        still execute if the cash reserve is zero or negative, just no cash
        will be withdrawn.<p>

        <b>EXACT</b>: Withdraw the exact amount of money from cash reserve. 
        The tactic will fail to execute if there is not at least this amount
        of money in cash reserve.<p>

        <b>UPTO</b>: Withdraw any amount of money up to the given amount from
        cash reserve.  The tactic will still execute if there is
        not enough cash, just less cash will be withdrawn.<p>

        <b>PERCENT</b>: Withdraw the specified percent of the
        cash reserve.  The tactic will still execute if the reserve is 
        zero or negative, just no cash will be withdrawn.<p>

        <b>BORROW</b>: Withdraw any amount from cash reserve, allowing
        the balance to go negative if need be. This is a workaround for 
        borrowing money in the absence of a model of a banking system. 
        The tactic will always execute.<p> 
    } -tags {update}

    attribute amount "Amount" {
        When the <i>mode</i> is EXACT, the exact amount of money to
        be withdrawn.<p>

        When the <i>mode</i> is UPTO, the maximum amount of money that 
        should be withdrawn.<p>

        When the <i>mode</i> is BORROW, the amount of money to be 
        withdrawn, allowing the reserve to go negative, if necessary.<p>

        This parameter is ignored for other modes.
    } -tags {update}

    attribute percent "Percent" {
        When the <i>mode</i> is PERCENT, the percentage of cash-on-hand
        that should be deposited.<p>

        This parameter is ignored for other modes.
    } -tags {update}
}

page /object/tactic withdraw "WITHDRAW tactic" {
    <<sotitle>>

    <<tactic_withdraw overview>><p>

    Withdraw tactics have the following attributes:<p>

    <<tactic_withdraw parmlist>>
}

