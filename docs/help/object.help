# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    object.help
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    Athena Help Documentation: Simulation Objects
#
#    This file is included into athena.help.
#
#    Simulation Object types have help pages with names like
#
#        /object/?.../?<type>/
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------

page / object "Sim Objects" {
    <<title>>
    This section of the help documents the significant object types
    in the Athena simulation, e.g., 
    <<term actor actors>>, <<term group groups>>, 
    <<term nbhood neighborhoods>>, and so forth.  The full set of 
    object types is as follows:<p>

    <<childlinks>>
}

macro sotitle {} {
    |<--
    [mktitle normal [cref /object "Simulation Object"] [pageinfo title] ""]
}


#-----------------------------------------------------------------------
# Actors

object actor_ {
    noun actor

    overview {
        An <i>actor</i> is a significant decision-maker in the 
        region of interest.  An actor uses <<cref /object/tactic>>s to
        achieve <<cref /object/goal>>s subject to certain 
        <<cref /object/condition>>s.  Collectively, this is called the
        actor's <<term strategy>>; it is browsed and edited on 
        the <<tab Strategy>>.<p>

        Actors own <<term frcgroup>>s and <<term orggroup>>s,
        and also have cash resources.<p>

    }

    attribute a "Actor ID" {
        The actor ID.  It may contain letters and digits, and
        must begin with a letter.  It should usually be short,
        between 2 and 8 characters in length, e.g., <b>USA</b>.<p>
        
        An actor ID cannot be the same as the ID of any group, 
        neighborhood, etc.
    } -tags {create}

    attribute longname "Long Name" {
        The actor's long name, a human-readable equivalent to the
        actor's ID, e.g., "United States".
    } -tags {create update browser}

    attribute cash_reserve "Cash Reserve, $" {
        Every actor has some amount of cash in reserve for future needs
        that can be released for use via the 
        <<cref /object/tactic/spend>>.  The actor is given an initial 
        reserve as part of the scenario; once
        the simulation begins, the level of the reserve can fluctuate.
    } -tags {create update browser}

    attribute income "Income, $/week" {
        Every actor has a regular weekly income, in dollars/week.  The
        actor's income flows into his cash-on-hand, where it may be
        used to fund tactics.
    } -tags {create update browser}

    attribute cash_on_hand "Cash-On-Hand, $" {
        An actor's cash-on-hand is the amount of the money the actor
        has available to fund tactics.  The actor receives income
        into his cash-on-hand every week, and may also move money
        between his cash-on-hand and cash reserve using the
        <<cref /object/tactic/save>> and 
        <<cref /object/tactic/spend>>.  Cash-on-hand that is unspent
        during a given week automatically carries over to the next week.
    } -tags {browser}
}

page /object actor "Actor" {
    <<sotitle>>

    <<actor_ overview>><p>

    Actors have the following attributes:<p>

    <<actor_ parmlist>>
}

#-----------------------------------------------------------------------
# Groups

object group_ {
    noun group

    overview {
        A <i>group</i> is a collection of people with some shared
        mission, origin, organization, goals, or beliefs.
    }

    attribute g "Group ID" {
        The group ID.  It may contain letters and digits, and
        must begin with a letter.  It should usually be short,
        between 2 and 8 characters in length, e.g., <b>PASH</b>.<p>
        
        A group ID cannot be the same as the ID of any other group, actor, 
        neighborhood, etc.
    } -tags {create}

    attribute longname "Long Name" {
        The group's long name, a human-readable equivalent to the
        group's ID, e.g., "Urban Pashtuns".
    } -tags {create update}

    attribute color "Color" {
        The group's color, used when displaying the group's units
        on the map viewer.  In general, group colors will be selected
        using the color selection dialog; if a color is entered as a
        string, it must be specified as a hex color string, of
        one of the following forms<p>

        #<i>rrggbb</i><br>
        #<i>rrrgggbbb</i><br>
        #<i>rrrrggggbbbb</i><p>

        where <i>r</i>, <i>g</i> and <i>b</i> are hexadecimal digits 
        expressing a shade of red, green, or blue.  Thus, "#000000" is
        black, and "#FFFFFF" is white.<p>
    } -tags {create update}

    attribute shape "Unit Shape" {
        According to MIL-STD-2525a, friendly, neutral, and enemy units
        are drawn differently by the map viewer.  This parameter
        determines whether the group's units are drawn as friendly,
        neutral, or enemy.  The possible values are as follows:<p>
        
        <<enumdoc ::projectlib::eunitshape>>
    } -tags {create update}

    attribute demeanor "Demeanor" {
        The demeanor of the group, i.e., its propensity for
        violence. The possible values are as follows:<p>

        <<enumdoc ::projectlib::edemeanor>>
    } -tags {create update}
}

page /object group "Group" {
    <<sotitle>>

    <<group_ overview>><p>

    There are three kinds of group in Athena:<p>

    <<childlinks>>
}

#-----------------------------------------------------------------------
# Civilian Groups

object group_civ {
    noun "civilian group"

    overview {
        A <i>civilian group</i> is an identifiable collection of
        civilians who live in the playbox and share similar beliefs.
        Each civilian group resides in a single
        <<cref /object/nbhood>>.
    }

    include group_ -attrs g        -tags create
    include group_ -attrs longname -tags {create update}

    attribute n "Neighborhood" {
        The ID of an existing <<cref /object/nbhood>>, the group's
        neighborhood of residence.
    } -tags {create update multi}

    include group_ -attrs {color shape demeanor} -tags {create update multi}

    attribute basepop "Base Population" {
        The initial population of the group.  This population
        can be reduced by displacement to other neighborhoods, and by
        attrition.  An integer number no less than 1.
    } -tags {create update multi}

    attribute sap "Subsistence Agriculture Percentage" {
        The percentage of the group's population that supports itself by 
        subsistence agriculture, and hence does not participate in the
        regional economy.  An integer number from 0 to 100.
    } -tags {create update multi postprep}
}

page /object/group civ "Civilian Group" {
    <<sotitle>>

    <<group_civ overview>><p>

    Civilian groups have the following attributes:<p>

    <<group_civ parmlist>>
}





#-----------------------------------------------------------------------
# Tactic Objects

object tactic_ {
    noun "tactic"
    overview {
        Tactics are the <<cref /object>> by which an
        <<cref /object/actor>> implements his <<term strategy>>.  For
        example, an actor may use the <<cref /object/tactic/deploy>>
        to position troops in a neighborhood, and then use the
        <<cref /object/tactic/attroe>> to call for attacks on another
        group.  Tactics may have <<cref /object/condition>>s attached
        to them.<p>
    }

    attribute tactic_id "Tactic ID" {
        Every tactic has a tactic ID, an integer number that uniquely
        identifies the tactic.
    } 

    attribute owner "Owner" {
        The ID of the <<cref /object/actor>> to whose strategy this
        tactic belongs.
    }
}

page /object tactic "Tactic" {
    <<sotitle>>

    <<tactic_ overview>><p>

    There are many different kinds of tactic, as listed below.<p>

    <<childlinks>>
}

object tactic_attroe {
    noun "ATTROE tactic"
    overview {
        This tactic sets the attacking <<term roe>> for force groups
        belonging to an <<cref /object/actor>>.<p>

        Attacking ROEs determine whether a
        <<cref /object/group/force>> will seek out and
        attack other force groups.  In Athena, force groups are either
        uniformed or non-uniformed.  (Non-uniformed forces are those that
        hide among the local population and use terrorist and other
        unconventional tactics.)<p>

        Athena's attrition model currently
        only supports attacks by uniformed force groups on non-uniformed
        force groups, and <i>vice versa</i>.  ROEs are set 
        <<cref /object/nbhood>> by neighborhood; thus, group A can be 
        directed to attack group B in neighborhood N1 but not in 
        neighborhood N2.<p>

        No force group will attack any other force group unless it is
        explicitly given an ROE to do so.<p>
    }

    include tactic_

    attribute f "Attacking Group" {
        The attacking <<cref /object/group/force>>.  This group must
        belong to the <i>owner</i>, and may be uniformed or non-uniformed.
    } -tags {create update}

    attribute g "Defending Group" {
        The defending <<cref /object/group/force>>.  If the attacker
        is uniformed, this group must be non-uniformed, and 
        <i>vice versa</i>.
    } -tags {create update}

    attribute n "In Neighborhood" {
        The <<cref /object/nbhood>> in which the attack(s) may take
        place.  Note that
        both groups must have personnel present in this neighborhood, 
        or the ROE will have no effect.
    } -tags {create update}

    attribute text1 "ROE" {
        The ROE proper.  The set of valid ROEs depends on whether
        attacking group <i>f</i> is uniformed or non-uniformed.<p>

        <b>Uniformed:</b>  The ROE must be one of the following values:<p>

        <<enumdoc ::projectlib::eattroeuf>>

        If the ROE is <b>ATTACK</b>, then group <i>f</i> will attempt to
        hunt down and destroy units of group <i>g</i> in neighborhood
        <i>n</i>; and if not, not.  Note that there is no difference
        between having an ROE of <b>DO_NOT_ATTACK</b> and not
        having an ROE at all.<p>

        <b>Non-Uniformed:</b>  The ROE must be one of the following
        values:<p>

        <<enumdoc ::projectlib::eattroenf>>

        If the ROE is <b>HIT_AND_RUN</b>, then group <i>f</i> will use
        hit-and-run tactics against group <i>g</i>, trying on each attack
        to nibble away at the uniformed force while taking minimal
        losses.<p>

        If the ROE is <b>STAND_AND_FIGHT</b>, then group <i>f</i> will
        expend a pre-determined number of troops in order to kill as many
        personnel of group <i>g</i> as possible.<p>

        Otherwise, group <i>f</i> will not attempt to attack.  Again, 
        there is no difference between having an ROE of
        <b>DO_NOT_ATTACK</b> and not having an ROE at all.
    } -tags {create update}

    attribute int1 "Max Attacks" {
        The maximum number of attacks the attacker will conduct
        against the defender over the
        following week.  Note that the actual number of attacks is
        constrained by the presence of both attacker and defender, by the
        cooperation of the neighborhood with both groups, and by other
        factors.<p>

        During strategy execution, this tactic will consume the
        <i>owner</i>'s cash-on-hand
        according to the maximum number of attacks provided for; if fewer
        attacks are actually conducted (which is extremely likely), the
        unused cash will be returned to the <i>owner</i> at the
        beginning of the next strategy tock.<p>
    } -tags {create update}
}

page /object/tactic attroe "ATTROE tactic" {
    <<sotitle>>

    <<tactic_attroe overview>><p>

    Attacking ROE tactics have the following attributes:<p>

    <<tactic_attroe parmlist>>
}


object tactic_demob {
    noun "DEMOB tactic"
    overview {
        This tactic demobilizes 
        <<cref /object/group/force>> or 
        <<cref /object/group/org>> personnel,
        i.e., it removes them from the playbox.  Only personnel available
        for deployment can be demobilized.<p>

        There are two demobilization modes, "SOME" and "ALL".  The first
        demobilizes a specific number of troops; the second demobilizes
        all available troops.<p>

        Multiple DEMOB tactics executed during a single
        strategy tock are cumulative.<p>
    }

    include tactic_

    attribute g "Group" {
        The ID of a <<cref /object/group/force>> or 
        <<cref /object/group/org>> belonging to the 
        <i>owner</i>.
    } -tags {create update}

    attribute text1 "Mode" {
        The demobilization mode, as indicated by the following
        enumeration:<p>

        <<enumdoc ::projectlib::edemobmode>>

        If "SOME", the tactic demobilizes a specific number of personnel, as
        given by the <i>int1</i> parameter.  If there are insufficient
        personnel, all available personnel will be demobilized.<p>

        If "ALL", the tactic demobilizes all available personnel belonging to
        group <i>g</i>.<p>
    } -tags {create update}

    attribute int1 "Personnel" {
        The maximum number of personnel to be demobilized when the mode
        (<i>text1</i>) is "SOME".  If there are insufficient personnel 
        available, all available personnel will be demobilized.<p>

        If the mode is "ALL", this parameter is ignored.
    } -tags {create update}

    attribute once "Once?" {
        A boolean value, "YES" or "NO".  If "YES", this tactic will be
        disabled automatically after it executes, and hence will execute
        only once.  If "NO", the tactic will remain enabled, and hence may
        execute multiple times.
    } -tags {create update}
}

page /object/tactic demob "DEMOB tactic" {
    <<sotitle>>

    <<tactic_demob overview>><p>

    Demobilization tactics have the following attributes:<p>

    <<tactic_demob parmlist>>
}



#-----------------------------------------------------------------------
# Condition Objects

page /object condition "Condition" {
    <<sotitle>>

    A <i>condition</i> a Boolean predicate that can be
    attached to a <<cref /object/tactic>> or <<cref /object/goal>>.
    Tactic conditions  determine whether the tactic should be used or
    not; goal conditions determine whether the goal is met or not.<p>

    There are many different types of condition, each with its own 
    specific inputs, as follows:<p>

    <<childlinks>>
}

object condition_nbcoop {
    noun "NBCOOP condition"
    overview {
        This condition compares a neighborhood's cooperation with a
        particular force group to a particular value.  The condition
        is met when the comparison is true, e.g., when neighborhood
        N1's cooperation with BLUE is greater than 55.0.<p>
    }

    attribute condition_id "Condition ID" {
        Every condition has a condition ID, an integer number that uniquely
        identifies the condition.
    } 

    attribute cc_id "Tactic/Goal ID" {
        Every condition has a collection ID, an integer number that uniquely
        identifies the <<cref /object/tactic>> or 
        <<cref /object/goal>> that owns the condition.
    }

    attribute owner "Owner" {
        The ID of the <<cref /object/actor>> to whose strategy this
        condition belongs.
    }

    attribute n "Neighborhood" {
        The ID of the <<cref /object/nbhood>> whose cooperation is
        being compared.
    } -tags {create update}

    attribute g "Group" {
        The ID of the <<cref /object/frcgroup>> whose cooperation
        is being compared.
    } -tags {create update}

    attribute text1 "Comparison" {
        The kind of comparison being done: a value from
        the following table:<p>

        <<enumdoc ::projectlib::ecomparator>>
    } -tags {create update}

    attribute x1 "Amount" {
        The number to which the neighborhood's cooperation with the
        group will be compared.
    } -tags {create update}
}

page /object/condition nbcoop "NBCOOP condition" {
    <<sotitle>>

    <<condition_nbcoop overview>><p>

    Neighborhood Cooperation conditions have the following attributes:<p>

    <<condition_nbcoop parmlist>>
}

