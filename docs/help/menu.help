# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    menus.help
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    Athena Help Documentation: Application Menus
#
#    This file is included into athena.help.
#
#    Individual menu and menu item pages have titles like
#    
#       File/Save Scenario As...
#    
#    The page names are created automatically by prepending
#    "menu/" and converting blanks to underscores.
#    
#    The menuref macro creates a link to a menu/menu item page
#    given its label.
#
#-----------------------------------------------------------------------

page menu "Application Menus" {} {
    <<title>>
    The Athena main menu bar provides access to most of Athena's
    functionality.  The full set of menus is as follows:<p>

    <<childlinks>>
}

# menuref args
#
# args    The name of a menu or menu item
#
# Returns a cref-link to the help page.

macro menuref {args} {
    set replist [list " " "_"]
    
    set tag "menu/[string map $replist $args]"
} {[cref $tag $args]}

# menu name
#
# name     The name of the menu
#
# Defines a menu page, defining the parent/child links properly.

proc menu {name text} {
    set replist [list " " "_"]
    
    set tag "menu/[string map $replist $name]"

    set tokens [split $tag /]

    set parent [lrange $tokens 0 end-1]

    set ptag [join $parent /]

    set title "$name Menu"

    page $tag $title $ptag "<<menu.header [list $name]>>\n\n$text"
}

macro menu.header {name} {
    set nTokens [lrange [split [pageinfo name] /] 1 end]
    set tTokens [split $name /]

    set taglist "menu"
    set nameWithLinks ""
    foreach ntok [lrange $nTokens 0 end-1] ttok [lrange $tTokens 0 end-1] {
        lappend taglist "$ntok"

        append nameWithLinks "[cref [join $taglist /] $ttok]/"
    }

    append nameWithLinks [lindex $tTokens end]
} {
    |<--
    <h3>$nameWithLinks Menu</h3>
}

proc menuitem {name text} {
    set replist [list " " "_"]
    
    set tag "menu/[string map $replist $name]"

    set tokens [split $tag /]

    set parent [lrange $tokens 0 end-1]

    set ptag [join $parent /]

    page $tag $name $ptag "<<menuitem.header [list $name]>>\n\n$text"
}

macro menuitem.header {name} {
    set nTokens [lrange [split [pageinfo name] /] 1 end]
    set tTokens [split $name /]

    set taglist "menu"
    set nameWithLinks ""
    foreach ntok [lrange $nTokens 0 end-1] ttok [lrange $tTokens 0 end-1] {
        lappend taglist "$ntok"

        append nameWithLinks "[cref [join $taglist /] $ttok]/"
    }

    append nameWithLinks [lindex $tTokens end]
} {
    |<--
    <h3>$nameWithLinks</h3>
}

#=======================================================================
# File Menu

menu "File" {
    Athena's File menu contains the usual kinds of things, as listed
    below:<p>

    <<childlinks>>
}

menuitem "File/New Browser" {
    Pops up a new browser window on the same scenario, allowing the
    user to watch multiple browser tabs at the same time.  Each
    browser window is identical to the main window except that it
    lacks the Athena command line interface (CLI) at the bottom.<p>

    Note that all windows will show the same scenario; to view
    multiple scenarios at the same, it is necessary to invoke multiple
    instances of Athena.<p>
}

menuitem "File/New Scenario..." {
    Closes the current scenario and creates a new, blank scenario,
    loading the user's default <<cref parmdb "model parameter">>
    settings.
}

menuitem "File/Open Scenario..." {
    Closes the current scenario, and loads an existing scenario from 
    disk.<p>

    By default, the Open Scenario dialog shows only Athena scenario
    (".adb") files; use the file type pulldown at the bottom of the
    dialog to show Athena Scenario XML files as well.
}

menuitem "File/Save Scenario" {
    Saves the current scenario to disk, prompting for a file name if
    necessary.  Athena scenario files should have a ".adb" extension.
}

menuitem "File/Save Scenario As..." {
    Saves the current scenario to disk,
    prompting for a new file name.
}

menuitem "File/Export as XML..." {
    Saves the current scenario to disk in XML format.  Note that this
    can only be done while the simulation is in 
    <<cref "Scenario Preparation">> state.
}

menuitem "File/Import Map..." {
    Imports an image file in JPEG, GIF, or PNG format to be used as
    a map background for the scenario.  Any image file can be used.
    See <<cref "Map Info">> for more information.
}

menu "File/Parameters" {
    The items on this menu relate to the Athena 
    <<cref parmdb>>.<p>

    <<childlinks>>
}

menuitem "File/Parameters/Import..." {
    Imports <<cref parmdb "model parameter">> settings into the 
    scenario from a ".parmdb" file on the disk.<p>
    
    This menu item is equivalent to the <<cmdref parm import>> command.
}

menuitem "File/Parameters/Export..." {
    Exports the scenario's current <<cref parmdb "model parameter">>
    settings to 
    a ".parmdb" file.  Note that only parameters whose values differ
    from the installation defaults are included.<p>

    This menu item is equivalent to the <<cmdref parm export>> command.
}

menuitem "File/Parameters/Save as Default..." {
    Saves the scenario's current <<cref parmdb "model parameter">>
    settings as the user's default settings for new scenarios.<p>

    This menu item is equivalent to the <<cmdref parm defaults save>>
    command.
}

menuitem "File/Parameters/Clear Defaults..." {
    Clears the user's default <<cref parmdb "model parameter">>
    settings; new scenarios will be created using the installation
    defaults instead.  <b>Note:</b> Using this menu item will no
    effect on the current scenario.<p>

    This menu item is equivalent to the <<cmdref parm defaults clear>>
    command.
}

menuitem "File/Exit" {
    Exits the application, first prompting the user to save any
    unsaved changes.<p>

    This menu item appears only in the main application window.
}

menuitem "File/Close" {
    Closes the current browser window.<p>

    This menu item appears only in browser windows created using the
    <<menuref File/New Browser>> menu item.
}

#=======================================================================
# Edit Menu

menu "Edit" {
    This is a typical application "Edit" menu.  The menu items are as
    follows:<p>

    <<childlinks>>
}

menuitem "Edit/Undo" {
    Undoes the most recent order, if possible.  The 
    <<cref "Orders/History">> tab shows the orders that can be
    undone (among other things).<p>

    The undo stack is cleared when the scenario is saved, and when 
    time advances.
}

menuitem "Edit/Redo" {
    Re-sends the most recently undone order, as though it had never
    been undone.  <b>Note:</b> The redo stack is cleared 
    as soon as an order is sent by any other mechanism.
}

menuitem "Edit/Cut" {
    Cuts the selected text to the clipboard.
}

menuitem "Edit/Copy" {
    Copies the selected text to the clipboard.
}

menuitem "Edit/Paste" {
    Pastes text from the clipboard into the current text box.
}

menuitem "Edit/Select All" {
    Selects all text in the current text box, so that it can be cut or
    copied.
}

#=======================================================================
# View Menu

menu "View" {
    There is a menu item on this menu and its sub-menus for each of
    Athena's browser <<cref tabs tabs>>.  Selecting a menu item makes
    the associated tab visible.
}

#=======================================================================
# Orders Menu

menu "Orders" {
    This menu provides one means of access to Athena's simulation
    orders, which are used to build the scenario and control its
    execution.  See the <<cref orders>> documentation for complete
    information on Athena's orders.<p>
}


#=======================================================================
# Reports Menu

menu "Reports" {
    This menu provides access to Athena's user-requested reports, as
    well as other report-oriented operations.  See the 
    <<cref reports>> documentation for a full list of Athena's reports.

    The remaining menu items are as follows:<p>

    <<childlinks>>
}

macro reports.hotlist {} {
    |<--
    The user can mark particular reports as being of interest by checking
    the Hot List box when the report is displayed in the
    Report Browser.  These reports can be viewed as a group in the
    Report Browser's Hot List bin, and can be saved to disk as a text
    file.
}

#-----------------------------------------------------------------------

menuitem "Reports/Save Hot List to Disk..." {
    <<reports.hotlist>><p>

    This item saves the reports on the Hot List as a single text file;
    if there are multiple reports they are separated by form feeds,
    so that the individual reports will print on separate pages.
}

#-----------------------------------------------------------------------

menuitem "Reports/Clear Hot List..." {
    <<reports.hotlist>><p>

    This menu item removes all reports from the Hot List.<p>
}

#=======================================================================
# Help Menu

menu "Help" {
    This menu provides access to Athena's on-line help, as you have
    evidently discovered.  The specific items are as follows:<p>

    <<childlinks>>
}

menuitem "Help/Help Contents" {
    This menu item pops up the on-line help's 
    <<cref home "table of contents">>.
}

menuitem "Help/Order Reference" {
    This menu item pops up the reference material for each of
    Athena's simulation <<cref orders>>.
}

menuitem "Help/Report Reference" {
    This menu item pops up the reference material for each of
    Athena's <<cref reports>>.
}

menuitem "Help/Command Reference" {
    This menu item pops up the reference material for each of 
    Athena's <<cref cmd>>.
}

menuitem "Help/Release Notes" {
    This menu item displays the <<cref release>> for this release
    of Athena.
}

menuitem "Help/About Athena" {
    This menu item displays basic information <<cref about>>,
    including the copyright.
}
